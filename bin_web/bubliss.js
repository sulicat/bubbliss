// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != "undefined" ? Module : {};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).
// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == "object";

var ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope != "undefined";

// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string" && process.type != "renderer";

var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -sPROXY_TO_WORKER) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
// The way we signal to a worker that it is hosting a pthread is to construct
// it with a specific name.
var ENVIRONMENT_IS_PTHREAD = ENVIRONMENT_IS_WORKER && self.name?.startsWith("em-pthread");

if (ENVIRONMENT_IS_NODE) {
  var worker_threads = require("worker_threads");
  global.Worker = worker_threads.Worker;
  ENVIRONMENT_IS_WORKER = !worker_threads.isMainThread;
  // Under node we set `workerData` to `em-pthread` to signal that the worker
  // is hosting a pthread.
  ENVIRONMENT_IS_PTHREAD = ENVIRONMENT_IS_WORKER && worker_threads["workerData"] == "em-pthread";
}

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = (status, toThrow) => {
  throw toThrow;
};

// In MODULARIZE mode _scriptName needs to be captured already at the very top of the page immediately when the page is parsed, so it is generated there
// before the page load. In non-MODULARIZE modes generate it here.
var _scriptName = (typeof document != "undefined") ? document.currentScript?.src : undefined;

if (ENVIRONMENT_IS_NODE) {
  _scriptName = __filename;
} else if (ENVIRONMENT_IS_WORKER) {
  _scriptName = self.location.href;
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = "";

function locateFile(path) {
  if (Module["locateFile"]) {
    return Module["locateFile"](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == "undefined" || !process.release || process.release.name !== "node") throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
  var nodeVersion = process.versions.node;
  var numericVersion = nodeVersion.split(".").slice(0, 3);
  numericVersion = (numericVersion[0] * 1e4) + (numericVersion[1] * 100) + (numericVersion[2].split("-")[0] * 1);
  if (numericVersion < 160400) {
    throw new Error("This emscripten-generated code requires node v16.04.4.0 (detected v" + nodeVersion + ")");
  }
  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require("fs");
  var nodePath = require("path");
  scriptDirectory = __dirname + "/";
  // include: node_shell_read.js
  readBinary = filename => {
    // We need to re-wrap `file://` strings to URLs.
    filename = isFileURI(filename) ? new URL(filename) : filename;
    var ret = fs.readFileSync(filename);
    assert(Buffer.isBuffer(ret));
    return ret;
  };
  readAsync = async (filename, binary = true) => {
    // See the comment in the `readBinary` function.
    filename = isFileURI(filename) ? new URL(filename) : filename;
    var ret = fs.readFileSync(filename, binary ? undefined : "utf8");
    assert(binary ? Buffer.isBuffer(ret) : typeof ret == "string");
    return ret;
  };
  // end include: node_shell_read.js
  if (!Module["thisProgram"] && process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, "/");
  }
  arguments_ = process.argv.slice(2);
  if (typeof module != "undefined") {
    module["exports"] = Module;
  }
  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };
} else if (ENVIRONMENT_IS_SHELL) {
  if ((typeof process == "object" && typeof require === "function") || typeof window == "object" || typeof WorkerGlobalScope != "undefined") throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
} else // Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) {
    // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != "undefined" && document.currentScript) {
    // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.startsWith("blob:")) {
    scriptDirectory = "";
  } else {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
  }
  if (!(typeof window == "object" || typeof WorkerGlobalScope != "undefined")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  if (!ENVIRONMENT_IS_NODE) {
    // include: web_or_worker_shell_read.js
    if (ENVIRONMENT_IS_WORKER) {
      readBinary = url => {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", url, false);
        xhr.responseType = "arraybuffer";
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */ (xhr.response));
      };
    }
    readAsync = async url => {
      // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
      // See https://github.com/github/fetch/pull/92#issuecomment-140665932
      // Cordova or Electron apps are typically loaded from a file:// url.
      // So use XHR on webview if URL is a file URL.
      if (isFileURI(url)) {
        return new Promise((resolve, reject) => {
          var xhr = new XMLHttpRequest;
          xhr.open("GET", url, true);
          xhr.responseType = "arraybuffer";
          xhr.onload = () => {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
              // file URLs can return 0
              resolve(xhr.response);
              return;
            }
            reject(xhr.status);
          };
          xhr.onerror = reject;
          xhr.send(null);
        });
      }
      var response = await fetch(url, {
        credentials: "same-origin"
      });
      if (response.ok) {
        return response.arrayBuffer();
      }
      throw new Error(response.status + " : " + response.url);
    };
  }
} else {
  throw new Error("environment detection error");
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// Normally just binding console.log/console.error here works fine, but
// under node (with workers) we see missing/out-of-order messages so route
// directly to stdout and stderr.
// See https://github.com/emscripten-core/emscripten/issues/14804
var defaultPrint = console.log.bind(console);

var defaultPrintErr = console.error.bind(console);

if (ENVIRONMENT_IS_NODE) {
  defaultPrint = (...args) => fs.writeSync(1, args.join(" ") + "\n");
  defaultPrintErr = (...args) => fs.writeSync(2, args.join(" ") + "\n");
}

var out = Module["print"] || defaultPrint;

var err = Module["printErr"] || defaultPrintErr;

// Merge back in the overrides
Object.assign(Module, moduleOverrides);

// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used.
moduleOverrides = null;

checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module["arguments"]) arguments_ = Module["arguments"];

legacyModuleProp("arguments", "arguments_");

if (Module["thisProgram"]) thisProgram = Module["thisProgram"];

legacyModuleProp("thisProgram", "thisProgram");

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module["memoryInitializerPrefixURL"] == "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["pthreadMainPrefixURL"] == "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["cdInitializerPrefixURL"] == "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["filePackagePrefixURL"] == "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["read"] == "undefined", "Module.read option was removed");

assert(typeof Module["readAsync"] == "undefined", "Module.readAsync option was removed (modify readAsync in JS)");

assert(typeof Module["readBinary"] == "undefined", "Module.readBinary option was removed (modify readBinary in JS)");

assert(typeof Module["setWindowTitle"] == "undefined", "Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)");

assert(typeof Module["TOTAL_MEMORY"] == "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");

legacyModuleProp("asm", "wasmExports");

legacyModuleProp("readAsync", "readAsync");

legacyModuleProp("readBinary", "readBinary");

legacyModuleProp("setWindowTitle", "setWindowTitle");

assert(ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER || ENVIRONMENT_IS_NODE, "Pthreads do not work in this environment yet (need Web Workers, or an alternative to them)");

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.");

// end include: shell.js
// include: preamble.js
// === Preamble library stuff ===
// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
var wasmBinary = Module["wasmBinary"];

legacyModuleProp("wasmBinary", "wasmBinary");

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.
// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */ var WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */ Memory: function(opts) {
    this.buffer = new SharedArrayBuffer(opts["initial"] * 65536);
  },
  Module: function(binary) {},
  /** @constructor */ Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var memorySegments = {};
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
    return uint8Array;
  }
memorySegments[0] = base64DecodeToExistingUint8Array(new Uint8Array(13293), 0, "");
memorySegments[1] = base64DecodeToExistingUint8Array(new Uint8Array(137), 0, "AQAAAAEAAAABAAAAAgAAAAIAAAACAAAAAwAAAAMAAAADAAAABAAAAAQAAAAEAAAABQAAAAUAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAIAAAACAAAAAgAAAAMAAAADAAAAAwAAAAQAAAAEAAAABAAAAAUAAAAFAAAABQAAAAY=");
memorySegments[2] = base64DecodeToExistingUint8Array(new Uint8Array(2355), 0, "AQAAAAEAAAABAAAAAgAAAAIAAAACAAAAAwAAAAMAAAADAAAABAAAAAQAAAAEAAAABQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAgAAAAoAAAAMAAAABAAAAA4AAAAGAAAAAwAAAAsAAAABAAAACQAAAA8AAAAHAAAADQAAAAUAAAIfkEBQAAAAAsAAAAAAAAAACAAAAAAAAAAAAAAAAA8D8AAAAAAAAAQAAAAAAAAABAAAAAAAAACEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAEEAAAAAAAAAQQAAAAAAAAChAAAAAAAAAMEAAAAAAAAAAQAAAAAAAABhAAAAAAAAAIEAAAAAAAADgPwAAAAAAAOA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAOA/AAAAAAAA4D8AAAAAAADwPwAAAAAAAOA/AAAAAAAA4D8AAAAAAADwPwAAAAAAANA/pioAAGQrAAAxLQAAuCwAABguAABeLQAA6ywAANwtAADgLQAA6i0AABYtAAAaLQAAJC0AAFIrAACzKwAAnysAAIcrAABbKwAASSsAAKkrAABAKwAAbysAAJErAAB5KwAABwAAAAYAAAAIAAAABQAAAAkAAAALAAAACgAAAAwAAAANAAAADwAAABAAAAARAAAAAQAAAAMAAAAEAAAAAgAAAAAAAAAAAAAAAwAEAAUABgAHAAgACQAKAAsADQAPABEAEwAXABsAHwAjACsAMwA7AEMAUwBjAHMAgwCjAMMA4wACAQMBAAAAAAAAAAAAAAAAAQEBAQICAgIDAwMDBAQEBAUFBQUAAAAAAQACAAMABAAFAAcACQANABEAGQAhADEAQQBhAIEAwQABAYEBAQIBAwEEAQYBCAEMARABGAEgATABQAFgAIAAAAAAAAABAQICAwMEBAUFBgYHBwgICQkKCgsLDAwNDQAA/////wAAAAAEAAAAAgAAAAYAAAD/AP8AAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAUAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAJYwB3csYQ7uulEJmRnEbQeP9GpwNaVj6aOVZJ4yiNsOpLjceR7p1eCI2dKXK0y2Cb18sX4HLbjnkR2/kGQQtx3yILBqSHG5895BvoR91Noa6+TdbVG11PTHhdODVphsE8Coa2R6+WL97Mllik9cARTZbAZjYz0P+vUNCI3IIG47XhBpTORBYNVycWei0eQDPEfUBEv9hQ3Sa7UKpfqotTVsmLJC1sm720D5vKzjbNgydVzfRc8N1txZPdGrrDDZJjoA3lGAUdfIFmHQv7X0tCEjxLNWmZW6zw+lvbieuAIoCIgFX7LZDMYk6Quxh3xvLxFMaFirHWHBPS1mtpBB3HYGcdsBvCDSmCoQ1e+JhbFxH7W2BqXkv58z1LjooskHeDT5AA+OqAmWGJgO4bsNan8tPW0Il2xkkQFcY+b0UWtrYmFsHNgwZYVOAGLy7ZUGbHulARvB9AiCV8QP9cbZsGVQ6bcS6ri+i3yIufzfHd1iSS3aFfN804xlTNT7WGGyTc5RtTp0ALyj4jC71EGl30rXldg9bcTRpPv01tNq6WlD/NluNEaIZ63QuGDacy0EROUdAzNfTAqqyXwN3TxxBVCqQQInEBALvoYgDMkltWhXs4VvIAnUZrmf5GHODvneXpjJ2SkimNCwtKjXxxc9s1mBDbQuO1y9t61susAgg7jttrO/mgzitgOa0rF0OUfV6q930p0VJtsEgxbccxILY+OEO2SUPmptDahaanoLzw7knf8JkyeuAAqxngd9RJMP8NKjCIdo8gEe/sIGaV1XYvfLZ2WAcTZsGecGa252G9T+4CvTiVp62hDMSt1nb9+5+fnvvo5DvrcX1Y6wYOij1tZ+k9GhxMLYOFLy30/xZ7vRZ1e8pt0GtT9LNrJI2isN2EwbCq/2SgM2YHoEQcPvYN9V32eo745uMXm+aUaMs2HLGoNmvKDSbyU24mhSlXcMzANHC7u5FgIiLyYFVb47usUoC72yklq0KwRqs1yn/9fCMc/QtYue2Swdrt5bsMJkmybyY+yco2p1CpNtAqkGCZw/Ng7rhWcHchNXAAWCSr+VFHq44q4rsXs4G7YMm47Skg2+1eW379x8Id/bC9TS04ZC4tTx+LPdaG6D2h/NFr6BWya59uF3sG93R7cY5loIiHBqD//KOwZmXAsBEf+eZY9prmL40/9rYUXPbBZ44gqg7tIN11SDBE7CswM5YSZnp/cWYNBNR2lJ23duPkpq0a7cWtbZZgvfQPA72DdTrrypxZ673n/Pskfp/7UwHPK9vYrCusowk7NTpqO0JAU20LqTBtfNKVfeVL9n2SMuemazuEphxAIbaF2UK28qN74LtKGODMMb3wVaje8CLQAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoLAAAAAAACAQMDAgQDBQUEBAAAAX0AAAAAAAAAAAAAAAAAAAABAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+foAAAAAAAAAAAAAAAAAAAAAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLAAAAAAACAQIEBAMEBwUEBAABAncAAAAAAAAAAAAAAAAAAAAAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+foAAAAAAAAAAAAAAAAAAAAAAgACAAMAAwADAAQAAwAFAAMABgADAA4ABAAeAAUAPgAGAH4ABwD+AAgA/gEJ");
memorySegments[3] = base64DecodeToExistingUint8Array(new Uint8Array(45), 0, "AgABAAIAAgACAAYAAwAOAAQAHgAFAD4ABgB+AAcA/gAIAP4BCQD+AwoA/gcL");
memorySegments[4] = base64DecodeToExistingUint8Array(new Uint8Array(43), 0, "CgAEAAAAAgABAAIABAADAAsABAAaAAUAeAAHAPgACAD2AwoAgv8QAIP/EA==");
memorySegments[5] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "DAAEABsABQB5AAcA9gEJAPYHCwCE/xAAhf8QAIb/EACH/xAAiP8Q");
memorySegments[6] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "HAAFAPkACAD3AwoA9A8MAIn/EACK/xAAi/8QAIz/EACN/xAAjv8Q");
memorySegments[7] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "OgAGAPcBCQD1DwwAj/8QAJD/EACR/xAAkv8QAJP/EACU/xAAlf8Q");
memorySegments[8] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "OwAGAPgDCgCW/xAAl/8QAJj/EACZ/xAAmv8QAJv/EACc/xAAnf8Q");
memorySegments[9] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "egAHAPcHCwCe/xAAn/8QAKD/EACh/xAAov8QAKP/EACk/xAApf8Q");
memorySegments[10] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "ewAHAPYPDACm/xAAp/8QAKj/EACp/xAAqv8QAKv/EACs/xAArf8Q");
memorySegments[11] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+gAIAPcPDACu/xAAr/8QALD/EACx/xAAsv8QALP/EAC0/xAAtf8Q");
memorySegments[12] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+AEJAMB/DwC2/xAAt/8QALj/EAC5/xAAuv8QALv/EAC8/xAAvf8Q");
memorySegments[13] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+QEJAL7/EAC//xAAwP8QAMH/EADC/xAAw/8QAMT/EADF/xAAxv8Q");
memorySegments[14] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+gEJAMf/EADI/xAAyf8QAMr/EADL/xAAzP8QAM3/EADO/xAAz/8Q");
memorySegments[15] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+QMKAND/EADR/xAA0v8QANP/EADU/xAA1f8QANb/EADX/xAA2P8Q");
memorySegments[16] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+gMKANn/EADa/xAA2/8QANz/EADd/xAA3v8QAN//EADg/xAA4f8Q");
memorySegments[17] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+AcLAOL/EADj/xAA5P8QAOX/EADm/xAA5/8QAOj/EADp/xAA6v8Q");
memorySegments[18] = base64DecodeToExistingUint8Array(new Uint8Array(167), 0, "6/8QAOz/EADt/xAA7v8QAO//EADw/xAA8f8QAPL/EADz/xAA9P8QAAAAAAAAAAAAAAAAAAAAAAAAAAAA+QcLAPX/EAD2/xAA9/8QAPj/EAD5/xAA+v8QAPv/EAD8/xAA/f8QAP7/EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgABAAIABAADAAoABAAYAAUAGQAFADgABgB4AAcA9AEJAPYDCgD0Dww=");
memorySegments[19] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "CwAEADkABgD2AAgA9QEJAPYHCwD1DwwAiP8QAIn/EACK/xAAi/8Q");
memorySegments[20] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "GgAFAPcACAD3AwoA9g8MAMJ/DwCM/xAAjf8QAI7/EACP/xAAkP8Q");
memorySegments[21] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "GwAFAPgACAD4AwoA9w8MAJH/EACS/xAAk/8QAJT/EACV/xAAlv8Q");
memorySegments[22] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "OgAGAPYBCQCX/xAAmP8QAJn/EACa/xAAm/8QAJz/EACd/xAAnv8Q");
memorySegments[23] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "OwAGAPkDCgCf/xAAoP8QAKH/EACi/xAAo/8QAKT/EACl/xAApv8Q");
memorySegments[24] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "eQAHAPcHCwCn/xAAqP8QAKn/EACq/xAAq/8QAKz/EACt/xAArv8Q");
memorySegments[25] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "egAHAPgHCwCv/xAAsP8QALH/EACy/xAAs/8QALT/EAC1/xAAtv8Q");
memorySegments[26] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+QAIALf/EAC4/xAAuf8QALr/EAC7/xAAvP8QAL3/EAC+/xAAv/8Q");
memorySegments[27] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "9wEJAMD/EADB/xAAwv8QAMP/EADE/xAAxf8QAMb/EADH/xAAyP8Q");
memorySegments[28] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+AEJAMn/EADK/xAAy/8QAMz/EADN/xAAzv8QAM//EADQ/xAA0f8Q");
memorySegments[29] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+QEJANL/EADT/xAA1P8QANX/EADW/xAA1/8QANj/EADZ/xAA2v8Q");
memorySegments[30] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+gEJANv/EADc/xAA3f8QAN7/EADf/xAA4P8QAOH/EADi/xAA4/8Q");
memorySegments[31] = base64DecodeToExistingUint8Array(new Uint8Array(39), 0, "+QcLAOT/EADl/xAA5v8QAOf/EADo/xAA6f8QAOr/EADr/xAA7P8Q");
memorySegments[32] = base64DecodeToExistingUint8Array(new Uint8Array(1124), 0, "4D8OAO3/EADu/xAA7/8QAPD/EADx/xAA8v8QAPP/EAD0/xAA9f8QAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gMKAMN/DwD2/xAA9/8QAPj/EAD5/xAA+v8QAPv/EAD8/xAA/f8QAP7/EAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAALAAAACgAAABAAAAAYAAAAKAAAADMAAAA9AAAADAAAAAwAAAAOAAAAEwAAABoAAAA6AAAAPAAAADcAAAAOAAAADQAAABAAAAAYAAAAKAAAADkAAABFAAAAOAAAAA4AAAARAAAAFgAAAB0AAAAzAAAAVwAAAFAAAAA+AAAAEgAAABYAAAAlAAAAOAAAAEQAAABtAAAAZwAAAE0AAAAYAAAAIwAAADcAAABAAAAAUQAAAGgAAABxAAAAXAAAADEAAABAAAAATgAAAFcAAABnAAAAeQAAAHgAAABlAAAASAAAAFwAAABfAAAAYgAAAHAAAABkAAAAZwAAAGMAAAARAAAAEgAAABgAAAAvAAAAYwAAAGMAAABjAAAAYwAAABIAAAAVAAAAGgAAAEIAAABjAAAAYwAAAGMAAABjAAAAGAAAABoAAAA4AAAAYwAAAGMAAABjAAAAYwAAAGMAAAAvAAAAQgAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAAYwAAAGMAAABjAAAA8wQ1QL8Ue0Bfg2xAMNtUQPMENUDaOQ5AFe/DP8LFRz8AAQUGDg8bHAIEBw0QGh0qAwgMERkeKSsJCxIYHygsNQoTFyAnLTQ2FBYhJi4zNzwVIiUvMjg7PSMkMDE5Oj4//9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAP/aAAwDAQACEQMRAD8AAH8ABwAAAAAAAAAAAAAA8D8AAAAAAAAAQAAAAAAAAABAAAAAAAAACEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAEEAAAAAAAAAQQAAAAAAAAChAAAAAAAAAMEAAAAAAAAAAQAAAAAAAABhAAAAAAAAAIEAAAAAAAADgPwAAAAAAAOA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAOA/AAAAAAAA4D8AAAAAAADwPwAAAAAAAOA/AAAAAAAA4D8AAAAAAADwPwAAAAAAANA/AAAAAAAAAAAAAAAAAAAAACAAIAAAsAEAAAAAAAAAAAAgJfmOAAoCAACAvn1f9H0foPIrSh4JUggAQCJBUBQEECAgKS4SCCIIACAiQVAUBBAgIPkQTAj6PjwQIn3e930QICCh6DIIIggACCIFEARFEADwo6QyCFIIAAQiBRAERRAgIPniXggCAIECPn0f9H0QAAAgAACwAYA=");
memorySegments[33] = base64DecodeToExistingUint8Array(new Uint8Array(118), 0, "vg8AwA/g9/t9fr9f6L5QAKIICEToLxQKhQKBUEigUACiKORJKCgUCoQCgUBIoEgAvg8CEK/r9wmEPp/YT6BHACKI5AmhKhQKhAKBUEigSAAiKAgEoC8UCoUCgVBIolAAvo8AACEg9Pt9foFf6JzQBwCAAADgDw==");
memorySegments[34] = base64DecodeToExistingUint8Array(new Uint8Array(131), 0, "gAEMAIJCv9/v9/sLBQWFQr8ESADGQqFQKBRACAUlhUKgCKgAqkahUCgUQAgFJYVCkBAIAJJKoV/o90MIBSV5foggCACCUqFAKAFCCIkkhUCEQAgAgmKhQCoCQghRJIVAgoAIAIJCv8Av9EP4IfyFfr8ACT4AAAAABAAAAAAAAACAAQw=");
memorySegments[35] = base64DecodeToExistingUint8Array(new Uint8Array(658), 0, "AgQABAAgSEEAAAAAAAgAAAQEAAQ8IABBAAAAAAAIAADwfd/3he9LUb7v+77vO1EEAEVBFIUoSkmqKIqiIAhRBPBFQfSdKEpHqiiKouALUQQQRUEUhChKSaooiqIACpEC8H3f94UvStGq6Pu+4HsfAQAAAAAECEAAAAAIIAAAAAAAAAAAhA9gAAAACCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKwBDwAAAAAAAAAAAAAAAAAkAQ8AAAAAAAAAAAAGAAAAJAEPAAAAAAAAAIAQCaIo+iQBDwAAAAAAAAAAPgEqJUIiUg8AAAAAAAAAgIoDKiIiJCkPAAAAAAAAAIAKASolEiQBDwAAAAAAAACACgG+6PskAQ8AAAAAAAAAgL4OAAACrAEPAAAAAAAAAIAEAADgAwAADwAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAAAOuEOEAzogAICgvgIgAADwiiBSxAIrIAQikQL4OwDwB444S+QCOiACHIoeCCrpEQTgC0L0AoIkARQEFOi6BNEFgLjD5wo6iQAcDjwoAglQBIAAQMQCgEQAIoQg6AIAUAQAAECAAgAgBQCOPggCABAE4ANAgEIAAAcAhAD4AwDwBwAAQIAiAAAEAAAAAAAAAAAAAECAAgAABAAAAAAAAAAAAAAAAAAAAAACB4AAwqBIGAAAAYQhCZICQiYEASFRAAB/PwJCAhApACIUwO/3+/1+CaHf7/e7uwMSD0QoFAqFQgmBQCAQEBEBCAREKBQKhUJ/gUAgEBARAQSCx+/3+/1+CYHP5/MREQEyqVAoFAqFQgmhQCAQEBEBQLhQKBQKhUJ5v9/v97u7AyCgHwAAAAAAABAAAAAAAABwIA==");
memorySegments[36] = base64DecodeToExistingUint8Array(new Uint8Array(140), 0, "KAIIgyIBAAIIQwIBAAEBfBQEhEQBACAEhASACD+CAIRCv9/v9wN+oVAoFAohAACERqFQKBSKUqFQKBR6oe8DnkqhUCgUUlKhUCgUSh8IAoRSoVAoFCJKoVAo9Euh7wOEYqFQKBRSSqFQKAR6oSgCfEK/3+/3i36/3+/3C73vAwAAAAAAAAAEAAAAAAg=");
memorySegments[37] = base64DecodeToExistingUint8Array(new Uint8Array(149), 0, "CAUgAAAEhAAigUUREEIBAJRCUQAACEJRlCqiIAilUAAAACAAAAAAAAAABQAAAAAIvu/7/vu+7/sUkev7vu/7ACAIgiAKoiiKFJEoiqIoij6+7/v+C77v+xSRKIqiKIoAoiiKIgiCIAgUkSiKoiiKCL7v+/77vu/7FJEv+r7v+wAAAAAAQAAAAAAAAAAAAAAAAAAAACA=");
memorySegments[38] = base64DecodeToExistingUint8Array(new Uint8Array(149), 0, "ASEABAAAAAAAAAAAAAAAAIJQFAIUAAAAAAAAAAAAABAAAAAgAAAAAAAAAAAAAAC+KIqiKCIAAAAAAAAAAAAAqiiKougiAAAAAAAAAAAAAKooiqKoIgAAAAAAAAAAAACqKIqi6CIAAAAAAAAAAAAAvu/7vi8+AAAAAAAAAAAAAAQAAAAoIAAAAAAAAAAAAAAAAACADz4=");
memorySegments[39] = base64DecodeToExistingUint8Array(new Uint8Array(3938), 0, "AwAAAAEAAAAEAAAABgAAAAUAAAAHAAAABgAAAAIAAAADAAAAAwAAAAUAAAAFAAAAAgAAAAQAAAABAAAABwAAAAUAAAACAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAABAAAAAQAAAAMAAAAEAAAAAwAAAAYAAAAHAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAADAAAABQAAAAYAAAAFAAAABwAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAcAAAAGAAAABwAAAAcAAAAGAAAABgAAAAYAAAACAAAABwAAAAIAAAADAAAABQAAAAIAAAAFAAAABQAAAAUAAAAFAAAABQAAAAQAAAAFAAAABQAAAAEAAAACAAAABQAAAAIAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABAAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAMAAAABAAAAAwAAAAQAAAAEAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAUAAAAFAAAABQAAAAcAAAABAAAABQAAAAMAAAAHAAAAAwAAAAUAAAAEAAAAAQAAAAcAAAAEAAAAAwAAAAUAAAADAAAAAwAAAAIAAAAFAAAABgAAAAEAAAACAAAAAgAAAAMAAAAFAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAcAAAAGAAAABgAAAAYAAAAGAAAABgAAAAMAAAADAAAAAwAAAAMAAAAHAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABQAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAQAAAAGAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAACQAAAAUAAAAFAAAABQAAAAUAAAAFAAAAAgAAAAIAAAADAAAAAwAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAAAwAAAAUAAADbD0k/2w9Jv+TLFkDkyxbAAAAAAAAAAIDbD0lA2w9JwDhj7T7aD0k/Xph7P9oPyT9pN6wxaCEiM7QPFDNoIaIzAwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGAAAAAAAAAAAAAAAAAQPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQAAAAD6////t////9jKAAAZAAsAGRkZAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABkACgoZGRkDCgcAAQAJCxgAAAkGCwAACwAGGQAAABkZGQAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAAZAAsNGRkZAA0AAAIACQ4AAAAJAA4AAA4=");
memorySegments[40] = base64DecodeToExistingUint8Array(new Uint8Array(33), 0, "DAAAAAAAAAAAAAAAEwAAAAATAAAAAAkMAAAAAAAMAAAM");
memorySegments[41] = base64DecodeToExistingUint8Array(new Uint8Array(33), 0, "EAAAAAAAAAAAAAAADwAAAAQPAAAAAAkQAAAAAAAQAAAQ");
memorySegments[42] = base64DecodeToExistingUint8Array(new Uint8Array(42), 0, "EgAAAAAAAAAAAAAAEQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");
memorySegments[43] = base64DecodeToExistingUint8Array(new Uint8Array(14), 0, "GgAAABoaGgAAAAAAAAk=");
memorySegments[44] = base64DecodeToExistingUint8Array(new Uint8Array(33), 0, "FAAAAAAAAAAAAAAAFwAAAAAXAAAAAAkUAAAAAAAUAAAU");
memorySegments[45] = base64DecodeToExistingUint8Array(new Uint8Array(1574), 0, "FgAAAAAAAAAAAAAAFQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAD/////////////////////////////////////////////////////////////////AAECAwQFBgcICf////////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wABAgQHAwYFAAAAAAAAAAIAAMADAADABAAAwAUAAMAGAADABwAAwAgAAMAJAADACgAAwAsAAMAMAADADQAAwA4AAMAPAADAEAAAwBEAAMASAADAEwAAwBQAAMAVAADAFgAAwBcAAMAYAADAGQAAwBoAAMAbAADAHAAAwB0AAMAeAADAHwAAwAAAALMBAADDAgAAwwMAAMMEAADDBQAAwwYAAMMHAADDCAAAwwkAAMMKAADDCwAAwwwAAMMNAADTDgAAww8AAMMAAAy7AQAMwwIADMMDAAzDBAAM23DLAAAAAAAAmHEAANMAAADUAAAA1QAAANYAAADXAAAA2AAAANkAAADaAAAA2wAAANwAAADdAAAA3gAAAN8AAADgAAAACAAAAAAAAADUcQAA4QAAAOIAAAD4////+P///9RxAADjAAAA5AAAAFxwAABwcAAABAAAAAAAAAAccgAA5QAAAOYAAAD8/////P///xxyAADnAAAA6AAAAIxwAACgcAAAAAAAAKxyAADpAAAA6gAAAOsAAADsAAAA7QAAAO4AAADvAAAA8AAAAPEAAADyAAAA8wAAAPQAAAD1AAAA9gAAAAgAAAAAAAAA6HIAAPcAAAD4AAAA+P////j////ocgAA+QAAAPoAAAD8cAAAEHEAAAQAAAAAAAAAMHMAAPsAAAD8AAAA/P////z///8wcwAA/QAAAP4AAAAscQAAQHEAAAAAAABgcQAA/wAAAAABAAA0qAAAbHEAAIhzAABOU3QzX18yOWJhc2ljX2lvc0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAAAyoAACgcQAATlN0M19fMjE1YmFzaWNfc3RyZWFtYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAAAAAJCoAADscQAAAAAAAAEAAABgcQAAA/T//05TdDNfXzIxM2Jhc2ljX2lzdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAJCoAAA0cgAAAAAAAAEAAABgcQAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAAAAAAB0cgAAAQEAAAIBAAA0qAAAgHIAAIhzAABOU3QzX18yOWJhc2ljX2lvc0l3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAAAyoAAC0cgAATlN0M19fMjE1YmFzaWNfc3RyZWFtYnVmSXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFAAAAAJCoAAAAcwAAAAAAAAEAAAB0cgAAA/T//05TdDNfXzIxM2Jhc2ljX2lzdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAJCoAABIcwAAAAAAAAEAAAB0cgAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAAAAAACIcwAAAwEAAAQBAAAMqAAAkHMAAE5TdDNfXzI4aW9zX2Jhc2VFAAAACMwAAAAAAAAAAAAA3hIElQAAAAD///////////////+wcwAAFAAAAEMuVVRGLTg=");
memorySegments[46] = base64DecodeToExistingUint8Array(new Uint8Array(2), 0, "xHM=");
memorySegments[47] = base64DecodeToExistingUint8Array(new Uint8Array(890), 0, "WHQAANMAAAAGAQAABwEAANYAAADXAAAA2AAAANkAAADaAAAA2wAAAAgBAAAJAQAACgEAAN8AAADgAAAANKgAAGR0AACYcQAATlN0M19fMjEwX19zdGRpbmJ1ZkljRUUAAAAAALx0AADTAAAACwEAAAwBAADWAAAA1wAAANgAAAANAQAA2gAAANsAAADcAAAA3QAAAN4AAAAOAQAADwEAADSoAADIdAAAmHEAAE5TdDNfXzIxMV9fc3Rkb3V0YnVmSWNFRQAAAAAAAAAAJHUAAOkAAAAQAQAAEQEAAOwAAADtAAAA7gAAAO8AAADwAAAA8QAAABIBAAATAQAAFAEAAPUAAAD2AAAANKgAADB1AACscgAATlN0M19fMjEwX19zdGRpbmJ1Zkl3RUUAAAAAAIh1AADpAAAAFQEAABYBAADsAAAA7QAAAO4AAAAXAQAA8AAAAPEAAADyAAAA8wAAAPQAAAAYAQAAGQEAADSoAACUdQAArHIAAE5TdDNfXzIxMV9fc3Rkb3V0YnVmSXdFRQAAAABMQ19DVFlQRQAAAABMQ19OVU1FUklDAABMQ19USU1FAAAAAABMQ19DT0xMQVRFAABMQ19NT05FVEFSWQBMQ19NRVNTQUdFUwAAAAAAAAAAAAAAAACA3igAgMhNAACndgAANJ4AgBLHAICf7gAAfhcBgFxAAYDpZwEAyJABAFW4AS4AAAAAAAAAAAAAAAAAAABTdW4ATW9uAFR1ZQBXZWQAVGh1AEZyaQBTYXQAU3VuZGF5AE1vbmRheQBUdWVzZGF5AFdlZG5lc2RheQBUaHVyc2RheQBGcmlkYXkAU2F0dXJkYXkASmFuAEZlYgBNYXIAQXByAE1heQBKdW4ASnVsAEF1ZwBTZXAAT2N0AE5vdgBEZWMASmFudWFyeQBGZWJydWFyeQBNYXJjaABBcHJpbABNYXkASnVuZQBKdWx5AEF1Z3VzdABTZXB0ZW1iZXIAT2N0b2JlcgBOb3ZlbWJlcgBEZWNlbWJlcgBBTQBQTQAlYSAlYiAlZSAlVCAlWQAlbS8lZC8leQAlSDolTTolUwAlSTolTTolUyAlcAAAACVtLyVkLyV5ADAxMjM0NTY3ODkAJWEgJWIgJWUgJVQgJVkAJUg6JU06JVMAAAAAAF5beVldAF5bbk5dAHllcwBubwAAoHk=");
memorySegments[48] = base64DecodeToExistingUint8Array(new Uint8Array(505), 0, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
memorySegments[49] = base64DecodeToExistingUint8Array(new Uint8Array(2), 0, "sH8=");
memorySegments[50] = base64DecodeToExistingUint8Array(new Uint8Array(505), 0, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAGEAAABiAAAAYwAAAGQAAABlAAAAZgAAAGcAAABoAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
memorySegments[51] = base64DecodeToExistingUint8Array(new Uint8Array(829), 0, "MDEyMzQ1Njc4OWFiY2RlZkFCQ0RFRnhYKy1wUGlJbk4AJUk6JU06JVMgJXAlSDolTQAAAAAAAAAAAAAAAAAAACUAAABtAAAALwAAACUAAABkAAAALwAAACUAAAB5AAAAJQAAAFkAAAAtAAAAJQAAAG0AAAAtAAAAJQAAAGQAAAAlAAAASQAAADoAAAAlAAAATQAAADoAAAAlAAAAUwAAACAAAAAlAAAAcAAAAAAAAAAlAAAASAAAADoAAAAlAAAATQAAAAAAAAAAAAAAAAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAAAAAAOCNAAArAQAALAEAAC0BAAAAAAAARI4AAC4BAAAvAQAALQEAADABAAAxAQAAMgEAADMBAAA0AQAANQEAADYBAAA3AQAAAAAAAAAAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAFAgAABQAAAAUAAAAFAAAABQAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAMCAACCAAAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAggAAAIIAAABCAQAAQgEAAEIBAABCAQAAQgEAAEIBAABCAQAAQgEAAEIBAABCAQAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAggAAACoBAAAqAQAAKgEAACoBAAAqAQAAKgEAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAMgEAADIBAAAyAQAAMgEAADIBAAAyAQAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAACCAAAAggAAAIIAAACCAAAABA==");
memorySegments[52] = base64DecodeToExistingUint8Array(new Uint8Array(7700), 0, "");
memorySegments[53] = base64DecodeToExistingUint8Array(new Uint8Array(593), 0, "IQQAAAAAAAAAAC8CAAAAAAAAAAAAAAAAAAAAAAAAAAA1BEcEVgQAAAAAAAAAAAAAAAAAAAAAoAQAAAAAAAAAAAAAAAAAAAAAAABGBWAFbgVhBgAAzwEAAAAAAAAAAMkG6Qb5Bh4HOQdJB14HNKgAALCnAAB0qQAATjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAANKgAAOCnAACkpwAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAAAAAAANSnAAAfAgAAIAIAACECAAAiAgAAIwIAACQCAAAlAgAAJgIAAAAAAABUqAAAHwIAACcCAAAhAgAAIgIAACMCAAAoAgAAKQIAACoCAAA0qAAAYKgAANSnAABOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UAAAAAAAAAALCoAAAfAgAAKwIAACECAAAiAgAAIwIAACwCAAAtAgAALgIAADSoAAC8qAAA1KcAAE4xMF9fY3h4YWJpdjEyMV9fdm1pX2NsYXNzX3R5cGVfaW5mb0UAAAAAAAAA+KgAAC8CAAAwAgAAMQIAAAyoAAAAqQAAU3Q5ZXhjZXB0aW9uAAAAAAAAAAAkqQAAAgAAADICAAAzAgAANKgAADCpAAD4qAAAU3QxMWxvZ2ljX2Vycm9yAAAAAABUqQAAAgAAADQCAAAzAgAANKgAAGCpAAAkqQAAU3QxMmxlbmd0aF9lcnJvcgAAAAAMqAAAfKkAAFN0OXR5cGVfaW5mbwA=");
memorySegments[54] = base64DecodeToExistingUint8Array(new Uint8Array(9), 0, "AACAP6CpAAAB");
memorySegments[55] = base64DecodeToExistingUint8Array(new Uint8Array(5944), 0, "+D8IIAgvfiBCIMJ/AkACQAJAAkACQAJAAkD+fwAAAAD+PyJkIkTiRwJAAkD6XwpQ6lcKUApQ+l8CQP5/AAAAAAAAfgBCAMJ/AkACQAJAAkACQYJCQkQCQT55AAEAAAAAAAB+AEIAwn8CQAJAAkACQQJBAkFCRIJCPnkAAAAAAADwPxAgHCAEIAQgBCAEIYQiRCQEIQQhBCEEIPw/AAAAAPA/ECAcIAQgBCAEIAQhBCEEIUQkhCIEIQQg/D8AAAAA8D8QIBwgBCAEAAQQBCCER4QghBOEAIQnBCD8PwAAAADwPxAgHCAEIAQgBCAEIAQiBCKELwQiBCIEIPw/AAAAAPA/ECAcIAQgBCAEIAQghCgEJQQiBCWEKAQg/D8AAAAA8D8QIBwgBCAEIPQvBCD0LwQg9C8EIAQgBCD8PwAAAADwPxAgHCAEIAQnxCREJEQkRCZkJmQgBCAEIPw/AAAAAPA/ECAcIAQmBCYEIAQghChENSwiFCQEIAQg/D8AAAAA8D8QIBwgBCDEIEQhRCJEJEQiRCHEIAQgBCD8PwAAAADwP/Av/D/0Lzw/tC68PbQrvD20Ljw/9C/8P/QvAAAAAPA/ECAcIIQhhCEEIIQhhCGEIYQhhCGEIQQg/D8AAAAA8A8QCBw4BCgEKAQoBCgEKAQoBCgEKPwvECDwPwAAAAAAAAAAHHAUHpwH8ACgVfAAnAcUHhxwAAAAAAAAAAAAAMAB7BvkEwQQhD/EIEQgRCBEIEQgRCBEIHwgwD8AAAAAAADgD6A6oCq8KqQqpCqkKgQgBCAEIAQg/D8AAAAAAAAAAAwAPADIAAgDEAwQMCAgIBBACEAEgAKAAQAAAAAAAAAAAAAYAHgA8AHwB+AD4APAB0AOAAQAAAAAAAAAAAAAAAAAAAAEAAoAEYAKQAQgAhABiABYADgAAAAAAAAAAAAABAAKABWAKEBQICgQFAgKBAWMAlwBvAB8AAAAAAAAAMABQAFAAUABQAFAAfgPCAj4DwgIqAqoCqgK+A8AAAAA/B/+f/xfAEAAQIB/gADAAcABwAHAAcABwAGAAAAAAAAAAAAAgACAAMABwAHgA+AD8AfwBmADwAEAAAAAAAAAAAAAADgAPoA/gB9AHiAMEAwIAgQBhABEADgAAAAAAAAAAAAAA4AHwA/gH9A/iD8EHwIOAgQEAggB8AAAAAAAAADAAEABgAJABCAIEBAIIAQw/i/8B/gD8AHgAEAAAAAAAAAA/D+EIYABgAGAAYABgAGAAYABgAGAAcADAAAAAAAAgACAAUABQAMgBiAGEAwQDPgfCBgMOARwBnAP+AAAAAAAeABAAFAASAAAwAPAA8ADwAMAABAACgACAA4AAAAAAFZ1AkAAXgIQAFQCEgBB/gCCQIIAgkCCAIJA/moAAAAAAAAAPwA/AD8APwA/AD+AAEAAIAAcABwAHAAAAAAAAACAbYBAAACAQIBAAACAQIBtQAAgABwAHAAcAAAAAAAAAAhACCD+HwgQCBQIEggRiBBIECgQCBD4fwQQAhAAAAAAEAAQAPw/UDWwKlAlsCJQIbAgUCAwIPD/ACAAIAAAAAAAQAAg+B8IKAgECCIIAYggSAAoIBgACCBUNQIAAAAAAAAAgAKAAsAGwAbgDqAOsB6QHpg+iD6Mfvx+AAAAAAAAAAEAAWAFUA1IHUQ9Qn1CfUQ9SB1QDWAFAAEAAQAAAACAAUACIAQQCAgQ+B8AAP5/AAD4H/AP4AfAA4ABAAAAAAAA8AAIAQQCBAIEAgQCCAPwBwAOABwAOAAwAAAAAAAAAADwAxgGDAwkCBQIBAgECAwMGBbwIwAkABgAAAAAAAAAAAAAAADAB3AcmDOOY5gzcBzABwAAAAAAAAAAAAAAAAAAACAAEMAPcAQYMg5hmDBwHKAHEAAIAAAAAAAAAAAAAAD8fwAA/H8EQAggEBAgCEAEgAKAAoACgAIAAQAAAAAAAP5/AkAEIAgQEAggBEACQAJAAkACQAJAAcAAAAAAAIAAgACAAIAAAAAAAJ48AAAAAIAAgACAAIAAAAAAAAAAgACAAIAAgACAAMABfj/AAYAAgACAAIAAgAAAAAAAAACAAIAAgACAAOADIAI+PiAC4AOAAIAAgACAAAAAAAAAAAABgAJABAABAAEIIIRDspqEQwggAAEAAUAEgAIAAQAAAAGAAkAEAAEAAQghBEHynwRBCCEAAQABQASAAgABAAAeeAJAClASSCAEQAIAAAAAQAIgBBJIClACQB54AAAAAAAAADwAIAAoACQAAgABgABAACQAFAAEADwAAAAAAAAAAAA8AAQAFAAkAEAAgAAAAQACACQAKAAgADwAAAAAAAAAACAAEADIHxAQIBAAEAAQABAAEAAQwB8AAAAAAAAAAAAAAAQACPgTCAgIBAgACAAIAAgACAD4AwAAAAAAAAAAAAAAAPw/BCAEIAAgACAAIEAgICCQPyAAQAAAAAAAAAAAAAAA/D8EIAQgBCD8JwAgICAQIMg/EAAgAAAAAAAAAAAAAADwDxgYCBAIEIARgBEAECAQEBjIDxAAIAAAAAAAAAAAAgAE/CkEJAQiBCAEIEQgJCCUPyAAQAAAAAAAAAAAAAAQACAOTBAiIBGAAEAAIBEQIg5MACAAEAAAAAAAAP5/AkACUAJIAkQCQgJBgkBCQCJAEkAKQAJA/n8AAAAAgACAAOADkAQICAgInjwICAgIkATgA4AAgAAAAAAAAACAAIAAgACAAIAAwAH+P8ABgACAAIAAgACAAAAAAAAAAIAAgACAAIAA4APgA/4/4APgA4AAgACAAIAAAAAAAAAAAAGAA8AHAAEAAQggjGO++4xjCCAAAQABwAeAAwABAAAAAYADwAcAAQABCCEMYf7/DGEIIQABAAHAB4ADAAEAAB54DnAGYBJIIARAAgAAAABAAiAEEkgGYA5wHngAAAAAAAAAPAA4ADAAJAACAAGAAEAAJAAMABwAPAAAAAAAAAAAADwAHAAMACQAQACAAAABAAIAJAAwADgAPAAAAAAAAAAAIAAwAPgfMBAgEAAQABAAEAAQABDAHwAAAAAAAAAAAAAABAAM+B8IDAgECAAIAAgACAAIAPgDAAAAAAAAAAAAAAAA/D8EIAQgACAAIAAgQCBgIPA/YABAAAAAAAAAAAAAAAD8PwQgBCAEIPwnACAgIDAg+D8wACAAAAAAAAAAAAAAAPAPGBgIEAgQgBGAEQAQIBAwGPgPMAAgAAAAAAAAAAACAAb8LwQmBCIEIAQgRCBkIPQ/YABAAAAAAAAAAAAAABAAMA58EDIgEYAAQAAgERAyDnwAMAAQAAAAAAAAAAD8PwQwBCgEJAQiBCGEIEQgJCAUIAwg/D8AAAAAAAAAAPw/BCAEIAQgBCAEIAQgBCAEIAQgBCD8PwAAAAAAAAAA/D/EI8QjxCPEIwQgBCAEIAQgBCAEIPw/AAAAAAAAAAD8PwQ+BD4EPgQ+BCAEIAQgBCAEIAQg/D8AAAAAAAAAAPw/BCAEIAQgBD4EPgQ+BD4EIAQgBCD8PwAAAAAAAAAA/D8EIAQgBCAEIAQgBCAEPgQ+BD4EPvw/AAAAAAAAAAD8PwQgBCAEIAQgBCAEIMQjxCPEI8Qj/D8AAAAAAAAAAPw/BCAEIAQgBCAEIAQgfCB8IHwgfCD8PwAAAAAAAAAA/D8EIAQgBCB8IHwgfCB8IAQgBCAEIPw/AAAAAAAAAAD8P3wgfCB8IHwgBCAEIAQgBCAEIAQg/D8AAAAAAAAAAPw/BCAEIAQgxCPEI8QjxCMEIAQgBCD8PwAAAAAAAP5/AkACQIJB4kfiR/JP8k/iR+JHgkECQAJA/n8AAAAA/38BQAFAAUABQN1dVUldSUVJxUkBQAFAAUD/fwAAAAD+fzJzMlPOTM5EMkMyQc5ATkAyVBJIDlQGQP5/AAAAAP5/MnMyU85MzkQyQzJBzkBOXDJEEkQOXAZA/n8AAAAA/n9+Qf5CfkH+Qn5B/kJ+Qf5CfkH+Qn5B/kL+fwAAAAD+BwIA+h8KAOp/KkAqQCpRKlsqVShRKFEgQOB/AAAAAAAAAAD4H0gSSBL4H0gSSBL4H0gSSBL4HwAAAAAAAAAASBJIEv5/SBJIEv5/SBJIEv5/SBJIEv5/SBJIEgAAAAAAAAAAOBzoFzgcEAgQCBAIEAg4HOgXOBwAAAAAAAAAAA5w+l8OcAQgBCAEIAQgBCAEIAQgBCAOcPpfDnAAAAAAfj9CIUIhQiFCIX4/AAB+P0IhQiFCIUIhfj8AAAAAAAAAAAAAuDu4O7g7AAC4O7g7uDsAALg7uDu4OwAAAAAAAP5//n/+fwBw/nf+d/53AHd+d353fnd+d353fncAAAAAHngCQAJAAkAAAAAAgAGAAQAAAAACQAJAAkAeeAAAAAAeeAJAAkACQAAAwAPAA8ADwAMAAAJAAkACQB54AAAAAB54AkACQAJA4AfgB+AH4AfgB+AHAkACQAJAHngAAAAAHngCQPpf+l/4H/gf+B/4H/gf+B/6X/pfAkAeeAAAAAAAABw4BCAEIAAAAAAAAAAAAAAAAAQgBCAcOAAAAAAAAAAAAAC4HQgQCBAAAAgQCBAAAAgQCBC4HQAAAAAAAAAAVjUCIAAAAiAAAAIgAAACIAAAAiAAAAIgVjUAAAAAAAD+fwJAAkDyTxJIEkiSSZJJEkgSSPJPAkACQP5/AAAAAAAA/B+EEIQQhBCEEPwfhBCEEIQQhBD8HwAAAAAAAAAAAAAAAAAAAAAAEAAIAAQAAgQBiABQACAAAAAAAAAAAAAAAAAACBAQCCAEQAKAAYABQAIgBBAICBAAAAAAAAAAAAAAAAAAAgABgABAACAAEAAgAEAAgAAAAQACAAAAAAAAAAAAAEAAgAAAAQACAAQACAAEAAIAAYAAQAAAAAAAAAAAAAAAAAAAAAAABBAICBAEIAJAAYAAAAAAAAAAAAAAAAAAAAAAAIAAQAEgAhAECAgEEAAAAAAAAAAAAAAAAAAAAAAAAAACAAOAA8AD4APwA+ADwAOAAwADAAIAAAAAAAAAAAAAQADAAMABwAPAB8APwAfAA8ABwABAAAAAAAAAAAAAAAAAAAAAAAD8H/gP8AfgA8ABgAAAAAAAAAAAAAAAAAAAAAAAgADAAeAD8Af4D/wfAAAAAAAAAAAAAAAAAAAAAMAIoBiQEogyhiaCJIIkhiaIMpASoBjACAAAAAAAAAAAgAeABMAAQADwACBmMDwQCBgOChOOMQAAAAAAAAAAAAAAAIAAiAiICIoKqiqqKooKiAiICIAAAAAAAAAAAAAAAAAAYACQAAgBCAEEAgRCBEICJAIkABgAAAAAAAAAAAAAAAD4BwgECAQIBAgECAQIBAgEDnwAAAAAAAAAAAAAAAAAAAAAQACgABBBCCIEFAIIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEQAKAAYABQAIgBAAAAAAAAAAAAAAAAAAAAAA4GCgUKBIoEagQqBAoESgSKBQ4GAAAAAAAAAAAAAAAAAAYABaAEWAQGBAYEGAQgBEAFgAYAAAAAAAAAAAAAAAAGABoAIgBCAYIGAgYCAaIAWgAGAAAAAAAAAAAAAAAAAB4HkgSSBJIEkgSSBJIEkgSSBJ4HgAAAAAAAAAAAAAAAPgfCBAIEAgQCBAIEAgQCBAIEPgfAAAAAAAAAAAAAAAAGBwoFEgUiBQIFQgViBRIFCgUGBwAAAAAAAAAAAAAAADAAyAEEAgIEAgQCBAIEBAIIATAAwAAAAAAAAAAAADgBzAMGBjIE2gWKBQoFCgUOBw4HEQiEAgAAAAAAADAByAIIAggCPg/CCCII4gjCCEIIQggCCDwHwAAAAAAAMAHAAgACAAI+D8IIIgjiCMIIQghCCAIIPAfAAAAAAAAwAFwBxgMjBiGMIIgg2CBRwNgAiAGMAwYGAxwB8ABAAAgCiAbIBsgDiAEIAQgBCAEcARwDnAOcA5wDnAOIAQAAIABjDHcO/gf8A94Hj58Pnx4HvAP+B/cO4wxgAEAAAAAgAGMMfw/+B84HBgYHngeeBgYOBz4H/w/jDGAAQAAAAAAAPgPCAj8HwgIqAqoCqgKqAqoCqgKqAoICPgPAAAAAAAAAAAAAPw/BCCEPwQIhA8EBIQHBAT8BwAAAAAAAAAAAAAABEAkgBQAAAAO/m4ADgAAgBRAJAAEAAAAAAAAAAAAAAAAwANgBDAIGBEYERgRGBEwCGAEwAMAAAAAAAAAAAAAgACIEBAIwAbgB2w2QALgB2gXAABAAiAEAAAAAAAAAAAAACg9LCUoJSglKD0oBSgFKAXoBQAAAAAAAAAAAACAAcADwAPAA4AB4AfwD9AL0AvQC1AKQAJAAkACQAIAAIABwAPAA8ATgBH4H8gDyAPAB0AEQAR4BAgMAAAAAAAA+D/4PxgwGDAYMPg/+D8AAwADwAPAAwAD4APgAwAAAAD4P/g/+D/4P5gzmDP4P/g/+D9ABQAAoArgD+APAAAAAAAAAADwDwgQBCAEIEQlBCAIEPALAAYAAwAAAAAAAAAAAAAAAEQR6AvwBzgOHBwYDBwcOA7wB+gLRBEAAAAAAAAAAAAACCAQEGAM4A/AB8AHwAfgD2AMEBAIIAAAAAAAAAAAAAAIIBAQYAzgD0AEVFVABOAPYAwQEAggAAAAAAAAAACAAIAAwAHAAf4//B/wB+AD4APwB3AHGAwICAAAAADwDxAIGAgYCBAIEAgQChAIGAgYCBAIEAgQCPgfAAAAAPAPEAgQCBAIEAgQABAQECCQTxAgEBAQABAI8A8AAAAABAAOAB8ABAD0DoQS9BIUEvQOBAAEEAQw/H8AMAAQAAAEeA5gH1AEQPQOhBL0EoQS9A4EABQQDDD8fwAwABAAAOB/MGAoUARI/kcCRCJEIkQiROJ1EiQKFAYM/gcAAAAA4H/wf/hf/E/+RwJEIkQiRCJE4nUSJAoUBgz+BwAAAADgfzBgOFA8SMJHPkQ+RD5EPkT+dR4kDhQGDP4HAAAAAOB/MGAoUARI/kf+R/5H/kf+R/53/if+F/4P/gcAAAAA4H8wYChQBEj+RwJEIkQiRCJE4nvyO/ob/gv+BwAAAADgfzBgKHAEeP5/AnwifCJ8InzifRI8ChwGDP4HAAAAAOB/8F/ob+R3Hnjie+J74nvie+J7EiQKFAYM/gcAAAAAAAD+MwIqAiYCIgIiAiICJgIq/jOgABABCAIAAAAAAAAAAPw/DCAMAAwADAD8PwAwADAAMAAwBDD8PwAAAAAAAAAAPgAiAOIBIgE+AQABAAEAAQABAHkASQBPAHgAAAAAAAAAfABEAEYARb58YgAiAGIAvnwARQBGAEQAfAAAAAAAAHwARAB8ABAAEAAQP/AhED8QABA/8CEAPwAAAAAAAAAAfABEAEQARAB8ABAAEAAQABB8EETwRwBEAHwAAAAAAAB8AEQARABEAHwAAAAQAAAAEHwARFBFAEQAfAAAAACgAvw/pCIEIAQg9C8EIPQvBCD0LwQgBCAEIPw/AAAAAPw/BCAEIMQnXiREJMQnHiAEIAQgHiAEIAQg/D8AAAAAAAAAAOAHIAQgBPw/JCQkJCQkJCQkJCQk/D8AAAAAAAAAAAAA4A8gCCAI/H8EQFRV/H9UVQRABED8fwAAAAAAAAAA/D8EIAQg/D8IEMgTyBMIEAgQCBAIEPgfAAAAAAAAAAD+fwJA+l/6X/pf+l/6XwJA/n/AA/gf+B8AAAAAAADwD/5//mv+f/5//n8WaBZoEAgQCBAIEAjwDwAAAAAAAPg/CCD+/wKACoeKiEqQSpBKkIqICocCgP7/AAAAAAAAwA/YDP78/v8CgIKDQoRChEKEgoMCgAKA/v8AAAAAAAAAAIABQAIgBBAICBAEIAQgxCNEIkQiRCL8PwAAAAAAAAAAAABwHPg++D/4P/g/8B/gD8AHgAMAAQ==");
memorySegments[56] = base64DecodeToExistingUint8Array(new Uint8Array(1315), 0, "gADAAOAAAAAAABwAFAAUwBVAFUAVQBVcFVQVVBVUFdwdAAAAAAAAAAAAAwADABsAG2AbYBtgG2wbbBtsG2wbbBsAAAAAAAAAAAAAAAD+fz5APkD+fwAA/n/+Q/5D/n8AAAAAAAAAAPx/BECEQ4RChEMEQIRDhEKEQoRChEKEQwRA/H8AAACAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAEAAAAAAPAf8B8wGDAYMBgAHwAfAAMAAwAAAAMAAwAAAAAAAPA/UDW8KlQ1rCpUNawqVDWsKlQ1rCpUNawq/D8AAAAA8D8QIBwghCFEIiQkFCgUKJQplCn0LwQgBCD8PwAAAAD+BwIEAgQCBOJ/IkQiRCJEIkT+RyBAIEAgQOB/AAAAAP4HAgQCBAIEAnwCRAJEAkQCRP5HIEAgQCBA4H8AAAAAAAD+fwJAAkD+fwJAAkACQAJAAkACQAJA/n8AAAAAAAAQCRAJ8AkQCRAJEAkAAJ53oiSiJKInoiCecAAAAAAAAPA/ECAcIIQuhCqEKoQuBCCkK6QqpCqkKwQg/D8AAAAAAAAAAAAAEgASANJLXkrSM1JI0ksAAAAAAAAAAAAAAACAAWAGHDgEIMQjRCDEIwQiyBMIEBAIIARAAoABAAAAAH4Awj8CIOJ/IkA6QApACkAKQApACkAOQAhA+H8AAAAAAAB+AEIAwn8CQAJAAkQCRAJfAkQCRAJA/n8AAAAAAAAiREQiSBIAAM/zIAQoFCQkEkgQCBAICBD4HyAEwAMAAKAKoAr4Hw5waBBucAgQDnAIEA5wCBD4H6AKoAoAAAAA4Ae4HSAEOBygBDgdoAQ4HaAEOB2gBDgdIATgBwAAAAAAAAAAwAPwLzg8DDgEPAAAgAHAA8ADgAEAAAAAAAAAAIABgAGAAYABgAHgB8ADgAEAAAAAgAHAA8ADgAEAAAAAgAHAA+AHgAGAAYABgAGAAQAAAACAAcADwAOAAQAAAAAAAMAD8A80HBwYHDA8MAAwADAAGDAc8A/AAwAAAAAAAAAAAAAAAMAD4AfwD/AP8A/wD+AHwAMAAAAAAAAAAAAAAAAAAAAAwAMgBBAIEAgQCBAIIATAAwAAAAAAAAAAAAAAAAAAAAD4H/gfAAD4H/gfAAD4H/gfAAAAAAAAAAAAAAAAAAAAAHAAiACIAIgM+BCIHogSiD4AAAAAAAAAAAAAAAAAAAACgAoAB8AfAAeACgACMAAwAAAAAAAAAAAAAAAAAH4AQgDCfwJAAkACQAJAAkACQAJAAkD+fwAAAAAAAPA/ECAcIAQgBCAEIAQgBCAEIAQgBCAEIAQg/D8AAAAA8B8IIAgg6C/QF6ALQAVABSAJEBCII8gn6C/wHwAAAACAAUACQAIgBKAFkAmQCYgRiBEEIIQhgkECQPw/AAAAAP5/AkDyT/JPMkwCTIJPgk+CQQJAgkGCQQJA/n8AAAAA/n8CQIJBgkECQIJBgkGCQYJBgkGCQYJBAkD+fwAAAACAAUACIAQQCAgQBCDee1AKUArQC1AIUAgQCPAPAAAAAIABYAYYGAZgAYAGYBmYZmaZmWZmmBlgBoABAAAAAAAA/gcCBAIcAhQCdAJUAlQCVAJU/lcIUPhfIEDgfwAAAAD+DwII+j8KIOp/KkAqQCpCKkIqQi5CKE44QOB/AAAAAP4PAgj6Pwog6n8qQCpAKlEqWypVLlEoUThA4H8AAAAAIARgDPAc8BnwEbgHOA88DzweHB4cHBwcPB5wDw==");
memorySegments[57] = base64DecodeToExistingUint8Array(new Uint8Array(52), 0, "wYPqlgAAAAAAAAAAAAAAAOUhiyEAAAAAvf6RqgAAAADUFGSXAAAAAAAAAAD/AwAA/////w==");
memorySegments[58] = base64DecodeToExistingUint8Array(new Uint8Array(49), 0, "AQAAAAEAAAABAAAAAQAAAAcAAAAAAAAAAAAAAAAAgD8AAIA/CAAAAP////8CAAAAAw==");
memorySegments[59] = base64DecodeToExistingUint8Array(new Uint8Array(89), 0, "nMoAAJzKAAAFAAAAAAAAAAAAAADNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9AAAAzgAAANgiAQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA/////wo=");
memorySegments[60] = base64DecodeToExistingUint8Array(new Uint8Array(92), 0, "2MoAAAAAAAAFAAAAAAAAAAAAAAC/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9AAAAvAAAAOgmAQAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA//////////8=");
memorySegments[61] = base64DecodeToExistingUint8Array(new Uint8Array(58), 0, "cMsAABA6AgAJAAAAAAAAAAAAAAC/AAAAAAAAAAAAAAAAAAAAAAAAAL4AAAAAAAAAvAAAABgpAQAABA==");
memorySegments[62] = base64DecodeToExistingUint8Array(new Uint8Array(4), 0, "/////w==");
memorySegments[63] = base64DecodeToExistingUint8Array(new Uint8Array(28), 0, "JW0vJWQvJXkAAAAIJUg6JU06JVMAAAAIAAABAA==");

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_atomic_wait_i32(offset, ptr, expected, timeoutLow, timeoutHigh) {
    ptr = (ptr + offset) >> 2;
    var timeout = Infinity;
    if (timeoutHigh >= 0) {
      // Convert from nanoseconds to milliseconds
      // Taken from convertI32PairToI53 in emscripten's library_int53.js
      timeout = ((timeoutLow >>> 0) / 1e6) + timeoutHigh * (4294967296 / 1e6);
    }
    var view = new Int32Array(bufferView.buffer); // TODO cache
    var result = Atomics.wait(view, ptr, expected, timeout);
    if (result == 'ok') return 0;
    if (result == 'not-equal') return 1;
    if (result == 'timed-out') return 2;
    throw 'bad result ' + result;
  }
      
  function wasm2js_memory_init(segment, dest, offset, size) {
    // TODO: traps on invalid things
    bufferView.set(memorySegments[segment].subarray(offset, offset + size), dest);
  }
      
  function wasm2js_memory_fill(dest, value, size) {
    dest = dest >>> 0;
    size = size >>> 0;
    if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
    bufferView.fill(value, dest, dest + size);
  }
      
  function wasm2js_data_drop(segment) {
    // TODO: traps on invalid things
    memorySegments[segment] = new Uint8Array(0);
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_memory_copy(dest, source, size) {
    // TODO: traps on invalid things
    bufferView.copyWithin(dest, source, source + size);
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var emscripten_set_main_loop = env.emscripten_set_main_loop;
 var __cxa_throw = env.__cxa_throw;
 var glViewport = env.glViewport;
 var glBindBuffer = env.glBindBuffer;
 var glBufferSubData = env.glBufferSubData;
 var glUseProgram = env.glUseProgram;
 var glUniformMatrix4fv = env.glUniformMatrix4fv;
 var glVertexAttribPointer = env.glVertexAttribPointer;
 var glEnableVertexAttribArray = env.glEnableVertexAttribArray;
 var glUniform4f = env.glUniform4f;
 var glUniform1i = env.glUniform1i;
 var glActiveTexture = env.glActiveTexture;
 var glBindTexture = env.glBindTexture;
 var glDrawArrays = env.glDrawArrays;
 var glDrawElements = env.glDrawElements;
 var glTexParameteri = env.glTexParameteri;
 var glEnable = env.glEnable;
 var glDisable = env.glDisable;
 var glCullFace = env.glCullFace;
 var glGetFloatv = env.glGetFloatv;
 var glClearColor = env.glClearColor;
 var glClear = env.glClear;
 var glBlendFunc = env.glBlendFunc;
 var glGetAttribLocation = env.glGetAttribLocation;
 var glGetUniformLocation = env.glGetUniformLocation;
 var glDepthFunc = env.glDepthFunc;
 var glFrontFace = env.glFrontFace;
 var glClearDepthf = env.glClearDepthf;
 var glPixelStorei = env.glPixelStorei;
 var glGenTextures = env.glGenTextures;
 var glTexImage2D = env.glTexImage2D;
 var glCompressedTexImage2D = env.glCompressedTexImage2D;
 var glGenBuffers = env.glGenBuffers;
 var glBufferData = env.glBufferData;
 var glDetachShader = env.glDetachShader;
 var glDeleteShader = env.glDeleteShader;
 var glDeleteProgram = env.glDeleteProgram;
 var glDeleteTextures = env.glDeleteTextures;
 var glDisableVertexAttribArray = env.glDisableVertexAttribArray;
 var glDeleteBuffers = env.glDeleteBuffers;
 var glGetString = env.glGetString;
 var glReadPixels = env.glReadPixels;
 var glCreateShader = env.glCreateShader;
 var glShaderSource = env.glShaderSource;
 var glCompileShader = env.glCompileShader;
 var glGetShaderiv = env.glGetShaderiv;
 var glGetShaderInfoLog = env.glGetShaderInfoLog;
 var glCreateProgram = env.glCreateProgram;
 var glAttachShader = env.glAttachShader;
 var glBindAttribLocation = env.glBindAttribLocation;
 var glLinkProgram = env.glLinkProgram;
 var glGetProgramiv = env.glGetProgramiv;
 var glGetProgramInfoLog = env.glGetProgramInfoLog;
 var glfwGetTime = env.glfwGetTime;
 var __assert_fail = env.__assert_fail;
 var emscripten_asm_const_int = env.emscripten_asm_const_int;
 var emscripten_set_window_title = env.emscripten_set_window_title;
 var emscripten_set_canvas_element_size = env.emscripten_set_canvas_element_size;
 var glfwSwapBuffers = env.glfwSwapBuffers;
 var emscripten_sample_gamepad_data = env.emscripten_sample_gamepad_data;
 var emscripten_get_num_gamepads = env.emscripten_get_num_gamepads;
 var emscripten_get_gamepad_status = env.emscripten_get_gamepad_status;
 var glfwSetErrorCallback = env.glfwSetErrorCallback;
 var glfwInit = env.glfwInit;
 var glfwDefaultWindowHints = env.glfwDefaultWindowHints;
 var glfwWindowHint = env.glfwWindowHint;
 var glfwGetPrimaryMonitor = env.glfwGetPrimaryMonitor;
 var glfwGetVideoModes = env.glfwGetVideoModes;
 var glfwCreateWindow = env.glfwCreateWindow;
 var glfwTerminate = env.glfwTerminate;
 var glfwSetWindowSizeCallback = env.glfwSetWindowSizeCallback;
 var glfwSetWindowIconifyCallback = env.glfwSetWindowIconifyCallback;
 var glfwSetWindowFocusCallback = env.glfwSetWindowFocusCallback;
 var glfwSetDropCallback = env.glfwSetDropCallback;
 var glfwSetWindowContentScaleCallback = env.glfwSetWindowContentScaleCallback;
 var glfwSetKeyCallback = env.glfwSetKeyCallback;
 var glfwSetCharCallback = env.glfwSetCharCallback;
 var glfwSetMouseButtonCallback = env.glfwSetMouseButtonCallback;
 var glfwSetCursorPosCallback = env.glfwSetCursorPosCallback;
 var glfwSetScrollCallback = env.glfwSetScrollCallback;
 var glfwSetCursorEnterCallback = env.glfwSetCursorEnterCallback;
 var glfwMakeContextCurrent = env.glfwMakeContextCurrent;
 var emscripten_set_fullscreenchange_callback_on_thread = env.emscripten_set_fullscreenchange_callback_on_thread;
 var emscripten_set_resize_callback_on_thread = env.emscripten_set_resize_callback_on_thread;
 var emscripten_set_click_callback_on_thread = env.emscripten_set_click_callback_on_thread;
 var emscripten_set_pointerlockchange_callback_on_thread = env.emscripten_set_pointerlockchange_callback_on_thread;
 var emscripten_set_mousemove_callback_on_thread = env.emscripten_set_mousemove_callback_on_thread;
 var emscripten_set_touchstart_callback_on_thread = env.emscripten_set_touchstart_callback_on_thread;
 var emscripten_set_touchend_callback_on_thread = env.emscripten_set_touchend_callback_on_thread;
 var emscripten_set_touchmove_callback_on_thread = env.emscripten_set_touchmove_callback_on_thread;
 var emscripten_set_touchcancel_callback_on_thread = env.emscripten_set_touchcancel_callback_on_thread;
 var emscripten_set_gamepadconnected_callback_on_thread = env.emscripten_set_gamepadconnected_callback_on_thread;
 var emscripten_set_gamepaddisconnected_callback_on_thread = env.emscripten_set_gamepaddisconnected_callback_on_thread;
 var glfwSetWindowShouldClose = env.glfwSetWindowShouldClose;
 var emscripten_get_element_css_size = env.emscripten_get_element_css_size;
 var glfwDestroyWindow = env.glfwDestroyWindow;
 var exit = env.exit;
 var emscripten_glGenQueriesEXT = env.emscripten_glGenQueriesEXT;
 var emscripten_glDeleteQueriesEXT = env.emscripten_glDeleteQueriesEXT;
 var emscripten_glIsQueryEXT = env.emscripten_glIsQueryEXT;
 var emscripten_glBeginQueryEXT = env.emscripten_glBeginQueryEXT;
 var emscripten_glEndQueryEXT = env.emscripten_glEndQueryEXT;
 var emscripten_glQueryCounterEXT = env.emscripten_glQueryCounterEXT;
 var emscripten_glGetQueryivEXT = env.emscripten_glGetQueryivEXT;
 var emscripten_glGetQueryObjectivEXT = env.emscripten_glGetQueryObjectivEXT;
 var emscripten_glGetQueryObjectuivEXT = env.emscripten_glGetQueryObjectuivEXT;
 var emscripten_glGetQueryObjecti64vEXT = env.emscripten_glGetQueryObjecti64vEXT;
 var emscripten_glGetQueryObjectui64vEXT = env.emscripten_glGetQueryObjectui64vEXT;
 var emscripten_glBindVertexArrayOES = env.emscripten_glBindVertexArrayOES;
 var emscripten_glDeleteVertexArraysOES = env.emscripten_glDeleteVertexArraysOES;
 var emscripten_glGenVertexArraysOES = env.emscripten_glGenVertexArraysOES;
 var emscripten_glIsVertexArrayOES = env.emscripten_glIsVertexArrayOES;
 var emscripten_glDrawBuffersWEBGL = env.emscripten_glDrawBuffersWEBGL;
 var emscripten_glDrawArraysInstancedANGLE = env.emscripten_glDrawArraysInstancedANGLE;
 var emscripten_glDrawElementsInstancedANGLE = env.emscripten_glDrawElementsInstancedANGLE;
 var emscripten_glVertexAttribDivisorANGLE = env.emscripten_glVertexAttribDivisorANGLE;
 var emscripten_glActiveTexture = env.emscripten_glActiveTexture;
 var emscripten_glAttachShader = env.emscripten_glAttachShader;
 var emscripten_glBindAttribLocation = env.emscripten_glBindAttribLocation;
 var emscripten_glBindBuffer = env.emscripten_glBindBuffer;
 var emscripten_glBindFramebuffer = env.emscripten_glBindFramebuffer;
 var emscripten_glBindRenderbuffer = env.emscripten_glBindRenderbuffer;
 var emscripten_glBindTexture = env.emscripten_glBindTexture;
 var emscripten_glBlendColor = env.emscripten_glBlendColor;
 var emscripten_glBlendEquation = env.emscripten_glBlendEquation;
 var emscripten_glBlendEquationSeparate = env.emscripten_glBlendEquationSeparate;
 var emscripten_glBlendFunc = env.emscripten_glBlendFunc;
 var emscripten_glBlendFuncSeparate = env.emscripten_glBlendFuncSeparate;
 var emscripten_glBufferData = env.emscripten_glBufferData;
 var emscripten_glBufferSubData = env.emscripten_glBufferSubData;
 var emscripten_glCheckFramebufferStatus = env.emscripten_glCheckFramebufferStatus;
 var emscripten_glClear = env.emscripten_glClear;
 var emscripten_glClearColor = env.emscripten_glClearColor;
 var emscripten_glClearDepthf = env.emscripten_glClearDepthf;
 var emscripten_glClearStencil = env.emscripten_glClearStencil;
 var emscripten_glColorMask = env.emscripten_glColorMask;
 var emscripten_glCompileShader = env.emscripten_glCompileShader;
 var emscripten_glCompressedTexImage2D = env.emscripten_glCompressedTexImage2D;
 var emscripten_glCompressedTexSubImage2D = env.emscripten_glCompressedTexSubImage2D;
 var emscripten_glCopyTexImage2D = env.emscripten_glCopyTexImage2D;
 var emscripten_glCopyTexSubImage2D = env.emscripten_glCopyTexSubImage2D;
 var emscripten_glCreateProgram = env.emscripten_glCreateProgram;
 var emscripten_glCreateShader = env.emscripten_glCreateShader;
 var emscripten_glCullFace = env.emscripten_glCullFace;
 var emscripten_glDeleteBuffers = env.emscripten_glDeleteBuffers;
 var emscripten_glDeleteFramebuffers = env.emscripten_glDeleteFramebuffers;
 var emscripten_glDeleteProgram = env.emscripten_glDeleteProgram;
 var emscripten_glDeleteRenderbuffers = env.emscripten_glDeleteRenderbuffers;
 var emscripten_glDeleteShader = env.emscripten_glDeleteShader;
 var emscripten_glDeleteTextures = env.emscripten_glDeleteTextures;
 var emscripten_glDepthFunc = env.emscripten_glDepthFunc;
 var emscripten_glDepthMask = env.emscripten_glDepthMask;
 var emscripten_glDepthRangef = env.emscripten_glDepthRangef;
 var emscripten_glDetachShader = env.emscripten_glDetachShader;
 var emscripten_glDisable = env.emscripten_glDisable;
 var emscripten_glDisableVertexAttribArray = env.emscripten_glDisableVertexAttribArray;
 var emscripten_glDrawArrays = env.emscripten_glDrawArrays;
 var emscripten_glDrawElements = env.emscripten_glDrawElements;
 var emscripten_glEnable = env.emscripten_glEnable;
 var emscripten_glEnableVertexAttribArray = env.emscripten_glEnableVertexAttribArray;
 var emscripten_glFinish = env.emscripten_glFinish;
 var emscripten_glFlush = env.emscripten_glFlush;
 var emscripten_glFramebufferRenderbuffer = env.emscripten_glFramebufferRenderbuffer;
 var emscripten_glFramebufferTexture2D = env.emscripten_glFramebufferTexture2D;
 var emscripten_glFrontFace = env.emscripten_glFrontFace;
 var emscripten_glGenBuffers = env.emscripten_glGenBuffers;
 var emscripten_glGenerateMipmap = env.emscripten_glGenerateMipmap;
 var emscripten_glGenFramebuffers = env.emscripten_glGenFramebuffers;
 var emscripten_glGenRenderbuffers = env.emscripten_glGenRenderbuffers;
 var emscripten_glGenTextures = env.emscripten_glGenTextures;
 var emscripten_glGetActiveAttrib = env.emscripten_glGetActiveAttrib;
 var emscripten_glGetActiveUniform = env.emscripten_glGetActiveUniform;
 var emscripten_glGetAttachedShaders = env.emscripten_glGetAttachedShaders;
 var emscripten_glGetAttribLocation = env.emscripten_glGetAttribLocation;
 var emscripten_glGetBooleanv = env.emscripten_glGetBooleanv;
 var emscripten_glGetBufferParameteriv = env.emscripten_glGetBufferParameteriv;
 var emscripten_glGetError = env.emscripten_glGetError;
 var emscripten_glGetFloatv = env.emscripten_glGetFloatv;
 var emscripten_glGetFramebufferAttachmentParameteriv = env.emscripten_glGetFramebufferAttachmentParameteriv;
 var emscripten_glGetIntegerv = env.emscripten_glGetIntegerv;
 var emscripten_glGetProgramiv = env.emscripten_glGetProgramiv;
 var emscripten_glGetProgramInfoLog = env.emscripten_glGetProgramInfoLog;
 var emscripten_glGetRenderbufferParameteriv = env.emscripten_glGetRenderbufferParameteriv;
 var emscripten_glGetShaderiv = env.emscripten_glGetShaderiv;
 var emscripten_glGetShaderInfoLog = env.emscripten_glGetShaderInfoLog;
 var emscripten_glGetShaderPrecisionFormat = env.emscripten_glGetShaderPrecisionFormat;
 var emscripten_glGetShaderSource = env.emscripten_glGetShaderSource;
 var emscripten_glGetString = env.emscripten_glGetString;
 var emscripten_glGetTexParameterfv = env.emscripten_glGetTexParameterfv;
 var emscripten_glGetTexParameteriv = env.emscripten_glGetTexParameteriv;
 var emscripten_glGetUniformfv = env.emscripten_glGetUniformfv;
 var emscripten_glGetUniformiv = env.emscripten_glGetUniformiv;
 var emscripten_glGetUniformLocation = env.emscripten_glGetUniformLocation;
 var emscripten_glGetVertexAttribfv = env.emscripten_glGetVertexAttribfv;
 var emscripten_glGetVertexAttribiv = env.emscripten_glGetVertexAttribiv;
 var emscripten_glGetVertexAttribPointerv = env.emscripten_glGetVertexAttribPointerv;
 var emscripten_glHint = env.emscripten_glHint;
 var emscripten_glIsBuffer = env.emscripten_glIsBuffer;
 var emscripten_glIsEnabled = env.emscripten_glIsEnabled;
 var emscripten_glIsFramebuffer = env.emscripten_glIsFramebuffer;
 var emscripten_glIsProgram = env.emscripten_glIsProgram;
 var emscripten_glIsRenderbuffer = env.emscripten_glIsRenderbuffer;
 var emscripten_glIsShader = env.emscripten_glIsShader;
 var emscripten_glIsTexture = env.emscripten_glIsTexture;
 var emscripten_glLineWidth = env.emscripten_glLineWidth;
 var emscripten_glLinkProgram = env.emscripten_glLinkProgram;
 var emscripten_glPixelStorei = env.emscripten_glPixelStorei;
 var emscripten_glPolygonOffset = env.emscripten_glPolygonOffset;
 var emscripten_glReadPixels = env.emscripten_glReadPixels;
 var emscripten_glReleaseShaderCompiler = env.emscripten_glReleaseShaderCompiler;
 var emscripten_glRenderbufferStorage = env.emscripten_glRenderbufferStorage;
 var emscripten_glSampleCoverage = env.emscripten_glSampleCoverage;
 var emscripten_glScissor = env.emscripten_glScissor;
 var emscripten_glShaderBinary = env.emscripten_glShaderBinary;
 var emscripten_glShaderSource = env.emscripten_glShaderSource;
 var emscripten_glStencilFunc = env.emscripten_glStencilFunc;
 var emscripten_glStencilFuncSeparate = env.emscripten_glStencilFuncSeparate;
 var emscripten_glStencilMask = env.emscripten_glStencilMask;
 var emscripten_glStencilMaskSeparate = env.emscripten_glStencilMaskSeparate;
 var emscripten_glStencilOp = env.emscripten_glStencilOp;
 var emscripten_glStencilOpSeparate = env.emscripten_glStencilOpSeparate;
 var emscripten_glTexImage2D = env.emscripten_glTexImage2D;
 var emscripten_glTexParameterf = env.emscripten_glTexParameterf;
 var emscripten_glTexParameterfv = env.emscripten_glTexParameterfv;
 var emscripten_glTexParameteri = env.emscripten_glTexParameteri;
 var emscripten_glTexParameteriv = env.emscripten_glTexParameteriv;
 var emscripten_glTexSubImage2D = env.emscripten_glTexSubImage2D;
 var emscripten_glUniform1f = env.emscripten_glUniform1f;
 var emscripten_glUniform1fv = env.emscripten_glUniform1fv;
 var emscripten_glUniform1i = env.emscripten_glUniform1i;
 var emscripten_glUniform1iv = env.emscripten_glUniform1iv;
 var emscripten_glUniform2f = env.emscripten_glUniform2f;
 var emscripten_glUniform2fv = env.emscripten_glUniform2fv;
 var emscripten_glUniform2i = env.emscripten_glUniform2i;
 var emscripten_glUniform2iv = env.emscripten_glUniform2iv;
 var emscripten_glUniform3f = env.emscripten_glUniform3f;
 var emscripten_glUniform3fv = env.emscripten_glUniform3fv;
 var emscripten_glUniform3i = env.emscripten_glUniform3i;
 var emscripten_glUniform3iv = env.emscripten_glUniform3iv;
 var emscripten_glUniform4f = env.emscripten_glUniform4f;
 var emscripten_glUniform4fv = env.emscripten_glUniform4fv;
 var emscripten_glUniform4i = env.emscripten_glUniform4i;
 var emscripten_glUniform4iv = env.emscripten_glUniform4iv;
 var emscripten_glUniformMatrix2fv = env.emscripten_glUniformMatrix2fv;
 var emscripten_glUniformMatrix3fv = env.emscripten_glUniformMatrix3fv;
 var emscripten_glUniformMatrix4fv = env.emscripten_glUniformMatrix4fv;
 var emscripten_glUseProgram = env.emscripten_glUseProgram;
 var emscripten_glValidateProgram = env.emscripten_glValidateProgram;
 var emscripten_glVertexAttrib1f = env.emscripten_glVertexAttrib1f;
 var emscripten_glVertexAttrib1fv = env.emscripten_glVertexAttrib1fv;
 var emscripten_glVertexAttrib2f = env.emscripten_glVertexAttrib2f;
 var emscripten_glVertexAttrib2fv = env.emscripten_glVertexAttrib2fv;
 var emscripten_glVertexAttrib3f = env.emscripten_glVertexAttrib3f;
 var emscripten_glVertexAttrib3fv = env.emscripten_glVertexAttrib3fv;
 var emscripten_glVertexAttrib4f = env.emscripten_glVertexAttrib4f;
 var emscripten_glVertexAttrib4fv = env.emscripten_glVertexAttrib4fv;
 var emscripten_glVertexAttribPointer = env.emscripten_glVertexAttribPointer;
 var emscripten_glViewport = env.emscripten_glViewport;
 var emscripten_glPolygonOffsetClampEXT = env.emscripten_glPolygonOffsetClampEXT;
 var emscripten_glClipControlEXT = env.emscripten_glClipControlEXT;
 var emscripten_glPolygonModeWEBGL = env.emscripten_glPolygonModeWEBGL;
 var __syscall_faccessat = env.__syscall_faccessat;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var __wasi_fd_close = wasi_snapshot_preview1.fd_close;
 var emscripten_date_now = env.emscripten_date_now;
 var _emscripten_thread_set_strongref = env._emscripten_thread_set_strongref;
 var emscripten_exit_with_live_runtime = env.emscripten_exit_with_live_runtime;
 var emscripten_get_now = env.emscripten_get_now;
 var __syscall_openat = env.__syscall_openat;
 var __syscall_fcntl64 = env.__syscall_fcntl64;
 var __syscall_ioctl = env.__syscall_ioctl;
 var __wasi_fd_write = wasi_snapshot_preview1.fd_write;
 var __wasi_fd_read = wasi_snapshot_preview1.fd_read;
 var __syscall_getcwd = env.__syscall_getcwd;
 var _emscripten_init_main_thread_js = env._emscripten_init_main_thread_js;
 var _emscripten_thread_mailbox_await = env._emscripten_thread_mailbox_await;
 var _emscripten_receive_on_main_thread_js = env._emscripten_receive_on_main_thread_js;
 var emscripten_check_blocking_allowed = env.emscripten_check_blocking_allowed;
 var _emscripten_notify_mailbox_postmessage = env._emscripten_notify_mailbox_postmessage;
 var _abort_js = env._abort_js;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var __wasi_environ_sizes_get = wasi_snapshot_preview1.environ_sizes_get;
 var __wasi_environ_get = wasi_snapshot_preview1.environ_get;
 var _tzset_js = env._tzset_js;
 var _emscripten_thread_cleanup = env._emscripten_thread_cleanup;
 var legalimport$__wasi_clock_time_get = wasi_snapshot_preview1.clock_time_get;
 var legalimport$__wasi_fd_seek = wasi_snapshot_preview1.fd_seek;
 var __stack_pointer = 145936;
 var __tls_base = 0;
 var g_needs_dynamic_alloc = 0;
 var thread_ptr = 0;
 var is_main_thread = 0;
 var is_runtime_thread = 0;
 var supports_wait = 0;
 var __stack_end = 0;
 var __stack_base = 0;
 var global$9 = 0;
 var global$10 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $0 = HEAP32[global$10 >> 2];
   $1 = HEAP32[$0 >> 2];
   $5 = HEAP32[$0 + 8 >> 2];
   $6 = HEAP32[$0 + 12 >> 2];
   $7 = HEAP32[$0 + 16 >> 2];
   $8 = HEAP32[$0 + 20 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   emscripten_stack_init();
   _emscripten_init_main_thread_js(73164);
   HEAP32[18291] = 73164;
   HEAP32[18304] = __stack_base;
   HEAP32[18299] = 2;
   $6 = __stack_end;
   $1 = __stack_base - $6 | 0;
   HEAP32[18305] = $1;
   HEAP32[18310] = 73240;
   HEAP32[18315] = 73136;
   HEAP32[18297] = 42;
   HEAP32[18309] = 73360;
   HEAP32[18294] = 73164;
   HEAP32[18293] = 73164;
  }
  block : {
   if (!global$9 | !$2) {
    $4 = em_task_queue_create(73164);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $4;
   }
   if (!global$9) {
    HEAP32[18321] = $1;
    Atomics.store(HEAP32, 18322, 1);
    Atomics.store(HEAP32, 18323, 0);
    _emscripten_thread_mailbox_await(73164);
    $1 = Atomics.load(HEAPU8, 78152) & 1;
   }
   block1 : {
    if (!($1 ? global$9 : 1)) {
     break block1
    }
    if (!global$9 | ($2 | 0) == 1) {
     $4 = __cxa_guard_acquire(78152);
     $3 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $4;
    }
    if (!global$9) {
     $1 = !$1;
     if ($1) {
      break block1
     }
     $6 = __stack_pointer;
     $5 = $6 - 16 | 0;
     __stack_pointer = $5;
     $1 = HEAP32[7401];
    }
    if (!global$9 | ($2 | 0) == 2) {
     $4 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____basic_streambuf_28_29(77796);
     $3 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[$0 + 40 >> 2] = 77852;
     HEAP32[$0 + 32 >> 2] = $1;
     HEAP32[$0 >> 2] = 29728;
     HEAP8[$0 + 52 | 0] = 0;
     HEAP32[$0 + 48 >> 2] = -1;
     $6 = $5 + 12 | 0;
     std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn190106_5d_28_29_20const($6, $0);
     $7 = HEAP32[HEAP32[$0 >> 2] + 8 >> 2];
    }
    if (!global$9 | ($2 | 0) == 3) {
     FUNCTION_TABLE[$7 | 0]($0, $6);
     $3 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $6 = global$9 ? $6 : $5 + 12 | 0;
    if (!global$9 | ($2 | 0) == 4) {
     std____2__locale___locale_28_29($6);
     $3 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     __stack_pointer = $5 + 16 | 0;
     $0 = std____2__basic_ios_char_2c_20std____2__char_traits_char____basic_ios_5babi_nn190106_5d_28_29(77088);
     HEAP32[19270] = 28764;
     HEAP32[$0 >> 2] = 28784;
     HEAP32[19271] = 0;
     $6 = HEAP32[7188] + 77080 | 0;
    }
    if (!global$9 | ($2 | 0) == 5) {
     std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29($6, 77796);
     $3 = 5;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $6 = global$9 ? $6 : HEAP32[6911];
    if (!global$9 | ($2 | 0) == 6) {
     std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(77860, $6, 77908);
     $3 = 6;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($2 | 0) == 7) {
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____basic_ostream_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(77264, 77860);
     $3 = 7;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $7 = global$9 ? $7 : HEAP32[7171];
    if (!global$9 | ($2 | 0) == 8) {
     std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(77916, $7, 77964);
     $3 = 8;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($2 | 0) == 9) {
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____basic_ostream_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(77440, 77916);
     $3 = 9;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $0 = HEAP32[(HEAP32[HEAP32[19360] - 12 >> 2] + 77440 | 0) + 24 >> 2]
    }
    if (!global$9 | ($2 | 0) == 10) {
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____basic_ostream_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(77616, $0);
     $3 = 10;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     std____2__basic_ios_char_2c_20std____2__char_traits_char____tie_5babi_nn190106_5d_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(HEAP32[HEAP32[19270] - 12 >> 2] + 77080 | 0, 77264);
     std____2__ios_base__setf_5babi_nn190106_5d_28unsigned_20int_29(HEAP32[HEAP32[19360] - 12 >> 2] + 77440 | 0);
     std____2__basic_ios_char_2c_20std____2__char_traits_char____tie_5babi_nn190106_5d_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(HEAP32[HEAP32[19360] - 12 >> 2] + 77440 | 0, 77264);
     $0 = __stack_pointer;
     $5 = $0 - 16 | 0;
     __stack_pointer = $5;
    }
    if (!global$9 | ($2 | 0) == 11) {
     $4 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____basic_streambuf_28_29(77972);
     $3 = 11;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[$0 + 40 >> 2] = 78028;
     HEAP32[$0 + 32 >> 2] = $1;
     HEAP32[$0 >> 2] = 29932;
     HEAP8[$0 + 52 | 0] = 0;
     HEAP32[$0 + 48 >> 2] = -1;
     $1 = $5 + 12 | 0;
     std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn190106_5d_28_29_20const($1, $0);
     $8 = HEAP32[HEAP32[$0 >> 2] + 8 >> 2];
    }
    if (!global$9 | ($2 | 0) == 12) {
     FUNCTION_TABLE[$8 | 0]($0, $1);
     $3 = 12;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : $5 + 12 | 0;
    if (!global$9 | ($2 | 0) == 13) {
     std____2__locale___locale_28_29($1);
     $3 = 13;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     __stack_pointer = $5 + 16 | 0;
     $1 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ios_5babi_nn190106_5d_28_29(77180);
     HEAP32[19293] = 28924;
     HEAP32[$1 >> 2] = 28944;
     HEAP32[19294] = 0;
     $1 = HEAP32[7228] + 77172 | 0;
    }
    if (!global$9 | ($2 | 0) == 14) {
     std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29($1, 77972);
     $3 = 14;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($2 | 0) == 15) {
     std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(78036, $6, 78084);
     $3 = 15;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($2 | 0) == 16) {
     std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ostream_5babi_nn190106_5d_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____29(77352, 78036);
     $3 = 16;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($2 | 0) == 17) {
     std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(78092, $7, 78140);
     $3 = 17;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($2 | 0) == 18) {
     std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ostream_5babi_nn190106_5d_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____29(77528, 78092);
     $3 = 18;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $1 = HEAP32[(HEAP32[HEAP32[19382] - 12 >> 2] + 77528 | 0) + 24 >> 2]
    }
    if (!global$9 | ($2 | 0) == 19) {
     std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ostream_5babi_nn190106_5d_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____29(77704, $1);
     $3 = 19;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     std____2__basic_ios_char_2c_20std____2__char_traits_char____tie_5babi_nn190106_5d_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(HEAP32[HEAP32[19293] - 12 >> 2] + 77172 | 0, 77352);
     std____2__ios_base__setf_5babi_nn190106_5d_28unsigned_20int_29(HEAP32[HEAP32[19382] - 12 >> 2] + 77528 | 0);
     $1 = HEAP32[HEAP32[19382] - 12 >> 2] + 77528 | 0;
     std____2__basic_ios_char_2c_20std____2__char_traits_char____tie_5babi_nn190106_5d_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($1, 77352);
    }
    if (!global$9 | ($2 | 0) == 20) {
     __cxa_guard_release(78152);
     $3 = 20;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    $1 = __wasi_environ_sizes_get($0 + 12 | 0, $0 + 8 | 0) | 0;
   }
   block2 : {
    if (!global$9) {
     if ($1) {
      break block2
     }
     $1 = (HEAP32[$0 + 12 >> 2] << 2) + 4 | 0;
    }
    if (!global$9 | ($2 | 0) == 21) {
     $4 = emscripten_builtin_malloc($1);
     $3 = 21;
     if ((global$9 | 0) == 1) {
      break block
     }
     $5 = $4;
    }
    if (!global$9) {
     HEAP32[19539] = $5;
     if (!$5) {
      break block2
     }
     $1 = HEAP32[$0 + 8 >> 2];
    }
    if (!global$9 | ($2 | 0) == 22) {
     $4 = emscripten_builtin_malloc($1);
     $3 = 22;
     if ((global$9 | 0) == 1) {
      break block
     }
     $5 = $4;
    }
    if (!global$9) {
     if ($5) {
      $1 = HEAP32[19539];
      HEAP32[$1 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] = 0;
      if (!(__wasi_environ_get($1 | 0, $5 | 0) | 0)) {
       break block2
      }
     }
     HEAP32[19539] = 0;
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $5;
  HEAP32[$4 + 12 >> 2] = $6;
  HEAP32[$4 + 16 >> 2] = $7;
  HEAP32[$4 + 20 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function __wasm_init_tls($0) {
  __tls_base = $0;
  HEAP8[$0 | 0] = 0;
  HEAP8[$0 + 1 | 0] = 0;
  HEAP8[$0 + 2 | 0] = 0;
  HEAP8[$0 + 3 | 0] = 0;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP8[$0 + 5 | 0] = 0;
  HEAP8[$0 + 6 | 0] = 0;
  HEAP8[$0 + 7 | 0] = 0;
 }
 
 function __wasm_init_memory() {
  block2 : {
   block1 : {
    switch (Atomics.compareExchange(HEAP32, 20097, 0, 1) | 0) {
    case 0:
     __tls_base = 1024;
     HEAP8[1024] = 0;
     HEAP8[1025] = 0;
     HEAP8[1026] = 0;
     HEAP8[1027] = 0;
     HEAP8[1028] = 0;
     HEAP8[1029] = 0;
     HEAP8[1030] = 0;
     HEAP8[1031] = 0;
     wasm2js_memory_init(0, 1040, 0, 13293);
     wasm2js_memory_fill(14333, 0, 27);
     wasm2js_memory_init(1, 14360, 0, 137);
     wasm2js_memory_fill(14497, 0, 27);
     wasm2js_memory_init(2, 14524, 0, 2355);
     wasm2js_memory_fill(16879, 0, 979);
     wasm2js_memory_init(3, 17858, 0, 45);
     wasm2js_memory_fill(17903, 0, 977);
     wasm2js_memory_init(4, 18880, 0, 43);
     wasm2js_memory_fill(18923, 0, 25);
     wasm2js_memory_init(5, 18948, 0, 39);
     wasm2js_memory_fill(18987, 0, 25);
     wasm2js_memory_init(6, 19012, 0, 39);
     wasm2js_memory_fill(19051, 0, 25);
     wasm2js_memory_init(7, 19076, 0, 39);
     wasm2js_memory_fill(19115, 0, 25);
     wasm2js_memory_init(8, 19140, 0, 39);
     wasm2js_memory_fill(19179, 0, 25);
     wasm2js_memory_init(9, 19204, 0, 39);
     wasm2js_memory_fill(19243, 0, 25);
     wasm2js_memory_init(10, 19268, 0, 39);
     wasm2js_memory_fill(19307, 0, 25);
     wasm2js_memory_init(11, 19332, 0, 39);
     wasm2js_memory_fill(19371, 0, 25);
     wasm2js_memory_init(12, 19396, 0, 39);
     wasm2js_memory_fill(19435, 0, 25);
     wasm2js_memory_init(13, 19460, 0, 39);
     wasm2js_memory_fill(19499, 0, 25);
     wasm2js_memory_init(14, 19524, 0, 39);
     wasm2js_memory_fill(19563, 0, 25);
     wasm2js_memory_init(15, 19588, 0, 39);
     wasm2js_memory_fill(19627, 0, 25);
     wasm2js_memory_init(16, 19652, 0, 39);
     wasm2js_memory_fill(19691, 0, 25);
     wasm2js_memory_init(17, 19716, 0, 39);
     wasm2js_memory_fill(19755, 0, 25);
     wasm2js_memory_init(18, 19780, 0, 167);
     wasm2js_memory_fill(19947, 0, 25);
     wasm2js_memory_init(19, 19972, 0, 39);
     wasm2js_memory_fill(20011, 0, 25);
     wasm2js_memory_init(20, 20036, 0, 39);
     wasm2js_memory_fill(20075, 0, 25);
     wasm2js_memory_init(21, 20100, 0, 39);
     wasm2js_memory_fill(20139, 0, 25);
     wasm2js_memory_init(22, 20164, 0, 39);
     wasm2js_memory_fill(20203, 0, 25);
     wasm2js_memory_init(23, 20228, 0, 39);
     wasm2js_memory_fill(20267, 0, 25);
     wasm2js_memory_init(24, 20292, 0, 39);
     wasm2js_memory_fill(20331, 0, 25);
     wasm2js_memory_init(25, 20356, 0, 39);
     wasm2js_memory_fill(20395, 0, 25);
     wasm2js_memory_init(26, 20420, 0, 39);
     wasm2js_memory_fill(20459, 0, 25);
     wasm2js_memory_init(27, 20484, 0, 39);
     wasm2js_memory_fill(20523, 0, 25);
     wasm2js_memory_init(28, 20548, 0, 39);
     wasm2js_memory_fill(20587, 0, 25);
     wasm2js_memory_init(29, 20612, 0, 39);
     wasm2js_memory_fill(20651, 0, 25);
     wasm2js_memory_init(30, 20676, 0, 39);
     wasm2js_memory_fill(20715, 0, 25);
     wasm2js_memory_init(31, 20740, 0, 39);
     wasm2js_memory_fill(20779, 0, 25);
     wasm2js_memory_init(32, 20804, 0, 1124);
     wasm2js_memory_fill(21928, 0, 56);
     wasm2js_memory_init(33, 21984, 0, 118);
     wasm2js_memory_fill(22102, 0, 54);
     wasm2js_memory_init(34, 22156, 0, 131);
     wasm2js_memory_fill(22287, 0, 49);
     wasm2js_memory_init(35, 22336, 0, 658);
     wasm2js_memory_fill(22994, 0, 31);
     wasm2js_memory_init(36, 23025, 0, 140);
     wasm2js_memory_fill(23165, 0, 35);
     wasm2js_memory_init(37, 23200, 0, 149);
     wasm2js_memory_fill(23349, 0, 28);
     wasm2js_memory_init(38, 23377, 0, 149);
     wasm2js_memory_fill(23526, 0, 298);
     wasm2js_memory_init(39, 23824, 0, 3938);
     wasm2js_memory_fill(27762, 0, 25);
     wasm2js_memory_init(40, 27787, 0, 33);
     wasm2js_memory_fill(27820, 0, 25);
     wasm2js_memory_init(41, 27845, 0, 33);
     wasm2js_memory_fill(27878, 0, 25);
     wasm2js_memory_init(42, 27903, 0, 42);
     wasm2js_memory_fill(27945, 0, 25);
     wasm2js_memory_init(43, 27970, 0, 14);
     wasm2js_memory_fill(27984, 0, 35);
     wasm2js_memory_init(44, 28019, 0, 33);
     wasm2js_memory_fill(28052, 0, 25);
     wasm2js_memory_init(45, 28077, 0, 1574);
     wasm2js_memory_fill(29651, 0, 45);
     wasm2js_memory_init(46, 29696, 0, 2);
     wasm2js_memory_fill(29698, 0, 26);
     wasm2js_memory_init(47, 29724, 0, 890);
     wasm2js_memory_fill(30614, 0, 526);
     wasm2js_memory_init(48, 31140, 0, 505);
     wasm2js_memory_fill(31645, 0, 515);
     wasm2js_memory_init(49, 32160, 0, 2);
     wasm2js_memory_fill(32162, 0, 530);
     wasm2js_memory_init(50, 32692, 0, 505);
     wasm2js_memory_fill(33197, 0, 515);
     wasm2js_memory_init(51, 33712, 0, 829);
     wasm2js_memory_fill(34541, 0, 519);
     wasm2js_memory_init(52, 35060, 0, 7700);
     wasm2js_memory_fill(42760, 0, 48);
     wasm2js_memory_init(53, 42808, 0, 593);
     wasm2js_memory_init(54, 43408, 0, 9);
     wasm2js_memory_fill(43417, 0, 41);
     wasm2js_memory_init(55, 43458, 0, 5944);
     wasm2js_memory_fill(49402, 0, 33);
     wasm2js_memory_init(56, 49435, 0, 1315);
     wasm2js_memory_fill(50750, 0, 866);
     wasm2js_memory_init(57, 51616, 0, 52);
     wasm2js_memory_fill(51668, 0, 148);
     wasm2js_memory_init(58, 51816, 0, 49);
     wasm2js_memory_fill(51865, 0, 55);
     wasm2js_memory_init(59, 51920, 0, 89);
     wasm2js_memory_fill(52009, 0, 63);
     wasm2js_memory_init(60, 52072, 0, 92);
     wasm2js_memory_fill(52164, 0, 60);
     wasm2js_memory_init(61, 52224, 0, 58);
     wasm2js_memory_fill(52282, 0, 26);
     wasm2js_memory_init(62, 52308, 0, 4);
     wasm2js_memory_fill(52312, 0, 64);
     wasm2js_memory_init(63, 52376, 0, 28);
     wasm2js_memory_fill(54512, 0, 25876);
     Atomics.store(HEAP32, 20097, 2);
     Atomics.notify(HEAP32, 20097, 4294967295);
     break block2;
    case 1:
     break block1;
    default:
     break block2;
    };
   }
   wasm2js_atomic_wait_i32(0, 80388, 1, -1, -1) | 0;
  }
  wasm2js_data_drop(0);
  wasm2js_data_drop(1);
  wasm2js_data_drop(2);
  wasm2js_data_drop(3);
  wasm2js_data_drop(4);
  wasm2js_data_drop(5);
  wasm2js_data_drop(6);
  wasm2js_data_drop(7);
  wasm2js_data_drop(8);
  wasm2js_data_drop(9);
  wasm2js_data_drop(10);
  wasm2js_data_drop(11);
  wasm2js_data_drop(12);
  wasm2js_data_drop(13);
  wasm2js_data_drop(14);
  wasm2js_data_drop(15);
  wasm2js_data_drop(16);
  wasm2js_data_drop(17);
  wasm2js_data_drop(18);
  wasm2js_data_drop(19);
  wasm2js_data_drop(20);
  wasm2js_data_drop(21);
  wasm2js_data_drop(22);
  wasm2js_data_drop(23);
  wasm2js_data_drop(24);
  wasm2js_data_drop(25);
  wasm2js_data_drop(26);
  wasm2js_data_drop(27);
  wasm2js_data_drop(28);
  wasm2js_data_drop(29);
  wasm2js_data_drop(30);
  wasm2js_data_drop(31);
  wasm2js_data_drop(32);
  wasm2js_data_drop(33);
  wasm2js_data_drop(34);
  wasm2js_data_drop(35);
  wasm2js_data_drop(36);
  wasm2js_data_drop(37);
  wasm2js_data_drop(38);
  wasm2js_data_drop(39);
  wasm2js_data_drop(40);
  wasm2js_data_drop(41);
  wasm2js_data_drop(42);
  wasm2js_data_drop(43);
  wasm2js_data_drop(44);
  wasm2js_data_drop(45);
  wasm2js_data_drop(46);
  wasm2js_data_drop(47);
  wasm2js_data_drop(48);
  wasm2js_data_drop(49);
  wasm2js_data_drop(50);
  wasm2js_data_drop(51);
  wasm2js_data_drop(52);
  wasm2js_data_drop(53);
  wasm2js_data_drop(54);
  wasm2js_data_drop(55);
  wasm2js_data_drop(56);
  wasm2js_data_drop(57);
  wasm2js_data_drop(58);
  wasm2js_data_drop(59);
  wasm2js_data_drop(60);
  wasm2js_data_drop(61);
  wasm2js_data_drop(62);
  wasm2js_data_drop(63);
 }
 
 function step_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0.0, $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = Math_fround(0), $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = Math_fround(0), $48 = 0, $49 = 0, $50 = Math_fround(0), $51 = Math_fround(0), $52 = 0, $53 = Math_fround(0), $54 = 0.0, $55 = Math_fround(0), $56 = 0.0, $57 = Math_fround(0), $58 = 0.0, $59 = 0.0, $60 = Math_fround(0), $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 264;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $3 = HEAP32[$5 + 8 >> 2];
   $2 = HEAP32[$5 + 12 >> 2];
   $7 = HEAP32[$5 + 16 >> 2];
   $9 = HEAP32[$5 + 20 >> 2];
   $6 = HEAPF32[$5 + 24 >> 2];
   $14 = HEAP32[$5 + 28 >> 2];
   $10 = HEAP32[$5 + 32 >> 2];
   $11 = HEAP32[$5 + 36 >> 2];
   $12 = HEAP32[$5 + 40 >> 2];
   $13 = HEAP32[$5 + 44 >> 2];
   $15 = HEAP32[$5 + 48 >> 2];
   $18 = HEAP32[$5 + 52 >> 2];
   $17 = HEAP32[$5 + 56 >> 2];
   $16 = HEAP32[$5 + 60 >> 2];
   $19 = HEAP32[$5 + 64 >> 2];
   $20 = HEAP32[$5 + 68 >> 2];
   $23 = HEAP32[$5 + 72 >> 2];
   $21 = HEAP32[$5 + 76 >> 2];
   $22 = HEAP32[$5 + 80 >> 2];
   $24 = HEAP32[$5 + 84 >> 2];
   $27 = HEAP32[$5 + 88 >> 2];
   $25 = HEAPF32[$5 + 92 >> 2];
   $33 = HEAP32[$5 + 100 >> 2];
   $1 = HEAP32[$5 + 96 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $33 | 0);
   $26 = +wasm2js_scratch_load_f64();
   $30 = HEAP32[$5 + 104 >> 2];
   $28 = HEAP32[$5 + 108 >> 2];
   $29 = HEAPF32[$5 + 112 >> 2];
   $36 = HEAPF32[$5 + 116 >> 2];
   $32 = HEAP32[$5 + 120 >> 2];
   $31 = HEAP32[$5 + 124 >> 2];
   $33 = HEAP32[$5 + 128 >> 2];
   $35 = HEAP32[$5 + 132 >> 2];
   $34 = HEAP32[$5 + 136 >> 2];
   $38 = HEAP32[$5 + 140 >> 2];
   $39 = HEAP32[$5 + 144 >> 2];
   $37 = HEAP32[$5 + 148 >> 2];
   $4 = HEAP32[$5 + 156 >> 2];
   $1 = HEAP32[$5 + 152 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $40 = +wasm2js_scratch_load_f64();
   $41 = HEAP32[$5 + 160 >> 2];
   $43 = HEAP32[$5 + 164 >> 2];
   $44 = HEAP32[$5 + 168 >> 2];
   $42 = HEAP32[$5 + 172 >> 2];
   $45 = HEAP32[$5 + 176 >> 2];
   $46 = HEAP32[$5 + 180 >> 2];
   $47 = HEAPF32[$5 + 184 >> 2];
   $48 = HEAP32[$5 + 188 >> 2];
   $49 = HEAP32[$5 + 192 >> 2];
   $51 = HEAPF32[$5 + 196 >> 2];
   $50 = HEAPF32[$5 + 200 >> 2];
   $4 = HEAP32[$5 + 208 >> 2];
   $1 = HEAP32[$5 + 204 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $56 = +wasm2js_scratch_load_f64();
   $53 = HEAPF32[$5 + 212 >> 2];
   $52 = HEAP32[$5 + 216 >> 2];
   $57 = HEAPF32[$5 + 220 >> 2];
   $4 = HEAP32[$5 + 228 >> 2];
   $1 = HEAP32[$5 + 224 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $54 = +wasm2js_scratch_load_f64();
   $4 = HEAP32[$5 + 236 >> 2];
   $1 = HEAP32[$5 + 232 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $59 = +wasm2js_scratch_load_f64();
   $60 = HEAPF32[$5 + 240 >> 2];
   $61 = HEAP32[$5 + 244 >> 2];
   $4 = HEAP32[$5 + 252 >> 2];
   $1 = HEAP32[$5 + 248 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $62 = +wasm2js_scratch_load_f64();
   $63 = HEAP32[$5 + 256 >> 2];
   $64 = HEAP32[$5 + 260 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$8) {
    $4 = GlobalState__inst_28_29();
    $5 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $37 = $4;
   }
   if (!global$9) {
    HEAP32[$37 >> 2] = HEAP32[14858];
    HEAP32[$37 + 4 >> 2] = HEAP32[14859];
    $0 = HEAP32[$37 >> 2];
   }
   if (!global$9 | ($8 | 0) == 1) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____operator___28int_29(77264, $0);
    $5 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9 | ($8 | 0) == 2) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2____put_character_sequence_5babi_ne190106_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__2c_20unsigned_20long_29($0, 13331, 1);
    $5 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   $1 = global$9 ? $1 : HEAP32[$37 + 4 >> 2];
   if (!global$9 | ($8 | 0) == 3) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____operator___28int_29($0, $1);
    $5 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9 | ($8 | 0) == 4) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2____put_character_sequence_5babi_ne190106_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__2c_20unsigned_20long_29($0, 14300, 1);
    $5 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    $6 = Math_fround(Math_fround(HEAPF32[15308] + HEAPF32[15304]) * HEAPF32[15306]);
    $25 = Math_fround(Math_abs($6));
    block1 : {
     if ($25 < Math_fround(2147483648.0)) {
      $0 = ~~$6;
      break block1;
     }
     $0 = -2147483648;
    }
   }
   if (!global$9 | ($8 | 0) == 5) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____operator___28int_29(77264, $0);
    $5 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9 | ($8 | 0) == 6) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2____put_character_sequence_5babi_ne190106_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__2c_20unsigned_20long_29($0, 13331, 1);
    $5 = 6;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $4;
   }
   if (!global$9) {
    $6 = Math_fround(Math_fround(HEAPF32[15309] + HEAPF32[15305]) * HEAPF32[15307]);
    $25 = Math_fround(Math_abs($6));
    block2 : {
     if ($25 < Math_fround(2147483648.0)) {
      $0 = ~~$6;
      break block2;
     }
     $0 = -2147483648;
    }
   }
   if (!global$9 | ($8 | 0) == 7) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____operator___28int_29($1, $0);
    $5 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9 | ($8 | 0) == 8) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2____put_character_sequence_5babi_ne190106_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__2c_20unsigned_20long_29($0, 14300, 1);
    $5 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9 | ($8 | 0) == 9) {
    Scene__inst_28_29();
    $5 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $0 = __stack_pointer;
    $37 = $0 - 48 | 0;
    __stack_pointer = $37;
   }
   if (!global$9 | ($8 | 0) == 10) {
    $4 = GlobalState__inst_28_29();
    $5 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9 | ($8 | 0) == 11) {
    Scene__inst_28_29();
    $5 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$37 + 24 >> 2] = 16711935;
    HEAP8[$37 + 44 | 0] = 255;
    HEAP8[$37 + 45 | 0] = 0;
    HEAP8[$37 + 46 | 0] = 255;
    HEAP8[$37 + 47 | 0] = 0;
    $0 = $37 + 24 | 0;
    $25 = Math_fround(Math_fround(HEAPU8[$0 + 1 | 0]) / Math_fround(255.0));
    $29 = Math_fround(Math_fround(HEAPU8[$0 + 2 | 0]) / Math_fround(255.0));
    $47 = Math_fround(Math_fround(HEAPU8[$0 + 3 | 0]) / Math_fround(255.0));
    glClearColor(Math_fround(Math_fround(Math_fround(HEAPU8[$0 | 0]) / Math_fround(255.0))), Math_fround($25), Math_fround($29), Math_fround($47));
    glClear(16640);
    $1 = __stack_pointer + -64 | 0;
    __stack_pointer = $1;
    $26 = +glfwGetTime();
    HEAPF64[7759] = $26;
    $40 = HEAPF64[7760];
    HEAPF64[7760] = $26;
    $26 = $26 - $40;
    HEAPF64[7761] = $26;
    $0 = HEAP32[14175];
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 >> 2] = 1065353216;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 1065353216;
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 1065353216;
    HEAP32[$0 + 52 >> 2] = 0;
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 1065353216;
    HEAPF32[$1 + 60 >> 2] = HEAPF32[14881];
    HEAPF32[$1 + 56 >> 2] = HEAPF32[14877];
    HEAPF32[$1 + 52 >> 2] = HEAPF32[14873];
    HEAPF32[$1 + 48 >> 2] = HEAPF32[14869];
    HEAPF32[$1 + 44 >> 2] = HEAPF32[14880];
    HEAPF32[$1 + 40 >> 2] = HEAPF32[14876];
    HEAPF32[$1 + 36 >> 2] = HEAPF32[14872];
    HEAPF32[$1 + 32 >> 2] = HEAPF32[14868];
    HEAPF32[$1 + 28 >> 2] = HEAPF32[14879];
    HEAPF32[$1 + 24 >> 2] = HEAPF32[14875];
    HEAPF32[$1 + 20 >> 2] = HEAPF32[14871];
    HEAPF32[$1 + 16 >> 2] = HEAPF32[14867];
    HEAPF32[$1 + 12 >> 2] = HEAPF32[14878];
    HEAPF32[$1 + 8 >> 2] = HEAPF32[14874];
    HEAPF32[$1 + 4 >> 2] = HEAPF32[14870];
    HEAPF32[$1 >> 2] = HEAPF32[14866];
    $2 = __stack_pointer - 256 | 0;
    __stack_pointer = $2;
    HEAPF32[$2 + 192 >> 2] = HEAPF32[$1 >> 2];
    HEAPF32[$2 + 196 >> 2] = HEAPF32[$1 + 16 >> 2];
    HEAPF32[$2 + 200 >> 2] = HEAPF32[$1 + 32 >> 2];
    HEAPF32[$2 + 204 >> 2] = HEAPF32[$1 + 48 >> 2];
    HEAPF32[$2 + 208 >> 2] = HEAPF32[$1 + 4 >> 2];
    HEAPF32[$2 + 212 >> 2] = HEAPF32[$1 + 20 >> 2];
    HEAPF32[$2 + 216 >> 2] = HEAPF32[$1 + 36 >> 2];
    HEAPF32[$2 + 220 >> 2] = HEAPF32[$1 + 52 >> 2];
    HEAPF32[$2 + 224 >> 2] = HEAPF32[$1 + 8 >> 2];
    HEAPF32[$2 + 228 >> 2] = HEAPF32[$1 + 24 >> 2];
    HEAPF32[$2 + 232 >> 2] = HEAPF32[$1 + 40 >> 2];
    HEAPF32[$2 + 236 >> 2] = HEAPF32[$1 + 56 >> 2];
    HEAPF32[$2 + 240 >> 2] = HEAPF32[$1 + 12 >> 2];
    HEAPF32[$2 + 244 >> 2] = HEAPF32[$1 + 28 >> 2];
    HEAPF32[$2 + 248 >> 2] = HEAPF32[$1 + 44 >> 2];
    $6 = HEAPF32[$1 + 60 >> 2];
    HEAPF32[$2 + 252 >> 2] = $6;
    $0 = HEAP32[14175];
    __memcpy($2 - -64 | 0, $2 + 192 | 0, 64);
    $2 = __memcpy($2, $0, 64);
    rlMatrixMultiply($2 + 128 | 0, $2 - -64 | 0, $2);
    __memcpy($0, $2 + 128 | 0, 64);
    __stack_pointer = $2 + 256 | 0;
    __stack_pointer = $1 - -64 | 0;
    HEAP32[$37 + 36 >> 2] = 1123024896;
    HEAP32[$37 + 40 >> 2] = 1106247680;
    HEAP32[$37 + 16 >> 2] = 1123024896;
    HEAP32[$37 + 20 >> 2] = 1106247680;
    HEAP32[$37 + 28 >> 2] = 1103101952;
    HEAP32[$37 + 32 >> 2] = 1103101952;
    HEAP32[$37 + 8 >> 2] = 1103101952;
    HEAP32[$37 + 12 >> 2] = 1103101952;
    $1 = $37 + 8 | 0;
    $3 = __stack_pointer - 160 | 0;
    __stack_pointer = $3;
    $7 = 3;
    $0 = HEAP32[13630];
    $2 = ($0 | 0) != 3;
    if ($2) {
     $2 = HEAPU8[54524];
     $11 = 0;
     block3 : {
      if ($2) {
       break block3
      }
      $2 = HEAPU8[56112];
      $11 = 0;
      if ($2) {
       break block3
      }
      $2 = $3 + 152 | 0;
      HEAPF32[$2 >> 2] = Math_fround(HEAPF32[15308] + HEAPF32[15304]) * HEAPF32[15306];
      $25 = HEAPF32[15307];
      HEAPF32[$2 + 4 >> 2] = Math_fround(HEAPF32[15309] + HEAPF32[15305]) * $25;
      $2 = HEAP32[$3 + 156 >> 2];
      $7 = HEAP32[$3 + 152 >> 2];
      HEAP32[$3 + 144 >> 2] = $7;
      HEAP32[$3 + 148 >> 2] = $2;
      HEAP32[$3 + 104 >> 2] = $7;
      HEAP32[$3 + 108 >> 2] = $2;
      $2 = HEAP32[$1 + 12 >> 2];
      HEAP32[$3 + 96 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$3 + 100 >> 2] = $2;
      $2 = HEAP32[$1 + 4 >> 2];
      HEAP32[$3 + 88 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$3 + 92 >> 2] = $2;
      $19 = $3 + 104 | 0;
      $6 = HEAPF32[$19 >> 2];
      $2 = $3 + 88 | 0;
      $29 = HEAPF32[$2 >> 2];
      block4 : {
       if (!($6 >= $29)) {
        break block4
       }
       $25 = Math_fround($29 + HEAPF32[$2 + 8 >> 2]);
       if (!($25 > $6)) {
        break block4
       }
       $6 = HEAPF32[$19 + 4 >> 2];
       $29 = HEAPF32[$2 + 4 >> 2];
       if (!($6 >= $29)) {
        break block4
       }
       $25 = Math_fround($29 + HEAPF32[$2 + 12 >> 2]);
       if (!($25 > $6)) {
        break block4
       }
       $15 = 1;
      }
      $2 = !$15;
      $11 = 0;
      if ($2) {
       break block3
      }
      $0 = HEAPU8[61388] == 1 | HEAPU8[61254] == 1 ? 2 : 1;
      $7 = 0;
      $7 = HEAPU8[61254] ? $7 : HEAPU8[61262] == 1;
      $2 = HEAPU8[61388];
      if (!$2) {
       $2 = HEAPU8[61396] == 1;
       $7 = $7 | $2;
      }
      $11 = $7 & 1;
     }
     $7 = $0;
    }
    $0 = HEAPU8[54525];
   }
   block5 : {
    if (!($0 ? global$9 : 1)) {
     $0 = HEAP32[13704];
     break block5;
    }
    if (!global$9 | ($8 | 0) == 12) {
     GuiLoadStyleDefault();
     $5 = 12;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $0 = HEAP32[13704];
     $2 = HEAPU8[54525];
     if ($2) {
      break block5
     }
    }
    if (!global$9 | ($8 | 0) == 13) {
     GuiLoadStyleDefault();
     $5 = 13;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    $19 = Math_imul($7, 3);
    $15 = $19 << 2;
    $22 = HEAP32[$15 + 54768 >> 2];
    GetColor($3 + 140 | 0, $22);
    $2 = !HEAPU8[54525];
   }
   if (!global$9 | ($8 | 0) == 14 ? (global$9 | 0) == 2 | $2 : 0) {
    GuiLoadStyleDefault();
    $5 = 14;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    GetColor($3 + 136 | 0, HEAP32[$15 + 54772 >> 2]);
    $15 = $1 + 8 | 0;
    $2 = HEAP32[$15 + 4 >> 2];
    HEAP32[$3 + 80 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$3 + 84 >> 2] = $2;
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 + 72 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 76 >> 2] = $2;
    HEAP32[$3 + 68 >> 2] = HEAPU8[$3 + 140 | 0] | HEAPU8[$3 + 141 | 0] << 8 | (HEAPU8[$3 + 142 | 0] << 16 | HEAPU8[$3 + 143 | 0] << 24);
    HEAP32[$3 + 64 >> 2] = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
    $22 = $3 + 68 | 0;
    $12 = $3 - -64 | 0;
    $2 = $3 + 72 | 0;
   }
   if (!global$9 | ($8 | 0) == 15) {
    GuiDrawRectangle_28Rectangle_2c_20int_2c_20Color_2c_20Color_29($2, $0, $22, $12);
    $5 = 15;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $0 = HEAP32[$15 + 4 >> 2];
    HEAP32[$3 + 56 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$3 + 60 >> 2] = $0;
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 + 48 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 52 >> 2] = $0;
    $2 = $3 + 48 | 0;
    $0 = $3 + 120 | 0;
   }
   if (!global$9 | ($8 | 0) == 16) {
    GetTextBounds_28int_2c_20Rectangle_29($0, 2, $2);
    $5 = 16;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : HEAPU8[54525];
   block6 : {
    if (!($0 ? global$9 : 1)) {
     $0 = HEAP32[13706];
     break block6;
    }
    if (!global$9 | ($8 | 0) == 17) {
     GuiLoadStyleDefault();
     $5 = 17;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $0 = HEAP32[13706];
     $2 = HEAPU8[54525];
     if ($2) {
      break block6
     }
    }
    if (!global$9 | ($8 | 0) == 18) {
     GuiLoadStyleDefault();
     $5 = 18;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    GetColor($3 + 116 | 0, HEAP32[($19 << 2) + 54776 >> 2]);
    $2 = HEAP32[$3 + 132 >> 2];
    HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 128 >> 2];
    HEAP32[$3 + 44 >> 2] = $2;
    $2 = HEAP32[$3 + 124 >> 2];
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 120 >> 2];
    HEAP32[$3 + 36 >> 2] = $2;
    HEAP32[$3 + 28 >> 2] = HEAPU8[$3 + 116 | 0] | HEAPU8[$3 + 117 | 0] << 8 | (HEAPU8[$3 + 118 | 0] << 16 | HEAPU8[$3 + 119 | 0] << 24);
    $22 = $3 + 28 | 0;
    $2 = $3 + 32 | 0;
   }
   if (!global$9 | ($8 | 0) == 19) {
    GuiDrawText_28char_20const__2c_20Rectangle_2c_20int_2c_20Color_29(7978, $2, $0, $22);
    $5 = 19;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : ($7 | 0) == 1;
   if ($0 | (global$9 | 0) == 2) {
    if (!global$9) {
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$3 + 20 >> 2] = $0;
     $0 = HEAP32[$1 + 4 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$3 + 12 >> 2] = $0;
     $7 = $3 + 8 | 0;
     $1 = __stack_pointer - 192 | 0;
     __stack_pointer = $1;
     $0 = HEAPU8[54524];
    }
    block7 : {
     if (!global$9) {
      if ($0) {
       break block7
      }
      $0 = !HEAPU8[56113];
      if ($0) {
       break block7
      }
      $0 = HEAP32[14029];
      $2 = !$0;
      if ($2) {
       break block7
      }
      $2 = HEAPU8[56112];
      if ($2) {
       break block7
      }
      $2 = HEAP32[13635];
      HEAP32[$1 + 112 >> 2] = HEAP32[13634];
      HEAP32[$1 + 116 >> 2] = $2;
      $2 = HEAP32[13637];
      HEAP32[$1 + 120 >> 2] = HEAP32[13636];
      HEAP32[$1 + 124 >> 2] = $2;
      $2 = HEAP32[13639];
      HEAP32[$1 + 128 >> 2] = HEAP32[13638];
      HEAP32[$1 + 132 >> 2] = $2;
      $2 = HEAP32[13641];
      HEAP32[$1 + 136 >> 2] = HEAP32[13640];
      HEAP32[$1 + 140 >> 2] = $2;
      $2 = HEAP32[13633];
      HEAP32[$1 + 104 >> 2] = HEAP32[13632];
      HEAP32[$1 + 108 >> 2] = $2;
      $2 = HEAPU8[54525];
     }
     block8 : {
      if (!($2 ? global$9 : 1)) {
       $15 = HEAP32[13660];
       break block8;
      }
      if (!global$9 | ($8 | 0) == 20) {
       GuiLoadStyleDefault();
       $5 = 20;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $15 = HEAP32[13660];
       $2 = HEAPU8[54525];
       if ($2) {
        break block8
       }
      }
      if (!global$9 | ($8 | 0) == 21) {
       GuiLoadStyleDefault();
       $5 = 21;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $2 = HEAP32[$1 + 116 >> 2];
      HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 112 >> 2];
      HEAP32[$1 + 76 >> 2] = $2;
      $2 = HEAP32[$1 + 124 >> 2];
      HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 120 >> 2];
      HEAP32[$1 + 84 >> 2] = $2;
      $2 = HEAP32[$1 + 132 >> 2];
      HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 128 >> 2];
      HEAP32[$1 + 92 >> 2] = $2;
      $2 = HEAP32[$1 + 140 >> 2];
      HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 136 >> 2];
      HEAP32[$1 + 100 >> 2] = $2;
      $2 = HEAP32[$1 + 108 >> 2];
      HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 104 >> 2];
      HEAP32[$1 + 68 >> 2] = $2;
      $13 = $1 - -64 | 0;
      $29 = Math_fround($15 | 0);
      $51 = Math_fround(HEAP32[13661]);
      $6 = Math_fround(0.0);
      $20 = __stack_pointer - 16 | 0;
      __stack_pointer = $20;
      $18 = $1 + 144 | 0;
      $2 = $18;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $12 = $0;
      $2 = !$0;
      block9 : {
       if ($2) {
        break block9
       }
       $22 = !HEAP32[$13 + 12 >> 2];
       $2 = $22 & HEAPU8[62136];
       if ($2) {
        break block9
       }
       $2 = !HEAPU8[$0 | 0];
       if ($2) {
        break block9
       }
       while (1) {
        $2 = $9;
        $9 = $2 + 1 | 0;
        $14 = HEAPU8[$0 + 1 | 0];
        $0 = $0 + 1 | 0;
        if ($14) {
         continue
        }
        break;
       };
       $55 = Math_fround($29 / Math_fround(HEAP32[$13 >> 2]));
       if ($2 >>> 0 > 2147483646) {
        $25 = Math_fround(-1.0)
       } else {
        $25 = Math_fround($29 + Math_fround(HEAP32[12965]));
        $15 = HEAP32[$13 + 32 >> 2];
        $10 = HEAP32[$13 + 36 >> 2];
        $22 = HEAP32[$13 + 4 >> 2];
        while (1) {
         HEAP32[$20 + 12 >> 2] = 0;
         $13 = GetCodepointNext($12 + $17 | 0, $20 + 12 | 0);
         $0 = 0;
         $14 = 0;
         block12 : {
          block10 : {
           if (($22 | 0) <= 0) {
            break block10
           }
           while (1) {
            block11 : {
             $2 = HEAP32[Math_imul($0, 36) + $10 >> 2];
             $23 = ($2 | 0) == 63;
             $14 = $23 ? $0 : $14;
             if (($2 | 0) == ($13 | 0)) {
              break block11
             }
             $0 = $0 + 1 | 0;
             if (($22 | 0) != ($0 | 0)) {
              continue
             }
             break block10;
            }
            break;
           };
           if ($0) {
            break block12
           }
          }
          $0 = HEAP32[$10 >> 2] != ($13 | 0) ? $14 : 0;
         }
         $17 = HEAP32[$20 + 12 >> 2] + $17 | 0;
         $2 = ($13 | 0) != 10;
         block13 : {
          if ($2) {
           $16 = $16 + 1 | 0;
           $2 = Math_imul($0, 36) + $10 | 0;
           $14 = HEAP32[$2 + 12 >> 2];
           $13 = ($14 | 0) > 0;
           if ($13) {
            $50 = Math_fround($14 >>> 0);
            $6 = Math_fround($6 + $50);
            break block13;
           }
           $53 = Math_fround(HEAP32[$2 + 4 >> 2]);
           $50 = Math_fround(HEAPF32[(($0 << 4) + $15 | 0) + 8 >> 2] + $53);
           $6 = Math_fround($6 + $50);
           break block13;
          }
          $36 = $6 > $36 ? $6 : $36;
          $29 = Math_fround($29 + $25);
          $16 = 0;
          $6 = Math_fround(0.0);
         }
         $21 = ($16 | 0) < ($21 | 0) ? $21 : $16;
         if (($9 | 0) > ($17 | 0)) {
          continue
         }
         break;
        };
        $25 = Math_fround($21 - 1 | 0);
       }
       HEAPF32[$18 + 4 >> 2] = $29;
       HEAPF32[$18 >> 2] = Math_fround(($6 > $36 ? $6 : $36) * $55) + Math_fround($51 * $25);
      }
      __stack_pointer = $20 + 16 | 0;
      $6 = HEAPF32[$7 >> 2];
      $47 = Math_fround(Math_fround($6 + HEAPF32[$1 + 144 >> 2]) + Math_fround(16.0));
      $36 = Math_fround(HEAPF32[$1 + 144 >> 2] + Math_fround(16.0));
      $6 = Math_fround(HEAP32[14852]) < $47 ? Math_fround($6 - Math_fround($36 - HEAPF32[$7 + 8 >> 2])) : $6;
      $25 = Math_fround(HEAPF32[$7 + 4 >> 2] + HEAPF32[$7 + 12 >> 2]);
      $29 = Math_fround($25 + Math_fround(4.0));
      $7 = 1;
      $0 = !HEAPU8[54525];
     }
     if ((global$9 | 0) == 2 | $0) {
      if (!global$9 | ($8 | 0) == 22) {
       GuiLoadStyleDefault();
       $5 = 22;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $7 = HEAPU8[54525]
      }
     }
     if (!global$9) {
      $0 = HEAP32[13660];
      HEAPF32[$1 + 184 >> 2] = $36;
      HEAPF32[$1 + 180 >> 2] = $29;
      HEAPF32[$1 + 176 >> 2] = $6;
      $25 = Math_fround(Math_fround($0 | 0) + Math_fround(8.0));
      HEAPF32[$1 + 188 >> 2] = $25;
      $0 = HEAP32[13630];
      $15 = ($0 | 0) == 3 ? 9 : 18;
      $2 = !($7 & 1);
     }
     if (!global$9 | ($8 | 0) == 23 ? (global$9 | 0) == 2 | $2 : 0) {
      GuiLoadStyleDefault();
      $5 = 23;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $7 = HEAP32[($15 << 2) + 54576 >> 2];
      GetColor($1 + 152 | 0, $7);
      $2 = !HEAPU8[54525];
     }
     if (!global$9 | ($8 | 0) == 24 ? (global$9 | 0) == 2 | $2 : 0) {
      GuiLoadStyleDefault();
      $5 = 24;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      GetColor($1 + 172 | 0, HEAP32[(($0 | 0) == 3 ? 54616 : 54652) >> 2]);
      $0 = HEAP32[$1 + 188 >> 2];
      HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 184 >> 2];
      HEAP32[$1 + 60 >> 2] = $0;
      $0 = HEAP32[$1 + 180 >> 2];
      HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 176 >> 2];
      HEAP32[$1 + 52 >> 2] = $0;
      HEAP32[$1 + 44 >> 2] = HEAPU8[$1 + 152 | 0] | HEAPU8[$1 + 153 | 0] << 8 | (HEAPU8[$1 + 154 | 0] << 16 | HEAPU8[$1 + 155 | 0] << 24);
      HEAP32[$1 + 40 >> 2] = HEAPU8[$1 + 172 | 0] | HEAPU8[$1 + 173 | 0] << 8 | (HEAPU8[$1 + 174 | 0] << 16 | HEAPU8[$1 + 175 | 0] << 24);
      $2 = $1 + 44 | 0;
      $7 = $1 + 40 | 0;
      $0 = $1 + 48 | 0;
     }
     if (!global$9 | ($8 | 0) == 25) {
      GuiDrawRectangle_28Rectangle_2c_20int_2c_20Color_2c_20Color_29($0, 1, $2, $7);
      $5 = 25;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : HEAPU8[54525];
     block18 : {
      block17 : {
       block16 : {
        block15 : {
         block14 : {
          if (!($0 ? global$9 : 1)) {
           $7 = HEAP32[13681];
           break block14;
          }
          if (!global$9 | ($8 | 0) == 26) {
           GuiLoadStyleDefault();
           $5 = 26;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $7 = HEAP32[13681];
           $0 = !HEAPU8[54525];
           if ($0) {
            break block15
           }
          }
         }
         if (!global$9) {
          $0 = HEAP32[13682];
          break block16;
         }
        }
        if (!global$9 | ($8 | 0) == 27) {
         GuiLoadStyleDefault();
         $5 = 27;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         $0 = HEAP32[13682];
         $2 = HEAPU8[54525];
         if ($2) {
          break block16
         }
        }
        if (!global$9 | ($8 | 0) == 28) {
         GuiLoadStyleDefault();
         $5 = 28;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         HEAP32[13681] = 0;
         $2 = HEAPU8[54525];
         if ($2) {
          break block17
         }
        }
        if (!global$9 | ($8 | 0) == 29) {
         GuiLoadStyleDefault();
         $5 = 29;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         HEAP32[13682] = 1;
         $36 = HEAPF32[$1 + 144 >> 2];
         $2 = HEAPU8[54525];
         if ($2) {
          break block18
         }
        }
        if (!global$9 | ($8 | 0) == 30) {
         GuiLoadStyleDefault();
         $5 = 30;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         break block18
        }
       }
       if (!global$9) {
        HEAP32[13681] = 0
       }
      }
      if (!global$9) {
       HEAP32[13682] = 1;
       $36 = HEAPF32[$1 + 144 >> 2];
      }
     }
     if (!global$9) {
      $15 = HEAP32[14029];
      $2 = HEAP32[13660];
      $19 = $1 + 160 | 0;
      HEAPF32[$19 >> 2] = $36 + Math_fround(16.0);
      $25 = Math_fround(Math_fround($2 | 0) + Math_fround(8.0));
      HEAPF32[$1 + 164 >> 2] = $25;
      $2 = HEAP32[$19 + 4 >> 2];
      HEAP32[$1 + 32 >> 2] = HEAP32[$19 >> 2];
      HEAP32[$1 + 36 >> 2] = $2;
      HEAPF32[$1 + 156 >> 2] = $29;
      HEAPF32[$1 + 152 >> 2] = $6;
      $2 = HEAP32[$1 + 156 >> 2];
      HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 152 >> 2];
      HEAP32[$1 + 28 >> 2] = $2;
      $23 = HEAP32[13630];
      $17 = $1 + 24 | 0;
      $2 = $1 + 176 | 0;
     }
     if (!global$9 | ($8 | 0) == 31) {
      GetTextBounds_28int_2c_20Rectangle_29($2, 1, $17);
      $5 = 31;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : HEAPU8[54525];
     block19 : {
      if (!($2 ? global$9 : 1)) {
       $19 = HEAP32[13682];
       break block19;
      }
      if (!global$9 | ($8 | 0) == 32) {
       GuiLoadStyleDefault();
       $5 = 32;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $19 = HEAP32[13682];
       $2 = HEAPU8[54525];
       if ($2) {
        break block19
       }
      }
      if (!global$9 | ($8 | 0) == 33) {
       GuiLoadStyleDefault();
       $5 = 33;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      GetColor($1 + 172 | 0, HEAP32[Math_imul($23, 12) + 54680 >> 2]);
      $2 = HEAP32[$1 + 188 >> 2];
      HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 184 >> 2];
      HEAP32[$1 + 20 >> 2] = $2;
      $2 = HEAP32[$1 + 180 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 176 >> 2];
      HEAP32[$1 + 12 >> 2] = $2;
      HEAP32[$1 + 4 >> 2] = HEAPU8[$1 + 172 | 0] | HEAPU8[$1 + 173 | 0] << 8 | (HEAPU8[$1 + 174 | 0] << 16 | HEAPU8[$1 + 175 | 0] << 24);
      $17 = $1 + 4 | 0;
      $2 = $1 + 8 | 0;
     }
     if (!global$9 | ($8 | 0) == 34) {
      GuiDrawText_28char_20const__2c_20Rectangle_2c_20int_2c_20Color_29($15, $2, $19, $17);
      $5 = 34;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : HEAPU8[54525];
     block20 : {
      if (!($2 ? global$9 : 1)) {
       HEAP32[13682] = $0;
       break block20;
      }
      if (!global$9 | ($8 | 0) == 35) {
       GuiLoadStyleDefault();
       $5 = 35;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       HEAP32[13682] = $0;
       $0 = HEAPU8[54525];
       if ($0) {
        break block20
       }
      }
      if (!global$9 | ($8 | 0) == 36) {
       GuiLoadStyleDefault();
       $5 = 36;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      HEAP32[13681] = $7
     }
    }
    if (!global$9) {
     $0 = $1 + 192 | 0;
     __stack_pointer = $0;
    }
   }
   if (!global$9) {
    $0 = $3 + 160 | 0;
    __stack_pointer = $0;
   }
   if (!global$9 | ($8 | 0) == 37 ? (global$9 | 0) == 2 | $11 : 0) {
    $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2____put_character_sequence_5babi_ne190106_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__2c_20unsigned_20long_29(77264, 13333, 8);
    $5 = 37;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    $11 = 0;
    $19 = __stack_pointer - 288 | 0;
    __stack_pointer = $19;
    $0 = HEAP32[14160];
   }
   if (!global$9 | ($8 | 0) == 38) {
    rlDrawRenderBatch($0);
    $5 = 38;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : HEAPU8[62152];
   if ($0 | (global$9 | 0) == 2) {
    if (!global$9) {
     $26 = HEAPF64[7763];
     $6 = Math_fround(Math_fround($26) * Math_fround(1.0e3));
     block21 : {
      if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
       $0 = ~~$6 >>> 0;
       break block21;
      }
      $0 = 0;
     }
     $1 = HEAP32[15560];
     $3 = $0 + $1 | 0;
     HEAP32[15560] = $3;
     $0 = $3 >>> 0 >= 101;
    }
    if ((global$9 | 0) == 2 | $0) {
     if (!global$9 | ($8 | 0) == 39) {
      TraceLog(4, 5176, 0);
      $5 = 39;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $6 = Math_fround(HEAPU32[14859]);
      block22 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $3 = ~~$6;
        break block22;
       }
       $3 = -2147483648;
      }
      $6 = Math_fround(HEAPU32[14858]);
      $25 = Math_fround(Math_abs($6));
      block23 : {
       if ($25 < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block23;
       }
       $0 = -2147483648;
      }
     }
     if (!global$9 | ($8 | 0) == 40) {
      $4 = rlReadScreenPixels($0, $3);
      $5 = 40;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $4;
     }
     if (!global$9) {
      $23 = $3;
      $49 = HEAPU32[15560] / 10 | 0;
      $6 = Math_fround(HEAPU32[14858]);
      $25 = Math_fround(Math_abs($6));
      block24 : {
       if ($25 < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block24;
       }
       $0 = -2147483648;
      }
      $10 = $0 << 2;
      $44 = __stack_pointer - 131872 | 0;
      __stack_pointer = $44;
      $0 = !HEAP32[15554];
     }
     block25 : {
      if (!global$9) {
       if ($0) {
        break block25
       }
       $0 = HEAP32[14840];
       $41 = $0 ? 14352 : 14512;
       $42 = $0 ? 14512 : 14352;
       $0 = HEAP32[15543];
       $0 = HEAP32[15542] + (160 / ((($0 | 0) <= 1 ? 1 : $0) >>> 0) | 0) | 0;
       $18 = ($0 | 0) > 16 ? 16 : $0;
       $10 = $10 ? $10 : HEAP32[15556] << 2;
       $32 = HEAP32[15557];
       $4 = (Math_imul($10, 1 - $32 | 0) & $10 >> 31) + $23 | 0;
       $2 = HEAP32[15556];
       $38 = Math_imul($32, $2);
       $35 = HEAP32[15547];
       block29 : {
        while (1) {
         $0 = $18 << 2;
         $14 = HEAP32[$0 + 14432 >> 2];
         $1 = $0 + $41 | 0;
         $12 = HEAP32[$1 >> 2];
         $13 = HEAP32[$0 + $42 >> 2];
         $33 = $12 + ($13 + $14 | 0) | 0;
         $7 = 1 << $33;
         $21 = __memset($44, 0, $7 + 1 | 0);
         if (($32 | 0) > 0) {
          $1 = -1 << $12;
          $6 = Math_fround(Math_fround(Math_fround(Math_fround(255.0) - Math_fround((-1 << 8 - $13 ^ -1) >>> 0)) / Math_fround(255.0)) * Math_fround(257.0));
          block26 : {
           if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
            $30 = ~~$6;
            break block26;
           }
           $30 = -2147483648;
          }
          $23 = -1 << $14;
          $1 = $1 ^ -1;
          $39 = 16 - $13 | 0;
          $6 = Math_fround(Math_fround(Math_fround(Math_fround(255.0) - Math_fround((-1 << 8 - $14 ^ -1) >>> 0)) / Math_fround(255.0)) * Math_fround(257.0));
          block27 : {
           if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
            $0 = ~~$6;
            break block27;
           }
           $0 = -2147483648;
          }
          $23 = $23 ^ -1;
          $1 = $1 << $13;
          $16 = $39 - $14 | 0;
          $6 = Math_fround(Math_fround(Math_fround(Math_fround(255.0) - Math_fround((-1 << 8 - $12 ^ -1) >>> 0)) / Math_fround(255.0)) * Math_fround(257.0));
          $25 = Math_fround(Math_abs($6));
          block28 : {
           if ($25 < Math_fround(2147483648.0)) {
            $34 = ~~$6;
            break block28;
           }
           $34 = -2147483648;
          }
          $27 = $23 << $13;
          $45 = $1 << $14;
          $46 = $16 - $12 | 0;
          $24 = 0;
          while (1) {
           if (($2 | 0) > 0) {
            $28 = $24 << 2 & 12;
            $22 = $4 + Math_imul($10, $24) | 0;
            $17 = (Math_imul($2, $24) << 2) + $35 | 0;
            $15 = 0;
            while (1) {
             $1 = $7;
             $23 = $15 << 2;
             $5 = $23 + $22 | 0;
             $48 = HEAPU8[$5 + 3 | 0];
             $20 = ($48 | 0) >= HEAP32[14839];
             if ($20) {
              $9 = HEAP32[(($15 & 3 | $28) << 2) + 14592 >> 2];
              $1 = Math_imul($0, HEAPU8[$5 + 1 | 0]) + ($9 >> $14) | 0;
              $48 = (($1 | 0) >= 65535 ? 65535 : $1) >> $16 & $27;
              $1 = Math_imul(HEAPU8[$5 + 2 | 0], $34) + ($9 >> $12) | 0;
              $52 = ($1 | 0) >= 65535;
              $20 = ($52 ? 65535 : $1) >> $46 & $45 | $48;
              $1 = Math_imul(HEAPU8[$5 | 0], $30) + ($9 >> $13) | 0;
              $1 = $20 | (($1 | 0) >= 65535 ? 65535 : $1) >> $39;
             }
             $9 = $17 + $23 | 0;
             HEAP32[$9 >> 2] = $1;
             $15 = $15 + 1 | 0;
             if (($15 | 0) != ($2 | 0)) {
              continue
             }
             break;
            };
           }
           $24 = $24 + 1 | 0;
           $1 = ($32 | 0) != ($24 | 0);
           if ($1) {
            continue
           }
           break;
          };
         }
         $15 = 0;
         if (($38 | 0) > 0) {
          while (1) {
           HEAP8[HEAP32[($15 << 2) + $35 >> 2] + $21 | 0] = 1;
           $15 = $15 + 1 | 0;
           if (($38 | 0) != ($15 | 0)) {
            continue
           }
           break;
          }
         }
         if (($33 | 0) == 31) {
          $23 = 0;
          break block29;
         }
         $1 = ($7 | 0) <= 1 ? 1 : $7;
         $23 = 0;
         $15 = 0;
         while (1) {
          $23 = HEAPU8[$15 + $21 | 0] + $23 | 0;
          $15 = $15 + 1 | 0;
          if (($15 | 0) != ($1 | 0)) {
           continue
          }
          break;
         };
         if ($23 >>> 0 <= 255) {
          break block29
         }
         $18 = $18 - 1 | 0;
         if ($18) {
          continue
         }
         break;
        };
        $12 = HEAP32[$41 >> 2];
        $13 = HEAP32[$42 >> 2];
        $14 = 0;
        $18 = 0;
       }
       HEAP32[15552] = $12;
       HEAP32[15551] = $14;
       HEAP32[15550] = $13;
       HEAP32[15549] = $23;
       HEAP32[15548] = $18;
       HEAP32[15547] = $35;
       $39 = HEAP32[15553];
       $18 = HEAP32[15557];
       $43 = HEAP32[15556];
       $33 = Math_imul($18, $43);
       $0 = ((Math_imul($33, 3) | 0) / 2 | 0) + 808 | 0;
      }
      if (!global$9 | ($8 | 0) == 41) {
       $4 = emscripten_builtin_malloc($0);
       $5 = 41;
       if ((global$9 | 0) == 1) {
        break block
       }
       $16 = $4;
      }
      block35 : {
       if ((global$9 | 0) == 2 | $16) {
        if (!global$9) {
         $15 = 0;
         __memset($21 + 65552 | 0, 0, 768);
         $20 = $14 + $13 | 0;
         $0 = $20 + $12 | 0;
         $10 = 1 << $0;
         HEAP8[$10 + ($21 + 66320 | 0) | 0] = 0;
         $23 = 1;
         if (($0 | 0) != 31) {
          $34 = ($10 | 0) <= 1 ? 1 : $10;
          $27 = Math_imul($12, 3);
          $9 = $12 << 1;
          $17 = Math_imul($14, 3);
          $22 = $14 << 1;
          $7 = Math_imul($13, 3);
          $45 = $13 << 1;
          $46 = 8 - $12 | 0;
          $24 = 8 - $14 | 0;
          $32 = 8 - $13 | 0;
          $38 = HEAP32[14840];
          while (1) {
           if (HEAPU8[$15 + $21 | 0]) {
            HEAP8[($21 + 66320 | 0) + $15 | 0] = $23;
            $28 = ($21 + 65552 | 0) + Math_imul($23, 3) | 0;
            $0 = $15 >>> $20 << $46;
            $1 = $0 >> $12 | $0 >> $9 | $0 >> $27 | $0;
            HEAP8[$28 + 2 | 0] = $1;
            $0 = $15 << $32;
            $2 = $0 & 255;
            $2 = $2 >>> $7 | ($2 >>> $13 | $2 >>> $45) | $0;
            HEAP8[$28 | 0] = $2;
            $0 = $15 >>> $13 << $24;
            $4 = $0 & 255;
            $42 = $4 >>> $22 | 0;
            $41 = $42 | $4 >>> $14;
            HEAP8[$28 + 1 | 0] = $41 | $4 >>> $17 | $0;
            if ($38) {
             HEAP8[$28 + 2 | 0] = $2;
             HEAP8[$28 | 0] = $1;
            }
            $23 = $23 + 1 | 0;
           }
           $15 = $15 + 1 | 0;
           if (($34 | 0) != ($15 | 0)) {
            continue
           }
           break;
          };
         }
         $0 = 32 - Math_clz32($23 - 1 | 0) | 0;
         $2 = $0 >>> 0 <= 2 ? 2 : $0;
         $0 = HEAPU8[$10 + $21 | 0];
         $15 = 0;
         $15 = HEAP32[15544] == ($13 | 0) ? HEAP32[15545] == ($14 | 0) & HEAP32[15546] == ($12 | 0) : $15;
         $12 = 1 << $2;
         $30 = HEAP32[15541];
         $13 = !$0 & $15;
         if (!(!$0 | HEAP32[15559] <= 0)) {
          HEAP8[HEAP32[15555] + 11 | 0] = 9
         }
         HEAP8[$16 + 12 | 0] = $49;
         HEAP8[$16 + 13 | 0] = $49 >>> 8;
         HEAP8[$16 + 8 | 0] = 33;
         HEAP8[$16 + 9 | 0] = 249;
         HEAP8[$16 + 10 | 0] = 4;
         HEAP8[$16 + 11 | 0] = 5;
         HEAP8[$16 + 23 | 0] = $18;
         HEAP8[$16 + 24 | 0] = $18 >>> 8;
         HEAP8[$16 + 21 | 0] = $43;
         HEAP8[$16 + 22 | 0] = $43 >>> 8;
         $15 = 0;
         $0 = HEAPU16[7331] | HEAPU16[7332] << 16;
         HEAP8[$16 + 14 | 0] = $0;
         HEAP8[$16 + 15 | 0] = $0 >>> 8;
         HEAP8[$16 + 16 | 0] = $0 >>> 16;
         HEAP8[$16 + 17 | 0] = $0 >>> 24;
         $0 = HEAPU8[14665] | HEAPU8[14666] << 8 | (HEAPU8[14667] << 16 | HEAPU8[14668] << 24);
         HEAP8[$16 + 17 | 0] = $0;
         HEAP8[$16 + 18 | 0] = $0 >>> 8;
         HEAP8[$16 + 19 | 0] = $0 >>> 16;
         HEAP8[$16 + 20 | 0] = $0 >>> 24;
         HEAP8[$16 + 25 | 0] = $2 - 1 | 128;
         $0 = 3 << $2;
         $1 = __memcpy($16 + 26 | 0, $21 + 65552 | 0, $0) + $0 | 0;
         HEAP8[$1 | 0] = $2;
         __memset($1 + 5 | 0, 0, 256);
         HEAP8[$1 + 1 | 0] = 255;
         $34 = $23 << 13;
         $28 = __memset($39, 255, $34);
         HEAP8[$1 + 4 | 0] = $12 >>> 16;
         HEAP8[$1 + 3 | 0] = $12 >>> 8;
         HEAP8[$1 + 2 | 0] = $12;
         $27 = $12 + 1 | 0;
         $22 = Math_clz32($27);
         $0 = HEAP32[$35 >> 2];
         if (!(($0 | 0) == HEAP32[$30 >> 2] ? $13 : 0)) {
          $15 = HEAPU8[$0 + ($21 + 66320 | 0) | 0]
         }
         $2 = $1 + 1 | 0;
         $0 = $12 + 2 | 0;
         $1 = 40 - $22 | 0;
         $9 = 1;
         block32 : {
          if (($33 | 0) <= 1) {
           $7 = $0;
           break block32;
          }
          $7 = $0;
          while (1) {
           $20 = $9 << 2;
           $14 = HEAP32[$20 + $35 >> 2];
           $4 = (Math_imul($15, $23) << 1) + $28 | 0;
           block33 : {
            if ($13) {
             $10 = ($14 | 0) == HEAP32[$20 + $30 >> 2];
             $22 = 0;
             if ($10) {
              break block33
             }
            }
            $22 = HEAPU8[$14 + ($21 + 66320 | 0) | 0];
           }
           $20 = $4 + ($22 << 1) | 0;
           $17 = HEAP16[$20 >> 1];
           $14 = ($17 | 0) < 0;
           block34 : {
            if ($14) {
             $14 = ($1 >>> 3 | 0) + $2 | 0;
             $17 = $1 & 7;
             HEAP8[$14 | 0] = HEAPU8[$14 | 0] | $15 << $17;
             $24 = $15 >>> 8 - $17 | 0;
             HEAP8[$14 + 1 | 0] = $24 | HEAPU8[$14 + 1 | 0];
             $4 = $14;
             $10 = HEAPU8[$14 + 2 | 0];
             $14 = 16 - $17 | 0;
             HEAP8[$4 + 2 | 0] = $10 | $15 >>> $14;
             $17 = 32 - Math_clz32($7 - 1 | 0) | 0;
             $1 = $17 + $1 | 0;
             if ($1 >>> 0 >= 2048) {
              $15 = HEAPU8[$2 + 256 | 0] | HEAPU8[$2 + 257 | 0] << 8;
              HEAP8[$2 + 256 | 0] = 255;
              HEAP8[$2 + 257 | 0] = $15;
              HEAP8[$2 + 258 | 0] = $15 >>> 8;
              __memset($2 + 260 | 0, 0, 256);
              $1 = $1 - 2040 | 0;
              $2 = $2 + 256 | 0;
             }
             if (($7 | 0) >= 4096) {
              $15 = ($1 >>> 3 | 0) + $2 | 0;
              $7 = $1 & 7;
              HEAP8[$15 | 0] = HEAPU8[$15 | 0] | $12 << $7;
              $10 = $12 >>> 8 - $7 | 0;
              HEAP8[$15 + 1 | 0] = $10 | HEAPU8[$15 + 1 | 0];
              $14 = HEAPU8[$15 + 2 | 0];
              HEAP8[$15 + 2 | 0] = $14 | $12 >>> 16 - $7;
              $1 = $1 + $17 | 0;
              if ($1 >>> 0 >= 2048) {
               $7 = HEAPU8[$2 + 256 | 0] | HEAPU8[$2 + 257 | 0] << 8;
               HEAP8[$2 + 256 | 0] = 255;
               HEAP8[$2 + 257 | 0] = $7;
               HEAP8[$2 + 258 | 0] = $7 >>> 8;
               __memset($2 + 260 | 0, 0, 256);
               $1 = $1 - 2040 | 0;
               $2 = $2 + 256 | 0;
              }
              __memset($28, 255, $34);
              $7 = $0;
              break block34;
             }
             HEAP16[$20 >> 1] = $7;
             $7 = $7 + 1 | 0;
             break block34;
            }
            $22 = $17;
           }
           $15 = $22;
           $9 = $9 + 1 | 0;
           if (($33 | 0) != ($9 | 0)) {
            continue
           }
           break;
          };
         }
         $0 = ($1 >>> 3 | 0) + $2 | 0;
         $9 = $1 & 7;
         HEAP8[$0 | 0] = HEAPU8[$0 | 0] | $15 << $9;
         HEAP8[$0 + 1 | 0] = HEAPU8[$0 + 1 | 0] | $15 >>> 8 - $9;
         HEAP8[$0 + 2 | 0] = HEAPU8[$0 + 2 | 0] | $15 >>> 16 - $9;
         $0 = 32 - Math_clz32($7 - 1 | 0) | 0;
         $23 = ($0 >>> 0 >= 12 ? 12 : $0) + $1 | 0;
         if ($23 >>> 0 >= 2048) {
          $0 = HEAPU8[$2 + 256 | 0] | HEAPU8[$2 + 257 | 0] << 8;
          HEAP8[$2 + 256 | 0] = 255;
          HEAP8[$2 + 257 | 0] = $0;
          HEAP8[$2 + 258 | 0] = $0 >>> 8;
          __memset($2 + 260 | 0, 0, 256);
          $23 = $23 - 2040 | 0;
          $2 = $2 + 256 | 0;
         }
         $15 = ($23 >>> 3 | 0) + $2 | 0;
         $0 = $23 & 7;
         HEAP8[$15 | 0] = HEAPU8[$15 | 0] | $27 << $0;
         $17 = $27 >>> 8 - $0 | 0;
         HEAP8[$15 + 1 | 0] = $17 | HEAPU8[$15 + 1 | 0];
         $1 = $27 >>> 16 - $0 | 0;
         HEAP8[$15 + 2 | 0] = $1 | HEAPU8[$15 + 2 | 0];
         $0 = 32 - Math_clz32($7) | 0;
         $15 = ($0 >>> 0 >= 12 ? 12 : $0) + $23 | 0;
         if ($15 >>> 0 >= 2048) {
          $0 = HEAPU8[$2 + 256 | 0] | HEAPU8[$2 + 257 | 0] << 8;
          HEAP8[$2 + 256 | 0] = 255;
          HEAP8[$2 + 257 | 0] = $0;
          HEAP8[$2 + 258 | 0] = $0 >>> 8;
          __memset($2 + 260 | 0, 0, 256);
          $15 = $15 - 2040 | 0;
          $2 = $2 + 256 | 0;
         }
         $0 = $16 + 8 | 0;
         if ($15 >>> 0 > 8) {
          $15 = $15 + 7 >>> 3 | 0;
          HEAP8[$2 | 0] = $15 - 1;
          $2 = $2 + $15 | 0;
         }
         HEAP8[$2 | 0] = 0;
         HEAP32[$16 >> 2] = 0;
         $23 = $2 - $0 | 0;
         HEAP32[$16 + 4 >> 2] = $23 + 1;
         $0 = $23 + 9 | 0;
        }
        if (!global$9 | ($8 | 0) == 42) {
         $4 = emscripten_builtin_realloc($16, $0);
         $5 = 42;
         if ((global$9 | 0) == 1) {
          break block
         }
         $23 = $4;
        }
        if (!($23 ? global$9 : 1)) {
         break block35
        }
        if (!global$9 | ($8 | 0) == 43) {
         emscripten_builtin_free($16);
         $5 = 43;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
       }
       if (!global$9 | ($8 | 0) == 44) {
        msf_free_gif_state();
        $5 = 44;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        break block25
       }
      }
      if (!global$9) {
       HEAP32[HEAP32[15555] >> 2] = $23;
       HEAP32[15555] = $23;
       $0 = HEAP32[15546];
       $1 = $21 + 66336 | 0;
       HEAP32[$1 >> 2] = HEAP32[15545];
       HEAP32[$1 + 4 >> 2] = $0;
       $0 = HEAP32[15544];
       $2 = $21 + 66328 | 0;
       HEAP32[$2 >> 2] = HEAP32[15543];
       HEAP32[$2 + 4 >> 2] = $0;
       $0 = HEAP32[15542];
       HEAP32[$21 + 66320 >> 2] = HEAP32[15541];
       HEAP32[$21 + 66324 >> 2] = $0;
       $0 = HEAP32[15552];
       HEAP32[15545] = HEAP32[15551];
       HEAP32[15546] = $0;
       $0 = HEAP32[15550];
       HEAP32[15543] = HEAP32[15549];
       HEAP32[15544] = $0;
       $0 = HEAP32[15548];
       HEAP32[15541] = HEAP32[15547];
       HEAP32[15542] = $0;
       $0 = HEAP32[$1 + 4 >> 2];
       HEAP32[15551] = HEAP32[$1 >> 2];
       HEAP32[15552] = $0;
       $0 = HEAP32[$21 + 66324 >> 2];
       HEAP32[15547] = HEAP32[$21 + 66320 >> 2];
       HEAP32[15548] = $0;
       $0 = HEAP32[$2 + 4 >> 2];
       HEAP32[15549] = HEAP32[$2 >> 2];
       HEAP32[15550] = $0;
       $0 = HEAP32[15559] + 1 | 0;
       HEAP32[15559] = $0;
      }
     }
     if (!global$9) {
      __stack_pointer = $44 + 131872 | 0;
      $0 = HEAP32[15560] - 100 | 0;
      HEAP32[15560] = $0;
     }
     if (!global$9 | ($8 | 0) == 45) {
      emscripten_builtin_free($3);
      $5 = 45;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     $26 = +glfwGetTime();
     $26 = $26 + $26;
     $40 = Math_abs($26);
     block36 : {
      if ($40 < 2147483648.0) {
       $0 = ~~$26;
       break block36;
      }
      $0 = -2147483648;
     }
     $0 = ($0 & -2147483647) == 1;
    }
    if ((global$9 | 0) == 2 | $0) {
     if (!global$9) {
      HEAP8[$19 + 284 | 0] = 190;
      HEAP8[$19 + 285 | 0] = 33;
      HEAP8[$19 + 286 | 0] = 55;
      HEAP8[$19 + 287 | 0] = 255;
      HEAP32[$19 + 260 >> 2] = -13164098;
      $7 = __stack_pointer - 32 | 0;
      __stack_pointer = $7;
      $0 = HEAPU8[$19 + 260 | 0] | HEAPU8[$19 + 261 | 0] << 8 | (HEAPU8[$19 + 262 | 0] << 16 | HEAPU8[$19 + 263 | 0] << 24);
      $3 = HEAP32[14853] - 20 | 0;
      HEAPF32[$7 + 20 >> 2] = $3 | 0;
      HEAPF32[$7 + 16 >> 2] = 30;
      HEAP32[$7 + 24 >> 2] = $0;
      HEAP32[$7 + 4 >> 2] = $0;
      $0 = HEAP32[$7 + 20 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 16 >> 2];
      HEAP32[$7 + 12 >> 2] = $0;
      $6 = Math_fround(0.0);
      $1 = 0;
      $0 = HEAP32[12954];
     }
     if (!global$9 | ($8 | 0) == 46) {
      rlSetTexture($0);
      $5 = 46;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $47 = HEAPF32[12962];
      $53 = HEAPF32[12960];
      $57 = HEAPF32[12959];
      $29 = HEAPF32[12961];
     }
     if (!global$9 | ($8 | 0) == 47) {
      rlBegin();
      $5 = 47;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $60 = Math_fround($53 + $47);
      $47 = Math_fround($57 + $29);
      $0 = $7 + 8 | 0;
      $51 = HEAPF32[$0 + 4 >> 2];
      $50 = HEAPF32[$0 >> 2];
      $0 = $7 + 4 | 0;
      $2 = HEAPU8[$0 + 3 | 0];
      $3 = HEAPU8[$0 + 2 | 0];
      $9 = HEAPU8[$0 + 1 | 0];
      $0 = HEAPU8[$0 | 0];
     }
     while (1) {
      if (!global$9) {
       rlColor4ub($0, $9, $3, $2);
       $25 = Math_fround($57 / Math_fround(HEAP32[12955]));
       $17 = HEAP32[12956];
       $29 = Math_fround($53 / Math_fround($17 | 0));
       rlTexCoord2f($25, $29);
      }
      if (!global$9 | ($8 | 0) == 48) {
       rlVertex2f($50, $51);
       $5 = 48;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $17 = HEAP32[12956];
       rlTexCoord2f(Math_fround($47 / Math_fround(HEAP32[12955])), Math_fround($53 / Math_fround($17 | 0)));
       $29 = Math_fround($6 + Math_fround(20.0));
       $55 = Math_fround($29 * Math_fround(.01745329238474369));
       $25 = sinf($55);
       $36 = Math_fround(Math_fround(cosf($55) * Math_fround(10.0)) + $50);
       $25 = Math_fround(Math_fround($25 * Math_fround(10.0)) + $51);
      }
      if (!global$9 | ($8 | 0) == 49) {
       rlVertex2f($36, $25);
       $5 = 49;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $17 = HEAP32[12956];
       rlTexCoord2f(Math_fround($47 / Math_fround(HEAP32[12955])), Math_fround($60 / Math_fround($17 | 0)));
       $55 = Math_fround(Math_fround($6 + Math_fround(10.0)) * Math_fround(.01745329238474369));
       $25 = sinf($55);
       $36 = Math_fround(Math_fround(cosf($55) * Math_fround(10.0)) + $50);
       $25 = Math_fround(Math_fround($25 * Math_fround(10.0)) + $51);
      }
      if (!global$9 | ($8 | 0) == 50) {
       rlVertex2f($36, $25);
       $5 = 50;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $17 = HEAP32[12956];
       rlTexCoord2f(Math_fround($57 / Math_fround(HEAP32[12955])), Math_fround($60 / Math_fround($17 | 0)));
       $6 = Math_fround($6 * Math_fround(.01745329238474369));
       $36 = sinf($6);
       $25 = Math_fround(Math_fround($36 * Math_fround(10.0)) + $51);
       $6 = Math_fround(Math_fround(cosf($6) * Math_fround(10.0)) + $50);
      }
      if (!global$9 | ($8 | 0) == 51) {
       rlVertex2f($6, $25);
       $5 = 51;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $6 = $29;
       $1 = $1 + 1 | 0;
       $17 = ($1 | 0) != 18;
       if ($17) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      rlEnd()
     }
     if (!global$9 | ($8 | 0) == 52) {
      rlSetTexture(0);
      $5 = 52;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      __stack_pointer = $7 + 32 | 0;
      HEAP8[$19 + 280 | 0] = 230;
      HEAP8[$19 + 281 | 0] = 41;
      HEAP8[$19 + 282 | 0] = 55;
      HEAP8[$19 + 283 | 0] = 255;
      HEAP32[$19 + 256 >> 2] = -13162010;
      $3 = $19 + 256 | 0;
      $7 = __stack_pointer + -64 | 0;
      __stack_pointer = $7;
      $1 = HEAP32[16595];
      $0 = HEAP32[14853] - 25 | 0;
     }
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9) {
       HEAPF32[$7 + 60 >> 2] = $0 | 0;
       HEAPF32[$7 + 56 >> 2] = 50;
       $13 = $7 + 16 | 0;
       __memcpy($13, 66368, 40);
       $0 = HEAP32[$7 + 60 >> 2];
       HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 56 >> 2];
       HEAP32[$7 + 12 >> 2] = $0;
       HEAP32[$7 + 4 >> 2] = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
       $9 = $7 + 8 | 0;
       $21 = $7 + 4 | 0;
       $6 = Math_fround(0.0);
       $1 = 0;
       $16 = 0;
       $36 = Math_fround(0.0);
       $3 = __stack_pointer - 80 | 0;
       __stack_pointer = $3;
       if (!HEAP32[$13 + 12 >> 2]) {
        __memcpy($13, 66368, 40)
       }
       $0 = !HEAPU8[10812];
      }
      block37 : {
       if (!global$9) {
        if ($0) {
         break block37
        }
        $2 = 10812;
        while (1) {
         $0 = $1;
         $1 = $0 + 1 | 0;
         $12 = HEAPU8[$2 + 1 | 0];
         $2 = $2 + 1 | 0;
         if ($12) {
          continue
         }
         break;
        };
        $0 = $0 >>> 0 > 2147483646;
        if ($0) {
         break block37
        }
        $47 = HEAPF32[$9 >> 2];
        $0 = HEAP32[$13 >> 2];
        $29 = Math_fround(Math_fround(10.0) / Math_fround($0 | 0));
        $14 = HEAP32[$13 + 36 >> 2];
        $25 = HEAPF32[$9 + 4 >> 2];
       }
       while (1) {
        if (!global$9) {
         HEAP32[$3 + 76 >> 2] = 0;
         $9 = GetCodepointNext($16 + 10812 | 0, $3 + 76 | 0);
         $2 = 0;
         $12 = 0;
         $17 = HEAP32[$13 + 4 >> 2];
         block40 : {
          block38 : {
           if (($17 | 0) <= 0) {
            break block38
           }
           while (1) {
            block39 : {
             $0 = HEAP32[Math_imul($2, 36) + $14 >> 2];
             $22 = ($0 | 0) == 63;
             $12 = $22 ? $2 : $12;
             if (($0 | 0) == ($9 | 0)) {
              break block39
             }
             $2 = $2 + 1 | 0;
             if (($17 | 0) != ($2 | 0)) {
              continue
             }
             break block38;
            }
            break;
           };
           if ($2) {
            break block40
           }
          }
          $2 = HEAP32[$14 >> 2] != ($9 | 0) ? $12 : 0;
         }
         $0 = $9 - 9 | 0;
        }
        block44 : {
         block41 : {
          if (!global$9) {
           block43 : {
            switch ($0 | 0) {
            case 1:
             $0 = HEAP32[12965];
             $36 = Math_fround($36 + Math_fround(Math_fround($0 | 0) + Math_fround(10.0)));
             $6 = Math_fround(0.0);
             break block44;
            case 0:
             break block41;
            default:
             break block43;
            };
           }
           $0 = ($9 | 0) == 32;
           if ($0) {
            break block41
           }
           HEAPF32[$3 + 72 >> 2] = $36 + $25;
           HEAPF32[$3 + 68 >> 2] = $6 + $47;
           $4 = $3 + 28 | 0;
           __memcpy($4, $13, 40);
           $0 = HEAP32[$3 + 72 >> 2];
           HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 68 >> 2];
           HEAP32[$3 + 20 >> 2] = $0;
           HEAP32[$3 + 12 >> 2] = HEAPU8[$21 | 0] | HEAPU8[$21 + 1 | 0] << 8 | (HEAPU8[$21 + 2 | 0] << 16 | HEAPU8[$21 + 3 | 0] << 24);
           $17 = $3 + 16 | 0;
           $22 = $3 + 12 | 0;
           $0 = $4;
          }
          if (!global$9 | ($8 | 0) == 53) {
           DrawTextCodepoint($0, $9, $17, Math_fround(10.0), $22);
           $5 = 53;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          $14 = global$9 ? $14 : HEAP32[$13 + 36 >> 2];
         }
         if (!global$9) {
          $12 = HEAP32[(Math_imul($2, 36) + $14 | 0) + 12 >> 2];
          $0 = !$12;
          if ($0) {
           $2 = $2 << 4;
           $0 = $2 + HEAP32[$13 + 32 >> 2] | 0;
           $6 = Math_fround($6 + Math_fround(Math_fround(HEAPF32[$0 + 8 >> 2] * $29) + Math_fround(1.0)));
           break block44;
          }
          $6 = Math_fround($6 + Math_fround(Math_fround(Math_fround($12 | 0) * $29) + Math_fround(1.0)));
         }
        }
        if (!global$9) {
         $16 = HEAP32[$3 + 76 >> 2] + $16 | 0;
         $0 = ($16 | 0) < ($1 | 0);
         if ($0) {
          continue
         }
        }
        break;
       };
      }
      if (!global$9) {
       $0 = $3 + 80 | 0;
       __stack_pointer = $0;
      }
     }
     if (!global$9) {
      $0 = $7 - -64 | 0;
      __stack_pointer = $0;
     }
    }
    $0 = global$9 ? $0 : HEAP32[14160];
    if (!global$9 | ($8 | 0) == 54) {
     rlDrawRenderBatch($0);
     $5 = 54;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   $0 = global$9 ? $0 : !HEAPU8[62244];
   block45 : {
    if (!global$9) {
     if ($0) {
      break block45
     }
     $3 = HEAP32[16588];
     $7 = HEAP32[$3 + 4 >> 2];
     $0 = HEAP32[$3 >> 2];
     $1 = ($7 | 0) == ($0 | 0);
     if ($1) {
      break block45
     }
    }
    while (1) {
     $1 = global$9 ? $1 : !HEAPU8[$11 + 60056 | 0];
     block46 : {
      if (!global$9) {
       if ($1) {
        break block46
       }
       $1 = HEAPU8[$11 + 59544 | 0];
       if ($1) {
        break block46
       }
       HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($7, 24) >> 2] = HEAP32[15532];
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 1;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $11;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = 0;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
       $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
       $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
       $7 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 12 >> 2];
       $0 = HEAP32[$3 + 16 >> 2];
       HEAP32[$19 + 244 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$19 + 248 >> 2] = $4;
       HEAP32[$19 + 252 >> 2] = $0;
       HEAP32[$19 + 240 >> 2] = $7;
       $0 = $19 + 240 | 0;
      }
      if (!global$9 | ($8 | 0) == 55) {
       TraceLog(3, 5891, $0);
       $5 = 55;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $3 = HEAP32[16588];
       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
       $0 = HEAP32[$3 >> 2];
      }
     }
     if (!global$9) {
      $7 = HEAP32[$3 + 4 >> 2];
      $1 = ($7 | 0) == ($0 | 0);
      if ($1) {
       break block45
      }
      $1 = HEAPU8[$11 + 59544 | 0];
     }
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9) {
       HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($7, 24) >> 2] = HEAP32[15532];
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 2;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $11;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = 0;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
       $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
       $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
       $7 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 12 >> 2];
       $0 = HEAP32[$3 + 16 >> 2];
       HEAP32[$19 + 228 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$19 + 232 >> 2] = $4;
       HEAP32[$19 + 236 >> 2] = $0;
       HEAP32[$19 + 224 >> 2] = $7;
       $0 = $19 + 224 | 0;
      }
      if (!global$9 | ($8 | 0) == 56) {
       TraceLog(3, 6233, $0);
       $5 = 56;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $3 = HEAP32[16588];
       $7 = HEAP32[$3 + 4 >> 2] + 1 | 0;
       HEAP32[$3 + 4 >> 2] = $7;
       $0 = HEAP32[$3 >> 2];
      }
     }
     if (!global$9) {
      $1 = ($0 | 0) == ($7 | 0);
      if ($1) {
       break block45
      }
      $11 = $11 + 1 | 0;
      $1 = ($11 | 0) != 512;
      if ($1) {
       continue
      }
     }
     break;
    };
    $11 = global$9 ? $11 : 0;
    while (1) {
     $1 = global$9 ? $1 : !HEAPU8[$11 + 61262 | 0];
     block47 : {
      if (!global$9) {
       if ($1) {
        break block47
       }
       $1 = HEAPU8[$11 + 61254 | 0];
       if ($1) {
        break block47
       }
       HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($7, 24) >> 2] = HEAP32[15532];
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 5;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $11;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = 0;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
       $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
       $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
       $7 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 12 >> 2];
       $0 = HEAP32[$3 + 16 >> 2];
       HEAP32[$19 + 212 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$19 + 216 >> 2] = $4;
       HEAP32[$19 + 220 >> 2] = $0;
       HEAP32[$19 + 208 >> 2] = $7;
       $0 = $19 + 208 | 0;
      }
      if (!global$9 | ($8 | 0) == 57) {
       TraceLog(3, 5971, $0);
       $5 = 57;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $3 = HEAP32[16588];
       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
       $0 = HEAP32[$3 >> 2];
      }
     }
     if (!global$9) {
      $7 = HEAP32[$3 + 4 >> 2];
      $1 = ($7 | 0) == ($0 | 0);
      if ($1) {
       break block45
      }
      $1 = HEAPU8[$11 + 61254 | 0];
     }
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9) {
       HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($7, 24) >> 2] = HEAP32[15532];
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 6;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $11;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = 0;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
       $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
       $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
       $7 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 12 >> 2];
       $0 = HEAP32[$3 + 16 >> 2];
       HEAP32[$19 + 196 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$19 + 200 >> 2] = $4;
       HEAP32[$19 + 204 >> 2] = $0;
       HEAP32[$19 + 192 >> 2] = $7;
       $0 = $19 + 192 | 0;
      }
      if (!global$9 | ($8 | 0) == 58) {
       TraceLog(3, 6315, $0);
       $5 = 58;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $3 = HEAP32[16588];
       $7 = HEAP32[$3 + 4 >> 2] + 1 | 0;
       HEAP32[$3 + 4 >> 2] = $7;
       $0 = HEAP32[$3 >> 2];
      }
     }
     if (!global$9) {
      $1 = ($0 | 0) == ($7 | 0);
      if ($1) {
       break block45
      }
      $11 = $11 + 1 | 0;
      $1 = ($11 | 0) != 8;
      if ($1) {
       continue
      }
     }
     break;
    };
    if (!global$9) {
     $6 = HEAPF32[15310];
     block48 : {
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $1 = ~~$6;
       break block48;
      }
      $1 = -2147483648;
     }
     $6 = HEAPF32[15308];
     block49 : {
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $2 = ~~$6;
       break block49;
      }
      $2 = -2147483648;
     }
     $1 = ($1 | 0) == ($2 | 0);
    }
    block52 : {
     if (!global$9) {
      if ($1) {
       $6 = HEAPF32[15311];
       block50 : {
        if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
         $1 = ~~$6;
         break block50;
        }
        $1 = -2147483648;
       }
       $6 = HEAPF32[15309];
       block51 : {
        if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
         $2 = ~~$6;
         break block51;
        }
        $2 = -2147483648;
       }
       $1 = ($1 | 0) == ($2 | 0);
       if ($1) {
        break block52
       }
      }
      HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($7, 24) >> 2] = HEAP32[15532];
      HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 7;
      $4 = HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0;
      $6 = HEAPF32[15308];
      block53 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block53;
       }
       $0 = -2147483648;
      }
      HEAP32[$4 + 8 >> 2] = $0;
      $4 = HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0;
      $6 = HEAPF32[15309];
      block54 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block54;
       }
       $0 = -2147483648;
      }
      HEAP32[$4 + 12 >> 2] = $0;
      HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
      $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
      $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
      $11 = HEAP32[$3 >> 2];
      $4 = HEAP32[$3 + 12 >> 2];
      $0 = HEAP32[$3 + 16 >> 2];
      HEAP32[$19 + 180 >> 2] = HEAP32[$3 + 8 >> 2];
      HEAP32[$19 + 184 >> 2] = $4;
      HEAP32[$19 + 188 >> 2] = $0;
      HEAP32[$19 + 176 >> 2] = $11;
      $0 = $19 + 176 | 0;
     }
     if (!global$9 | ($8 | 0) == 59) {
      TraceLog(3, 6768, $0);
      $5 = 59;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $3 = HEAP32[16588];
      $7 = HEAP32[$3 + 4 >> 2] + 1 | 0;
      HEAP32[$3 + 4 >> 2] = $7;
      $0 = HEAP32[$3 >> 2];
      $1 = ($7 | 0) == ($0 | 0);
      if ($1) {
       break block45
      }
     }
    }
    if (!global$9) {
     $6 = HEAPF32[15320];
     block55 : {
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $1 = ~~$6;
       break block55;
      }
      $1 = -2147483648;
     }
     $6 = HEAPF32[15318];
     block56 : {
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $2 = ~~$6;
       break block56;
      }
      $2 = -2147483648;
     }
     $1 = ($1 | 0) == ($2 | 0);
    }
    block59 : {
     if (!global$9) {
      if ($1) {
       $6 = HEAPF32[15321];
       block57 : {
        if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
         $1 = ~~$6;
         break block57;
        }
        $1 = -2147483648;
       }
       $6 = HEAPF32[15319];
       block58 : {
        if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
         $2 = ~~$6;
         break block58;
        }
        $2 = -2147483648;
       }
       $1 = ($1 | 0) == ($2 | 0);
       if ($1) {
        break block59
       }
      }
      HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($7, 24) >> 2] = HEAP32[15532];
      HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 8;
      $4 = HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0;
      $6 = HEAPF32[15318];
      block60 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block60;
       }
       $0 = -2147483648;
      }
      HEAP32[$4 + 8 >> 2] = $0;
      $4 = HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0;
      $6 = HEAPF32[15319];
      block61 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block61;
       }
       $0 = -2147483648;
      }
      HEAP32[$4 + 12 >> 2] = $0;
      HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
      $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
      $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
      $11 = HEAP32[$3 >> 2];
      $4 = HEAP32[$3 + 12 >> 2];
      $0 = HEAP32[$3 + 16 >> 2];
      HEAP32[$19 + 164 >> 2] = HEAP32[$3 + 8 >> 2];
      HEAP32[$19 + 168 >> 2] = $4;
      HEAP32[$19 + 172 >> 2] = $0;
      HEAP32[$19 + 160 >> 2] = $11;
      $0 = $19 + 160 | 0;
     }
     if (!global$9 | ($8 | 0) == 60) {
      TraceLog(3, 6676, $0);
      $5 = 60;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $3 = HEAP32[16588];
      $11 = HEAP32[$3 + 4 >> 2] + 1 | 0;
      HEAP32[$3 + 4 >> 2] = $11;
      $0 = HEAP32[$3 >> 2];
      $1 = ($11 | 0) == ($0 | 0);
      if ($1) {
       break block45
      }
     }
    }
    $11 = global$9 ? $11 : 0;
    while (1) {
     $1 = global$9 ? $1 : !HEAPU8[$11 + 61396 | 0];
     block62 : {
      if (!global$9) {
       if ($1) {
        break block62
       }
       $1 = HEAPU8[$11 + 61388 | 0];
       if ($1) {
        break block62
       }
       HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) >> 2] = HEAP32[15532];
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 14;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $11;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = 0;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
       $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
       $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
       $7 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 12 >> 2];
       $0 = HEAP32[$3 + 16 >> 2];
       HEAP32[$19 + 148 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$19 + 152 >> 2] = $4;
       HEAP32[$19 + 156 >> 2] = $0;
       HEAP32[$19 + 144 >> 2] = $7;
       $0 = $19 + 144 | 0;
      }
      if (!global$9 | ($8 | 0) == 61) {
       TraceLog(3, 6151, $0);
       $5 = 61;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $3 = HEAP32[16588];
       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
       $0 = HEAP32[$3 >> 2];
      }
     }
     if (!global$9) {
      $7 = HEAP32[$3 + 4 >> 2];
      $1 = ($7 | 0) == ($0 | 0);
      if ($1) {
       break block45
      }
      $1 = HEAPU8[$11 + 61388 | 0];
     }
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9) {
       HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($7, 24) >> 2] = HEAP32[15532];
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 15;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $11;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = 0;
       HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
       $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
       $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
       $7 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 12 >> 2];
       $0 = HEAP32[$3 + 16 >> 2];
       HEAP32[$19 + 132 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$19 + 136 >> 2] = $4;
       HEAP32[$19 + 140 >> 2] = $0;
       HEAP32[$19 + 128 >> 2] = $7;
       $0 = $19 + 128 | 0;
      }
      if (!global$9 | ($8 | 0) == 62) {
       TraceLog(3, 6499, $0);
       $5 = 62;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $3 = HEAP32[16588];
       $7 = HEAP32[$3 + 4 >> 2] + 1 | 0;
       HEAP32[$3 + 4 >> 2] = $7;
       $0 = HEAP32[$3 >> 2];
      }
     }
     if (!global$9) {
      $1 = ($0 | 0) == ($7 | 0);
      if ($1) {
       break block45
      }
      $11 = $11 + 1 | 0;
      $1 = ($11 | 0) != 8;
      if ($1) {
       continue
      }
     }
     break;
    };
    while (1) {
     if (!global$9) {
      $15 = $31 << 5;
      $7 = 0;
     }
     while (1) {
      if (!global$9) {
       $1 = $7 + $15 | 0;
       $2 = !HEAPU8[$1 + 61812 | 0];
      }
      block63 : {
       if (!global$9) {
        if ($2) {
         break block63
        }
        $2 = HEAPU8[$1 + 61684 | 0];
        if ($2) {
         break block63
        }
        HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) >> 2] = HEAP32[15532];
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 11;
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $31;
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = $7;
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
        $2 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
        $3 = $2 + HEAP32[$3 + 8 >> 2] | 0;
        $11 = HEAP32[$3 >> 2];
        $4 = HEAP32[$3 + 12 >> 2];
        $0 = HEAP32[$3 + 16 >> 2];
        HEAP32[$19 + 116 >> 2] = HEAP32[$3 + 8 >> 2];
        HEAP32[$19 + 120 >> 2] = $4;
        HEAP32[$19 + 124 >> 2] = $0;
        HEAP32[$19 + 112 >> 2] = $11;
        $0 = $19 + 112 | 0;
       }
       if (!global$9 | ($8 | 0) == 63) {
        TraceLog(3, 6060, $0);
        $5 = 63;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $3 = HEAP32[16588];
        HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
        $0 = HEAP32[$3 >> 2];
       }
      }
      if (!global$9) {
       $11 = HEAP32[$3 + 4 >> 2];
       $2 = ($11 | 0) == ($0 | 0);
       if ($2) {
        break block45
       }
       $1 = HEAPU8[$1 + 61684 | 0];
      }
      if ((global$9 | 0) == 2 | $1) {
       if (!global$9) {
        HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($11, 24) >> 2] = HEAP32[15532];
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 12;
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $31;
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = $7;
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
        $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
        $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
        $11 = HEAP32[$3 >> 2];
        $4 = HEAP32[$3 + 12 >> 2];
        $0 = HEAP32[$3 + 16 >> 2];
        HEAP32[$19 + 100 >> 2] = HEAP32[$3 + 8 >> 2];
        HEAP32[$19 + 104 >> 2] = $4;
        HEAP32[$19 + 108 >> 2] = $0;
        HEAP32[$19 + 96 >> 2] = $11;
        $0 = $19 + 96 | 0;
       }
       if (!global$9 | ($8 | 0) == 64) {
        TraceLog(3, 6406, $0);
        $5 = 64;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $3 = HEAP32[16588];
        $11 = HEAP32[$3 + 4 >> 2] + 1 | 0;
        HEAP32[$3 + 4 >> 2] = $11;
        $0 = HEAP32[$3 >> 2];
       }
      }
      if (!global$9) {
       $1 = ($0 | 0) == ($11 | 0);
       if ($1) {
        break block45
       }
       $7 = $7 + 1 | 0;
       $1 = ($7 | 0) != 32;
       if ($1) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      $23 = $31 + 61424 | 0;
      $7 = 0;
     }
     while (1) {
      if (!global$9) {
       $1 = ($7 & 6) == 4;
       $6 = $1 ? Math_fround(-1.0) : Math_fround(0.0);
       $2 = HEAPU8[$23 | 0] != 1;
       $25 = $6;
       block64 : {
        if ($2) {
         break block64
        }
        $2 = (($7 << 2) + $15 | 0) + 61940 | 0;
        $29 = HEAPF32[$2 >> 2];
        $25 = $6;
        if (!(($1 ? $29 : Math_fround(Math_abs($29))) > $6)) {
         break block64
        }
        $25 = $29;
       }
       $1 = $6 == $25;
      }
      block65 : {
       if (!global$9) {
        if ($1) {
         $11 = HEAP32[$3 + 4 >> 2];
         break block65;
        }
        HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($11, 24) >> 2] = HEAP32[15532];
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 13;
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = $31;
        HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = $7;
        $4 = HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0;
        $6 = Math_fround(HEAPF32[(($7 << 2) + $15 | 0) + 61940 >> 2] * Math_fround(32768.0));
        block66 : {
         if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
          $0 = ~~$6;
          break block66;
         }
         $0 = -2147483648;
        }
        HEAP32[$4 + 16 >> 2] = $0;
        $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
        $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
        $11 = HEAP32[$3 >> 2];
        $4 = HEAP32[$3 + 12 >> 2];
        $0 = HEAP32[$3 + 16 >> 2];
        HEAP32[$19 + 84 >> 2] = HEAP32[$3 + 8 >> 2];
        HEAP32[$19 + 88 >> 2] = $4;
        HEAP32[$19 + 92 >> 2] = $0;
        HEAP32[$19 + 80 >> 2] = $11;
        $0 = $19 + 80 | 0;
       }
       if (!global$9 | ($8 | 0) == 65) {
        TraceLog(3, 6583, $0);
        $5 = 65;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $3 = HEAP32[16588];
        $11 = HEAP32[$3 + 4 >> 2] + 1 | 0;
        HEAP32[$3 + 4 >> 2] = $11;
        $0 = HEAP32[$3 >> 2];
       }
      }
      if (!global$9) {
       $1 = ($0 | 0) == ($11 | 0);
       if ($1) {
        break block45
       }
       $7 = $7 + 1 | 0;
       $1 = ($7 | 0) != 8;
       if ($1) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      $31 = $31 + 1 | 0;
      $1 = ($31 | 0) != 4;
      if ($1) {
       continue
      }
     }
     break;
    };
    if (!global$9) {
     $0 = !HEAP32[12914];
     if ($0) {
      break block45
     }
     HEAP32[HEAP32[$3 + 8 >> 2] + Math_imul($11, 24) >> 2] = HEAP32[15532];
     HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 4 >> 2] = 17;
     HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 8 >> 2] = HEAP32[12914];
     HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 12 >> 2] = 0;
     HEAP32[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], 24) | 0) + 16 >> 2] = 0;
     $1 = Math_imul(HEAP32[$3 + 4 >> 2], 24);
     $3 = $1 + HEAP32[$3 + 8 >> 2] | 0;
     $11 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 12 >> 2];
     $0 = HEAP32[$3 + 16 >> 2];
     HEAP32[$19 + 68 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$19 + 72 >> 2] = $4;
     HEAP32[$19 + 76 >> 2] = $0;
     HEAP32[$19 + 64 >> 2] = $11;
     $0 = $19 - -64 | 0;
    }
    if (!global$9 | ($8 | 0) == 66) {
     TraceLog(3, 6856, $0);
     $5 = 66;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $3 = HEAP32[16588];
     $0 = HEAP32[$3 + 4 >> 2] + 1 | 0;
     HEAP32[$3 + 4 >> 2] = $0;
    }
   }
   if (!global$9) {
    glfwSwapBuffers(HEAP32[16589]);
    $58 = +glfwGetTime();
    HEAPF64[7759] = $58;
    $26 = HEAPF64[7760];
    HEAPF64[7760] = $58;
    $26 = $58 - $26;
    HEAPF64[7762] = $26;
    $26 = $26 + HEAPF64[7761];
    HEAPF64[7763] = $26;
    $40 = HEAPF64[7764];
    $0 = $40 > $26;
   }
   if ((global$9 | 0) == 2 | $0) {
    if (!global$9) {
     $7 = __stack_pointer - 16 | 0;
     __stack_pointer = $7;
     $40 = $40 - $26;
     $0 = !($40 < 0.0);
    }
    if ((global$9 | 0) == 2 | $0) {
     if (!global$9) {
      $62 = +glfwGetTime();
      HEAP32[$7 + 8 >> 2] = 0;
      HEAP32[$7 + 12 >> 2] = 0;
      $26 = $40 + $40 * -.05;
      block67 : {
       if (Math_abs($26) < 9223372036854775808.0) {
        $4 = ~~$26 >>> 0;
        if (Math_abs($26) >= 1.0) {
         $0 = ~~($26 > 0.0 ? Math_min(Math_floor($26 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($26 - +(~~$26 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
        } else {
         $0 = 0
        }
        break block67;
       }
       $4 = 0;
       $0 = -2147483648;
      }
      HEAP32[$7 >> 2] = $4;
      HEAP32[$7 + 4 >> 2] = $0;
      $26 = ($26 - (+($4 >>> 0) + +($0 | 0) * 4294967296.0)) * 1.0e9;
      $56 = Math_abs($26);
      block68 : {
       if ($56 < 2147483648.0) {
        $0 = ~~$26;
        break block68;
       }
       $0 = -2147483648;
      }
      HEAP32[$7 + 8 >> 2] = $0;
     }
     while (1) {
      if (!global$9) {
       $2 = __stack_pointer - 16 | 0;
       __stack_pointer = $2;
       $1 = 28;
       $0 = !$7;
      }
      block69 : {
       if (!global$9) {
        if ($0) {
         break block69
        }
        $0 = HEAP32[$7 + 8 >> 2];
        $3 = $0 >>> 0 > 999999999;
        if ($3) {
         break block69
        }
        $4 = HEAP32[$7 >> 2];
        $3 = HEAP32[$7 + 4 >> 2];
        $5 = $3;
        $3 = ($3 | 0) < 0;
        if ($3) {
         break block69
        }
        $58 = +emscripten_get_now();
        $1 = is_runtime_thread;
        emscripten_conditional_set_current_thread_status(1, 2);
        $54 = +($0 | 0) / 1.0e6;
        $26 = (+($4 >>> 0) + +($5 | 0) * 4294967296.0) * 1.0e3 + $54;
        $56 = $26 + $58;
        $59 = $1 ? 1.0 : 100.0;
       }
       while (1) {
        if (!global$9 | ($8 | 0) == 67) {
         emscripten_proxy_execute_queue();
         $5 = 67;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         $26 = +emscripten_get_now();
         $54 = $56 - $26;
         $0 = $54 < .1;
        }
        $61 = global$9 ? $61 : $0;
        if (!$61 | (global$9 | 0) == 2) {
         if (!global$9) {
          $0 = $54 > $59;
          $26 = $0 ? $59 : $54;
         }
         if (!global$9 | ($8 | 0) == 68) {
          $4 = emscripten_futex_wait(73160, 0, $26);
          $5 = 68;
          if ((global$9 | 0) == 1) {
           break block
          }
          $0 = $4;
         }
         if (!global$9) {
          $26 = +emscripten_get_now()
         }
        }
        if (!global$9) {
         $0 = $26 < $56;
         if ($0) {
          continue
         }
        }
        break;
       };
       if (!global$9) {
        emscripten_conditional_set_current_thread_status(2, 1);
        $1 = 0;
       }
      }
      if (!global$9) {
       __stack_pointer = $2 + 16 | 0;
       $0 = (__syscall_ret(0 - $1 | 0) | 0) == -1;
       if ($0) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      $40 = $40 + $62;
      while (1) {
       $0 = +glfwGetTime() < $40;
       if ($0) {
        continue
       }
       break;
      };
     }
    }
    if (!global$9) {
     $0 = $7 + 16 | 0;
     __stack_pointer = $0;
     $26 = +glfwGetTime();
     HEAPF64[7759] = $26;
     $40 = HEAPF64[7760];
     HEAPF64[7760] = $26;
     HEAPF64[7763] = $26 - $40 + HEAPF64[7763];
    }
   }
   if (!global$9) {
    $0 = 0;
    $1 = 0;
    $7 = __stack_pointer - 1248 | 0;
    __stack_pointer = $7;
    $2 = HEAP32[12914];
    if (!(HEAP32[12917] > 1 | $2 - 1 >>> 0 > 1)) {
     HEAP32[12914] = 4;
     (wasm2js_i32$0 = 51760, wasm2js_f64$0 = +glfwGetTime()), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
     $2 = HEAP32[12914];
    }
    $2 = __wasm_rotl_i32($2 - 16 | 0, 28);
    if (!($2 >>> 0 > 7 | !(1 << $2 & 139))) {
     HEAP32[12914] = 0
    }
    HEAP32[15351] = 0;
    HEAP32[15303] = 0;
    HEAP32[15286] = 0;
    while (1) {
     $3 = HEAPU8[$0 + 59544 | 0];
     HEAP8[$0 + 60056 | 0] = $3;
     HEAP8[$0 + 60568 | 0] = 0;
     $0 = $0 + 1 | 0;
     if (($0 | 0) != 512) {
      continue
     }
     break;
    };
    while (1) {
     HEAP8[$1 + 61262 | 0] = HEAPU8[$1 + 61254 | 0];
     $1 = $1 + 1 | 0;
     if (($1 | 0) != 8) {
      continue
     }
     break;
    };
    $0 = 0;
    $2 = HEAP32[15319];
    HEAP32[15320] = HEAP32[15318];
    HEAP32[15321] = $2;
    HEAP32[15318] = 0;
    HEAP32[15319] = 0;
    $2 = HEAP32[15309];
    HEAP32[15310] = HEAP32[15308];
    HEAP32[15311] = $2;
    while (1) {
     $2 = HEAPU8[$0 + 61388 | 0];
     HEAP8[$0 + 61396 | 0] = $2;
     $0 = $0 + 1 | 0;
     $1 = ($0 | 0) != 8;
     if ($1) {
      continue
     }
     break;
    };
    block72 : {
     if (emscripten_sample_gamepad_data() | 0) {
      break block72
     }
     $0 = emscripten_get_num_gamepads() | 0;
     $1 = ($0 | 0) <= 0;
     if ($1) {
      break block72
     }
     $0 = $0 - 1 | 0;
     $11 = $0 >>> 0 >= 3 ? 3 : $0;
     $13 = $7 + 24 | 0;
     $14 = $7 + 1048 | 0;
     $0 = 0;
     while (1) {
      $2 = $0;
      $9 = $0 << 5;
      $0 = 0;
      while (1) {
       $1 = $0 + $9 | 0;
       $3 = $1 + 61812 | 0;
       HEAP8[$3 | 0] = HEAPU8[$1 + 61684 | 0];
       $0 = $0 + 1 | 0;
       if (($0 | 0) != 32) {
        continue
       }
       break;
      };
      if (!(emscripten_get_gamepad_status($2 | 0, $7 + 8 | 0) | 0)) {
       $0 = HEAP32[$7 + 20 >> 2];
       if (($0 | 0) > 0) {
        $0 = $0 - 1 | 0;
        $12 = $0 >>> 0 >= 31 ? 31 : $0;
        $1 = 0;
        while (1) {
         $0 = $1;
         block73 : {
          if ($0 >>> 0 > 15) {
           break block73
          }
          $3 = HEAP32[($0 << 2) + 14968 >> 2];
          $4 = ($3 + $9 | 0) + 61684 | 0;
          $17 = HEAPU8[$0 + $14 | 0] == 1;
          if ($17) {
           HEAP8[$4 | 0] = 1;
           HEAP32[15351] = $3;
           break block73;
          }
          HEAP8[$4 | 0] = 0;
         }
         $1 = $0 + 1 | 0;
         if (($0 | 0) != ($12 | 0)) {
          continue
         }
         break;
        };
       }
       $3 = HEAP32[$7 + 16 >> 2];
       if (($3 | 0) > 0) {
        $0 = $3 - 1 | 0;
        $12 = $0 >>> 0 >= 7 ? 7 : $0;
        $0 = 0;
        while (1) {
         $17 = ($0 << 3) + $13 | 0;
         HEAPF32[(($0 << 2) + $9 | 0) + 61940 >> 2] = HEAPF64[$17 >> 3];
         $1 = ($0 | 0) == ($12 | 0);
         $0 = $0 + 1 | 0;
         if (!$1) {
          continue
         }
         break;
        };
       }
       HEAP32[($2 << 2) + 61408 >> 2] = $3;
      }
      $0 = $2 + 1 | 0;
      $1 = ($2 | 0) != ($11 | 0);
      if ($1) {
       continue
      }
      break;
     };
    }
    HEAP8[59379] = 0;
    __stack_pointer = $7 + 1248 | 0;
    $0 = HEAPU8[60357];
   }
   block74 : {
    if (!global$9) {
     if (HEAPU8[59845] != 1 | $0) {
      break block74
     }
     $0 = HEAPU8[59885] == 1;
    }
    if ((global$9 | 0) == 2 | $0) {
     $0 = global$9 ? $0 : HEAPU8[62152];
     if ($0 | (global$9 | 0) == 2) {
      if (!global$9) {
       HEAP8[62152] = 0;
       $0 = $19 + 264 | 0;
      }
      if (!global$9 | ($8 | 0) == 69) {
       msf_gif_end($0);
       $5 = 69;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       HEAP32[$19 >> 2] = HEAP32[14884];
       $0 = HEAP32[15562];
       HEAP32[$19 + 4 >> 2] = $0;
      }
      if (!global$9 | ($8 | 0) == 70) {
       $4 = TextFormat(7177, $19);
       $5 = 70;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $4;
      }
      if (!global$9) {
       $3 = HEAP32[$19 + 264 >> 2];
       $1 = HEAP32[$19 + 268 >> 2];
      }
      if (!global$9 | ($8 | 0) == 71) {
       $4 = SaveFileData($0, $3, $1);
       $5 = 71;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $4;
      }
      if (!global$9 | ($8 | 0) == 72 ? (global$9 | 0) == 2 | $3 : 0) {
       emscripten_builtin_free($3);
       $5 = 72;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9 | ($8 | 0) == 73) {
       TraceLog(3, 7093, 0);
       $5 = 73;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       break block74
      }
     }
     if (!global$9) {
      HEAP8[62152] = 1;
      HEAP32[15560] = 0;
     }
     if (!global$9 | ($8 | 0) == 74) {
      TraceLog(4, 5176, 0);
      $5 = 74;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $6 = Math_fround(HEAPU32[14859]);
      block75 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $3 = ~~$6;
        break block75;
       }
       $3 = -2147483648;
      }
      $6 = Math_fround(HEAPU32[14858]);
      block76 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block76;
       }
       $0 = -2147483648;
      }
      $1 = __memset(62168, 0, 44);
      HEAP32[15559] = 0;
      HEAP32[15557] = $3;
      HEAP32[15556] = $0;
     }
     if (!global$9 | ($8 | 0) == 75) {
      $4 = emscripten_builtin_malloc(2097152);
      $5 = 75;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $4;
     }
     if (!global$9) {
      HEAP32[15553] = $1;
      $2 = Math_imul($0, $3);
      $7 = $2 << 2;
     }
     if (!global$9 | ($8 | 0) == 76) {
      $4 = emscripten_builtin_malloc($7);
      $5 = 76;
      if ((global$9 | 0) == 1) {
       break block
      }
      $15 = $4;
     }
     if (!global$9) {
      HEAP32[15541] = $15
     }
     if (!global$9 | ($8 | 0) == 77) {
      $4 = emscripten_builtin_malloc($7);
      $5 = 77;
      if ((global$9 | 0) == 1) {
       break block
      }
      $23 = $4;
     }
     if (!global$9) {
      HEAP32[15547] = $23
     }
     if (!global$9 | ($8 | 0) == 78) {
      $4 = emscripten_builtin_malloc(40);
      $5 = 78;
      if ((global$9 | 0) == 1) {
       break block
      }
      $7 = $4;
     }
     if (!global$9) {
      HEAP32[15554] = $7;
      $2 = !$23;
     }
     block79 : {
      block78 : {
       if (!global$9) {
        block77 : {
         if ($2) {
          break block77
         }
         $2 = !$15;
         if ($2) {
          break block77
         }
         $1 = !$1;
         if ($1) {
          break block77
         }
         if ($7) {
          break block78
         }
        }
       }
       if (!global$9 | ($8 | 0) == 79) {
        msf_free_gif_state();
        $5 = 79;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        break block79
       }
      }
      if (!global$9) {
       HEAP32[15555] = $7;
       HEAP16[$7 + 16 >> 1] = $3;
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 32;
       $5 = HEAPU16[7159] | HEAPU16[7160] << 16;
       $4 = HEAPU16[7157] | HEAPU16[7158] << 16;
       HEAP16[$7 + 18 >> 1] = $4;
       HEAP16[$7 + 20 >> 1] = $4 >>> 16;
       HEAP16[$7 + 22 >> 1] = $5;
       HEAP16[$7 + 24 >> 1] = $5 >>> 16;
       $5 = HEAPU16[7163] | HEAPU16[7164] << 16;
       $4 = HEAPU16[7161] | HEAPU16[7162] << 16;
       HEAP16[$7 + 26 >> 1] = $4;
       HEAP16[$7 + 28 >> 1] = $4 >>> 16;
       HEAP16[$7 + 30 >> 1] = $5;
       HEAP16[$7 + 32 >> 1] = $5 >>> 16;
       $5 = HEAPU16[7166] | HEAPU16[7167] << 16;
       $4 = HEAPU16[7164] | HEAPU16[7165] << 16;
       HEAP16[$7 + 32 >> 1] = $4;
       HEAP16[$7 + 34 >> 1] = $4 >>> 16;
       HEAP16[$7 + 36 >> 1] = $5;
       HEAP16[$7 + 38 >> 1] = $5 >>> 16;
       HEAP32[$7 + 8 >> 2] = 944130375;
       HEAP32[$7 + 12 >> 2] = $0 << 16 | 24889;
      }
     }
     if (!global$9) {
      $3 = HEAP32[15562] + 1 | 0;
      HEAP32[15562] = $3;
      HEAP32[$19 + 32 >> 2] = $3;
      $0 = $19 + 32 | 0;
     }
     if (!global$9 | ($8 | 0) == 80) {
      $4 = TextFormat(7180, $0);
      $5 = 80;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $4;
     }
     if (!global$9) {
      HEAP32[$19 + 16 >> 2] = $0;
      $0 = $19 + 16 | 0;
     }
     if (!global$9 | ($8 | 0) == 81) {
      TraceLog(3, 4052, $0);
      $5 = 81;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block74
     }
    }
    if (!global$9) {
     HEAP32[$19 + 48 >> 2] = HEAP32[15562];
     $0 = $19 + 48 | 0;
    }
    if (!global$9 | ($8 | 0) == 82) {
     $4 = TextFormat(7049, $0);
     $5 = 82;
     if ((global$9 | 0) == 1) {
      break block
     }
     $3 = $4;
    }
    if (!global$9) {
     $7 = 0;
     $1 = 0;
     $15 = __stack_pointer - 608 | 0;
     __stack_pointer = $15;
     $0 = strchr($3, 39);
    }
    block80 : {
     if ((global$9 | 0) == 2 | $0) {
      if (!global$9 | ($8 | 0) == 83) {
       TraceLog(4, 4305, 0);
       $5 = 83;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       break block80
      }
     }
     if (!global$9 | ($8 | 0) == 84) {
      TraceLog(4, 5176, 0);
      $5 = 84;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $6 = Math_fround(HEAPU32[14859]);
      block81 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block81;
       }
       $0 = -2147483648;
      }
      $6 = Math_fround(HEAPU32[14858]);
      block82 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $2 = ~~$6;
        break block82;
       }
       $2 = -2147483648;
      }
     }
     if (!global$9 | ($8 | 0) == 85) {
      $4 = rlReadScreenPixels($2, $0);
      $5 = 85;
      if ((global$9 | 0) == 1) {
       break block
      }
      $23 = $4;
     }
     if (!global$9) {
      HEAP32[$15 + 588 >> 2] = $23;
      HEAP32[$15 + 600 >> 2] = 1;
      HEAP32[$15 + 604 >> 2] = 7;
      $6 = Math_fround(HEAPU32[14858]);
      block83 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block83;
       }
       $0 = -2147483648;
      }
      HEAP32[$15 + 592 >> 2] = $0;
      $6 = Math_fround(HEAPU32[14859]);
      block84 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break block84;
       }
       $0 = -2147483648;
      }
      HEAP32[$15 + 596 >> 2] = $0;
      __memset($15 - -64 | 0, 0, 512);
      $11 = HEAP32[14884];
      if ($3) {
       $0 = $3;
       while (1) {
        $1 = $7;
        $2 = 11916;
        $12 = __stack_pointer - 32 | 0;
        __stack_pointer = $12;
        $9 = HEAP8[11916];
        block86 : {
         if (!(HEAPU8[11917] ? $9 : 0)) {
          $7 = __strchrnul($0, $9);
          break block86;
         }
         __memset($12, 0, 32);
         $9 = HEAPU8[11916];
         if ($9) {
          while (1) {
           $22 = 1 << $9;
           $7 = ($9 >>> 3 & 28) + $12 | 0;
           $17 = $22 | HEAP32[$7 >> 2];
           HEAP32[$7 >> 2] = $17;
           $9 = HEAPU8[$2 + 1 | 0];
           $2 = $2 + 1 | 0;
           if ($9) {
            continue
           }
           break;
          }
         }
         $7 = $0;
         $9 = HEAPU8[$0 | 0];
         if (!$9) {
          break block86
         }
         $2 = $0;
         while (1) {
          if (HEAP32[($9 >>> 3 & 28) + $12 >> 2] >>> $9 & 1) {
           $7 = $2;
           break block86;
          }
          $9 = HEAPU8[$2 + 1 | 0];
          $7 = $2 + 1 | 0;
          $2 = $7;
          if ($9) {
           continue
          }
          break;
         };
        }
        __stack_pointer = $12 + 32 | 0;
        $0 = ($7 - $0 | 0) + $0 | 0;
        $2 = HEAPU8[$0 | 0];
        $7 = $2 ? $0 : 0;
        $0 = $7 + 1 | 0;
        if ($7) {
         continue
        }
        break;
       };
      }
      HEAP32[$15 + 48 >> 2] = $11;
      HEAP32[$15 + 52 >> 2] = $1 ? $1 + 1 | 0 : $3;
      $1 = $15 + 48 | 0;
      $0 = $15 - -64 | 0;
     }
     if (!global$9 | ($8 | 0) == 86) {
      $4 = TextFormat(3877, $1);
      $5 = 86;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $4;
     }
     if (!global$9) {
      $7 = strcpy($0, $1);
      HEAP32[$15 + 40 >> 2] = HEAP32[$15 + 604 >> 2];
      $0 = HEAP32[$15 + 600 >> 2];
      HEAP32[$15 + 32 >> 2] = HEAP32[$15 + 596 >> 2];
      HEAP32[$15 + 36 >> 2] = $0;
      $0 = HEAP32[$15 + 592 >> 2];
      HEAP32[$15 + 24 >> 2] = HEAP32[$15 + 588 >> 2];
      HEAP32[$15 + 28 >> 2] = $0;
      $17 = 0;
      $27 = 0;
      $30 = 0;
      $31 = 0;
      $22 = 0;
      $33 = 0;
      $38 = 0;
      $39 = 0;
      $35 = __stack_pointer + -64 | 0;
      __stack_pointer = $35;
      $0 = $15 + 24 | 0;
      $3 = HEAP32[$0 + 4 >> 2];
      $1 = !$3;
     }
     block87 : {
      if (!global$9) {
       if ($1) {
        break block87
       }
       $9 = HEAP32[$0 + 8 >> 2];
       if (!$9) {
        break block87
       }
       $1 = HEAP32[$0 >> 2];
       if (!$1) {
        break block87
       }
       $21 = HEAP32[$0 + 16 >> 2];
       $2 = $21;
       $11 = $2 - 1 | 0;
       $13 = $1;
      }
      block88 : {
       if (!global$9) {
        block89 : {
         switch ($11 | 0) {
         case 3:
          $2 = 3;
          break block88;
         case 6:
          $2 = 4;
          break block88;
         case 0:
         case 1:
          break block88;
         default:
          break block89;
         };
        }
        HEAP32[$35 + 48 >> 2] = HEAP32[$0 + 16 >> 2];
        $2 = HEAP32[$0 + 12 >> 2];
        HEAP32[$35 + 40 >> 2] = HEAP32[$0 + 8 >> 2];
        HEAP32[$35 + 44 >> 2] = $2;
        $2 = HEAP32[$0 + 4 >> 2];
        HEAP32[$35 + 32 >> 2] = HEAP32[$0 >> 2];
        HEAP32[$35 + 36 >> 2] = $2;
        $63 = 1;
        $2 = 4;
        $12 = $35 + 32 | 0;
        $11 = HEAP32[$12 + 4 >> 2];
        $0 = !$11;
       }
       block92 : {
        if (!global$9) {
         if ($0) {
          break block92
         }
         $16 = HEAP32[$12 + 8 >> 2];
         $0 = !$16;
         if ($0) {
          break block92
         }
         $16 = Math_imul($11, $16);
         $0 = $16 << 2;
        }
        if (!global$9 | ($8 | 0) == 87) {
         $4 = emscripten_builtin_malloc($0);
         $5 = 87;
         if ((global$9 | 0) == 1) {
          break block
         }
         $17 = $4;
        }
        if (!global$9) {
         $11 = HEAP32[$12 + 16 >> 2];
         $0 = ($11 | 0) >= 14;
        }
        if ((global$9 | 0) == 2 | $0) {
         if (!global$9 | ($8 | 0) == 88) {
          TraceLog(4, 3461, 0);
          $5 = 88;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          break block92
         }
        }
        $0 = global$9 ? $0 : $11 - 8 >>> 0 < 3;
        block93 : {
         if (!global$9) {
          if ($0) {
           $0 = 5496
          } else {
           $0 = $11 - 11 >>> 0 > 2;
           if ($0) {
            break block93
           }
           $0 = 5435;
          }
         }
         if (!global$9 | ($8 | 0) == 89) {
          TraceLog(4, $0, 0);
          $5 = 89;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
        }
        if (!global$9) {
         $0 = ($16 | 0) <= 0;
         if ($0) {
          break block92
         }
         $14 = HEAP32[$12 >> 2];
         $20 = $11 - 1 | 0;
         $12 = 0;
         $11 = 0;
         while (1) {
          block107 : {
           block108 : {
            block106 : {
             switch ($20 | 0) {
             case 0:
              $4 = ($12 << 2) + $17 | 0;
              $0 = $14 + $12 | 0;
              $10 = HEAPU8[$0 | 0];
              HEAP8[$4 + 1 | 0] = $10;
              HEAP8[$4 | 0] = $10;
              $13 = HEAPU8[$0 | 0];
              HEAP8[$4 + 3 | 0] = 255;
              HEAP8[$4 + 2 | 0] = $13;
              break block107;
             case 1:
              $4 = ($12 << 2) + $17 | 0;
              $13 = $11 + $14 | 0;
              $0 = HEAPU8[$13 | 0];
              HEAP8[$4 + 1 | 0] = $0;
              HEAP8[$4 | 0] = $0;
              $10 = HEAPU8[$13 | 0];
              HEAP8[$4 + 2 | 0] = $10;
              $13 = HEAPU8[$13 + 1 | 0];
              HEAP8[$4 + 3 | 0] = $13;
              $11 = $11 + 2 | 0;
              break block107;
             case 4:
              $13 = ($12 << 2) + $17 | 0;
              $0 = HEAPU16[($12 << 1) + $14 >> 1];
              HEAP8[$13 + 3 | 0] = 0 - ($0 & 1);
              HEAP8[$13 + 2 | 0] = $0 << 2 & 248;
              $10 = $0 >>> 3 & 248;
              HEAP8[$13 + 1 | 0] = $10;
              $4 = $13;
              $13 = $0 >>> 8 & 248;
              HEAP8[$4 | 0] = $13;
              break block107;
             case 2:
              $0 = HEAPU16[($12 << 1) + $14 >> 1];
              $13 = ($12 << 2) + $17 | 0;
              HEAP8[$13 + 3 | 0] = 255;
              HEAP8[$13 + 2 | 0] = $0 << 3;
              $10 = $0 >>> 3 & 252;
              HEAP8[$13 + 1 | 0] = $10;
              HEAP8[$13 | 0] = $0 >>> 8 & 248;
              break block107;
             case 5:
              $13 = ($12 << 2) + $17 | 0;
              $0 = HEAPU16[($12 << 1) + $14 >> 1];
              HEAP8[$13 + 3 | 0] = Math_imul($0 & 15, 17);
              HEAP8[$13 | 0] = Math_imul($0 >>> 12 | 0, 17);
              $10 = Math_imul(($0 & 240) >>> 4 | 0, 17);
              HEAP8[$13 + 2 | 0] = $10;
              $4 = $13;
              $13 = Math_imul($0 >>> 8 & 15, 17);
              HEAP8[$4 + 1 | 0] = $13;
              break block107;
             case 6:
              $13 = ($12 << 2) + $17 | 0;
              $0 = $11 + $14 | 0;
              HEAP8[$13 | 0] = HEAPU8[$0 | 0];
              HEAP8[$13 + 1 | 0] = HEAPU8[$0 + 1 | 0];
              $10 = HEAPU8[$0 + 2 | 0];
              HEAP8[$13 + 2 | 0] = $10;
              $4 = $13;
              $13 = HEAPU8[$0 + 3 | 0];
              HEAP8[$4 + 3 | 0] = $13;
              break block108;
             case 3:
              $4 = ($12 << 2) + $17 | 0;
              $0 = $11 + $14 | 0;
              HEAP8[$4 | 0] = HEAPU8[$0 | 0];
              $10 = HEAPU8[$0 + 1 | 0];
              HEAP8[$4 + 1 | 0] = $10;
              $13 = HEAPU8[$0 + 2 | 0];
              HEAP8[$4 + 3 | 0] = 255;
              HEAP8[$4 + 2 | 0] = $13;
              $11 = $11 + 3 | 0;
              break block107;
             case 7:
              $6 = HEAPF32[($11 << 2) + $14 >> 2];
              $0 = ($12 << 2) + $17 | 0;
              HEAP8[$0 + 3 | 0] = 255;
              HEAP8[$0 + 1 | 0] = 0;
              HEAP8[$0 + 2 | 0] = 0;
              $6 = Math_fround($6 * Math_fround(255.0));
              $10 = $6 >= Math_fround(0.0);
              block109 : {
               if ($10 & $6 < Math_fround(4294967296.0)) {
                $13 = ~~$6 >>> 0;
                break block109;
               }
               $13 = 0;
              }
              HEAP8[$0 | 0] = $13;
              $11 = $11 + 1 | 0;
              break block107;
             case 8:
              $0 = ($12 << 2) + $17 | 0;
              $4 = ($11 << 2) + $14 | 0;
              $6 = Math_fround(HEAPF32[$4 >> 2] * Math_fround(255.0));
              block110 : {
               if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
                $13 = ~~$6 >>> 0;
                break block110;
               }
               $13 = 0;
              }
              HEAP8[$0 | 0] = $13;
              $6 = Math_fround(HEAPF32[$4 + 4 >> 2] * Math_fround(255.0));
              $24 = $6 >= Math_fround(0.0);
              block111 : {
               if ($24 & $6 < Math_fround(4294967296.0)) {
                $13 = ~~$6 >>> 0;
                break block111;
               }
               $13 = 0;
              }
              HEAP8[$0 + 1 | 0] = $13;
              $6 = HEAPF32[$4 + 8 >> 2];
              HEAP8[$0 + 3 | 0] = 255;
              $6 = Math_fround($6 * Math_fround(255.0));
              $10 = $6 >= Math_fround(0.0);
              block112 : {
               if ($10 & $6 < Math_fround(4294967296.0)) {
                $13 = ~~$6 >>> 0;
                break block112;
               }
               $13 = 0;
              }
              HEAP8[$0 + 2 | 0] = $13;
              $11 = $11 + 3 | 0;
              break block107;
             case 9:
              $0 = ($12 << 2) + $17 | 0;
              $4 = ($11 << 2) + $14 | 0;
              $6 = Math_fround(HEAPF32[$4 >> 2] * Math_fround(255.0));
              block113 : {
               if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
                $13 = ~~$6 >>> 0;
                break block113;
               }
               $13 = 0;
              }
              HEAP8[$0 | 0] = $13;
              $6 = Math_fround(HEAPF32[$4 + 4 >> 2] * Math_fround(255.0));
              block114 : {
               if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
                $13 = ~~$6 >>> 0;
                break block114;
               }
               $13 = 0;
              }
              HEAP8[$0 + 1 | 0] = $13;
              $6 = Math_fround(HEAPF32[$4 + 8 >> 2] * Math_fround(255.0));
              $24 = $6 >= Math_fround(0.0);
              block115 : {
               if ($24 & $6 < Math_fround(4294967296.0)) {
                $13 = ~~$6 >>> 0;
                break block115;
               }
               $13 = 0;
              }
              HEAP8[$0 + 2 | 0] = $13;
              $6 = Math_fround(HEAPF32[$4 + 12 >> 2] * Math_fround(255.0));
              $10 = $6 >= Math_fround(0.0);
              block116 : {
               if ($10 & $6 < Math_fround(4294967296.0)) {
                $13 = ~~$6 >>> 0;
                break block116;
               }
               $13 = 0;
              }
              HEAP8[$0 + 3 | 0] = $13;
              break block108;
             case 10:
              $13 = HEAPU16[($11 << 1) + $14 >> 1];
              $0 = ($12 << 2) + $17 | 0;
              HEAP8[$0 + 3 | 0] = 255;
              HEAP8[$0 + 1 | 0] = 0;
              HEAP8[$0 + 2 | 0] = 0;
              $6 = Math_fround(HalfToFloat($13) * Math_fround(255.0));
              $10 = $6 >= Math_fround(0.0);
              block117 : {
               if ($10 & $6 < Math_fround(4294967296.0)) {
                $13 = ~~$6 >>> 0;
                break block117;
               }
               $13 = 0;
              }
              HEAP8[$0 | 0] = $13;
              $11 = $11 + 1 | 0;
              break block107;
             case 11:
              $0 = ($12 << 2) + $17 | 0;
              $4 = ($11 << 1) + $14 | 0;
              $6 = Math_fround(HalfToFloat(HEAPU16[$4 >> 1]) * Math_fround(255.0));
              block118 : {
               if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
                $13 = ~~$6 >>> 0;
                break block118;
               }
               $13 = 0;
              }
              HEAP8[$0 | 0] = $13;
              $6 = Math_fround(HalfToFloat(HEAPU16[$4 + 2 >> 1]) * Math_fround(255.0));
              $24 = $6 >= Math_fround(0.0);
              block119 : {
               if ($24 & $6 < Math_fround(4294967296.0)) {
                $13 = ~~$6 >>> 0;
                break block119;
               }
               $13 = 0;
              }
              HEAP8[$0 + 1 | 0] = $13;
              $13 = HEAPU16[$4 + 4 >> 1];
              HEAP8[$0 + 3 | 0] = 255;
              $6 = Math_fround(HalfToFloat($13) * Math_fround(255.0));
              $10 = $6 >= Math_fround(0.0);
              block120 : {
               if ($10 & $6 < Math_fround(4294967296.0)) {
                $13 = ~~$6 >>> 0;
                break block120;
               }
               $13 = 0;
              }
              HEAP8[$0 + 2 | 0] = $13;
              $11 = $11 + 3 | 0;
              break block107;
             case 12:
              break block106;
             default:
              break block107;
             };
            }
            $0 = ($12 << 2) + $17 | 0;
            $4 = ($11 << 1) + $14 | 0;
            $6 = Math_fround(HalfToFloat(HEAPU16[$4 >> 1]) * Math_fround(255.0));
            block121 : {
             if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
              $13 = ~~$6 >>> 0;
              break block121;
             }
             $13 = 0;
            }
            HEAP8[$0 | 0] = $13;
            $6 = Math_fround(HalfToFloat(HEAPU16[$4 + 2 >> 1]) * Math_fround(255.0));
            block122 : {
             if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
              $13 = ~~$6 >>> 0;
              break block122;
             }
             $13 = 0;
            }
            HEAP8[$0 + 1 | 0] = $13;
            $6 = Math_fround(HalfToFloat(HEAPU16[$4 + 4 >> 1]) * Math_fround(255.0));
            $24 = $6 >= Math_fround(0.0);
            block123 : {
             if ($24 & $6 < Math_fround(4294967296.0)) {
              $13 = ~~$6 >>> 0;
              break block123;
             }
             $13 = 0;
            }
            HEAP8[$0 + 2 | 0] = $13;
            $6 = Math_fround(HalfToFloat(HEAPU16[$4 + 6 >> 1]) * Math_fround(255.0));
            $10 = $6 >= Math_fround(0.0);
            block124 : {
             if ($10 & $6 < Math_fround(4294967296.0)) {
              $13 = ~~$6 >>> 0;
              break block124;
             }
             $13 = 0;
            }
            HEAP8[$0 + 3 | 0] = $13;
           }
           $11 = $11 + 4 | 0;
          }
          $12 = $12 + 1 | 0;
          $0 = ($16 | 0) != ($12 | 0);
          if ($0) {
           continue
          }
          break;
         };
        }
       }
       $13 = global$9 ? $13 : $17;
      }
      if (!global$9) {
       $0 = IsFileExtension($7, 7063)
      }
      block143 : {
       if ((global$9 | 0) == 2 | $0) {
        if (!global$9) {
         HEAP32[$35 + 52 >> 2] = 0;
         $32 = Math_imul($2, $3);
         $1 = $32;
         $48 = $35 + 52 | 0;
         $17 = 0;
         $22 = __stack_pointer;
         $28 = $22 - 16 | 0;
         __stack_pointer = $28;
         $11 = HEAP32[12964];
         $14 = $9;
         $16 = $3;
         $21 = $2;
         $9 = $1 + 1 | 0;
         $30 = Math_imul($14, $9);
         $0 = $13;
        }
        if (!global$9 | ($8 | 0) == 90) {
         $4 = emscripten_builtin_malloc($30);
         $5 = 90;
         if ((global$9 | 0) == 1) {
          break block
         }
         $33 = $4;
        }
        $2 = global$9 ? $2 : !$33;
        block125 : {
         if (!($2 ? global$9 : 1)) {
          break block125
         }
         if (!global$9 | ($8 | 0) == 91) {
          $4 = emscripten_builtin_malloc($32);
          $5 = 91;
          if ((global$9 | 0) == 1) {
           break block
          }
          $34 = $4;
         }
         if ((global$9 | 0) == 2 | $34) {
          if (!global$9) {
           $2 = ($14 | 0) > 0;
           if ($2) {
            $45 = $1 ? $1 : $32;
            $3 = ($11 | 0) > 4 ? -1 : $11;
            $12 = ($3 | 0) >= 0;
            while (1) {
             $2 = $3;
             $1 = $11;
             block126 : {
              if (!$12) {
               $43 = 2147483647;
               $2 = 0;
               $39 = 0;
               while (1) {
                stbiw__encode_png_line($0, $45, $16, $14, $38, $21, $39, $34);
                $1 = 0;
                $17 = 0;
                if (($32 | 0) > 0) {
                 while (1) {
                  $22 = HEAP8[$1 + $34 | 0];
                  $24 = $22 >> 31;
                  $17 = (($24 ^ $22) - $24 | 0) + $17 | 0;
                  $1 = $1 + 1 | 0;
                  if (($32 | 0) != ($1 | 0)) {
                   continue
                  }
                  break;
                 }
                }
                $1 = $17 >>> 0 < $43 >>> 0;
                $43 = $1 ? $17 : $43;
                $2 = $1 ? $39 : $2;
                $39 = $39 + 1 | 0;
                if (($39 | 0) != 5) {
                 continue
                }
                break;
               };
               $1 = $2;
               $22 = ($1 | 0) == 5;
               $17 = 5;
               if ($22) {
                break block126
               }
              }
              stbiw__encode_png_line($0, $45, $16, $14, $38, $21, $2, $34);
              $17 = $1;
             }
             $1 = Math_imul($9, $38) + $33 | 0;
             HEAP8[$1 | 0] = $17;
             __memcpy($1 + 1 | 0, $34, $32);
             $38 = $38 + 1 | 0;
             $1 = ($38 | 0) != ($14 | 0);
             if ($1) {
              continue
             }
             break;
            };
           }
          }
          if (!global$9 | ($8 | 0) == 92) {
           emscripten_builtin_free($34);
           $5 = 92;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $45 = $28 + 8 | 0;
           $12 = HEAP32[12963];
           $9 = 0;
           $0 = __stack_pointer;
           $10 = $0 - 16 | 0;
           __stack_pointer = $10;
           HEAP32[$10 + 4 >> 2] = 0;
           $17 = 0;
          }
          if (!global$9 | ($8 | 0) == 93) {
           $4 = emscripten_builtin_malloc(65536);
           $5 = 93;
           if ((global$9 | 0) == 1) {
            break block
           }
           $2 = $4;
          }
          if ((global$9 | 0) == 2 | $2) {
           $0 = global$9 ? $0 : $10 + 4 | 0;
           if (!global$9 | ($8 | 0) == 94) {
            stbiw__sbgrowf($0, 1);
            $5 = 94;
            if ((global$9 | 0) == 1) {
             break block
            }
           }
           if (!global$9) {
            $0 = HEAP32[$10 + 4 >> 2];
            $18 = $0 - 4 | 0;
            $1 = HEAP32[$18 >> 2];
            HEAP32[$18 >> 2] = $1 + 1;
            HEAP8[$0 + $1 | 0] = 120;
            $9 = HEAP32[$18 >> 2];
            $18 = $9 + 1 | 0;
            $1 = ($18 | 0) >= HEAP32[$0 - 8 >> 2];
           }
           if ((global$9 | 0) == 2 | $1) {
            $0 = global$9 ? $0 : $10 + 4 | 0;
            if (!global$9 | ($8 | 0) == 95) {
             stbiw__sbgrowf($0, 1);
             $5 = 95;
             if ((global$9 | 0) == 1) {
              break block
             }
            }
            if (!global$9) {
             $0 = HEAP32[$10 + 4 >> 2];
             $1 = $0 - 4 | 0;
             $9 = HEAP32[$1 >> 2];
             $18 = $9 + 1 | 0;
            }
           }
           if (!global$9) {
            HEAP32[$0 - 4 >> 2] = $18;
            HEAP8[$0 + $9 | 0] = 94;
            HEAP32[$10 + 8 >> 2] = 1;
            HEAP32[$10 + 12 >> 2] = 1;
            $3 = $10 + 8 | 0;
            $1 = $10 + 12 | 0;
           }
           if (!global$9 | ($8 | 0) == 96) {
            $4 = stbiw__zlib_flushf($0, $1, $3);
            $5 = 96;
            if ((global$9 | 0) == 1) {
             break block
            }
            $0 = $4;
           }
           if (!global$9) {
            $9 = HEAP32[$10 + 8 >> 2];
            HEAP32[$10 + 8 >> 2] = $9 + 2;
            HEAP32[$10 + 12 >> 2] = HEAP32[$10 + 12 >> 2] | 1 << $9;
            $3 = $10 + 8 | 0;
            $1 = $10 + 12 | 0;
           }
           if (!global$9 | ($8 | 0) == 97) {
            $4 = stbiw__zlib_flushf($0, $1, $3);
            $5 = 97;
            if ((global$9 | 0) == 1) {
             break block
            }
            $22 = $4;
           }
           if (!global$9) {
            HEAP32[$10 + 4 >> 2] = $22;
            $46 = __memset($2, 0, 65536);
            $0 = ($30 | 0) < 4;
           }
           block127 : {
            if (!global$9) {
             if ($0) {
              break block127
             }
             $0 = ($12 | 0) <= 5;
             $3 = $0 ? 5 : $12;
             $32 = $3 << 2;
             $43 = $3 << 1;
             $38 = $30 - 1 | 0;
             $39 = $30 - 3 | 0;
            }
            while (1) {
             if (!global$9) {
              $44 = 0;
              $20 = 3;
              $2 = $33 + $31 | 0;
              $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | HEAPU8[$2 + 2 | 0] << 16;
              $0 = $0 ^ $0 << 3;
              $0 = $0 + ($0 >>> 5 | 0) | 0;
              $0 = $0 ^ $0 << 4;
              $0 = $0 + ($0 >>> 17 | 0) | 0;
              $1 = $0 >>> 6 | 0;
              $0 = ($1 + $0 & 16383) << 2;
              $41 = $46 + $0 | 0;
              $11 = HEAP32[$41 >> 2];
             }
             block129 : {
              if (!($11 ? global$9 : 1)) {
               $34 = $11 - 4 | 0;
               $42 = HEAP32[$34 >> 2];
               if (($42 | 0) > 0) {
                $49 = $30 - $31 | 0;
                $0 = $49 - 1 | 0;
                $18 = $0 >>> 0 >= 257 ? 257 : $0;
                $1 = $18 + 1 | 0;
                $24 = $31 - 32768 | 0;
                $27 = 0;
                while (1) {
                 $12 = HEAP32[($27 << 2) + $11 >> 2];
                 if (($12 - $33 | 0) > ($24 | 0)) {
                  $0 = 0;
                  block128 : {
                   if (($49 | 0) <= 0) {
                    break block128
                   }
                   while (1) {
                    $52 = HEAPU8[$0 + $2 | 0];
                    if (($52 | 0) != HEAPU8[$0 + $12 | 0]) {
                     break block128
                    }
                    $9 = ($0 | 0) != ($18 | 0);
                    $0 = $0 + 1 | 0;
                    if ($9) {
                     continue
                    }
                    break;
                   };
                   $0 = $1;
                  }
                  $44 = ($0 | 0) < ($20 | 0) ? $44 : $12;
                  $20 = ($0 | 0) > ($20 | 0) ? $0 : $20;
                 }
                 $27 = $27 + 1 | 0;
                 if (($42 | 0) != ($27 | 0)) {
                  continue
                 }
                 break;
                };
               }
               $0 = HEAP32[$34 >> 2];
               if (($43 | 0) == ($0 | 0)) {
                memmove($11, $11 + $32 | 0, $32);
                HEAP32[$34 >> 2] = $3;
                $0 = $3;
               }
               $9 = $0 + 1 | 0;
               $1 = ($9 | 0) < HEAP32[$11 - 8 >> 2];
               if ($1) {
                break block129
               }
              }
              if (!global$9 | ($8 | 0) == 98) {
               stbiw__sbgrowf($41, 4);
               $5 = 98;
               if ((global$9 | 0) == 1) {
                break block
               }
              }
              if (!global$9) {
               $11 = HEAP32[$41 >> 2];
               $0 = HEAP32[$11 - 4 >> 2];
               $9 = $0 + 1 | 0;
              }
             }
             if (!global$9) {
              $1 = $11 - 4 | 0;
              HEAP32[$1 >> 2] = $9;
              HEAP32[($0 << 2) + $11 >> 2] = $2;
              $0 = !$44;
             }
             block133 : {
              block135 : {
               block136 : {
                block130 : {
                 if (!global$9) {
                  if ($0) {
                   break block130
                  }
                  $0 = HEAPU8[$2 + 1 | 0] | HEAPU8[$2 + 2 | 0] << 8 | HEAPU8[$2 + 3 | 0] << 16;
                  $0 = $0 ^ $0 << 3;
                  $0 = $0 + ($0 >>> 5 | 0) | 0;
                  $0 = $0 ^ $0 << 4;
                  $0 = $0 + ($0 >>> 17 | 0) | 0;
                  $1 = $0 >>> 6 | 0;
                  $42 = HEAP32[(($1 + $0 & 16383) << 2) + $46 >> 2];
                  block131 : {
                   if (!$42) {
                    break block131
                   }
                   $24 = HEAP32[$42 - 4 >> 2];
                   if (($24 | 0) <= 0) {
                    break block131
                   }
                   $18 = $2 + 1 | 0;
                   $0 = ($31 ^ -1) + $38 | 0;
                   $27 = $0 >>> 0 >= 257 ? 257 : $0;
                   $1 = $27 + 1 | 0;
                   $49 = $31 - 32767 | 0;
                   $11 = 0;
                   $41 = ($31 - $30 | 0) > -2;
                   while (1) {
                    $12 = HEAP32[($11 << 2) + $42 >> 2];
                    if (($12 - $33 | 0) > ($49 | 0)) {
                     $0 = 0;
                     block132 : {
                      if ($41) {
                       break block132
                      }
                      while (1) {
                       $34 = HEAPU8[$0 + $18 | 0];
                       $9 = ($34 | 0) != HEAPU8[$0 + $12 | 0];
                       if ($9) {
                        break block132
                       }
                       $9 = ($0 | 0) != ($27 | 0);
                       $0 = $0 + 1 | 0;
                       if ($9) {
                        continue
                       }
                       break;
                      };
                      $0 = $1;
                     }
                     $0 = ($0 | 0) > ($20 | 0);
                     if ($0) {
                      break block130
                     }
                    }
                    $11 = $11 + 1 | 0;
                    if (($24 | 0) != ($11 | 0)) {
                     continue
                    }
                    break;
                   };
                  }
                  $18 = $2 - $44 | 0;
                  $0 = ($18 | 0) > 32767;
                  if ($0) {
                   break block133
                  }
                  $0 = 0;
                  $1 = ($20 | 0) >= 259;
                  if ($1) {
                   break block133
                  }
                  while (1) {
                   $12 = $0;
                   $0 = $0 + 1 | 0;
                   if (HEAPU16[($0 << 1) + 15040 >> 1] <= ($20 | 0)) {
                    continue
                   }
                   break;
                  };
                  $27 = 7;
                  $9 = 0;
                  $2 = 7;
                  block134 : {
                   if ($12 >>> 0 <= 22) {
                    break block134
                   }
                   $0 = $12 + 169 | 0;
                   $27 = 8;
                   $2 = 8;
                  }
                  while (1) {
                   $9 = $0 & 1 | $9 << 1;
                   $0 = $0 >>> 1 | 0;
                   $2 = $2 - 1 | 0;
                   if ($2) {
                    continue
                   }
                   break;
                  };
                  $0 = HEAP32[$10 + 8 >> 2];
                  HEAP32[$10 + 8 >> 2] = $0 + $27;
                  HEAP32[$10 + 12 >> 2] = HEAP32[$10 + 12 >> 2] | $9 << $0;
                  $1 = $10 + 8 | 0;
                  $0 = $10 + 12 | 0;
                 }
                 if (!global$9 | ($8 | 0) == 99) {
                  $4 = stbiw__zlib_flushf($22, $0, $1);
                  $5 = 99;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                  $27 = $4;
                 }
                 $0 = global$9 ? $0 : $12 - 28 >>> 0 >= 4294967276;
                 if ($0 | (global$9 | 0) == 2) {
                  if (!global$9) {
                   $0 = HEAP32[$10 + 8 >> 2];
                   HEAP32[$10 + 8 >> 2] = $0 + HEAPU8[$12 + 15104 | 0];
                   $2 = $20 - HEAPU16[($12 << 1) + 15040 >> 1] | 0;
                   HEAP32[$10 + 12 >> 2] = HEAP32[$10 + 12 >> 2] | $2 << $0;
                   $1 = $10 + 8 | 0;
                   $0 = $10 + 12 | 0;
                  }
                  if (!global$9 | ($8 | 0) == 100) {
                   $4 = stbiw__zlib_flushf($27, $0, $1);
                   $5 = 100;
                   if ((global$9 | 0) == 1) {
                    break block
                   }
                   $27 = $4;
                  }
                 }
                 if (!global$9) {
                  $9 = 0;
                  $0 = 0;
                  while (1) {
                   $2 = $0;
                   $0 = $0 + 1 | 0;
                   if (HEAPU16[($0 << 1) + 15136 >> 1] <= ($18 | 0)) {
                    continue
                   }
                   break;
                  };
                  $12 = 5;
                  $0 = $2;
                  while (1) {
                   $22 = $9 << 1;
                   $9 = $22 | $0 & 1;
                   $0 = $0 >>> 1 | 0;
                   $12 = $12 - 1 | 0;
                   if ($12) {
                    continue
                   }
                   break;
                  };
                  $0 = HEAP32[$10 + 8 >> 2];
                  HEAP32[$10 + 8 >> 2] = $0 + 5;
                  HEAP32[$10 + 12 >> 2] = HEAP32[$10 + 12 >> 2] | $9 << $0;
                  $1 = $10 + 8 | 0;
                  $0 = $10 + 12 | 0;
                 }
                 if (!global$9 | ($8 | 0) == 101) {
                  $4 = stbiw__zlib_flushf($27, $0, $1);
                  $5 = 101;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                  $22 = $4;
                 }
                 if (!global$9) {
                  $0 = $2 >>> 0 < 4;
                  if ($0) {
                   break block135
                  }
                  $0 = HEAP32[$10 + 8 >> 2];
                  $9 = $18 - HEAPU16[($2 << 1) + 15136 >> 1] << $0;
                  HEAP32[$10 + 12 >> 2] = $9 | HEAP32[$10 + 12 >> 2];
                  $1 = HEAPU8[$2 + 15200 | 0];
                  $0 = $0 + $1 | 0;
                  break block136;
                 }
                }
                if (!global$9) {
                 $20 = 1;
                 $0 = HEAPU8[$2 | 0];
                 block137 : {
                  if ($0 >>> 0 <= 143) {
                   $0 = $0 + 48 | 0;
                   $12 = 8;
                   $9 = 0;
                   while (1) {
                    $9 = $0 & 1 | $9 << 1;
                    $0 = $0 >>> 1 | 0;
                    $12 = $12 - 1 | 0;
                    if ($12) {
                     continue
                    }
                    break;
                   };
                   $0 = HEAP32[$10 + 8 >> 2];
                   $2 = $9 << $0;
                   $1 = $2 | HEAP32[$10 + 12 >> 2];
                   HEAP32[$10 + 12 >> 2] = $1;
                   $0 = $0 + 8 | 0;
                   break block137;
                  }
                  $0 = $0 | 256;
                  $12 = 9;
                  $9 = 0;
                  while (1) {
                   $9 = $0 & 1 | $9 << 1;
                   $0 = $0 >>> 1 | 0;
                   $12 = $12 - 1 | 0;
                   if ($12) {
                    continue
                   }
                   break;
                  };
                  $0 = HEAP32[$10 + 8 >> 2];
                  $2 = $9 << $0;
                  $1 = $2 | HEAP32[$10 + 12 >> 2];
                  HEAP32[$10 + 12 >> 2] = $1;
                  $0 = $0 + 9 | 0;
                 }
                }
               }
               if (!global$9) {
                HEAP32[$10 + 8 >> 2] = $0;
                $1 = $10 + 8 | 0;
                $0 = $10 + 12 | 0;
               }
               if (!global$9 | ($8 | 0) == 102) {
                $4 = stbiw__zlib_flushf($22, $0, $1);
                $5 = 102;
                if ((global$9 | 0) == 1) {
                 break block
                }
                $22 = $4;
               }
              }
              if (!global$9) {
               $31 = $20 + $31 | 0;
               $0 = ($39 | 0) > ($31 | 0);
               if ($0) {
                continue
               }
               break block127;
              }
             }
             break;
            };
            if (!global$9) {
             __assert_fail(11508, 6972, 959, 3541);
             wasm2js_trap();
            }
           }
           if (!global$9) {
            HEAP32[$10 + 4 >> 2] = $22;
            $0 = ($30 | 0) > ($31 | 0);
           }
           if ((global$9 | 0) == 2 | $0) {
            while (1) {
             if (!global$9) {
              $0 = HEAPU8[$33 + $31 | 0];
              block138 : {
               if ($0 >>> 0 <= 143) {
                $9 = $0 + 48 | 0;
                $2 = 8;
                $0 = 0;
                $12 = 8;
                break block138;
               }
               $9 = $0 | 256;
               $2 = 9;
               $0 = 0;
               $12 = 9;
              }
              while (1) {
               $0 = $9 & 1 | $0 << 1;
               $9 = $9 >>> 1 | 0;
               $12 = $12 - 1 | 0;
               if ($12) {
                continue
               }
               break;
              };
              $9 = HEAP32[$10 + 8 >> 2];
              HEAP32[$10 + 8 >> 2] = $9 + $2;
              HEAP32[$10 + 12 >> 2] = HEAP32[$10 + 12 >> 2] | $0 << $9;
              $1 = $10 + 8 | 0;
              $0 = $10 + 12 | 0;
             }
             if (!global$9 | ($8 | 0) == 103) {
              $4 = stbiw__zlib_flushf($22, $0, $1);
              $5 = 103;
              if ((global$9 | 0) == 1) {
               break block
              }
              $22 = $4;
             }
             if (!global$9) {
              $31 = $31 + 1 | 0;
              $0 = ($31 | 0) != ($30 | 0);
              if ($0) {
               continue
              }
             }
             break;
            }
           }
           if (!global$9) {
            HEAP32[$10 + 4 >> 2] = $22;
            HEAP32[$10 + 8 >> 2] = HEAP32[$10 + 8 >> 2] + 7;
            $1 = $10 + 8 | 0;
            $0 = $10 + 12 | 0;
           }
           if (!global$9 | ($8 | 0) == 104) {
            $4 = stbiw__zlib_flushf($22, $0, $1);
            $5 = 104;
            if ((global$9 | 0) == 1) {
             break block
            }
            $20 = $4;
           }
           $0 = global$9 ? $0 : HEAP32[$10 + 8 >> 2];
           if ($0 | (global$9 | 0) == 2) {
            while (1) {
             if (!global$9) {
              HEAP32[$10 + 8 >> 2] = $0 + 1;
              $1 = $10 + 8 | 0;
              $0 = $10 + 12 | 0;
             }
             if (!global$9 | ($8 | 0) == 105) {
              $4 = stbiw__zlib_flushf($20, $0, $1);
              $5 = 105;
              if ((global$9 | 0) == 1) {
               break block
              }
              $20 = $4;
             }
             if (!global$9) {
              $0 = HEAP32[$10 + 8 >> 2];
              if ($0) {
               continue
              }
             }
             break;
            }
           }
           if (!global$9) {
            HEAP32[$10 + 4 >> 2] = $20;
            $0 = 0;
           }
           while (1) {
            if (!global$9) {
             $1 = ($0 << 2) + $46 | 0;
             $9 = HEAP32[$1 >> 2];
            }
            if ((global$9 | 0) == 2 | $9) {
             $1 = global$9 ? $1 : $9 - 8 | 0;
             if (!global$9 | ($8 | 0) == 106) {
              emscripten_builtin_free($1);
              $5 = 106;
              if ((global$9 | 0) == 1) {
               break block
              }
             }
            }
            if (!global$9) {
             $0 = $0 + 1 | 0;
             $1 = ($0 | 0) != 16384;
             if ($1) {
              continue
             }
            }
            break;
           };
           if (!global$9 | ($8 | 0) == 107) {
            emscripten_builtin_free($46);
            $5 = 107;
            if ((global$9 | 0) == 1) {
             break block
            }
           }
           if (!global$9) {
            $11 = 2;
            $0 = $20 - 4 | 0;
            $9 = HEAP32[$0 >> 2];
            $1 = ($9 | 0) <= ((Math_imul(($30 + 32766 | 0) / 32767 | 0, 5) + $30 | 0) + 2 | 0);
           }
           block142 : {
            block141 : {
             block140 : {
              block139 : {
               if (!global$9) {
                if ($1) {
                 $11 = $9;
                 break block139;
                }
                HEAP32[$0 >> 2] = 2;
                $12 = 1;
                $9 = 0;
                $0 = ($30 | 0) <= 0;
                if ($0) {
                 break block140
                }
               }
               while (1) {
                if (!global$9) {
                 $0 = $30 - $9 | 0;
                 $12 = ($0 | 0) < 32767;
                 $2 = $11 + 1 | 0;
                 $1 = ($2 | 0) >= HEAP32[$20 - 8 >> 2];
                }
                if ((global$9 | 0) == 2 | $1) {
                 $1 = global$9 ? $1 : $10 + 4 | 0;
                 if (!global$9 | ($8 | 0) == 108) {
                  stbiw__sbgrowf($1, 1);
                  $5 = 108;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                 }
                 if (!global$9) {
                  $20 = HEAP32[$10 + 4 >> 2];
                  $1 = $20 - 4 | 0;
                  $11 = HEAP32[$1 >> 2];
                  $2 = $11 + 1 | 0;
                 }
                }
                if (!global$9) {
                 $12 = $12 ? $0 : 32767;
                 $18 = $20 - 4 | 0;
                 HEAP32[$18 >> 2] = $2;
                 HEAP8[$11 + $20 | 0] = ($0 | 0) < 32768;
                 $1 = HEAP32[$18 >> 2] + 1 | 0;
                 $0 = ($1 | 0) >= HEAP32[$20 - 8 >> 2];
                }
                if ((global$9 | 0) == 2 | $0) {
                 $0 = global$9 ? $0 : $10 + 4 | 0;
                 if (!global$9 | ($8 | 0) == 109) {
                  stbiw__sbgrowf($0, 1);
                  $5 = 109;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                 }
                }
                if (!global$9) {
                 $0 = HEAP32[$10 + 4 >> 2];
                 $1 = $0 - 4 | 0;
                 $2 = HEAP32[$1 >> 2];
                 HEAP32[$1 >> 2] = $2 + 1;
                 HEAP8[$0 + $2 | 0] = $12;
                 $2 = HEAP32[$1 >> 2];
                 $18 = $2 + 1 | 0;
                 $1 = ($18 | 0) >= HEAP32[$0 - 8 >> 2];
                }
                if ((global$9 | 0) == 2 | $1) {
                 $0 = global$9 ? $0 : $10 + 4 | 0;
                 if (!global$9 | ($8 | 0) == 110) {
                  stbiw__sbgrowf($0, 1);
                  $5 = 110;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                 }
                 if (!global$9) {
                  $0 = HEAP32[$10 + 4 >> 2];
                  $1 = $0 - 4 | 0;
                  $2 = HEAP32[$1 >> 2];
                  $18 = $2 + 1 | 0;
                 }
                }
                if (!global$9) {
                 $20 = $0 - 4 | 0;
                 HEAP32[$20 >> 2] = $18;
                 HEAP8[$0 + $2 | 0] = $12 >>> 8;
                 $2 = HEAP32[$20 >> 2];
                 $18 = $2 + 1 | 0;
                 $1 = ($18 | 0) >= HEAP32[$0 - 8 >> 2];
                }
                if ((global$9 | 0) == 2 | $1) {
                 $0 = global$9 ? $0 : $10 + 4 | 0;
                 if (!global$9 | ($8 | 0) == 111) {
                  stbiw__sbgrowf($0, 1);
                  $5 = 111;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                 }
                 if (!global$9) {
                  $0 = HEAP32[$10 + 4 >> 2];
                  $1 = $0 - 4 | 0;
                  $2 = HEAP32[$1 >> 2];
                  $18 = $2 + 1 | 0;
                 }
                }
                if (!global$9) {
                 $20 = $0 - 4 | 0;
                 HEAP32[$20 >> 2] = $18;
                 $4 = $0 + $2 | 0;
                 $2 = $12 ^ -1;
                 HEAP8[$4 | 0] = $2;
                 $1 = HEAP32[$20 >> 2] + 1 | 0;
                 $0 = ($1 | 0) >= HEAP32[$0 - 8 >> 2];
                }
                if ((global$9 | 0) == 2 | $0) {
                 $0 = global$9 ? $0 : $10 + 4 | 0;
                 if (!global$9 | ($8 | 0) == 112) {
                  stbiw__sbgrowf($0, 1);
                  $5 = 112;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                 }
                }
                if (!global$9) {
                 $20 = HEAP32[$10 + 4 >> 2];
                 $0 = $20 - 4 | 0;
                 $18 = HEAP32[$0 >> 2];
                 HEAP32[$0 >> 2] = $18 + 1;
                 HEAP8[$18 + $20 | 0] = $2 >>> 8;
                 $2 = $9 + $33 | 0;
                 __memcpy(HEAP32[$0 >> 2] + $20 | 0, $2, $12);
                 $1 = HEAP32[$0 >> 2];
                 $11 = $12 + $1 | 0;
                 HEAP32[$0 >> 2] = $11;
                 $9 = $9 + $12 | 0;
                 $0 = ($30 | 0) > ($9 | 0);
                 if ($0) {
                  continue
                 }
                }
                break;
               };
              }
              if (!global$9) {
               $12 = 1;
               $0 = ($30 | 0) <= 0;
               if ($0) {
                $9 = 0;
                break block140;
               }
               $2 = ($30 >>> 0) % 5552 | 0;
               $9 = 0;
               $27 = 0;
               while (1) {
                if ($2) {
                 $18 = $27 + $33 | 0;
                 $0 = 0;
                 while (1) {
                  $12 = HEAPU8[$0 + $18 | 0] + $12 | 0;
                  $9 = $12 + $9 | 0;
                  $0 = $0 + 1 | 0;
                  $1 = ($2 | 0) != ($0 | 0);
                  if ($1) {
                   continue
                  }
                  break;
                 };
                 $9 = ($9 >>> 0) % 65521 | 0;
                 $12 = ($12 >>> 0) % 65521 | 0;
                }
                $27 = $2 + $27 | 0;
                $2 = 5552;
                if (($27 | 0) < ($30 | 0)) {
                 continue
                }
                break;
               };
               $0 = !$20;
               if ($0) {
                break block141
               }
              }
             }
             if (!global$9) {
              $0 = $11 + 1 | 0;
              $1 = ($0 | 0) < HEAP32[$20 - 8 >> 2];
              if ($1) {
               break block142
              }
             }
            }
            $0 = global$9 ? $0 : $10 + 4 | 0;
            if (!global$9 | ($8 | 0) == 113) {
             stbiw__sbgrowf($0, 1);
             $5 = 113;
             if ((global$9 | 0) == 1) {
              break block
             }
            }
            if (!global$9) {
             $20 = HEAP32[$10 + 4 >> 2];
             $11 = HEAP32[$20 - 4 >> 2];
             $0 = $11 + 1 | 0;
            }
           }
           if (!global$9) {
            $2 = $20 - 4 | 0;
            HEAP32[$2 >> 2] = $0;
            HEAP8[$11 + $20 | 0] = $9 >>> 8;
            $1 = HEAP32[$2 >> 2] + 1 | 0;
            $0 = ($1 | 0) >= HEAP32[$20 - 8 >> 2];
           }
           if ((global$9 | 0) == 2 | $0) {
            $0 = global$9 ? $0 : $10 + 4 | 0;
            if (!global$9 | ($8 | 0) == 114) {
             stbiw__sbgrowf($0, 1);
             $5 = 114;
             if ((global$9 | 0) == 1) {
              break block
             }
            }
           }
           if (!global$9) {
            $0 = HEAP32[$10 + 4 >> 2];
            $2 = $0 - 4 | 0;
            $18 = HEAP32[$2 >> 2];
            HEAP32[$2 >> 2] = $18 + 1;
            HEAP8[$0 + $18 | 0] = $9;
            $9 = HEAP32[$2 >> 2];
            $2 = $9 + 1 | 0;
            $1 = ($2 | 0) >= HEAP32[$0 - 8 >> 2];
           }
           if ((global$9 | 0) == 2 | $1) {
            $0 = global$9 ? $0 : $10 + 4 | 0;
            if (!global$9 | ($8 | 0) == 115) {
             stbiw__sbgrowf($0, 1);
             $5 = 115;
             if ((global$9 | 0) == 1) {
              break block
             }
            }
            if (!global$9) {
             $0 = HEAP32[$10 + 4 >> 2];
             $1 = $0 - 4 | 0;
             $9 = HEAP32[$1 >> 2];
             $2 = $9 + 1 | 0;
            }
           }
           if (!global$9) {
            $18 = $0 - 4 | 0;
            HEAP32[$18 >> 2] = $2;
            HEAP8[$0 + $9 | 0] = $12 >>> 8;
            $9 = HEAP32[$18 >> 2];
            $2 = $9 + 1 | 0;
            $1 = ($2 | 0) >= HEAP32[$0 - 8 >> 2];
           }
           if ((global$9 | 0) == 2 | $1) {
            $0 = global$9 ? $0 : $10 + 4 | 0;
            if (!global$9 | ($8 | 0) == 116) {
             stbiw__sbgrowf($0, 1);
             $5 = 116;
             if ((global$9 | 0) == 1) {
              break block
             }
            }
            if (!global$9) {
             $0 = HEAP32[$10 + 4 >> 2];
             $1 = $0 - 4 | 0;
             $9 = HEAP32[$1 >> 2];
             $2 = $9 + 1 | 0;
            }
           }
           if (!global$9) {
            $18 = $0 - 4 | 0;
            HEAP32[$18 >> 2] = $2;
            $1 = $0 + $9 | 0;
            HEAP8[$1 | 0] = $12;
            $12 = HEAP32[$18 >> 2];
            HEAP32[$45 >> 2] = $12;
            $9 = $0 - 8 | 0;
            $0 = memmove($9, $0, $12);
           }
          }
          if (!global$9) {
           $0 = $10 + 16 | 0;
           __stack_pointer = $0;
          }
          if (!global$9 | ($8 | 0) == 117) {
           emscripten_builtin_free($33);
           $5 = 117;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $0 = !$9;
           if ($0) {
            break block125
           }
           $24 = HEAP32[$28 + 8 >> 2];
           $32 = $24 + 57 | 0;
          }
          if (!global$9 | ($8 | 0) == 118) {
           $4 = emscripten_builtin_malloc($32);
           $5 = 118;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $4;
          }
          if (!global$9) {
           $0 = !$1;
           if ($0) {
            break block125
           }
           HEAP32[$48 >> 2] = $32;
           HEAP8[$1 + 26 | 0] = 0;
           HEAP8[$1 + 27 | 0] = 0;
           HEAP8[$1 + 24 | 0] = 8;
           HEAP8[$1 + 23 | 0] = $14;
           HEAP8[$1 + 22 | 0] = $14 >>> 8;
           HEAP8[$1 + 21 | 0] = $14 >>> 16;
           HEAP8[$1 + 20 | 0] = $14 >>> 24;
           HEAP8[$1 + 19 | 0] = $16;
           HEAP8[$1 + 18 | 0] = $16 >>> 8;
           HEAP8[$1 + 17 | 0] = $16 >>> 16;
           HEAP8[$1 + 16 | 0] = $16 >>> 24;
           HEAP8[$1 + 8 | 0] = 0;
           HEAP8[$1 + 9 | 0] = 0;
           HEAP8[$1 + 10 | 0] = 0;
           HEAP8[$1 + 11 | 0] = 13;
           HEAP8[$1 + 12 | 0] = 73;
           HEAP8[$1 + 13 | 0] = 72;
           HEAP8[$1 + 14 | 0] = 68;
           HEAP8[$1 + 15 | 0] = 82;
           HEAP8[$1 | 0] = 137;
           HEAP8[$1 + 1 | 0] = 80;
           HEAP8[$1 + 2 | 0] = 78;
           HEAP8[$1 + 3 | 0] = 71;
           HEAP8[$1 + 4 | 0] = 13;
           HEAP8[$1 + 5 | 0] = 10;
           HEAP8[$1 + 6 | 0] = 26;
           HEAP8[$1 + 7 | 0] = 10;
           HEAP8[$1 + 25 | 0] = HEAP32[($21 << 2) + 15232 >> 2];
           HEAP32[$28 + 12 >> 2] = $1 + 29;
           HEAP8[$1 + 28 | 0] = 0;
           stbiw__wpcrc($28 + 12 | 0, 13);
           $17 = HEAP32[$28 + 12 >> 2];
           HEAP8[$17 + 4 | 0] = 73;
           HEAP8[$17 + 5 | 0] = 68;
           HEAP8[$17 + 6 | 0] = 65;
           HEAP8[$17 + 7 | 0] = 84;
           HEAP8[$17 + 3 | 0] = $24;
           HEAP8[$17 + 2 | 0] = $24 >>> 8;
           HEAP8[$17 + 1 | 0] = $24 >>> 16;
           HEAP8[$17 | 0] = $24 >>> 24;
           $0 = memmove($17 + 8 | 0, $9, $24) + $24 | 0;
           HEAP32[$28 + 12 >> 2] = $0;
          }
          if (!global$9 | ($8 | 0) == 119) {
           emscripten_builtin_free($9);
           $5 = 119;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = $28 + 12 | 0;
           stbiw__wpcrc($2, $24);
           $0 = HEAP32[$28 + 12 >> 2];
           HEAP8[$0 | 0] = 0;
           HEAP8[$0 + 1 | 0] = 0;
           HEAP8[$0 + 2 | 0] = 0;
           HEAP8[$0 + 3 | 0] = 0;
           HEAP8[$0 + 4 | 0] = 73;
           HEAP8[$0 + 5 | 0] = 69;
           HEAP8[$0 + 6 | 0] = 78;
           HEAP8[$0 + 7 | 0] = 68;
           HEAP32[$28 + 12 >> 2] = $0 + 8;
           stbiw__wpcrc($2, 0);
           $17 = $1;
           $2 = HEAP32[$48 >> 2];
           $1 = $2 + $1 | 0;
           $0 = ($1 | 0) == HEAP32[$28 + 12 >> 2];
           if ($0) {
            break block125
           }
           __assert_fail(5098, 6972, 1209, 5250);
           wasm2js_trap();
          }
         }
         if (!global$9 | ($8 | 0) == 120) {
          emscripten_builtin_free($33);
          $5 = 120;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
        }
        if (!global$9) {
         __stack_pointer = $28 + 16 | 0;
         $0 = HEAP32[$35 + 52 >> 2];
        }
        if (!global$9 | ($8 | 0) == 121) {
         $4 = SaveFileData($7, $17, $0);
         $5 = 121;
         if ((global$9 | 0) == 1) {
          break block
         }
         $0 = $4;
        }
        if (!global$9 | ($8 | 0) == 122) {
         emscripten_builtin_free($17);
         $5 = 122;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         break block143
        }
       }
       if (!global$9) {
        $0 = IsFileExtension($7, 4828)
       }
       if ((global$9 | 0) == 2 | $0) {
        if (!global$9) {
         $1 = 0;
         $11 = __stack_pointer - 80 | 0;
         __stack_pointer = $11;
         $0 = __memset($11 + 12 | 0, 0, 68);
        }
        if (!global$9 | ($8 | 0) == 123) {
         $4 = fopen($7);
         $5 = 123;
         if ((global$9 | 0) == 1) {
          break block
         }
         $0 = $4;
        }
        if (!global$9) {
         HEAP32[$11 + 8 >> 2] = $0;
         HEAP32[$11 + 4 >> 2] = 23;
        }
        if ((global$9 | 0) == 2 | $0) {
         if (!global$9) {
          $0 = __stack_pointer - 224 | 0;
          __stack_pointer = $0;
          $17 = ($2 | 0) != 4;
          $1 = $11 + 4 | 0;
         }
         block144 : {
          if ((global$9 | 0) == 2 | $17) {
           if (!global$9) {
            HEAP32[$0 + 204 >> 2] = 0;
            HEAP32[$0 + 208 >> 2] = 0;
            HEAP32[$0 + 196 >> 2] = 0;
            HEAP32[$0 + 200 >> 2] = 0;
            HEAP32[$0 + 188 >> 2] = 0;
            HEAP32[$0 + 192 >> 2] = 0;
            HEAP32[$0 + 180 >> 2] = 1;
            HEAP32[$0 + 184 >> 2] = 24;
            HEAP32[$0 + 176 >> 2] = $9;
            HEAP32[$0 + 172 >> 2] = $3;
            HEAP32[$0 + 164 >> 2] = 54;
            HEAP32[$0 + 168 >> 2] = 40;
            HEAP32[$0 + 156 >> 2] = 0;
            HEAP32[$0 + 160 >> 2] = 0;
            HEAP32[$0 + 144 >> 2] = 66;
            HEAP32[$0 + 148 >> 2] = 77;
            $12 = $3 & 3;
            HEAP32[$0 + 152 >> 2] = Math_imul($12 + Math_imul($3, 3) | 0, $9) + 54;
            $17 = $0 + 144 | 0;
           }
           if (!global$9 | ($8 | 0) == 124) {
            $4 = stbiw__outfile($1, $3, $9, $2, $13, 0, $12, 11623, $17);
            $5 = 124;
            if ((global$9 | 0) == 1) {
             break block
            }
            $3 = $4;
           }
           if (!global$9) {
            break block144
           }
          }
          if (!global$9) {
           HEAP32[$0 + 132 >> 2] = 0;
           HEAP32[$0 + 124 >> 2] = 0;
           HEAP32[$0 + 128 >> 2] = 0;
           HEAP32[$0 + 116 >> 2] = 0;
           HEAP32[$0 + 120 >> 2] = 0;
           HEAP32[$0 + 108 >> 2] = 0;
           HEAP32[$0 + 112 >> 2] = 0;
           HEAP32[$0 + 100 >> 2] = 0;
           HEAP32[$0 + 104 >> 2] = 0;
           HEAP32[$0 + 92 >> 2] = 0;
           HEAP32[$0 + 96 >> 2] = 0;
           HEAP32[$0 + 84 >> 2] = 0;
           HEAP32[$0 + 88 >> 2] = 0;
           HEAP32[$0 + 76 >> 2] = 255;
           HEAP32[$0 + 80 >> 2] = -16777216;
           HEAP32[$0 + 68 >> 2] = 16711680;
           HEAP32[$0 + 72 >> 2] = 65280;
           HEAP32[$0 + 60 >> 2] = 0;
           HEAP32[$0 + 64 >> 2] = 0;
           HEAP32[$0 + 52 >> 2] = 0;
           HEAP32[$0 + 56 >> 2] = 0;
           HEAP32[$0 + 44 >> 2] = 3;
           HEAP32[$0 + 48 >> 2] = 0;
           HEAP32[$0 + 36 >> 2] = 1;
           HEAP32[$0 + 40 >> 2] = 32;
           HEAP32[$0 + 32 >> 2] = $9;
           HEAP32[$0 + 28 >> 2] = $3;
           HEAP32[$0 + 20 >> 2] = 122;
           HEAP32[$0 + 24 >> 2] = 108;
           HEAP32[$0 + 12 >> 2] = 0;
           HEAP32[$0 + 16 >> 2] = 0;
           HEAP32[$0 >> 2] = 66;
           HEAP32[$0 + 4 >> 2] = 77;
           $2 = (Math_imul($3, $9) << 2) + 122 | 0;
           HEAP32[$0 + 8 >> 2] = $2;
          }
          if (!global$9 | ($8 | 0) == 125) {
           $4 = stbiw__outfile($1, $3, $9, 4, $13, 1, 0, 11647, $0);
           $5 = 125;
           if ((global$9 | 0) == 1) {
            break block
           }
           $3 = $4;
          }
         }
         if (!global$9) {
          __stack_pointer = $0 + 224 | 0;
          $0 = HEAP32[$11 + 8 >> 2];
         }
         if (!global$9 | ($8 | 0) == 126) {
          $4 = fclose($0);
          $5 = 126;
          if ((global$9 | 0) == 1) {
           break block
          }
          $0 = $4;
         }
         $1 = global$9 ? $1 : $3;
        }
        if (!global$9) {
         __stack_pointer = $11 + 80 | 0;
         $0 = $1;
         break block143;
        }
       }
       if (!global$9) {
        $0 = !IsFileExtension($7, 7005)
       }
       block145 : {
        if (!global$9) {
         if ($0) {
          $0 = !IsFileExtension($7, 7131);
          if ($0) {
           break block145
          }
         }
         $1 = 0;
         $11 = 0;
         $24 = __stack_pointer - 80 | 0;
         __stack_pointer = $24;
         $17 = __memset($24 + 12 | 0, 0, 68);
         $0 = $3;
        }
        if (!global$9 | ($8 | 0) == 127) {
         $4 = fopen($7);
         $5 = 127;
         if ((global$9 | 0) == 1) {
          break block
         }
         $17 = $4;
        }
        if (!global$9) {
         HEAP32[$24 + 8 >> 2] = $17;
         HEAP32[$24 + 4 >> 2] = 23;
        }
        if ((global$9 | 0) == 2 | $17) {
         if (!global$9) {
          $16 = $24 + 4 | 0;
          $1 = $0;
          $22 = __stack_pointer;
          $14 = $22 - 4240 | 0;
          __stack_pointer = $14;
          $12 = $2;
          $2 = $2 - 5 >>> 0 < 4294967292;
          $0 = 0;
         }
         block146 : {
          if (!global$9) {
           if ($2) {
            break block146
           }
           $2 = !$9;
           if ($2) {
            break block146
           }
           $2 = !$1;
           if ($2) {
            break block146
           }
           $2 = !$13;
           if ($2) {
            break block146
           }
           while (1) {
            $21 = HEAPU8[$0 + 21472 | 0];
            $3 = $0 << 2;
            $2 = (Math_imul(HEAP32[$3 + 21184 >> 2], 20) + 50 | 0) / 100 | 0;
            $18 = ($2 | 0) >= 255 ? 255 : $2;
            HEAP8[$21 + ($14 + 3600 | 0) | 0] = ($18 | 0) <= 1 ? 1 : $18;
            $2 = (Math_imul(HEAP32[$3 + 20928 >> 2], 20) + 50 | 0) / 100 | 0;
            $2 = ($2 | 0) >= 255 ? 255 : $2;
            HEAP8[$21 + ($14 + 3664 | 0) | 0] = ($2 | 0) <= 1 ? 1 : $2;
            $0 = $0 + 1 | 0;
            if (($0 | 0) != 64) {
             continue
            }
            break;
           };
           $0 = 0;
           while (1) {
            $6 = HEAPF32[($27 << 2) + 21440 >> 2];
            $10 = 0;
            while (1) {
             $21 = $0 << 2;
             $20 = HEAPU8[$0 + 21472 | 0];
             $29 = HEAPF32[($10 << 2) + 21440 >> 2];
             HEAPF32[$21 + ($14 + 3984 | 0) >> 2] = Math_fround(1.0) / Math_fround(Math_fround($6 * Math_fround(HEAPU8[$20 + ($14 + 3664 | 0) | 0])) * $29);
             $3 = HEAPU8[($14 + 3600 | 0) + $20 | 0];
             HEAPF32[($14 + 3728 | 0) + $21 >> 2] = Math_fround(1.0) / Math_fround($29 * Math_fround($6 * Math_fround($3 >>> 0)));
             $0 = $0 + 1 | 0;
             $10 = $10 + 1 | 0;
             if (($10 | 0) != 8) {
              continue
             }
             break;
            };
            $27 = $27 + 1 | 0;
            if (($27 | 0) != 8) {
             continue
            }
            break;
           };
           HEAP32[$14 + 2580 >> 2] = 10617284;
           HEAP32[$14 + 2572 >> 2] = 17891840;
           HEAP32[$14 + 2576 >> 2] = -16707325;
           HEAP8[$14 + 2569 | 0] = 3;
           HEAP8[$14 + 2570 | 0] = 1;
           HEAP32[$14 + 2560 >> 2] = 285262079;
           HEAP8[$14 + 2571 | 0] = 34;
           HEAP8[$14 + 2564 | 0] = 8;
           HEAP8[$14 + 2568 | 0] = $1;
           HEAP8[$14 + 2567 | 0] = $1 >>> 8;
           HEAP8[$14 + 2566 | 0] = $9;
           HEAP8[$14 + 2565 | 0] = $9 >>> 8;
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 128) {
           FUNCTION_TABLE[$2 | 0]($0, 21536, 25);
           $5 = 128;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = $14 + 3664 | 0;
           $3 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 129) {
           FUNCTION_TABLE[$3 | 0]($0, $2, 64);
           $5 = 129;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           HEAP8[$14 + 1536 | 0] = 1;
           $2 = $14 + 1536 | 0;
           $3 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 130) {
           FUNCTION_TABLE[$3 | 0]($0, $2, 1);
           $5 = 130;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = $14 + 3600 | 0;
           $3 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 131) {
           FUNCTION_TABLE[$3 | 0]($0, $2, 64);
           $5 = 131;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = $14 + 2560 | 0;
           $3 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 132) {
           FUNCTION_TABLE[$3 | 0]($0, $2, 24);
           $5 = 132;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 133) {
           FUNCTION_TABLE[$2 | 0]($0, 16353, 16);
           $5 = 133;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 134) {
           FUNCTION_TABLE[$2 | 0]($0, 16369, 12);
           $5 = 134;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           HEAP8[$14 + 1536 | 0] = 16;
           $2 = $14 + 1536 | 0;
           $3 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 135) {
           FUNCTION_TABLE[$3 | 0]($0, $2, 1);
           $5 = 135;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 136) {
           FUNCTION_TABLE[$2 | 0]($0, 16385, 16);
           $5 = 136;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 137) {
           FUNCTION_TABLE[$2 | 0]($0, 16416, 162);
           $5 = 137;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           HEAP8[$14 + 1536 | 0] = 1;
           $2 = $14 + 1536 | 0;
           $3 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 138) {
           FUNCTION_TABLE[$3 | 0]($0, $2, 1);
           $5 = 138;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 139) {
           FUNCTION_TABLE[$2 | 0]($0, 16593, 16);
           $5 = 139;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 140) {
           FUNCTION_TABLE[$2 | 0]($0, 16609, 12);
           $5 = 140;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           HEAP8[$14 + 1536 | 0] = 17;
           $2 = $14 + 1536 | 0;
           $3 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 141) {
           FUNCTION_TABLE[$3 | 0]($0, $2, 1);
           $5 = 141;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 142) {
           FUNCTION_TABLE[$2 | 0]($0, 16625, 16);
           $5 = 142;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 143) {
           FUNCTION_TABLE[$2 | 0]($0, 16656, 162);
           $5 = 143;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $2 = HEAP32[$16 >> 2];
           $0 = HEAP32[$16 + 4 >> 2];
          }
          if (!global$9 | ($8 | 0) == 144) {
           FUNCTION_TABLE[$2 | 0]($0, 21561, 14);
           $5 = 144;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           HEAP32[$14 + 3596 >> 2] = 0;
           HEAP32[$14 + 3592 >> 2] = 0;
           $10 = ($12 | 0) > 2;
           $27 = $13 + $10 | 0;
           $18 = ($10 << 1) + $13 | 0;
           $0 = ($9 | 0) > 0;
          }
          if ((global$9 | 0) == 2 | $0) {
           if (!global$9) {
            $43 = $1 - 1 | 0;
            $45 = $14 + 3104 | 0;
            $46 = $14 + 3072 | 0;
            $41 = ($1 | 0) <= 0;
            $30 = 16;
            $44 = $14 + 2592 | 0;
            $34 = $9 - 1 | 0;
           }
           while (1) {
            if (!global$9) {
             $31 = 16;
             $3 = 0;
             $0 = !$41;
            }
            if ((global$9 | 0) == 2 | $0) {
             while (1) {
              if (!global$9) {
               $10 = 0;
               $21 = HEAP32[16591];
               $2 = $11;
               while (1) {
                $0 = ($2 | 0) < ($9 | 0) ? $2 : $34;
                $22 = Math_imul($21 ? $34 - $0 | 0 : $0, $1);
                $0 = $3;
                while (1) {
                 $4 = $10 << 2;
                 $20 = Math_imul($22 + (($0 | 0) < ($1 | 0) ? $0 : $43) | 0, $12);
                 $6 = Math_fround(HEAPU8[$20 + $18 | 0]);
                 $29 = Math_fround(HEAPU8[$13 + $20 | 0]);
                 $36 = Math_fround(HEAPU8[$20 + $27 | 0]);
                 HEAPF32[$4 + ($14 + 1536 | 0) >> 2] = Math_fround($6 * Math_fround(.5)) + Math_fround(Math_fround($29 * Math_fround(-.16874000430107117)) + Math_fround($36 * Math_fround(-.33125999569892883)));
                 HEAPF32[$4 + ($14 + 512 | 0) >> 2] = Math_fround($6 * Math_fround(-.08130999654531479)) + Math_fround(Math_fround($29 * Math_fround(.5)) + Math_fround($36 * Math_fround(-.4186899960041046)));
                 $52 = $14 + 2560 | 0;
                 HEAPF32[$4 + $52 >> 2] = Math_fround(Math_fround($6 * Math_fround(.11400000005960464)) + Math_fround(Math_fround($29 * Math_fround(.29899999499320984)) + Math_fround($36 * Math_fround(.5870000123977661)))) + Math_fround(-128.0);
                 $10 = $10 + 1 | 0;
                 $0 = $0 + 1 | 0;
                 if (($31 | 0) != ($0 | 0)) {
                  continue
                 }
                 break;
                };
                $2 = $2 + 1 | 0;
                if (($30 | 0) != ($2 | 0)) {
                 continue
                }
                break;
               };
               $10 = $14 + 3592 | 0;
               $2 = $10;
               $20 = $14 + 3984 | 0;
               $22 = $20;
               $28 = $14 + 3596 | 0;
               $21 = $28;
               $32 = $2;
               $42 = $20;
               $49 = $21;
               $48 = $2;
               $64 = $20;
               $0 = $21;
              }
              if (!global$9 | ($8 | 0) == 145) {
               $4 = stbiw__jpg_processDU($16, $49, $48, $52, 16, $64, $33, 16832, 18880);
               $5 = 145;
               if ((global$9 | 0) == 1) {
                break block
               }
               $33 = $4;
              }
              if (!global$9 | ($8 | 0) == 146) {
               $4 = stbiw__jpg_processDU($16, $28, $32, $44, 16, $42, $33, 16832, 18880);
               $5 = 146;
               if ((global$9 | 0) == 1) {
                break block
               }
               $28 = $4;
              }
              if (!global$9 | ($8 | 0) == 147) {
               $4 = stbiw__jpg_processDU($16, $21, $10, $46, 16, $20, $28, 16832, 18880);
               $5 = 147;
               if ((global$9 | 0) == 1) {
                break block
               }
               $21 = $4;
              }
              if (!global$9 | ($8 | 0) == 148) {
               $4 = stbiw__jpg_processDU($16, $0, $2, $45, 16, $22, $21, 16832, 18880);
               $5 = 148;
               if ((global$9 | 0) == 1) {
                break block
               }
               $33 = $4;
              }
              if (!global$9) {
               $32 = 0;
               $21 = 0;
               while (1) {
                $42 = $32 << 5;
                $10 = 0;
                while (1) {
                 $4 = ($10 << 1) + $42 << 2;
                 $22 = $4 | 4;
                 $5 = $14 + 256 | 0;
                 $2 = $21 << 2;
                 $20 = $14 + 1536 | 0;
                 $0 = $4 | 64;
                 $28 = $4 | 68;
                 $48 = $20 + $28 | 0;
                 HEAPF32[$5 + $2 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$4 + $20 >> 2] + HEAPF32[$20 + $22 >> 2]) + HEAPF32[$0 + $20 >> 2]) + HEAPF32[$48 >> 2]) * Math_fround(.25);
                 $20 = $2 + $14 | 0;
                 $2 = $14 + 512 | 0;
                 $49 = $2;
                 HEAPF32[$20 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$4 + $2 >> 2] + HEAPF32[$2 + $22 >> 2]) + HEAPF32[$0 + $2 >> 2]) + HEAPF32[$2 + $28 >> 2]) * Math_fround(.25);
                 $21 = $21 + 1 | 0;
                 $10 = $10 + 1 | 0;
                 if (($10 | 0) != 8) {
                  continue
                 }
                 break;
                };
                $32 = $32 + 1 | 0;
                if (($32 | 0) != 8) {
                 continue
                }
                break;
               };
               $31 = $31 + 16 | 0;
               $2 = $14 + 3592 | 0;
               $22 = $5;
               $21 = $14 + 3728 | 0;
               $0 = $14 + 3596 | 0;
              }
              if (!global$9 | ($8 | 0) == 149) {
               $4 = stbiw__jpg_processDU($16, $0, $2, $22, 8, $21, $39, 17856, 19904);
               $5 = 149;
               if ((global$9 | 0) == 1) {
                break block
               }
               $39 = $4;
              }
              if (!global$9) {
               $2 = $14 + 3592 | 0;
               $22 = $14 + 3728 | 0;
               $0 = $14 + 3596 | 0;
              }
              if (!global$9 | ($8 | 0) == 150) {
               $4 = stbiw__jpg_processDU($16, $0, $2, $14, 8, $22, $38, 17856, 19904);
               $5 = 150;
               if ((global$9 | 0) == 1) {
                break block
               }
               $38 = $4;
              }
              if (!global$9) {
               $3 = $3 + 16 | 0;
               $0 = ($3 | 0) < ($1 | 0);
               if ($0) {
                continue
               }
              }
              break;
             }
            }
            if (!global$9) {
             $30 = $30 + 16 | 0;
             $11 = $11 + 16 | 0;
             $0 = ($11 | 0) < ($9 | 0);
             if ($0) {
              continue
             }
            }
            break;
           };
          }
          if (!global$9) {
           $1 = $14 + 3592 | 0;
           $0 = $14 + 3596 | 0;
          }
          if (!global$9 | ($8 | 0) == 151) {
           stbiw__jpg_writeBits($16, $0, $1, 21576);
           $5 = 151;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           HEAP8[$14 + 2560 | 0] = 255;
           $1 = HEAP32[$16 + 4 >> 2];
           $2 = $14 + 2560 | 0;
           $3 = HEAP32[$16 >> 2];
           $0 = 1;
          }
          if (!global$9 | ($8 | 0) == 152) {
           FUNCTION_TABLE[$3 | 0]($1, $2, 1);
           $5 = 152;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           HEAP8[$14 + 2560 | 0] = 217;
           $3 = HEAP32[$16 >> 2];
           $1 = HEAP32[$16 + 4 >> 2];
           $2 = $14 + 2560 | 0;
          }
          if (!global$9 | ($8 | 0) == 153) {
           FUNCTION_TABLE[$3 | 0]($1, $2, 1);
           $5 = 153;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
         }
         if (!global$9) {
          $1 = $14 + 4240 | 0;
          __stack_pointer = $1;
         }
         if (!global$9 | ($8 | 0) == 154) {
          $4 = fclose($17);
          $5 = 154;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $4;
         }
         $1 = global$9 ? $1 : $0;
        }
        if (!global$9) {
         __stack_pointer = $24 + 80 | 0;
         $0 = $1;
         break block143;
        }
       }
       if (!global$9) {
        $0 = IsFileExtension($7, 5628)
       }
       if ((global$9 | 0) == 2 | $0) {
        if (!global$9) {
         $1 = $21 - 4 | 0;
         $0 = 3;
        }
        block147 : {
         block149 : {
          if (!global$9) {
           block148 : {
            switch ($1 | 0) {
            case 0:
             break block147;
            case 3:
             break block149;
            default:
             break block148;
            };
           }
           $0 = 0;
          }
          if (!global$9 | ($8 | 0) == 155) {
           TraceLog(4, 11455, 0);
           $5 = 155;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           break block143
          }
         }
         $0 = global$9 ? $0 : 4;
        }
        if (!global$9) {
         HEAP32[$35 + 60 >> 2] = 0;
         HEAP32[$35 + 56 >> 2] = $9;
         HEAP32[$35 + 52 >> 2] = $3;
         HEAP8[$35 + 60 | 0] = $0;
         $14 = 0;
         $0 = __stack_pointer;
         $28 = $0 - 16 | 0;
         __stack_pointer = $28;
         $1 = $35 + 52 | 0;
        }
        if (!global$9 | ($8 | 0) == 156) {
         $4 = fopen($7);
         $5 = 156;
         if ((global$9 | 0) == 1) {
          break block
         }
         $11 = $4;
        }
        $0 = global$9 ? $0 : !$11;
        block150 : {
         if (!global$9) {
          if ($0) {
           break block150
          }
          $10 = $13;
          $32 = $28 + 12 | 0;
          $34 = __stack_pointer - 256 | 0;
          __stack_pointer = $34;
          $2 = !$1;
          $0 = 0;
         }
         block151 : {
          if (!global$9) {
           if (!$32 | (!$10 | $2)) {
            break block151
           }
           $9 = HEAP32[$1 >> 2];
           if (!$9) {
            break block151
           }
           $18 = HEAP32[$1 + 4 >> 2];
           if (!$18) {
            break block151
           }
           $27 = HEAPU8[$1 + 8 | 0];
           if (($27 - 5 & 255) >>> 0 < 254) {
            break block151
           }
           $1 = HEAPU8[$1 + 9 | 0];
           if (4e8 / ($9 >>> 0) >>> 0 <= $18 >>> 0 | $1 >>> 0 > 1) {
            break block151
           }
           $3 = Math_imul($9, $18);
           $2 = Math_imul($3, $27 + 1 & 255) + 22 | 0;
          }
          if (!global$9 | ($8 | 0) == 157) {
           $4 = emscripten_builtin_malloc($2);
           $5 = 157;
           if ((global$9 | 0) == 1) {
            break block
           }
           $2 = $4;
          }
          if (!global$9) {
           if (!$2) {
            break block151
           }
           HEAP8[$2 + 13 | 0] = $1;
           HEAP8[$2 + 12 | 0] = $27;
           HEAP8[$2 + 11 | 0] = $18;
           HEAP8[$2 + 7 | 0] = $9;
           HEAP8[$2 | 0] = 113;
           HEAP8[$2 + 1 | 0] = 111;
           HEAP8[$2 + 2 | 0] = 105;
           HEAP8[$2 + 3 | 0] = 102;
           HEAP8[$2 + 10 | 0] = $18 >>> 8;
           HEAP8[$2 + 9 | 0] = $18 >>> 16;
           HEAP8[$2 + 8 | 0] = $18 >>> 24;
           HEAP8[$2 + 6 | 0] = $9 >>> 8;
           HEAP8[$2 + 5 | 0] = $9 >>> 16;
           $43 = $2 + 4 | 0;
           HEAP8[$43 | 0] = $9 >>> 24;
           $45 = __memset($34, 0, 256);
           $33 = Math_imul($3, $27);
           $1 = ($33 | 0) <= 0;
           block152 : {
            if ($1) {
             $18 = 14;
             break block152;
            }
            $39 = $2 + 3 | 0;
            $38 = $2 + 2 | 0;
            $31 = $2 + 1 | 0;
            $46 = $33 - $27 | 0;
            $18 = 14;
            $44 = ($27 | 0) != 4;
            $12 = 255;
            $1 = 0;
            $9 = 0;
            while (1) {
             $17 = $9;
             $16 = $0;
             $20 = $1;
             $21 = $12;
             $1 = $10 + $30 | 0;
             $9 = HEAPU8[$1 + 2 | 0];
             $0 = HEAPU8[$1 + 1 | 0];
             $12 = $44 ? $12 : HEAPU8[$1 + 3 | 0];
             $1 = HEAPU8[$1 | 0];
             $3 = $1 | ($12 << 24 | $9 << 16 | $0 << 8);
             block154 : {
              if (($3 | 0) == ($20 & 255 | (($17 & 255) << 16 | $21 << 24 | ($16 & 255) << 8))) {
               $3 = $14 + 1 | 0;
               if (!(($3 | 0) == 62 | ($30 | 0) == ($46 | 0))) {
                $14 = $3;
                break block154;
               }
               HEAP8[$2 + $18 | 0] = $14 | 192;
               $18 = $18 + 1 | 0;
               $14 = 0;
               break block154;
              }
              if (($14 | 0) > 0) {
               HEAP8[$2 + $18 | 0] = $14 - 1 | 192;
               $14 = 0;
               $18 = $18 + 1 | 0;
              }
              $41 = ((Math_imul($0, 5) + Math_imul($1, 3) | 0) + Math_imul($9, 7) | 0) + Math_imul($12, 11) & 63;
              $24 = ($41 << 2) + $45 | 0;
              if (($3 | 0) == HEAP32[$24 >> 2]) {
               HEAP8[$2 + $18 | 0] = $41;
               $18 = $18 + 1 | 0;
               break block154;
              }
              HEAP8[$24 + 3 | 0] = $12;
              HEAP8[$24 + 2 | 0] = $9;
              HEAP8[$24 + 1 | 0] = $0;
              HEAP8[$24 | 0] = $1;
              if (($21 & 255) == ($12 | 0)) {
               $21 = $9 - $17 | 0;
               block155 : {
                $17 = $1 - $20 | 0;
                $3 = $0 - $16 | 0;
                if (($17 + 2 & 255) >>> 0 > 3 | ($3 + 2 & 255) >>> 0 > 3) {
                 break block155
                }
                $16 = $21 + 2 | 0;
                if (($16 & 255) >>> 0 > 3) {
                 break block155
                }
                $21 = $2 + $18 | 0;
                HEAP8[$21 | 0] = ($3 << 2) + 8 | ($17 << 4) + 32 | $16 | 64;
                $18 = $18 + 1 | 0;
                break block154;
               }
               block156 : {
                $17 = $17 - $3 | 0;
                if (($17 + 8 & 255) >>> 0 > 15) {
                 break block156
                }
                $16 = $3 + 32 | 0;
                if (($16 & 255) >>> 0 > 63) {
                 break block156
                }
                $3 = ($21 - $3 | 0) + 8 | 0;
                $21 = ($3 & 255) >>> 0 > 15;
                if ($21) {
                 break block156
                }
                HEAP8[$2 + $18 | 0] = $16 | 128;
                $21 = $18 + $31 | 0;
                HEAP8[$21 | 0] = ($3 | $17 << 4) ^ 128;
                $18 = $18 + 2 | 0;
                break block154;
               }
               HEAP8[$2 + $18 | 0] = 254;
               HEAP8[$18 + $31 | 0] = $1;
               HEAP8[$18 + $38 | 0] = $0;
               HEAP8[$18 + $39 | 0] = $9;
               $18 = $18 + 4 | 0;
               break block154;
              }
              HEAP8[$2 + $18 | 0] = 255;
              HEAP8[$18 + $31 | 0] = $1;
              HEAP8[$18 + $38 | 0] = $0;
              HEAP8[$18 + $39 | 0] = $9;
              HEAP8[$18 + $43 | 0] = $12;
              $18 = $18 + 5 | 0;
             }
             $30 = $27 + $30 | 0;
             $3 = ($33 | 0) > ($30 | 0);
             if ($3) {
              continue
             }
             break;
            };
           }
           $0 = $2 + $18 | 0;
           HEAP8[$0 | 0] = 0;
           HEAP8[$0 + 1 | 0] = 0;
           HEAP8[$0 + 2 | 0] = 0;
           HEAP8[$0 + 3 | 0] = 0;
           HEAP8[$0 + 4 | 0] = 0;
           HEAP8[$0 + 5 | 0] = 0;
           HEAP8[$0 + 6 | 0] = 0;
           HEAP8[$0 + 7 | 0] = 1;
           HEAP32[$32 >> 2] = $18 + 8;
           $0 = $2;
          }
         }
         if (!global$9) {
          __stack_pointer = $34 + 256 | 0;
          $1 = $0;
          $0 = !$0;
         }
         if ((global$9 | 0) == 2 | $0) {
          if (!global$9 | ($8 | 0) == 158) {
           $4 = fclose($11);
           $5 = 158;
           if ((global$9 | 0) == 1) {
            break block
           }
           $0 = $4;
          }
          if (!global$9) {
           break block150
          }
         }
         $0 = global$9 ? $0 : HEAP32[$28 + 12 >> 2];
         if (!global$9 | ($8 | 0) == 159) {
          $4 = fwrite($1, 1, $0, $11);
          $5 = 159;
          if ((global$9 | 0) == 1) {
           break block
          }
          $0 = $4;
         }
         if (!global$9 | ($8 | 0) == 160) {
          $4 = fflush($11);
          $5 = 160;
          if ((global$9 | 0) == 1) {
           break block
          }
          $0 = $4;
         }
         $0 = global$9 ? $0 : HEAP32[$11 + 76 >> 2] < 0;
         block157 : {
          if (!($0 ? global$9 : 1)) {
           $10 = HEAP32[$11 >> 2];
           break block157;
          }
          if (!global$9 | ($8 | 0) == 161) {
           $4 = __lockfile($11);
           $5 = 161;
           if ((global$9 | 0) == 1) {
            break block
           }
           $0 = $4;
          }
          if (!global$9) {
           $10 = HEAP32[$11 >> 2];
           $0 = !$0;
           if ($0) {
            break block157
           }
           __unlockfile($11);
          }
         }
         if (!global$9 | ($8 | 0) == 162) {
          $4 = fclose($11);
          $5 = 162;
          if ((global$9 | 0) == 1) {
           break block
          }
          $0 = $4;
         }
         if (!global$9 | ($8 | 0) == 163) {
          emscripten_builtin_free($1);
          $5 = 163;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $0 = HEAP32[$28 + 12 >> 2];
          $1 = $10 >>> 5 & 1;
          $22 = $1 ? 0 : $0;
         }
        }
        if (!global$9) {
         __stack_pointer = $28 + 16 | 0;
         $0 = $22;
         break block143;
        }
       }
       if (!global$9) {
        $0 = 0;
        if (!IsFileExtension($7, 2252)) {
         break block143
        }
        $0 = GetPixelDataSize($3, $9, $21);
       }
       if (!global$9 | ($8 | 0) == 164) {
        $4 = SaveFileData($7, $1, $0);
        $5 = 164;
        if ((global$9 | 0) == 1) {
         break block
        }
        $0 = $4;
       }
      }
      if (!global$9 | ($8 | 0) == 165 ? (global$9 | 0) == 2 | $63 : 0) {
       emscripten_builtin_free($13);
       $5 = 165;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if ((global$9 | 0) == 2 | $0) {
       if (!global$9) {
        HEAP32[$35 + 16 >> 2] = $7;
        $0 = $35 + 16 | 0;
       }
       if (!global$9 | ($8 | 0) == 166) {
        TraceLog(3, 1389, $0);
        $5 = 166;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        break block87
       }
      }
      if (!global$9) {
       HEAP32[$35 >> 2] = $7
      }
      if (!global$9 | ($8 | 0) == 167) {
       TraceLog(4, 8031, $35);
       $5 = 167;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $0 = $35 - -64 | 0;
      __stack_pointer = $0;
     }
     if (!global$9 | ($8 | 0) == 168) {
      emscripten_builtin_free($23);
      $5 = 168;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $0 = (__syscall_ret(__syscall_faccessat(-100, $7 | 0, 0, 0) | 0) | 0) != -1
     }
     if ((global$9 | 0) == 2 | $0) {
      if (!global$9) {
       HEAP32[$15 + 16 >> 2] = $7;
       $0 = $15 + 16 | 0;
      }
      if (!global$9 | ($8 | 0) == 169) {
       TraceLog(3, 1176, $0);
       $5 = 169;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       break block80
      }
     }
     if (!global$9) {
      HEAP32[$15 >> 2] = $7
     }
     if (!global$9 | ($8 | 0) == 170) {
      TraceLog(4, 8389, $15);
      $5 = 170;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     __stack_pointer = $15 + 608 | 0;
     HEAP32[15562] = HEAP32[15562] + 1;
    }
   }
   if (!global$9) {
    HEAP32[15532] = HEAP32[15532] + 1;
    __stack_pointer = $19 + 288 | 0;
    __stack_pointer = $37 + 48 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $7;
  HEAP32[$4 + 20 >> 2] = $9;
  HEAPF32[$4 + 24 >> 2] = $6;
  HEAP32[$4 + 28 >> 2] = $14;
  HEAP32[$4 + 32 >> 2] = $10;
  HEAP32[$4 + 36 >> 2] = $11;
  HEAP32[$4 + 40 >> 2] = $12;
  HEAP32[$4 + 44 >> 2] = $13;
  HEAP32[$4 + 48 >> 2] = $15;
  HEAP32[$4 + 52 >> 2] = $18;
  HEAP32[$4 + 56 >> 2] = $17;
  HEAP32[$4 + 60 >> 2] = $16;
  HEAP32[$4 + 64 >> 2] = $19;
  HEAP32[$4 + 68 >> 2] = $20;
  HEAP32[$4 + 72 >> 2] = $23;
  HEAP32[$4 + 76 >> 2] = $21;
  HEAP32[$4 + 80 >> 2] = $22;
  HEAP32[$4 + 84 >> 2] = $24;
  HEAP32[$4 + 88 >> 2] = $27;
  HEAPF32[$4 + 92 >> 2] = $25;
  wasm2js_scratch_store_f64(+$26);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 96 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 100 >> 2] = $0;
  HEAP32[$4 + 104 >> 2] = $30;
  HEAP32[$4 + 108 >> 2] = $28;
  HEAPF32[$4 + 112 >> 2] = $29;
  HEAPF32[$4 + 116 >> 2] = $36;
  HEAP32[$4 + 120 >> 2] = $32;
  HEAP32[$4 + 124 >> 2] = $31;
  HEAP32[$4 + 128 >> 2] = $33;
  HEAP32[$4 + 132 >> 2] = $35;
  HEAP32[$4 + 136 >> 2] = $34;
  HEAP32[$4 + 140 >> 2] = $38;
  HEAP32[$4 + 144 >> 2] = $39;
  HEAP32[$4 + 148 >> 2] = $37;
  wasm2js_scratch_store_f64(+$40);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 152 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 156 >> 2] = $0;
  HEAP32[$4 + 160 >> 2] = $41;
  HEAP32[$4 + 164 >> 2] = $43;
  HEAP32[$4 + 168 >> 2] = $44;
  HEAP32[$4 + 172 >> 2] = $42;
  HEAP32[$4 + 176 >> 2] = $45;
  HEAP32[$4 + 180 >> 2] = $46;
  HEAPF32[$4 + 184 >> 2] = $47;
  HEAP32[$4 + 188 >> 2] = $48;
  HEAP32[$4 + 192 >> 2] = $49;
  HEAPF32[$4 + 196 >> 2] = $51;
  HEAPF32[$4 + 200 >> 2] = $50;
  wasm2js_scratch_store_f64(+$56);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 204 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 208 >> 2] = $0;
  HEAPF32[$4 + 212 >> 2] = $53;
  HEAP32[$4 + 216 >> 2] = $52;
  HEAPF32[$4 + 220 >> 2] = $57;
  wasm2js_scratch_store_f64(+$54);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 224 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 228 >> 2] = $0;
  wasm2js_scratch_store_f64(+$59);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 232 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 236 >> 2] = $0;
  HEAPF32[$4 + 240 >> 2] = $60;
  HEAP32[$4 + 244 >> 2] = $61;
  wasm2js_scratch_store_f64(+$62);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 248 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 252 >> 2] = $0;
  HEAP32[$4 + 256 >> 2] = $63;
  HEAP32[$4 + 260 >> 2] = $64;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 264;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2____put_character_sequence_5babi_ne190106_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 56;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $15 = HEAP32[$1 + 44 >> 2];
   $14 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $12 = __stack_pointer - 16 | 0;
   __stack_pointer = $12;
   $3 = $12 + 4 | 0;
  }
  block : {
   if (!global$9 | !$9) {
    $6 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($3, $0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $15 = $6;
   }
   $3 = global$9 ? $3 : HEAPU8[$15 | 0] != 1;
   block1 : {
    if (!global$9) {
     if ($3) {
      break block1
     }
     $14 = $1 + $2 | 0;
     $2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
     $13 = (HEAP32[$2 + 4 >> 2] & 176) == 32 ? $14 : $1;
     $5 = HEAP32[$2 + 24 >> 2];
     $3 = HEAPU8[$2 + 80 | 0] == 1;
    }
    block2 : {
     if (!global$9) {
      if ($3) {
       $3 = HEAPU8[$2 + 76 | 0] | HEAPU8[$2 + 77 | 0] << 8 | (HEAPU8[$2 + 78 | 0] << 16 | HEAPU8[$2 + 79 | 0] << 24);
       break block2;
      }
      $3 = $12 + 12 | 0;
      std____2__ios_base__getloc_28_29_20const($3, $2);
     }
     if (!global$9 | ($9 | 0) == 1) {
      $6 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3, 78752);
      $10 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $6;
     }
     $4 = global$9 ? $4 : HEAP32[HEAP32[$3 >> 2] + 28 >> 2];
     if (!global$9 | ($9 | 0) == 2) {
      $6 = FUNCTION_TABLE[$4 | 0]($3, 32) | 0;
      $10 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $6;
     }
     $4 = global$9 ? $4 : $12 + 12 | 0;
     if (!global$9 | ($9 | 0) == 3) {
      std____2__locale___locale_28_29($4);
      $10 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      HEAP8[$2 + 76 | 0] = $3;
      HEAP8[$2 + 77 | 0] = $3 >>> 8;
      HEAP8[$2 + 78 | 0] = $3 >>> 16;
      HEAP8[$2 + 79 | 0] = $3 >>> 24;
      HEAP8[$2 + 80 | 0] = 1;
     }
    }
    if (!global$9) {
     $4 = $1;
     $16 = $3 << 24 >> 24;
     $7 = __stack_pointer - 16 | 0;
     __stack_pointer = $7;
     $1 = $5;
     $5 = !$1;
     $3 = 0;
    }
    block7 : {
     block4 : {
      block3 : {
       if (!global$9) {
        if ($5) {
         break block3
        }
        $5 = $13 - $4 | 0;
        $11 = ($5 | 0) > 0;
        $8 = HEAP32[$2 + 12 >> 2];
       }
       if ((global$9 | 0) == 2 | $11) {
        $11 = global$9 ? $11 : HEAP32[HEAP32[$1 >> 2] + 48 >> 2];
        if (!global$9 | ($9 | 0) == 4) {
         $6 = FUNCTION_TABLE[$11 | 0]($1, $4, $5) | 0;
         $10 = 4;
         if ((global$9 | 0) == 1) {
          break block
         }
         $11 = $6;
        }
        if (!global$9) {
         $5 = ($5 | 0) != ($11 | 0);
         if ($5) {
          break block3
         }
        }
       }
       if (!global$9) {
        $5 = $14 - $4 | 0;
        $4 = ($5 | 0) < ($8 | 0) ? $8 - $5 | 0 : 0;
        $5 = ($4 | 0) > 0;
       }
       if ((global$9 | 0) == 2 | $5) {
        if (!global$9) {
         $3 = $4 >>> 0 >= 2147483640;
         if ($3) {
          break block4
         }
         $3 = $4 >>> 0 >= 11;
        }
        block5 : {
         if ((global$9 | 0) == 2 | $3) {
          if (!global$9) {
           $3 = $4 | 7;
           $5 = $3 + 1 | 0;
          }
          if (!global$9 | ($9 | 0) == 5) {
           $6 = operator_20new_28unsigned_20long_29($5);
           $10 = 5;
           if ((global$9 | 0) == 1) {
            break block
           }
           $8 = $6;
          }
          if (!global$9) {
           $3 = $3 - 2147483647 | 0;
           HEAP32[$7 + 12 >> 2] = $3;
           HEAP32[$7 + 4 >> 2] = $8;
           HEAP32[$7 + 8 >> 2] = $4;
           break block5;
          }
         }
         if (!global$9) {
          HEAP8[$7 + 15 | 0] = $4;
          $8 = $7 + 4 | 0;
         }
        }
        if (!global$9) {
         if ($4) {
          wasm2js_memory_fill($8, $16, $4)
         }
         HEAP8[$4 + $8 | 0] = 0;
         $5 = HEAP8[$7 + 15 | 0] < 0 ? HEAP32[$7 + 4 >> 2] : $7 + 4 | 0;
         $8 = HEAP32[HEAP32[$1 >> 2] + 48 >> 2];
         $3 = 0;
        }
        if (!global$9 | ($9 | 0) == 6) {
         $6 = FUNCTION_TABLE[$8 | 0]($1, $5, $4) | 0;
         $10 = 6;
         if ((global$9 | 0) == 1) {
          break block
         }
         $8 = $6;
        }
        $5 = global$9 ? $5 : HEAP8[$7 + 15 | 0] < 0;
        if ($5 | (global$9 | 0) == 2) {
         $5 = global$9 ? $5 : HEAP32[$7 + 4 >> 2];
         if (!global$9 | ($9 | 0) == 7) {
          emscripten_builtin_free($5);
          $10 = 7;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
        }
        if (!global$9) {
         $4 = ($4 | 0) != ($8 | 0);
         if ($4) {
          break block3
         }
        }
       }
       if (!global$9) {
        $4 = $14 - $13 | 0;
        $5 = ($4 | 0) <= 0;
       }
       block6 : {
        if (!global$9) {
         if ($5) {
          break block6
         }
         $5 = HEAP32[HEAP32[$1 >> 2] + 48 >> 2];
        }
        if (!global$9 | ($9 | 0) == 8) {
         $6 = FUNCTION_TABLE[$5 | 0]($1, $13, $4) | 0;
         $10 = 8;
         if ((global$9 | 0) == 1) {
          break block
         }
         $5 = $6;
        }
        if (!global$9) {
         $4 = ($5 | 0) == ($4 | 0);
         if ($4) {
          break block6
         }
         break block3;
        }
       }
       if (!global$9) {
        HEAP32[$2 + 12 >> 2] = 0;
        $3 = $1;
       }
      }
      if (!global$9) {
       __stack_pointer = $7 + 16 | 0;
       break block7;
      }
     }
     if (!global$9 | ($9 | 0) == 9) {
      $6 = emscripten_builtin_malloc(88);
      $10 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $6;
     }
     if (!global$9) {
      $2 = $0 + 80 | 0;
      HEAP32[$2 >> 2] = 43244;
      HEAP32[$2 >> 2] = 43288;
      $4 = $2 + 4 | 0;
      $1 = strlen(7068);
      $0 = $1 + 13 | 0;
     }
     if (!global$9 | ($9 | 0) == 10) {
      $6 = operator_20new_28unsigned_20long_29($0);
      $10 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $6;
     }
     if (!global$9) {
      HEAP32[$0 + 8 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = $1;
      HEAP32[$0 >> 2] = $1;
      $0 = $0 + 12 | 0;
      $1 = $1 + 1 | 0;
      if ($1) {
       wasm2js_memory_copy($0, 7068, $1)
      }
      HEAP32[$4 >> 2] = $0;
      HEAP32[$2 >> 2] = 43336;
      __cxa_throw($2 | 0, 43348, 2);
      wasm2js_trap();
     }
    }
    if (!global$9) {
     if ($3) {
      break block1
     }
     $2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
     $1 = HEAP32[$2 + 16 >> 2] | 5;
     std____2__ios_base__clear_28unsigned_20int_29($2, $1);
    }
   }
   if (!global$9 | ($9 | 0) == 11) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($15);
    $10 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $12 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $8;
  HEAP32[$6 + 28 >> 2] = $7;
  HEAP32[$6 + 32 >> 2] = $11;
  HEAP32[$6 + 36 >> 2] = $12;
  HEAP32[$6 + 40 >> 2] = $13;
  HEAP32[$6 + 44 >> 2] = $15;
  HEAP32[$6 + 48 >> 2] = $14;
  HEAP32[$6 + 52 >> 2] = $16;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 56;
  return 0;
 }
 
 function main($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + -64;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $6 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$1 + 16 >> 2];
   $8 = HEAP32[$1 + 20 >> 2];
   $10 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $12 = HEAP32[$1 + 32 >> 2];
   $13 = HEAP32[$1 + 36 >> 2];
   $14 = HEAP32[$1 + 40 >> 2];
   $17 = HEAP32[$1 + 44 >> 2];
   $18 = HEAP32[$1 + 48 >> 2];
   $19 = HEAP32[$1 + 52 >> 2];
   $21 = HEAP32[$1 + 56 >> 2];
   $23 = HEAP32[$1 + 60 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$5) {
    $4 = GlobalState__inst_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $9 = $4;
   }
   if (!global$9) {
    HEAP32[$9 + 8 >> 2] = 0;
    HEAP32[$9 >> 2] = 1080;
    HEAP32[$9 + 4 >> 2] = 720;
    HEAP32[12966] = 5;
    HEAP32[14843] = HEAP32[14843] | 4;
    $1 = HEAP32[$9 >> 2];
    $0 = HEAP32[$9 + 4 >> 2];
    $9 = __stack_pointer - 256 | 0;
    __stack_pointer = $9;
    HEAP32[$9 + 96 >> 2] = 11576;
    $2 = $9 + 96 | 0;
   }
   if (!global$9 | ($5 | 0) == 1) {
    TraceLog(3, 3883, $2);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 2) {
    TraceLog(3, 12868, 0);
    $3 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 3) {
    TraceLog(3, 11380, 0);
    $3 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 4) {
    TraceLog(3, 11925, 0);
    $3 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 5) {
    TraceLog(3, 11962, 0);
    $3 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 6) {
    TraceLog(3, 12284, 0);
    $3 = 6;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 7) {
    TraceLog(3, 12212, 0);
    $3 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 8) {
    TraceLog(3, 12356, 0);
    $3 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 9) {
    TraceLog(3, 12248, 0);
    $3 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($5 | 0) == 10) {
    TraceLog(3, 12320, 0);
    $3 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[14853] = $0;
    HEAP32[14852] = $1;
    HEAP32[14867] = 0;
    HEAP32[14868] = 0;
    HEAP32[14866] = 1065353216;
    HEAP32[14869] = 0;
    HEAP32[14870] = 0;
    HEAP32[14872] = 0;
    HEAP32[14873] = 0;
    HEAP32[14871] = 1065353216;
    HEAP32[14874] = 0;
    HEAP32[14875] = 0;
    HEAP32[14877] = 0;
    HEAP32[14878] = 0;
    HEAP32[14876] = 1065353216;
    HEAP32[14879] = 0;
    HEAP32[14880] = 0;
    HEAP32[14881] = 1065353216;
    HEAP8[59380] = 0;
    if (HEAPU8[3532]) {
     HEAP32[14842] = 3532
    }
    __memset(59544, 0, 2524);
    HEAP32[15312] = 1;
    HEAP32[15306] = 1065353216;
    HEAP32[15307] = 1065353216;
    HEAP32[14885] = 256;
    $10 = __stack_pointer - 144 | 0;
    __stack_pointer = $10;
    glfwSetErrorCallback(3) | 0;
    $0 = !(glfwInit() | 0);
   }
   block1 : {
    if ((global$9 | 0) == 2 | $0) {
     if (!global$9 | ($5 | 0) == 11) {
      TraceLog(4, 10098, 0);
      $3 = 11;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     glfwDefaultWindowHints();
     $0 = HEAP32[14843];
     if ($0 & 2) {
      HEAP8[59377] = 1
     }
     glfwWindowHint(131076, ($0 ^ -1) >>> 7 & 1);
     glfwWindowHint(131077, (HEAP32[14843] ^ -1) >>> 3 & 1);
     glfwWindowHint(131075, HEAP32[14843] >>> 2 & 1);
     $6 = HEAP32[14843];
     if ($6 & 1536) {
      HEAP32[14843] = $6 & -1537
     }
     glfwWindowHint(131073, ($6 ^ -1) >>> 11 & 1);
     glfwWindowHint(131079, HEAP32[14843] >>> 12 & 1);
     $0 = HEAPU8[59372] & 32;
    }
    if ((global$9 | 0) == 2 | $0) {
     if (!global$9 | ($5 | 0) == 12) {
      TraceLog(3, 11580, 0);
      $3 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      glfwWindowHint(135181, 4)
     }
    }
    if (!global$9) {
     glfwWindowHint(139266, 2);
     glfwWindowHint(139267, 0);
     glfwWindowHint(139265, 196610);
     glfwWindowHint(139275, 221185);
     $6 = HEAP32[14852];
     HEAP32[14850] = $6;
     $7 = HEAP32[14853];
     HEAP32[14851] = $7;
     HEAP8[66360] = 0;
     $0 = HEAPU8[59377] == 1;
    }
    block14 : {
     block13 : {
      block7 : {
       block8 : {
        if ((global$9 | 0) == 2 | $0) {
         if (!global$9) {
          HEAP32[14847] = $7 >>> 2;
          HEAP32[14846] = $6 >>> 2;
          HEAP32[$10 + 128 >> 2] = 0;
          $1 = glfwGetVideoModes(glfwGetPrimaryMonitor() | 0, $10 + 128 | 0) | 0;
          $0 = HEAP32[$10 + 128 >> 2];
          $2 = ($0 | 0) <= 0;
          block2 : {
           if ($2) {
            break block2
           }
           $12 = HEAP32[14853];
           $2 = HEAP32[14852];
           $6 = 0;
           while (1) {
            block3 : {
             $7 = Math_imul($6, 24) + $1 | 0;
             $8 = HEAP32[$7 >> 2];
             $13 = $8 >>> 0 < $2 >>> 0;
             if ($13) {
              break block3
             }
             $13 = HEAPU32[$7 + 4 >> 2] < $12 >>> 0;
             if ($13) {
              break block3
             }
             HEAP32[14850] = $8;
             HEAP32[14851] = HEAP32[$7 + 4 >> 2];
             break block2;
            }
            $6 = $6 + 1 | 0;
            $7 = ($0 | 0) != ($6 | 0);
            if ($7) {
             continue
            }
            break;
           };
          }
          $0 = HEAP32[14851];
          HEAP32[$10 + 112 >> 2] = HEAP32[14850];
          HEAP32[$10 + 116 >> 2] = $0;
          $0 = $10 + 112 | 0;
         }
         if (!global$9 | ($5 | 0) == 13) {
          TraceLog(4, 5723, $0);
          $3 = 13;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = HEAP32[14853];
          $6 = HEAP32[14851];
          $8 = $1 >>> 0 <= $6 >>> 0;
          $0 = HEAP32[14852];
          $7 = HEAP32[14850];
          $2 = !($8 & $0 >>> 0 <= $7 >>> 0);
         }
         if ((global$9 | 0) == 2 | $2) {
          if (!global$9) {
           HEAP32[$10 + 92 >> 2] = $6;
           HEAP32[$10 + 88 >> 2] = $7;
           HEAP32[$10 + 84 >> 2] = $1;
           HEAP32[$10 + 80 >> 2] = $0;
           $0 = $10 + 80 | 0;
          }
          if (!global$9 | ($5 | 0) == 14) {
           TraceLog(4, 12548, $0);
           $3 = 14;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $6 = HEAP32[14850];
           $16 = Math_fround(HEAPU32[14852]);
           $11 = Math_fround(Math_fround($6 >>> 0) / $16);
           $7 = HEAP32[14851];
           $20 = Math_fround(HEAPU32[14853]);
           $24 = Math_fround(Math_fround($7 >>> 0) / $20);
           block5 : {
            if ($11 <= $24) {
             $0 = 0;
             $16 = roundf(Math_fround($11 * $20));
             block4 : {
              if (Math_fround(Math_abs($16)) < Math_fround(2147483648.0)) {
               $1 = ~~$16;
               break block4;
              }
              $1 = -2147483648;
             }
             $1 = $7 - $1 | 0;
             break block5;
            }
            $11 = roundf(Math_fround($24 * $16));
            block6 : {
             if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
              $1 = ~~$11;
              break block6;
             }
             $1 = -2147483648;
            }
            $0 = $6 - $1 | 0;
            $11 = Math_fround(Math_fround($1 >>> 0) / $16);
            $1 = 0;
           }
           HEAP32[14867] = 0;
           HEAP32[14868] = 0;
           HEAPF32[14866] = $11;
           HEAP32[14861] = $1;
           HEAP32[14860] = $0;
           HEAP32[14869] = 0;
           HEAP32[14870] = 0;
           HEAP32[14872] = 0;
           HEAP32[14873] = 0;
           HEAPF32[14871] = $11;
           HEAP32[14874] = 0;
           HEAP32[14875] = 0;
           HEAP32[14877] = 0;
           HEAP32[14878] = 0;
           HEAP32[14876] = 1065353216;
           HEAP32[14879] = 0;
           HEAP32[14880] = 0;
           HEAP32[14881] = 1065353216;
           HEAP32[14859] = $7;
           HEAP32[14858] = $6;
           HEAP32[$10 + 64 >> 2] = $6;
           HEAP32[$10 + 68 >> 2] = $7;
           $0 = $10 - -64 | 0;
          }
          if (!global$9 | ($5 | 0) == 15) {
           TraceLog(4, 12392, $0);
           $3 = 15;
           if ((global$9 | 0) == 1) {
            break block
           }
          }
          if (!global$9) {
           $6 = HEAP32[14851];
           $7 = HEAP32[14850];
           break block7;
          }
         }
         if (!global$9) {
          $8 = $1 >>> 0 >= $6 >>> 0;
          $2 = $8 & $0 >>> 0 >= $7 >>> 0;
          if ($2) {
           break block8
          }
          HEAP32[$10 + 108 >> 2] = $6;
          HEAP32[$10 + 104 >> 2] = $7;
          HEAP32[$10 + 100 >> 2] = $1;
          HEAP32[$10 + 96 >> 2] = $0;
          $0 = $10 + 96 | 0;
         }
         if (!global$9 | ($5 | 0) == 16) {
          TraceLog(3, 12465, $0);
          $3 = 16;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $6 = HEAP32[14851];
          $7 = HEAP32[14850];
          $1 = HEAP32[14852];
          block9 : {
           if ($1) {
            $0 = HEAP32[14853];
            if ($0) {
             break block9
            }
           }
           HEAP32[14853] = $6;
           HEAP32[14852] = $7;
           $0 = $6;
           $1 = $7;
          }
          $11 = Math_fround(Math_fround($7 >>> 0) / Math_fround($6 >>> 0));
          $16 = Math_fround($1 >>> 0);
          $20 = Math_fround($0 >>> 0);
          block11 : {
           if ($11 <= Math_fround($16 / $20)) {
            $12 = 0;
            $11 = roundf(Math_fround($16 / $11));
            block10 : {
             if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
              $2 = ~~$11;
              break block10;
             }
             $2 = -2147483648;
            }
            $0 = $2 - $0 | 0;
            break block11;
           }
           $11 = roundf(Math_fround($11 * $20));
           block12 : {
            if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
             $2 = ~~$11;
             break block12;
            }
            $2 = -2147483648;
           }
           $12 = $2 - $1 | 0;
           $1 = $2;
           $2 = $0;
           $0 = 0;
          }
          HEAP32[14861] = $0;
          HEAP32[14860] = $12;
          HEAP32[14859] = $2;
          HEAP32[14858] = $1;
          break block7;
         }
        }
        if (!global$9) {
         $1 = HEAP32[14842];
         $6 = glfwCreateWindow($6 | 0, $7 | 0, ($1 ? $1 : 13331) | 0, 0, 0) | 0;
         HEAP32[16589] = $6;
         $0 = !$6;
         if ($0) {
          break block13
         }
         $4 = HEAP32[14853];
         HEAP32[14858] = HEAP32[14852];
         HEAP32[14859] = $4;
         break block14;
        }
       }
       if (!global$9) {
        HEAP32[14860] = 0;
        HEAP32[14861] = 0;
        HEAP32[14859] = $1;
        HEAP32[14858] = $0;
       }
      }
      if (!global$9) {
       $0 = HEAP32[14842];
       $0 = $0 ? $0 : 13331;
       $1 = glfwGetPrimaryMonitor() | 0;
       $6 = glfwCreateWindow($7 | 0, $6 | 0, $0 | 0, $1 | 0, 0) | 0;
       HEAP32[16589] = $6;
       if ($6) {
        break block14
       }
      }
     }
     if (!global$9) {
      glfwTerminate()
     }
     if (!global$9 | ($5 | 0) == 17) {
      TraceLog(4, 2218, 0);
      $3 = 17;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     $0 = HEAP32[14842];
     emscripten_set_window_title(($0 ? $0 : 13331) | 0);
     glfwSetWindowSizeCallback(HEAP32[16589], 4) | 0;
     glfwSetWindowIconifyCallback(HEAP32[16589], 5) | 0;
     glfwSetWindowFocusCallback(HEAP32[16589], 6) | 0;
     glfwSetDropCallback(HEAP32[16589], 7) | 0;
     if (HEAPU8[59373] & 32) {
      glfwSetWindowContentScaleCallback(HEAP32[16589], 8) | 0
     }
     glfwSetKeyCallback(HEAP32[16589], 9) | 0;
     glfwSetCharCallback(HEAP32[16589], 10) | 0;
     glfwSetMouseButtonCallback(HEAP32[16589], 11) | 0;
     glfwSetCursorPosCallback(HEAP32[16589], 12) | 0;
     glfwSetScrollCallback(HEAP32[16589], 13) | 0;
     glfwSetCursorEnterCallback(HEAP32[16589], 14) | 0;
     $0 = HEAP32[16589];
     glfwMakeContextCurrent($0 | 0);
     HEAP8[59376] = 1;
     $6 = HEAP32[14853];
     HEAP32[14859] = $6;
     $7 = HEAP32[14852];
     HEAP32[14858] = $7;
     HEAP32[14857] = $6;
     HEAP32[14856] = $7;
    }
    if (!global$9 | ($5 | 0) == 18) {
     TraceLog(3, 1271, 0);
     $3 = 18;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $0 = HEAP32[14851];
     HEAP32[$10 + 48 >> 2] = HEAP32[14850];
     HEAP32[$10 + 52 >> 2] = $0;
     $0 = $10 + 48 | 0;
    }
    if (!global$9 | ($5 | 0) == 19) {
     TraceLog(3, 5695, $0);
     $3 = 19;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $0 = HEAP32[14853];
     HEAP32[$10 + 32 >> 2] = HEAP32[14852];
     HEAP32[$10 + 36 >> 2] = $0;
     $0 = $10 + 32 | 0;
    }
    if (!global$9 | ($5 | 0) == 20) {
     TraceLog(3, 5797, $0);
     $3 = 20;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $0 = HEAP32[14859];
     HEAP32[$10 + 16 >> 2] = HEAP32[14858];
     HEAP32[$10 + 20 >> 2] = $0;
     $0 = $10 + 16 | 0;
    }
    if (!global$9 | ($5 | 0) == 21) {
     TraceLog(3, 5769, $0);
     $3 = 21;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $4 = HEAP32[14861];
     HEAP32[$10 >> 2] = HEAP32[14860];
     HEAP32[$10 + 4 >> 2] = $4;
    }
    if (!global$9 | ($5 | 0) == 22) {
     TraceLog(3, 5860, $10);
     $3 = 22;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : HEAPU8[59373] & 2;
    if (!global$9 | ($5 | 0) == 23 ? $0 | (global$9 | 0) == 2 : 0) {
     TraceLog(4, 5126, 0);
     $3 = 23;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : !HEAPU8[59376];
    if ($0 | (global$9 | 0) == 2) {
     if (!global$9 | ($5 | 0) == 24) {
      TraceLog(6, 8208, 0);
      $3 = 24;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     $0 = __stack_pointer - 96 | 0;
     __stack_pointer = $0;
     $12 = 0;
    }
    if (!global$9 | ($5 | 0) == 25) {
     $4 = emscripten_builtin_malloc(2048);
     $3 = 25;
     if ((global$9 | 0) == 1) {
      break block
     }
     $8 = $4;
    }
    if (!global$9) {
     $1 = glGetString(7939) | 0;
     $2 = strlen($1);
     $7 = $2 + 1 | 0;
    }
    if (!global$9 | ($5 | 0) == 26) {
     $4 = emscripten_builtin_calloc($7, 1);
     $3 = 26;
     if ((global$9 | 0) == 1) {
      break block
     }
     $7 = $4;
    }
    if (!global$9) {
     $13 = strcpy($7, $1);
     HEAP32[$8 >> 2] = $13;
     $1 = $2 >>> 0 < 2147483647;
    }
    block15 : {
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9) {
       $1 = 0;
       while (1) {
        $7 = $1 + $13 | 0;
        $14 = HEAPU8[$7 | 0] == 32;
        if ($14) {
         HEAP8[$7 | 0] = 0;
         $12 = $12 + 1 | 0;
         $14 = ($12 << 2) + $8 | 0;
         HEAP32[$14 >> 2] = $7 + 1;
        }
        $7 = ($1 | 0) == ($2 | 0);
        $1 = $1 + 1 | 0;
        $7 = !$7;
        if ($7) {
         continue
        }
        break;
       };
       HEAP32[$0 + 64 >> 2] = $12;
       $1 = $0 - -64 | 0;
      }
      if (!global$9 | ($5 | 0) == 27) {
       TraceLog(3, 5825, $1);
       $3 = 27;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $7 = 0;
       $1 = ($12 | 0) <= 0;
       if ($1) {
        break block15
       }
      }
      while (1) {
       if (!global$9) {
        $1 = HEAP32[($7 << 2) + $8 >> 2];
        $2 = strcmp($1, 3152);
       }
       block16 : {
        if (!($2 ? global$9 : 1)) {
         break block16
        }
        if (!global$9 | ($5 | 0) == 28) {
         $4 = glfwGetProcAddress(10568);
         $3 = 28;
         if ((global$9 | 0) == 1) {
          break block
         }
         $2 = $4;
        }
        if (!global$9) {
         HEAP32[14833] = $2
        }
        if (!global$9 | ($5 | 0) == 29) {
         $4 = glfwGetProcAddress(10547);
         $3 = 29;
         if ((global$9 | 0) == 1) {
          break block
         }
         $2 = $4;
        }
        if (!global$9) {
         HEAP32[14834] = $2
        }
        if (!global$9 | ($5 | 0) == 30) {
         $4 = glfwGetProcAddress(10589);
         $3 = 30;
         if ((global$9 | 0) == 1) {
          break block
         }
         $2 = $4;
        }
        if (!global$9) {
         HEAP32[14835] = $2;
         $14 = !HEAP32[14833];
         if ($14) {
          break block16
         }
         $14 = !HEAP32[14834];
         if ($14) {
          break block16
         }
         $2 = !$2;
         if ($2) {
          break block16
         }
         HEAP8[59308] = 1;
        }
       }
       if (!global$9) {
        $2 = strstr($1, 3317)
       }
       block19 : {
        block20 : {
         if ((global$9 | 0) == 2 | $2) {
          if (!global$9) {
           $2 = !strcmp($1, 3308)
          }
          block18 : {
           block17 : {
            if ((global$9 | 0) == 2 | $2) {
             if (!global$9 | ($5 | 0) == 31) {
              $4 = glfwGetProcAddress(10862);
              $3 = 31;
              if ((global$9 | 0) == 1) {
               break block
              }
              $2 = $4;
             }
             if (!global$9) {
              HEAP32[14836] = $2
             }
             if (!global$9 | ($5 | 0) == 32) {
              $4 = glfwGetProcAddress(10889);
              $3 = 32;
              if ((global$9 | 0) == 1) {
               break block
              }
              $2 = $4;
             }
             if (!global$9) {
              HEAP32[14837] = $2
             }
             if (!global$9 | ($5 | 0) == 33) {
              $4 = glfwGetProcAddress(10835);
              $3 = 33;
              if ((global$9 | 0) == 1) {
               break block
              }
              $2 = $4;
             }
             if (!global$9) {
              break block17
             }
            }
            if (!global$9) {
             $2 = !strcmp($1, 3284)
            }
            if ((global$9 | 0) == 2 | $2) {
             if (!global$9 | ($5 | 0) == 34) {
              $4 = glfwGetProcAddress(10476);
              $3 = 34;
              if ((global$9 | 0) == 1) {
               break block
              }
              $2 = $4;
             }
             if (!global$9) {
              HEAP32[14836] = $2
             }
             if (!global$9 | ($5 | 0) == 35) {
              $4 = glfwGetProcAddress(10501);
              $3 = 35;
              if ((global$9 | 0) == 1) {
               break block
              }
              $2 = $4;
             }
             if (!global$9) {
              HEAP32[14837] = $2
             }
             if (!global$9 | ($5 | 0) == 36) {
              $4 = glfwGetProcAddress(10392);
              $3 = 36;
              if ((global$9 | 0) == 1) {
               break block
              }
              $2 = $4;
             }
             if (!global$9) {
              break block17
             }
            }
            if (!global$9) {
             $2 = strcmp($1, 3261);
             if ($2) {
              $2 = HEAP32[14838];
              break block18;
             }
            }
            if (!global$9 | ($5 | 0) == 37) {
             $4 = glfwGetProcAddress(10154);
             $3 = 37;
             if ((global$9 | 0) == 1) {
              break block
             }
             $2 = $4;
            }
            if (!global$9) {
             HEAP32[14836] = $2
            }
            if (!global$9 | ($5 | 0) == 38) {
             $4 = glfwGetProcAddress(10178);
             $3 = 38;
             if ((global$9 | 0) == 1) {
              break block
             }
             $2 = $4;
            }
            if (!global$9) {
             HEAP32[14837] = $2
            }
            if (!global$9 | ($5 | 0) == 39) {
             $4 = glfwGetProcAddress(10130);
             $3 = 39;
             if ((global$9 | 0) == 1) {
              break block
             }
             $2 = $4;
            }
           }
           if (!global$9) {
            HEAP32[14838] = $2
           }
          }
          if (!global$9) {
           $14 = !HEAP32[14836];
           if ($14) {
            break block19
           }
           $14 = !HEAP32[14837];
           if ($14) {
            break block19
           }
           if ($2) {
            break block20
           }
           break block19;
          }
         }
         if (!global$9) {
          $2 = !strstr($1, 9123);
          if ($2) {
           break block19
          }
          $2 = !strcmp($1, 9116);
         }
         block22 : {
          block21 : {
           if ((global$9 | 0) == 2 | $2) {
            if (!global$9 | ($5 | 0) == 40) {
             $4 = glfwGetProcAddress(10476);
             $3 = 40;
             if ((global$9 | 0) == 1) {
              break block
             }
             $2 = $4;
            }
            if (!global$9) {
             HEAP32[14836] = $2
            }
            if (!global$9 | ($5 | 0) == 41) {
             $4 = glfwGetProcAddress(10501);
             $3 = 41;
             if ((global$9 | 0) == 1) {
              break block
             }
             $2 = $4;
            }
            if (!global$9) {
             break block21
            }
           }
           if (!global$9) {
            $2 = strcmp($1, 9095);
            if ($2) {
             $2 = HEAP32[14837];
             break block22;
            }
           }
           if (!global$9 | ($5 | 0) == 42) {
            $4 = glfwGetProcAddress(10154);
            $3 = 42;
            if ((global$9 | 0) == 1) {
             break block
            }
            $2 = $4;
           }
           if (!global$9) {
            HEAP32[14836] = $2
           }
           if (!global$9 | ($5 | 0) == 43) {
            $4 = glfwGetProcAddress(10178);
            $3 = 43;
            if ((global$9 | 0) == 1) {
             break block
            }
            $2 = $4;
           }
          }
          if (!global$9) {
           HEAP32[14837] = $2
          }
         }
         if (!global$9) {
          $14 = !HEAP32[14836];
          if ($14) {
           break block19
          }
          $2 = !$2;
          if ($2) {
           break block19
          }
          $2 = !HEAP32[14838];
          if ($2) {
           break block19
          }
         }
        }
        if (!global$9) {
         HEAP8[59309] = 1
        }
       }
       if (!global$9) {
        if (!strcmp($1, 3016)) {
         HEAP8[59310] = 1
        }
        if (!strcmp($1, 3209)) {
         HEAP8[59313] = 1
        }
        if (!strcmp($1, 3183)) {
         HEAP8[59314] = 1
        }
        if (!strcmp($1, 7569)) {
         HEAP8[59311] = 1
        }
        block24 : {
         block23 : {
          if (!strcmp($1, 7590)) {
           HEAP8[59312] = 1;
           break block23;
          }
          if (!(HEAP8[59312] & 1)) {
           break block24
          }
         }
         HEAP8[59311] = 1;
        }
        if (!strcmp($1, 11694)) {
         HEAP32[14832] = 24
        }
        if (!strcmp($1, 11725)) {
         HEAP32[14832] = 32
        }
        block26 : {
         block25 : {
          if (!strcmp($1, 9316)) {
           break block25
          }
          if (!strcmp($1, 9388)) {
           break block25
          }
          if (strcmp($1, 9348)) {
           break block26
          }
         }
         HEAP8[59315] = 1;
        }
        block27 : {
         if (strcmp($1, 7613)) {
          if (strcmp($1, 11767)) {
           break block27
          }
         }
         HEAP8[59316] = 1;
        }
        if (!strcmp($1, 1058)) {
         HEAP8[59317] = 1
        }
        if (!strcmp($1, 9283)) {
         HEAP8[59318] = 1
        }
        if (!strcmp($1, 4696)) {
         HEAP8[59319] = 1
        }
        $2 = !strcmp($1, 9459);
        if ($2) {
         HEAP8[59321] = 1
        }
        if (!strcmp($1, 4833)) {
         HEAP8[59320] = 1
        }
        $7 = $7 + 1 | 0;
        $1 = ($12 | 0) != ($7 | 0);
        if ($1) {
         continue
        }
       }
       break;
      };
      if (!global$9) {
       break block15
      }
     }
     if (!global$9) {
      HEAP32[$0 + 80 >> 2] = 0;
      $1 = $0 + 80 | 0;
     }
     if (!global$9 | ($5 | 0) == 44) {
      TraceLog(3, 5825, $1);
      $3 = 44;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9 | ($5 | 0) == 45) {
     emscripten_builtin_free($8);
     $3 = 45;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($5 | 0) == 46) {
     emscripten_builtin_free($13);
     $3 = 46;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($5 | 0) == 47) {
     TraceLog(3, 11406, 0);
     $3 = 47;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = glGetString(7936) | 0), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
     $1 = $0 + 48 | 0;
    }
    if (!global$9 | ($5 | 0) == 48) {
     TraceLog(3, 4122, $1);
     $3 = 48;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = glGetString(7937) | 0), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
     $1 = $0 + 32 | 0;
    }
    if (!global$9 | ($5 | 0) == 49) {
     TraceLog(3, 4001, $1);
     $3 = 49;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = glGetString(7938) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
     $1 = $0 + 16 | 0;
    }
    if (!global$9 | ($5 | 0) == 50) {
     TraceLog(3, 4103, $1);
     $3 = 50;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $1 = glGetString(35724) | 0;
     HEAP32[$0 >> 2] = $1;
    }
    if (!global$9 | ($5 | 0) == 51) {
     TraceLog(3, 4141, $0);
     $3 = 51;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     glGetFloatv(34047, 59324);
     $1 = HEAPU8[59308];
    }
    block28 : {
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9 | ($5 | 0) == 52) {
       TraceLog(3, 1671, 0);
       $3 = 52;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       break block28
      }
     }
     if (!global$9 | ($5 | 0) == 53) {
      TraceLog(4, 8697, 0);
      $3 = 53;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    $1 = global$9 ? $1 : HEAPU8[59310] == 1;
    block29 : {
     if ($1 | (global$9 | 0) == 2) {
      if (!global$9 | ($5 | 0) == 54) {
       TraceLog(3, 9016, 0);
       $3 = 54;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       break block29
      }
     }
     if (!global$9 | ($5 | 0) == 55) {
      TraceLog(4, 11999, 0);
      $3 = 55;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    $1 = global$9 ? $1 : HEAPU8[59315] == 1;
    if (!global$9 | ($5 | 0) == 56 ? $1 | (global$9 | 0) == 2 : 0) {
     TraceLog(3, 8818, 0);
     $3 = 56;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAPU8[59316] == 1;
    if (!global$9 | ($5 | 0) == 57 ? $1 | (global$9 | 0) == 2 : 0) {
     TraceLog(3, 8977, 0);
     $3 = 57;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAPU8[59317] == 1;
    if (!global$9 | ($5 | 0) == 58 ? $1 | (global$9 | 0) == 2 : 0) {
     TraceLog(3, 8934, 0);
     $3 = 58;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAPU8[59318] == 1;
    if (!global$9 | ($5 | 0) == 59 ? $1 | (global$9 | 0) == 2 : 0) {
     TraceLog(3, 8856, 0);
     $3 = 59;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAPU8[59319] == 1;
    if (!global$9 | ($5 | 0) == 60 ? $1 | (global$9 | 0) == 2 : 0) {
     TraceLog(3, 8895, 0);
     $3 = 60;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAPU8[59322] == 1;
    if (!global$9 | ($5 | 0) == 61 ? $1 | (global$9 | 0) == 2 : 0) {
     TraceLog(3, 8788, 0);
     $3 = 61;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAPU8[59323] == 1;
    if (!global$9 | ($5 | 0) == 62 ? $1 | (global$9 | 0) == 2 : 0) {
     TraceLog(3, 8744, 0);
     $3 = 62;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     __stack_pointer = $0 + 96 | 0;
     emscripten_set_fullscreenchange_callback_on_thread(2, 0, 1, 16, 2) | 0;
     emscripten_set_resize_callback_on_thread(2, 0, 1, 17, 2) | 0;
     EmscriptenResizeCallback($6, $6, $6);
     emscripten_set_click_callback_on_thread(3869, 0, 1, 18, 2) | 0;
     emscripten_set_pointerlockchange_callback_on_thread(2, 0, 1, 19, 2) | 0;
     emscripten_set_mousemove_callback_on_thread(3869, 0, 1, 20, 2) | 0;
     emscripten_set_touchstart_callback_on_thread(3869, 0, 1, 21, 2) | 0;
     emscripten_set_touchend_callback_on_thread(3869, 0, 1, 21, 2) | 0;
     emscripten_set_touchmove_callback_on_thread(3869, 0, 1, 21, 2) | 0;
     emscripten_set_touchcancel_callback_on_thread(3869, 0, 1, 21, 2) | 0;
     emscripten_set_gamepadconnected_callback_on_thread(0, 1, 22, 2) | 0;
     emscripten_set_gamepaddisconnected_callback_on_thread(0, 1, 22, 2) | 0;
     HEAP32[$10 + 136 >> 2] = 0;
     HEAP32[$10 + 140 >> 2] = 0;
     HEAP32[$10 + 128 >> 2] = 0;
     HEAP32[$10 + 132 >> 2] = 0;
     $4 = $10 + 128 | 0;
     $1 = __stack_pointer - 32 | 0;
     __stack_pointer = $1;
     $2 = __wasi_syscall_ret(legalimport$__wasi_clock_time_get(1, 1, 0, $1 + 24 | 0) | 0);
     if ($2) {
      $0 = -1
     } else {
      $3 = HEAP32[$1 + 24 >> 2];
      $0 = HEAP32[$1 + 28 >> 2];
      $2 = $1 + 8 | 0;
      HEAP32[$2 + 12 >> 2] = 0;
      $0 = __wasm_i64_udiv($3, $0, 1e9);
      HEAP32[$2 >> 2] = $0;
      $15 = i64toi32_i32$HIGH_BITS;
      HEAP32[$2 + 4 >> 2] = $15;
      (wasm2js_i32$0 = $2, wasm2js_i32$1 = $3 - __wasm_i64_mul($0, $15, 1e9, 0) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      $0 = HEAP32[$1 + 20 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
      HEAP32[$4 + 12 >> 2] = $0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP32[$4 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$4 + 4 >> 2] = $0;
      $0 = 0;
     }
     $1 = $1 + 32 | 0;
     __stack_pointer = $1;
     $0 = !$0;
    }
    block30 : {
     if (!($0 ? global$9 : 1)) {
      $3 = HEAP32[$10 + 136 >> 2];
      $22 = __wasm_i64_mul(HEAP32[$10 + 128 >> 2], HEAP32[$10 + 132 >> 2], 1e9, 0);
      $4 = $3 + $22 | 0;
      $15 = i64toi32_i32$HIGH_BITS + ($3 >> 31) | 0;
      HEAP32[15530] = $4;
      HEAP32[15531] = $4 >>> 0 < $22 >>> 0 ? $15 + 1 | 0 : $15;
      break block30;
     }
     if (!global$9 | ($5 | 0) == 63) {
      TraceLog(4, 7915, 0);
      $3 = 63;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     (wasm2js_i32$0 = 62080, wasm2js_f64$0 = +glfwGetTime()), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
     $0 = __memset(62256, 0, 4096);
    }
    if (!global$9 | ($5 | 0) == 64) {
     $4 = getcwd($0);
     $3 = 64;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[14884] = $0
    }
    if (!global$9 | ($5 | 0) == 65) {
     TraceLog(3, 1312, 0);
     $3 = 65;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $10 + 144 | 0;
    $14 = HEAP32[14856];
    $21 = HEAP32[14857];
    $13 = 0;
    $6 = __stack_pointer + -64 | 0;
    __stack_pointer = $6;
    HEAP32[$6 + 60 >> 2] = -1;
    $0 = $6 + 60 | 0;
   }
   if (!global$9 | ($5 | 0) == 66) {
    $4 = rlLoadTexture($0, 1, 1, 7, 1);
    $3 = 66;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $4;
   }
   if (!global$9) {
    HEAP32[14738] = $1
   }
   block31 : {
    if ((global$9 | 0) == 2 | $1) {
     if (!global$9) {
      HEAP32[$6 + 32 >> 2] = $1;
      $0 = $6 + 32 | 0;
     }
     if (!global$9 | ($5 | 0) == 67) {
      TraceLog(3, 1835, $0);
      $3 = 67;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block31
     }
    }
    if (!global$9 | ($5 | 0) == 68) {
     TraceLog(4, 7649, 0);
     $3 = 68;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9 | ($5 | 0) == 69) {
    $4 = emscripten_builtin_calloc(32, 4);
    $3 = 69;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    HEAP32[14746] = $0;
    $1 = 0;
    while (1) {
     $2 = $1 << 2;
     HEAP32[$2 + HEAP32[14746] >> 2] = -1;
     $1 = $1 + 1 | 0;
     $0 = ($1 | 0) != 32;
     if ($0) {
      continue
     }
     break;
    };
   }
   if (!global$9 | ($5 | 0) == 70) {
    $4 = rlCompileShader(13342, 35633);
    $3 = 70;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    HEAP32[14743] = $0
   }
   if (!global$9 | ($5 | 0) == 71) {
    $4 = rlCompileShader(13861, 35632);
    $3 = 71;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $4;
   }
   if (!global$9) {
    HEAP32[14744] = $1;
    $7 = HEAP32[14743];
    $2 = __stack_pointer - 48 | 0;
    __stack_pointer = $2;
    HEAP32[$2 + 44 >> 2] = 0;
    $0 = glCreateProgram() | 0;
    glAttachShader($0 | 0, $7 | 0);
    glAttachShader($0 | 0, $1 | 0);
    glBindAttribLocation($0 | 0, 0, 4965);
    glBindAttribLocation($0 | 0, 1, 8277);
    glBindAttribLocation($0 | 0, 2, 5557);
    glBindAttribLocation($0 | 0, 3, 4230);
    glBindAttribLocation($0 | 0, 4, 3043);
    glBindAttribLocation($0 | 0, 5, 11709);
    glBindAttribLocation($0 | 0, 7, 3855);
    glBindAttribLocation($0 | 0, 8, 3443);
    glLinkProgram($0 | 0);
    glGetProgramiv($0 | 0, 35714, $2 + 44 | 0);
    $1 = !HEAP32[$2 + 44 >> 2];
   }
   block32 : {
    if ((global$9 | 0) == 2 | $1) {
     if (!global$9) {
      HEAP32[$2 + 16 >> 2] = $0;
      $1 = $2 + 16 | 0;
     }
     if (!global$9 | ($5 | 0) == 72) {
      TraceLog(4, 5272, $1);
      $3 = 72;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      HEAP32[$2 + 40 >> 2] = 0;
      glGetProgramiv($0 | 0, 35716, $2 + 40 | 0);
      $7 = HEAP32[$2 + 40 >> 2];
      $1 = ($7 | 0) > 0;
     }
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9) {
       HEAP32[$2 + 36 >> 2] = 0;
       $8 = $2 + 36 | 0;
      }
      if (!global$9 | ($5 | 0) == 73) {
       $4 = emscripten_builtin_calloc($7, 1);
       $3 = 73;
       if ((global$9 | 0) == 1) {
        break block
       }
       $1 = $4;
      }
      if (!global$9) {
       glGetProgramInfoLog($0 | 0, $7 | 0, $8 | 0, $1 | 0);
       HEAP32[$2 + 4 >> 2] = $1;
       HEAP32[$2 >> 2] = $0;
      }
      if (!global$9 | ($5 | 0) == 74) {
       TraceLog(4, 3936, $2);
       $3 = 74;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9 | ($5 | 0) == 75) {
       emscripten_builtin_free($1);
       $3 = 75;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      glDeleteProgram($0 | 0);
      $0 = 0;
      break block32;
     }
    }
    if (!global$9) {
     HEAP32[$2 + 32 >> 2] = $0;
     $1 = $2 + 32 | 0;
    }
    if (!global$9 | ($5 | 0) == 76) {
     TraceLog(3, 1784, $1);
     $3 = 76;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $2 + 48 | 0;
    $1 = $0;
    HEAP32[14745] = $1;
   }
   block33 : {
    if ((global$9 | 0) == 2 | $1) {
     if (!global$9) {
      HEAP32[$6 + 16 >> 2] = $1;
      $0 = $6 + 16 | 0;
     }
     if (!global$9 | ($5 | 0) == 77) {
      TraceLog(3, 1733, $0);
      $3 = 77;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $0 = glGetAttribLocation(HEAP32[14745], 4965) | 0;
      HEAP32[HEAP32[14746] >> 2] = $0;
      $0 = glGetAttribLocation(HEAP32[14745], 8277) | 0;
      HEAP32[HEAP32[14746] + 4 >> 2] = $0;
      $0 = glGetAttribLocation(HEAP32[14745], 4230) | 0;
      HEAP32[HEAP32[14746] + 20 >> 2] = $0;
      $0 = glGetUniformLocation(HEAP32[14745], 4760) | 0;
      HEAP32[HEAP32[14746] + 24 >> 2] = $0;
      $0 = glGetUniformLocation(HEAP32[14745], 7532) | 0;
      HEAP32[HEAP32[14746] + 48 >> 2] = $0;
      $1 = glGetUniformLocation(HEAP32[14745], 11809) | 0;
      $0 = HEAP32[14746];
      HEAP32[$0 + 60 >> 2] = $1;
      break block33;
     }
    }
    if (!global$9) {
     HEAP32[$6 >> 2] = 0
    }
    if (!global$9 | ($5 | 0) == 78) {
     TraceLog(4, 4527, $6);
     $3 = 78;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    $0 = HEAP32[14745];
    HEAP32[14747] = $0;
    $1 = HEAP32[14746];
    HEAP32[14748] = $1;
    HEAP32[$1 + 12 >> 2] = 2;
    $10 = $6 + 36 | 0;
    $1 = $10;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAP32[$1 + 20 >> 2] = 0;
    $1 = $1 + 8 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
   }
   if (!global$9 | ($5 | 0) == 79) {
    $4 = emscripten_builtin_malloc(48);
    $3 = 79;
    if ((global$9 | 0) == 1) {
     break block
    }
    $12 = $4;
   }
   if (!global$9) {
    HEAP32[$1 >> 2] = $12
   }
   while (1) {
    if (!global$9) {
     $0 = Math_imul($13, 48);
     $2 = $12 + $0 | 0;
     HEAP32[$2 >> 2] = 2048;
    }
    if (!global$9 | ($5 | 0) == 80) {
     $4 = emscripten_builtin_malloc(98304);
     $3 = 80;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[$2 + 4 >> 2] = $0
    }
    if (!global$9 | ($5 | 0) == 81) {
     $4 = emscripten_builtin_malloc(65536);
     $3 = 81;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[$2 + 8 >> 2] = $0
    }
    if (!global$9 | ($5 | 0) == 82) {
     $4 = emscripten_builtin_malloc(98304);
     $3 = 82;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[$2 + 12 >> 2] = $0
    }
    if (!global$9 | ($5 | 0) == 83) {
     $4 = emscripten_builtin_malloc(32768);
     $3 = 83;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[$2 + 16 >> 2] = $0
    }
    if (!global$9 | ($5 | 0) == 84) {
     $4 = emscripten_builtin_malloc(24576);
     $3 = 84;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[$2 + 20 >> 2] = $0;
     $1 = 0;
     $0 = $2 + 4 | 0;
     while (1) {
      HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = 0;
      $1 = $1 + 1 | 0;
      if (($1 | 0) != 24576) {
       continue
      }
      break;
     };
     $1 = 0;
     $0 = $2 + 8 | 0;
     while (1) {
      HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = 0;
      $1 = $1 + 1 | 0;
      if (($1 | 0) != 16384) {
       continue
      }
      break;
     };
     $1 = 0;
     $0 = $2 + 12 | 0;
     while (1) {
      HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = 0;
      $1 = $1 + 1 | 0;
      if (($1 | 0) != 24576) {
       continue
      }
      break;
     };
     $8 = 0;
     $1 = $2 + 20 | 0;
     $2 = $2 + 16 | 0;
     $0 = 0;
     while (1) {
      HEAP8[HEAP32[$2 >> 2] + $0 | 0] = 0;
      $0 = $0 + 1 | 0;
      if (($0 | 0) != 32768) {
       continue
      }
      break;
     };
     $7 = 0;
     while (1) {
      $0 = $8 << 1;
      $2 = $7 << 2;
      HEAP16[$0 + HEAP32[$1 >> 2] >> 1] = $2;
      HEAP16[($0 + HEAP32[$1 >> 2] | 0) + 2 >> 1] = $2 | 1;
      $18 = $2 | 2;
      HEAP16[($0 + HEAP32[$1 >> 2] | 0) + 4 >> 1] = $18;
      HEAP16[($0 + HEAP32[$1 >> 2] | 0) + 6 >> 1] = $2;
      HEAP16[($0 + HEAP32[$1 >> 2] | 0) + 8 >> 1] = $18;
      $19 = HEAP32[$1 >> 2];
      $2 = $2 | 3;
      HEAP16[($0 + $19 | 0) + 10 >> 1] = $2;
      $8 = $8 + 6 | 0;
      $0 = ($7 | 0) == 2047;
      $7 = $7 + 1 | 0;
      if (!$0) {
       continue
      }
      break;
     };
     HEAP32[14167] = 0;
     $13 = $13 + 1 | 0;
     $0 = ($13 | 0) != 1;
     if ($0) {
      continue
     }
    }
    break;
   };
   if (!global$9 | ($5 | 0) == 85) {
    TraceLog(3, 12801, 0);
    $3 = 85;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : 0;
   while (1) {
    $1 = global$9 ? $1 : HEAPU8[59308] == 1;
    if ($1 | (global$9 | 0) == 2) {
     if (!global$9) {
      $7 = HEAP32[14833];
      $1 = Math_imul($0, 48) + $12 | 0;
      $2 = $1 + 24 | 0;
     }
     if (!global$9 | ($5 | 0) == 86) {
      FUNCTION_TABLE[$7 | 0](1, $2);
      $3 = 86;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = HEAP32[14834];
      $1 = HEAP32[$1 + 24 >> 2];
     }
     if (!global$9 | ($5 | 0) == 87) {
      FUNCTION_TABLE[$2 | 0]($1);
      $3 = 87;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     $1 = Math_imul($0, 48) + $12 | 0;
     glGenBuffers(1, $1 + 28 | 0);
     glBindBuffer(34962, HEAP32[$1 + 28 >> 2]);
     glBufferData(34962, 98304, HEAP32[$1 + 4 >> 2], 35048);
     glEnableVertexAttribArray(HEAP32[HEAP32[14748] >> 2]);
     glVertexAttribPointer(HEAP32[HEAP32[14748] >> 2], 3, 5126, 0, 0, 0);
     glGenBuffers(1, $1 + 32 | 0);
     glBindBuffer(34962, HEAP32[$1 + 32 >> 2]);
     glBufferData(34962, 65536, HEAP32[$1 + 8 >> 2], 35048);
     glEnableVertexAttribArray(HEAP32[HEAP32[14748] + 4 >> 2]);
     glVertexAttribPointer(HEAP32[HEAP32[14748] + 4 >> 2], 2, 5126, 0, 0, 0);
     glGenBuffers(1, $1 + 36 | 0);
     glBindBuffer(34962, HEAP32[$1 + 36 >> 2]);
     glBufferData(34962, 98304, HEAP32[$1 + 12 >> 2], 35048);
     glEnableVertexAttribArray(HEAP32[HEAP32[14748] + 12 >> 2]);
     glVertexAttribPointer(HEAP32[HEAP32[14748] + 12 >> 2], 3, 5126, 0, 0, 0);
     glGenBuffers(1, $1 + 40 | 0);
     glBindBuffer(34962, HEAP32[$1 + 40 >> 2]);
     glBufferData(34962, 32768, HEAP32[$1 + 16 >> 2], 35048);
     glEnableVertexAttribArray(HEAP32[HEAP32[14748] + 20 >> 2]);
     glVertexAttribPointer(HEAP32[HEAP32[14748] + 20 >> 2], 4, 5121, 1, 0, 0);
     glGenBuffers(1, $1 + 44 | 0);
     $2 = HEAP32[$1 + 44 >> 2];
     glBindBuffer(34963, $2 | 0);
     glBufferData(34963, 24576, HEAP32[$1 + 20 >> 2], 35044);
     $0 = $0 + 1 | 0;
     $1 = ($0 | 0) != 1;
     if ($1) {
      continue
     }
    }
    break;
   };
   if (!global$9 | ($5 | 0) == 88) {
    TraceLog(3, 12678, 0);
    $3 = 88;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : HEAPU8[59308];
   if ($0 | (global$9 | 0) == 2) {
    $0 = global$9 ? $0 : HEAP32[14834];
    if (!global$9 | ($5 | 0) == 89) {
     FUNCTION_TABLE[$0 | 0](0);
     $3 = 89;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9 | ($5 | 0) == 90) {
    $4 = emscripten_builtin_malloc(4096);
    $3 = 90;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $4;
   }
   if (!global$9) {
    HEAP32[$10 + 12 >> 2] = $2;
    $7 = HEAP32[14738];
    $1 = 0;
    while (1) {
     $0 = ($1 << 4) + $2 | 0;
     HEAP32[$0 + 12 >> 2] = $7;
     HEAP32[$0 + 8 >> 2] = 0;
     HEAP32[$0 >> 2] = 7;
     HEAP32[$0 + 4 >> 2] = 0;
     $1 = $1 + 1 | 0;
     if (($1 | 0) != 256) {
      continue
     }
     break;
    };
    HEAP32[$10 + 16 >> 2] = 1;
    HEAP32[$10 + 20 >> 2] = -1082130432;
    HEAP32[$10 >> 2] = 1;
    $0 = HEAP32[$6 + 56 >> 2];
    HEAP32[14165] = HEAP32[$6 + 52 >> 2];
    HEAP32[14166] = $0;
    $0 = HEAP32[$6 + 48 >> 2];
    HEAP32[14163] = HEAP32[$6 + 44 >> 2];
    HEAP32[14164] = $0;
    $0 = HEAP32[$6 + 40 >> 2];
    HEAP32[14161] = HEAP32[$6 + 36 >> 2];
    HEAP32[14162] = $0;
    HEAP32[HEAP32[14748] + 12 >> 2] = -1;
    HEAP32[14160] = 56644;
    while (1) {
     $1 = $17 << 6;
     $0 = $1 + 56904 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$1 + 56900 >> 2] = 1065353216;
     $0 = $1 + 56912 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     $0 = $1 + 56924 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$1 + 56920 >> 2] = 1065353216;
     $0 = $1 + 56932 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     $0 = $1 + 56944 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$1 + 56940 >> 2] = 1065353216;
     $0 = $1 + 56952 | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$1 + 56960 >> 2] = 1065353216;
     $17 = $17 + 1 | 0;
     $0 = ($17 | 0) != 32;
     if ($0) {
      continue
     }
     break;
    };
    HEAP32[14209] = 0;
    HEAP32[14210] = 0;
    HEAP32[14208] = 1065353216;
    HEAP32[14211] = 0;
    HEAP32[14212] = 0;
    HEAP32[14214] = 0;
    HEAP32[14215] = 0;
    HEAP32[14213] = 1065353216;
    HEAP32[14216] = 0;
    HEAP32[14217] = 0;
    HEAP32[14219] = 0;
    HEAP32[14220] = 0;
    HEAP32[14218] = 1065353216;
    HEAP32[14221] = 0;
    HEAP32[14222] = 0;
    HEAP32[14223] = 1065353216;
    HEAP32[14193] = 0;
    HEAP32[14194] = 0;
    HEAP32[14192] = 1065353216;
    HEAP32[14195] = 0;
    HEAP32[14196] = 0;
    HEAP32[14198] = 0;
    HEAP32[14199] = 0;
    HEAP32[14197] = 1065353216;
    HEAP32[14200] = 0;
    HEAP32[14201] = 0;
    HEAP32[14202] = 1065353216;
    HEAP32[14203] = 0;
    HEAP32[14204] = 0;
    HEAP32[14205] = 0;
    HEAP32[14206] = 0;
    HEAP32[14207] = 1065353216;
    HEAP32[14176] = 1065353216;
    HEAP32[14179] = 0;
    HEAP32[14180] = 0;
    HEAP32[14177] = 0;
    HEAP32[14178] = 0;
    HEAP32[14181] = 1065353216;
    HEAP32[14184] = 0;
    HEAP32[14185] = 0;
    HEAP32[14182] = 0;
    HEAP32[14183] = 0;
    HEAP32[14186] = 1065353216;
    HEAP32[14189] = 0;
    HEAP32[14190] = 0;
    HEAP32[14187] = 0;
    HEAP32[14188] = 0;
    HEAP32[14191] = 1065353216;
    HEAP32[14175] = 56704;
    glDepthFunc(515);
    glDisable(2929);
    glBlendFunc(770, 771);
    glEnable(3042);
    glCullFace(1029);
    glFrontFace(2305);
    glEnable(2884);
    HEAP32[14826] = $21;
    HEAP32[14825] = $14;
   }
   if (!global$9 | ($5 | 0) == 91) {
    TraceLog(3, 1219, 0);
    $3 = 91;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    glClearColor(Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(1.0)));
    glClearDepthf(Math_fround(Math_fround(1.0)));
    glClear(16640);
    __stack_pointer = $6 - -64 | 0;
    HEAP8[62136] = 1;
    $1 = HEAP32[14857];
    SetupViewport(HEAP32[14856], $1);
    $7 = 0;
    $0 = __stack_pointer;
    $2 = $0 - 144 | 0;
    __stack_pointer = $2;
    HEAP32[16593] = 224;
    HEAP32[16594] = 0;
    $6 = 0;
   }
   if (!global$9 | ($5 | 0) == 92) {
    $4 = emscripten_builtin_calloc(16384, 2);
    $3 = 92;
    if ((global$9 | 0) == 1) {
     break block
    }
    $8 = $4;
   }
   if (!global$9) {
    HEAP32[$2 + 136 >> 2] = 1;
    HEAP32[$2 + 140 >> 2] = 2;
    HEAP32[$2 + 128 >> 2] = 128;
    HEAP32[$2 + 132 >> 2] = 128;
    HEAP32[$2 + 124 >> 2] = $8;
    while (1) {
     $10 = ($6 << 1) + $8 | 0;
     $12 = HEAP32[($7 << 2) + 21776 >> 2];
     $0 = 31;
     while (1) {
      $1 = $0;
      $13 = $12 >>> $1 & 1 ? -1 : 255;
      HEAP16[($1 << 1) + $10 >> 1] = $13;
      $0 = $1 - 1 | 0;
      if ($1) {
       continue
      }
      break;
     };
     $7 = $7 + 1 | 0;
     $6 = $6 + 32 | 0;
     if (($6 | 0) < 16384) {
      continue
     }
     break;
    };
    $1 = HEAPU8[62136];
    $0 = 0;
   }
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9) {
     $1 = HEAP32[$2 + 136 >> 2];
     HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 132 >> 2];
     HEAP32[$2 + 92 >> 2] = $1;
     HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 140 >> 2];
     $1 = HEAP32[$2 + 128 >> 2];
     HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 124 >> 2];
     HEAP32[$2 + 84 >> 2] = $1;
     $6 = $2 + 104 | 0;
     HEAP32[$6 >> 2] = 0;
     $1 = $2 + 80 | 0;
     $7 = HEAP32[$1 + 8 >> 2];
     $12 = HEAP32[$1 + 4 >> 2];
     $8 = !$12;
    }
    block35 : {
     block34 : {
      if (!global$9) {
       if ($8) {
        break block34
       }
       $8 = !$7;
       if ($8) {
        break block34
       }
       $8 = HEAP32[$1 >> 2];
       $10 = HEAP32[$1 + 16 >> 2];
       $1 = HEAP32[$1 + 12 >> 2];
      }
      if (!global$9 | ($5 | 0) == 93) {
       $4 = rlLoadTexture($8, $12, $7, $10, $1);
       $3 = 93;
       if ((global$9 | 0) == 1) {
        break block
       }
       $8 = $4;
      }
      if (!global$9) {
       HEAP32[$6 >> 2] = $8;
       break block35;
      }
     }
     if (!global$9 | ($5 | 0) == 94) {
      TraceLog(4, 7689, 0);
      $3 = 94;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $10 = HEAP32[$1 + 16 >> 2];
      $1 = HEAP32[$1 + 12 >> 2];
     }
    }
    if (!global$9) {
     HEAP32[$6 + 16 >> 2] = $10;
     HEAP32[$6 + 12 >> 2] = $1;
     HEAP32[$6 + 8 >> 2] = $7;
     HEAP32[$6 + 4 >> 2] = $12;
     $1 = HEAP32[$2 + 120 >> 2];
     HEAP32[16599] = $1;
     $4 = HEAP32[$2 + 116 >> 2];
     HEAP32[16597] = HEAP32[$2 + 112 >> 2];
     HEAP32[16598] = $4;
     $4 = HEAP32[$2 + 108 >> 2];
     HEAP32[16595] = HEAP32[$2 + 104 >> 2];
     HEAP32[16596] = $4;
    }
   }
   $1 = global$9 ? $1 : HEAP32[16593];
   if (!global$9 | ($5 | 0) == 95) {
    $4 = emscripten_builtin_calloc($1, 36);
    $3 = 95;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $4;
   }
   if (!global$9) {
    HEAP32[16601] = $6
   }
   if (!global$9 | ($5 | 0) == 96) {
    $4 = emscripten_builtin_calloc($1, 16);
    $3 = 96;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $4;
   }
   if (!global$9) {
    HEAP32[16600] = $6;
    $1 = ($1 | 0) > 0;
   }
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9) {
     $12 = 1;
     $7 = 0;
    }
    while (1) {
     if (!global$9) {
      $10 = Math_imul($0, 36);
      HEAP32[$10 + HEAP32[16601] >> 2] = $0 + 32;
      $1 = $0 << 4;
      HEAPF32[$1 + HEAP32[16600] >> 2] = $12 | 0;
      $8 = Math_imul($7, 11);
      HEAPF32[($1 + HEAP32[16600] | 0) + 4 >> 2] = $8 + 1 | 0;
      $13 = HEAP32[($0 << 2) + 23824 >> 2];
      HEAPF32[($1 + HEAP32[16600] | 0) + 8 >> 2] = $13 | 0;
      HEAP32[($1 + HEAP32[16600] | 0) + 12 >> 2] = 1092616192;
      $14 = $1 + HEAP32[16600] | 0;
      $11 = Math_fround(HEAPF32[$14 + 8 >> 2] + Math_fround(1.0));
      block36 : {
       if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
        $4 = ~~$11;
        break block36;
       }
       $4 = -2147483648;
      }
      $12 = $4 + $12 | 0;
      if (($12 | 0) >= HEAP32[16596]) {
       HEAP32[$14 >> 2] = 1065353216;
       HEAPF32[($1 + HEAP32[16600] | 0) + 4 >> 2] = $8 + 12 | 0;
       $12 = $13 + 2 | 0;
       $7 = $7 + 1 | 0;
      }
      HEAP32[(HEAP32[16601] + $10 | 0) + 4 >> 2] = 0;
      HEAP32[(HEAP32[16601] + $10 | 0) + 8 >> 2] = 0;
      HEAP32[(HEAP32[16601] + $10 | 0) + 12 >> 2] = 0;
      $8 = HEAP32[$2 + 136 >> 2];
      $6 = $2 - -64 | 0;
      HEAP32[$6 >> 2] = HEAP32[$2 + 132 >> 2];
      HEAP32[$6 + 4 >> 2] = $8;
      HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 140 >> 2];
      $6 = HEAP32[$2 + 128 >> 2];
      HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 124 >> 2];
      HEAP32[$2 + 60 >> 2] = $6;
      $6 = HEAP32[16601];
      $1 = $1 + HEAP32[16600] | 0;
      $8 = HEAP32[$1 + 12 >> 2];
      HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$2 + 52 >> 2] = $8;
      $8 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 40 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 44 >> 2] = $8;
      $17 = $2 + 56 | 0;
      $18 = HEAP32[$17 + 16 >> 2];
      $21 = GetPixelDataSize(1, 1, $18);
      $1 = $2 + 104 | 0;
      $13 = $2 + 40 | 0;
      $11 = HEAPF32[$13 + 8 >> 2];
      block37 : {
       if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
        $8 = ~~$11;
        break block37;
       }
       $8 = -2147483648;
      }
      HEAP32[$1 + 4 >> 2] = $8;
      $11 = HEAPF32[$13 + 12 >> 2];
      block38 : {
       if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
        $14 = ~~$11;
        break block38;
       }
       $14 = -2147483648;
      }
      HEAP32[$1 + 8 >> 2] = $14;
      $8 = Math_imul($8, $21);
      $19 = Math_imul($14, $8);
     }
     if (!global$9 | ($5 | 0) == 97) {
      $4 = emscripten_builtin_calloc($19, 1);
      $3 = 97;
      if ((global$9 | 0) == 1) {
       break block
      }
      $23 = $4;
     }
     if (!global$9) {
      HEAP32[$1 + 16 >> 2] = $18;
      HEAP32[$1 >> 2] = $23;
      HEAP32[$1 + 12 >> 2] = 1;
      if (($14 | 0) > 0) {
       $18 = HEAP32[$17 + 4 >> 2];
       $17 = HEAP32[$17 >> 2];
       $11 = HEAPF32[$13 >> 2];
       block39 : {
        if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
         $19 = ~~$11;
         break block39;
        }
        $19 = -2147483648;
       }
       $11 = HEAPF32[$13 + 4 >> 2];
       block40 : {
        if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
         $13 = ~~$11;
         break block40;
        }
        $13 = -2147483648;
       }
       $1 = 0;
       while (1) {
        __memcpy(Math_imul($1, $8) + $23 | 0, Math_imul(Math_imul($1 + $13 | 0, $18) + $19 | 0, $21) + $17 | 0, $8);
        $1 = $1 + 1 | 0;
        if (($14 | 0) != ($1 | 0)) {
         continue
        }
        break;
       };
      }
      $1 = $6 + $10 | 0;
      $6 = HEAP32[$2 + 120 >> 2];
      HEAP32[$1 + 32 >> 2] = $6;
      $4 = HEAP32[$2 + 116 >> 2];
      HEAP32[$1 + 24 >> 2] = HEAP32[$2 + 112 >> 2];
      HEAP32[$1 + 28 >> 2] = $4;
      $4 = HEAP32[$2 + 108 >> 2];
      HEAP32[$1 + 16 >> 2] = HEAP32[$2 + 104 >> 2];
      HEAP32[$1 + 20 >> 2] = $4;
      $0 = $0 + 1 | 0;
      $1 = ($0 | 0) < HEAP32[16593];
      if ($1) {
       continue
      }
     }
     break;
    };
   }
   if (!global$9) {
    HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 140 >> 2];
    $0 = HEAP32[$2 + 136 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 132 >> 2];
    HEAP32[$2 + 28 >> 2] = $0;
    $0 = HEAP32[$2 + 128 >> 2];
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 124 >> 2];
    HEAP32[$2 + 20 >> 2] = $0;
    $0 = $2 + 16 | 0;
   }
   if (!global$9 | ($5 | 0) == 98) {
    UnloadImage($0);
    $3 = 98;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $11 = HEAPF32[HEAP32[16600] + 12 >> 2];
    block41 : {
     if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
      $0 = ~~$11;
      break block41;
     }
     $0 = -2147483648;
    }
    HEAP32[16592] = $0;
    $0 = HEAP32[16593];
    HEAP32[$2 >> 2] = $0;
   }
   if (!global$9 | ($5 | 0) == 99) {
    TraceLog(3, 12154, $2);
    $3 = 99;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $2 + 144 | 0;
    GetFontDefault($9 + 216 | 0);
    $0 = HEAP32[$9 + 248 >> 2];
    $11 = HEAPF32[$0 + 1524 >> 2];
    $16 = HEAPF32[$0 + 1520 >> 2];
    block42 : {
     if (HEAPU8[59372] & 32) {
      GetFontDefault($9 + 176 | 0);
      HEAP32[$9 + 168 >> 2] = 1065353216;
      HEAP32[$9 + 172 >> 2] = 1065353216;
      $0 = $9 - -64 | 0;
      HEAP32[$0 >> 2] = 1065353216;
      HEAP32[$0 + 4 >> 2] = 1065353216;
      $0 = HEAP32[$9 + 200 >> 2];
      HEAP32[$9 + 80 >> 2] = HEAP32[$9 + 196 >> 2];
      HEAP32[$9 + 84 >> 2] = $0;
      HEAP32[$9 + 88 >> 2] = HEAP32[$9 + 204 >> 2];
      HEAPF32[$9 + 164 >> 2] = $11 + Math_fround(2.0);
      HEAPF32[$9 + 160 >> 2] = $16 + Math_fround(2.0);
      $0 = HEAP32[$9 + 192 >> 2];
      HEAP32[$9 + 72 >> 2] = HEAP32[$9 + 188 >> 2];
      HEAP32[$9 + 76 >> 2] = $0;
      $0 = HEAP32[$9 + 164 >> 2];
      HEAP32[$9 + 56 >> 2] = HEAP32[$9 + 160 >> 2];
      HEAP32[$9 + 60 >> 2] = $0;
      $1 = $9 + 56 | 0;
      SetShapesTexture($9 + 72 | 0, $1);
      break block42;
     }
     $20 = HEAPF32[$0 + 1528 >> 2];
     $24 = HEAPF32[$0 + 1532 >> 2];
     GetFontDefault($9 + 120 | 0);
     $0 = $9 + 112 | 0;
     HEAPF32[$0 >> 2] = $20 + Math_fround(-2.0);
     $1 = HEAP32[$9 + 144 >> 2];
     HEAP32[$9 + 40 >> 2] = HEAP32[$9 + 140 >> 2];
     HEAP32[$9 + 44 >> 2] = $1;
     HEAP32[$9 + 48 >> 2] = HEAP32[$9 + 148 >> 2];
     HEAPF32[$9 + 116 >> 2] = $24 + Math_fround(-2.0);
     $1 = HEAP32[$0 + 4 >> 2];
     HEAP32[$9 + 24 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$9 + 28 >> 2] = $1;
     HEAPF32[$9 + 108 >> 2] = $11 + Math_fround(1.0);
     HEAPF32[$9 + 104 >> 2] = $16 + Math_fround(1.0);
     $0 = HEAP32[$9 + 136 >> 2];
     HEAP32[$9 + 32 >> 2] = HEAP32[$9 + 132 >> 2];
     HEAP32[$9 + 36 >> 2] = $0;
     $0 = HEAP32[$9 + 108 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 104 >> 2];
     HEAP32[$9 + 20 >> 2] = $0;
     $1 = $9 + 16 | 0;
     SetShapesTexture($9 + 32 | 0, $1);
    }
    HEAP8[59378] = 0;
    HEAP32[15532] = 0;
    $0 = 0;
    $22 = $0;
    $0 = $0 + 1013904242 | 0;
    $15 = $0 + 1 | 0;
    $26 = +emscripten_date_now() / 1.0e3;
    if (Math_abs($26) < 9223372036854775808.0) {
     $4 = ~~$26 >>> 0
    } else {
     $4 = 0
    }
    $3 = $4 - 23791574 | 0;
    $0 = $3 >>> 0 < 4271175722 ? $15 : $0;
    $3 = __wasm_i64_mul((($0 & 1073741823) << 2 | $3 >>> 30) ^ $3, $0 >>> 30 ^ $0, 484763065, -1084733587);
    $15 = i64toi32_i32$HIGH_BITS;
    $0 = $15 >>> 27 | 0;
    __wasm_i64_mul($3 ^ (($15 & 134217727) << 5 | $3 >>> 27), $0 ^ $15, 321982955, -1798288965);
    $3 = i64toi32_i32$HIGH_BITS;
    HEAP32[12908] = $3 >>> 31 ^ $3;
    $15 = $22 - (($4 >>> 0 < 2159379435) + 1640531526 | 0) | 0;
    $0 = $15 >>> 30 | 0;
    $3 = $4 + 2135587861 | 0;
    $25 = ($15 & 1073741823) << 2 | $3 >>> 30;
    $0 = __wasm_i64_mul($3 ^ $25, $0 ^ $15, 484763065, -1084733587);
    $15 = i64toi32_i32$HIGH_BITS;
    $3 = $15 >>> 27 | 0;
    $0 = __wasm_i64_mul($0 ^ (($15 & 134217727) << 5 | $0 >>> 27), $3 ^ $15, 321982955, -1798288965);
    $3 = i64toi32_i32$HIGH_BITS;
    HEAP32[12904] = $0 ^ (($3 & 2147483647) << 1 | $0 >>> 31);
    $3 = $22 - (($4 >>> 0 < 2183171009) + 626627283 | 0) | 0;
    $15 = $3 >>> 30 | 0;
    $0 = $4 + 2111796287 | 0;
    $25 = ($3 & 1073741823) << 2 | $0 >>> 30;
    $0 = __wasm_i64_mul($0 ^ $25, $3 ^ $15, 484763065, -1084733587);
    $3 = i64toi32_i32$HIGH_BITS;
    $15 = $3 >>> 27 | 0;
    $0 = __wasm_i64_mul($0 ^ (($3 & 134217727) << 5 | $0 >>> 27), $3 ^ $15, 321982955, -1798288965);
    $3 = i64toi32_i32$HIGH_BITS;
    HEAP32[12910] = $0 ^ (($3 & 2147483647) << 1 | $0 >>> 31);
    $0 = $22 + 2027808485 | 0;
    $4 = $4 - 47583148 | 0;
    $0 = $4 >>> 0 < 4247384148 ? $0 + 1 | 0 : $0;
    $4 = __wasm_i64_mul($4 ^ (($0 & 1073741823) << 2 | $4 >>> 30), $0 ^ $0 >>> 30, 484763065, -1084733587);
    $3 = i64toi32_i32$HIGH_BITS;
    $0 = $3 >>> 27 | 0;
    __wasm_i64_mul($4 ^ (($3 & 134217727) << 5 | $4 >>> 27), $0 ^ $3, 321982955, -1798288965);
    $4 = i64toi32_i32$HIGH_BITS;
    HEAP32[12912] = $4 >>> 31 ^ $4;
    $0 = __memset(62256, 0, 4096);
   }
   if (!global$9 | ($5 | 0) == 100) {
    $4 = getcwd($0);
    $3 = 100;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    HEAP32[$9 >> 2] = $0
   }
   if (!global$9 | ($5 | 0) == 101) {
    TraceLog(3, 3906, $9);
    $3 = 101;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $9 + 256 | 0;
    emscripten_set_main_loop(1, 0, 1);
    $9 = __stack_pointer - 16 | 0;
    __stack_pointer = $9;
    $0 = HEAPU8[62152];
   }
   if ((global$9 | 0) == 2 | $0) {
    if (!global$9 | ($5 | 0) == 102) {
     msf_gif_end($9);
     $3 = 102;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAP32[$9 >> 2];
    if (!global$9 | ($5 | 0) == 103 ? $1 | (global$9 | 0) == 2 : 0) {
     emscripten_builtin_free($1);
     $3 = 103;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAP8[62152] = 0
    }
   }
   if (!global$9) {
    $1 = __stack_pointer - 48 | 0;
    __stack_pointer = $1;
    $2 = HEAP32[16593] > 0;
    $0 = 0;
   }
   if ((global$9 | 0) == 2 | $2) {
    if (!global$9) {
     $7 = $1 + 40 | 0;
     $6 = $1 + 32 | 0;
    }
    while (1) {
     if (!global$9) {
      $2 = HEAP32[16601] + Math_imul($0, 36) | 0;
      $8 = HEAP32[$2 + 28 >> 2];
      HEAP32[$6 >> 2] = HEAP32[$2 + 24 >> 2];
      HEAP32[$6 + 4 >> 2] = $8;
      $8 = HEAP32[$2 + 32 >> 2];
      HEAP32[$7 >> 2] = $8;
      $4 = HEAP32[$2 + 20 >> 2];
      HEAP32[$1 + 24 >> 2] = HEAP32[$2 + 16 >> 2];
      HEAP32[$1 + 28 >> 2] = $4;
      $2 = $1 + 24 | 0;
     }
     if (!global$9 | ($5 | 0) == 104) {
      UnloadImage($2);
      $3 = 104;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $0 = $0 + 1 | 0;
      $2 = ($0 | 0) < HEAP32[16593];
      if ($2) {
       continue
      }
     }
     break;
    };
   }
   $0 = global$9 ? $0 : HEAPU8[62136];
   if ($0 | (global$9 | 0) == 2) {
    if (!global$9) {
     $0 = HEAP32[16599];
     HEAP32[$1 + 16 >> 2] = $0;
     $4 = HEAP32[16598];
     HEAP32[$1 + 8 >> 2] = HEAP32[16597];
     HEAP32[$1 + 12 >> 2] = $4;
     $4 = HEAP32[16596];
     HEAP32[$1 >> 2] = HEAP32[16595];
     HEAP32[$1 + 4 >> 2] = $4;
    }
    if (!global$9 | ($5 | 0) == 105) {
     UnloadTexture($1);
     $3 = 105;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   $0 = global$9 ? $0 : HEAP32[16601];
   if (!global$9 | ($5 | 0) == 106) {
    emscripten_builtin_free($0);
    $3 = 106;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : HEAP32[16600];
   if (!global$9 | ($5 | 0) == 107) {
    emscripten_builtin_free($0);
    $3 = 107;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $1 + 48 | 0;
    $2 = 0;
    $0 = __stack_pointer - 48 | 0;
    __stack_pointer = $0;
    $1 = HEAP32[14166];
    HEAP32[$0 + 40 >> 2] = HEAP32[14165];
    HEAP32[$0 + 44 >> 2] = $1;
    $1 = HEAP32[14164];
    HEAP32[$0 + 32 >> 2] = HEAP32[14163];
    HEAP32[$0 + 36 >> 2] = $1;
    $1 = HEAP32[14162];
    HEAP32[$0 + 24 >> 2] = HEAP32[14161];
    HEAP32[$0 + 28 >> 2] = $1;
    glBindBuffer(34962, 0);
    glBindBuffer(34963, 0);
    $7 = $0 + 24 | 0;
    $6 = HEAP32[$7 + 8 >> 2];
    $10 = HEAP32[$7 >> 2];
    $1 = ($10 | 0) > 0;
   }
   if ((global$9 | 0) == 2 | $1) {
    while (1) {
     $1 = global$9 ? $1 : HEAPU8[59308] == 1;
     if ($1 | (global$9 | 0) == 2) {
      if (!global$9) {
       $8 = HEAP32[14834];
       $1 = HEAP32[(Math_imul($2, 48) + $6 | 0) + 24 >> 2];
      }
      if (!global$9 | ($5 | 0) == 108) {
       FUNCTION_TABLE[$8 | 0]($1);
       $3 = 108;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       glDisableVertexAttribArray(0);
       glDisableVertexAttribArray(1);
       glDisableVertexAttribArray(2);
       glDisableVertexAttribArray(3);
       $1 = HEAP32[14834];
      }
      if (!global$9 | ($5 | 0) == 109) {
       FUNCTION_TABLE[$1 | 0](0);
       $3 = 109;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $1 = Math_imul($2, 48) + $6 | 0;
      glDeleteBuffers(1, $1 + 28 | 0);
      glDeleteBuffers(1, $1 + 32 | 0);
      glDeleteBuffers(1, $1 + 36 | 0);
      glDeleteBuffers(1, $1 + 40 | 0);
      glDeleteBuffers(1, $1 + 44 | 0);
      $8 = HEAPU8[59308] == 1;
     }
     if ((global$9 | 0) == 2 | $8) {
      if (!global$9) {
       $13 = HEAP32[14835];
       $8 = $1 + 24 | 0;
      }
      if (!global$9 | ($5 | 0) == 110) {
       FUNCTION_TABLE[$13 | 0](1, $8);
       $3 = 110;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     $8 = global$9 ? $8 : HEAP32[$1 + 4 >> 2];
     if (!global$9 | ($5 | 0) == 111) {
      emscripten_builtin_free($8);
      $3 = 111;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $8 = global$9 ? $8 : HEAP32[$1 + 8 >> 2];
     if (!global$9 | ($5 | 0) == 112) {
      emscripten_builtin_free($8);
      $3 = 112;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $8 = global$9 ? $8 : HEAP32[$1 + 12 >> 2];
     if (!global$9 | ($5 | 0) == 113) {
      emscripten_builtin_free($8);
      $3 = 113;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $8 = global$9 ? $8 : HEAP32[$1 + 16 >> 2];
     if (!global$9 | ($5 | 0) == 114) {
      emscripten_builtin_free($8);
      $3 = 114;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $1 = global$9 ? $1 : HEAP32[$1 + 20 >> 2];
     if (!global$9 | ($5 | 0) == 115) {
      emscripten_builtin_free($1);
      $3 = 115;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = $2 + 1 | 0;
      $1 = ($10 | 0) != ($2 | 0);
      if ($1) {
       continue
      }
     }
     break;
    }
   }
   if (!global$9 | ($5 | 0) == 116) {
    emscripten_builtin_free($6);
    $3 = 116;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $1 = global$9 ? $1 : HEAP32[$7 + 12 >> 2];
   if (!global$9 | ($5 | 0) == 117) {
    emscripten_builtin_free($1);
    $3 = 117;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    glUseProgram(0);
    glDetachShader(HEAP32[14745], HEAP32[14743]);
    glDetachShader(HEAP32[14745], HEAP32[14744]);
    glDeleteShader(HEAP32[14743]);
    glDeleteShader(HEAP32[14744]);
    glDeleteProgram(HEAP32[14745]);
    $1 = HEAP32[14746];
   }
   if (!global$9 | ($5 | 0) == 118) {
    emscripten_builtin_free($1);
    $3 = 118;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$0 + 16 >> 2] = HEAP32[14745];
    $1 = $0 + 16 | 0;
   }
   if (!global$9 | ($5 | 0) == 119) {
    TraceLog(3, 1563, $1);
    $3 = 119;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    glDeleteTextures(1, 58952);
    HEAP32[$0 >> 2] = HEAP32[14738];
   }
   if (!global$9 | ($5 | 0) == 120) {
    TraceLog(3, 1616, $0);
    $3 = 120;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 48 | 0;
    glfwDestroyWindow(HEAP32[16589]);
    glfwTerminate();
    HEAP8[59376] = 0;
   }
   if (!global$9 | ($5 | 0) == 121) {
    TraceLog(3, 1430, 0);
    $3 = 121;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $9 + 16 | 0;
    return 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $6;
  HEAP32[$4 + 16 >> 2] = $7;
  HEAP32[$4 + 20 >> 2] = $8;
  HEAP32[$4 + 24 >> 2] = $10;
  HEAP32[$4 + 28 >> 2] = $9;
  HEAP32[$4 + 32 >> 2] = $12;
  HEAP32[$4 + 36 >> 2] = $13;
  HEAP32[$4 + 40 >> 2] = $14;
  HEAP32[$4 + 44 >> 2] = $17;
  HEAP32[$4 + 48 >> 2] = $18;
  HEAP32[$4 + 52 >> 2] = $19;
  HEAP32[$4 + 56 >> 2] = $21;
  HEAP32[$4 + 60 >> 2] = $23;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - -64;
  return 0;
 }
 
 function GlobalState__inst_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (global$9) {
    $2 = $0
   } else {
    $0 = HEAP32[13628];
    $2 = !$0;
   }
   if ($2 | (global$9 | 0) == 2) {
    if (!global$9 | !$1) {
     $1 = operator_20new_28unsigned_20long_29(12);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $1;
    }
    if (!global$9) {
     HEAP32[13628] = $0
    }
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function Scene__inst_28_29() {
  var $0 = 0, $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $0 = global$9 ? $0 : !HEAP32[13629];
   if ($0 | (global$9 | 0) == 2) {
    if (!global$9 | !$1) {
     $1 = operator_20new_28unsigned_20long_29(12);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $1;
    }
    if (!global$9) {
     HEAP32[$0 + 8 >> 2] = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[13629] = $0;
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function GuiLoadStyleDefault() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 128 | 0;
   __stack_pointer = $0;
   HEAP8[54525] = 1;
   HEAP32[14004] = -2088532993;
   HEAP32[14005] = -909522433;
   HEAP32[13980] = -2088532993;
   HEAP32[13981] = -909522433;
   HEAP32[13956] = -2088532993;
   HEAP32[13957] = -909522433;
   HEAP32[13932] = -2088532993;
   HEAP32[13933] = -909522433;
   HEAP32[13908] = -2088532993;
   HEAP32[13909] = -909522433;
   HEAP32[13884] = -2088532993;
   HEAP32[13885] = -909522433;
   HEAP32[13860] = -2088532993;
   HEAP32[13861] = -909522433;
   HEAP32[13836] = -2088532993;
   HEAP32[13837] = -909522433;
   HEAP32[13812] = -2088532993;
   HEAP32[13813] = -909522433;
   HEAP32[13788] = -2088532993;
   HEAP32[13789] = -909522433;
   HEAP32[13764] = -2088532993;
   HEAP32[13765] = -909522433;
   HEAP32[13740] = -2088532993;
   HEAP32[13741] = -909522433;
   HEAP32[13716] = -2088532993;
   HEAP32[13717] = -909522433;
   HEAP32[13692] = -2088532993;
   HEAP32[13693] = -909522433;
   HEAP32[13668] = -2088532993;
   HEAP32[13669] = -909522433;
   HEAP32[13644] = -2088532993;
   HEAP32[13645] = -909522433;
   HEAP32[14006] = 1751673087;
   HEAP32[14007] = 1538447871;
   HEAP32[13982] = 1751673087;
   HEAP32[13983] = 1538447871;
   HEAP32[13958] = 1751673087;
   HEAP32[13959] = 1538447871;
   HEAP32[13934] = 1751673087;
   HEAP32[13935] = 1538447871;
   HEAP32[13910] = 1751673087;
   HEAP32[13911] = 1538447871;
   HEAP32[13886] = 1751673087;
   HEAP32[13887] = 1538447871;
   HEAP32[13862] = 1751673087;
   HEAP32[13863] = 1538447871;
   HEAP32[13838] = 1751673087;
   HEAP32[13839] = 1538447871;
   HEAP32[13814] = 1751673087;
   HEAP32[13815] = 1538447871;
   HEAP32[13790] = 1751673087;
   HEAP32[13791] = 1538447871;
   HEAP32[13766] = 1751673087;
   HEAP32[13767] = 1538447871;
   HEAP32[13742] = 1751673087;
   HEAP32[13743] = 1538447871;
   HEAP32[13718] = 1751673087;
   HEAP32[13719] = 1538447871;
   HEAP32[13694] = 1751673087;
   HEAP32[13695] = 1538447871;
   HEAP32[13670] = 1751673087;
   HEAP32[13671] = 1538447871;
   HEAP32[13648] = -907018497;
   HEAP32[13646] = 1751673087;
   HEAP32[13647] = 1538447871;
   HEAP32[13672] = -907018497;
   HEAP32[13696] = -907018497;
   HEAP32[13720] = -907018497;
   HEAP32[13744] = -907018497;
   HEAP32[13768] = -907018497;
   HEAP32[13792] = -907018497;
   HEAP32[13816] = -907018497;
   HEAP32[13840] = -907018497;
   HEAP32[13864] = -907018497;
   HEAP32[13888] = -907018497;
   HEAP32[13912] = -907018497;
   HEAP32[13936] = -907018497;
   HEAP32[13960] = -907018497;
   HEAP32[13984] = -907018497;
   HEAP32[14008] = -907018497;
   HEAP32[14009] = 1822145791;
   HEAP32[13985] = 1822145791;
   HEAP32[13961] = 1822145791;
   HEAP32[13937] = 1822145791;
   HEAP32[13913] = 1822145791;
   HEAP32[13889] = 1822145791;
   HEAP32[13865] = 1822145791;
   HEAP32[13841] = 1822145791;
   HEAP32[13817] = 1822145791;
   HEAP32[13793] = 1822145791;
   HEAP32[13769] = 1822145791;
   HEAP32[13745] = 1822145791;
   HEAP32[13721] = 1822145791;
   HEAP32[13697] = 1822145791;
   HEAP32[13673] = 1822145791;
   HEAP32[13649] = 1822145791;
   HEAP32[14010] = 76728319;
   HEAP32[13986] = 76728319;
   HEAP32[13962] = 76728319;
   HEAP32[13938] = 76728319;
   HEAP32[13914] = 76728319;
   HEAP32[13890] = 76728319;
   HEAP32[13866] = 76728319;
   HEAP32[13842] = 76728319;
   HEAP32[13818] = 76728319;
   HEAP32[13794] = 76728319;
   HEAP32[13770] = 76728319;
   HEAP32[13746] = 76728319;
   HEAP32[13722] = 76728319;
   HEAP32[13698] = 76728319;
   HEAP32[13674] = 76728319;
   HEAP32[13650] = 76728319;
   HEAP32[14011] = -1746337793;
   HEAP32[13987] = -1746337793;
   HEAP32[13963] = -1746337793;
   HEAP32[13939] = -1746337793;
   HEAP32[13915] = -1746337793;
   HEAP32[13891] = -1746337793;
   HEAP32[13867] = -1746337793;
   HEAP32[13843] = -1746337793;
   HEAP32[13819] = -1746337793;
   HEAP32[13795] = -1746337793;
   HEAP32[13771] = -1746337793;
   HEAP32[13747] = -1746337793;
   HEAP32[13723] = -1746337793;
   HEAP32[13699] = -1746337793;
   HEAP32[13675] = -1746337793;
   HEAP32[13651] = -1746337793;
   HEAP32[14012] = 915124223;
   HEAP32[13988] = 915124223;
   HEAP32[13964] = 915124223;
   HEAP32[13940] = 915124223;
   HEAP32[13916] = 915124223;
   HEAP32[13892] = 915124223;
   HEAP32[13868] = 915124223;
   HEAP32[13844] = 915124223;
   HEAP32[13820] = 915124223;
   HEAP32[13796] = 915124223;
   HEAP32[13772] = 915124223;
   HEAP32[13748] = 915124223;
   HEAP32[13724] = 915124223;
   HEAP32[13700] = 915124223;
   HEAP32[13676] = 915124223;
   HEAP32[13652] = 915124223;
   HEAP32[14013] = -1245592833;
   HEAP32[13989] = -1245592833;
   HEAP32[13965] = -1245592833;
   HEAP32[13941] = -1245592833;
   HEAP32[13917] = -1245592833;
   HEAP32[13893] = -1245592833;
   HEAP32[13869] = -1245592833;
   HEAP32[13845] = -1245592833;
   HEAP32[13821] = -1245592833;
   HEAP32[13797] = -1245592833;
   HEAP32[13773] = -1245592833;
   HEAP32[13749] = -1245592833;
   HEAP32[13725] = -1245592833;
   HEAP32[13701] = -1245592833;
   HEAP32[13677] = -1245592833;
   HEAP32[13653] = -1245592833;
   HEAP32[14014] = -420877825;
   HEAP32[13990] = -420877825;
   HEAP32[13966] = -420877825;
   HEAP32[13942] = -420877825;
   HEAP32[13918] = -420877825;
   HEAP32[13894] = -420877825;
   HEAP32[13870] = -420877825;
   HEAP32[13846] = -420877825;
   HEAP32[13822] = -420877825;
   HEAP32[13798] = -420877825;
   HEAP32[13774] = -420877825;
   HEAP32[13750] = -420877825;
   HEAP32[13726] = -420877825;
   HEAP32[13702] = -420877825;
   HEAP32[13678] = -420877825;
   HEAP32[13654] = -420877825;
   HEAP32[14015] = -1363691265;
   HEAP32[13991] = -1363691265;
   HEAP32[13967] = -1363691265;
   HEAP32[13943] = -1363691265;
   HEAP32[13919] = -1363691265;
   HEAP32[13895] = -1363691265;
   HEAP32[13871] = -1363691265;
   HEAP32[13847] = -1363691265;
   HEAP32[13823] = -1363691265;
   HEAP32[13799] = -1363691265;
   HEAP32[13775] = -1363691265;
   HEAP32[13751] = -1363691265;
   HEAP32[13727] = -1363691265;
   HEAP32[13703] = -1363691265;
   HEAP32[13679] = -1363691265;
   HEAP32[13655] = -1363691265;
   HEAP32[14016] = 1;
   HEAP32[13968] = 1;
   HEAP32[13944] = 1;
   HEAP32[13920] = 1;
   HEAP32[13896] = 1;
   HEAP32[13872] = 1;
   HEAP32[13848] = 1;
   HEAP32[13824] = 1;
   HEAP32[13800] = 1;
   HEAP32[13776] = 1;
   HEAP32[13752] = 1;
   HEAP32[13728] = 1;
   HEAP32[13680] = 1;
   HEAP32[13656] = 1;
   HEAP32[13993] = 0;
   HEAP32[13969] = 0;
   HEAP32[13945] = 0;
   HEAP32[13825] = 0;
   HEAP32[13729] = 0;
   HEAP32[13705] = 0;
   HEAP32[13681] = 0;
   HEAP32[13657] = 0;
   HEAP32[13994] = 1;
   HEAP32[13970] = 1;
   HEAP32[13946] = 1;
   HEAP32[13826] = 1;
   HEAP32[13778] = 1;
   HEAP32[13754] = 1;
   HEAP32[13730] = 1;
   HEAP32[13706] = 1;
   HEAP32[13658] = 1;
   HEAP32[14017] = 8;
   HEAP32[14018] = 0;
   HEAP32[13921] = 0;
   HEAP32[13922] = 0;
   HEAP32[13897] = 0;
   HEAP32[13898] = 0;
   HEAP32[13873] = 4;
   HEAP32[13874] = 0;
   HEAP32[13849] = 0;
   HEAP32[13850] = 1;
   HEAP32[13801] = 4;
   HEAP32[13802] = 2;
   HEAP32[13777] = 4;
   HEAP32[13753] = 4;
   HEAP32[13704] = 2;
   HEAP32[13664] = 15;
   HEAP32[13665] = 1;
   HEAP32[13662] = -1867794945;
   HEAP32[13663] = -168430081;
   HEAP32[13660] = 10;
   HEAP32[13661] = 1;
   HEAP32[13682] = 0;
   HEAP32[13924] = 24;
   HEAP32[13925] = 2;
   HEAP32[13852] = 16;
   HEAP32[13853] = 2;
   HEAP32[13828] = 32;
   HEAP32[13829] = 2;
   HEAP32[13804] = 1;
   HEAP32[13780] = 1;
   HEAP32[13756] = 16;
   HEAP32[13757] = 1;
   HEAP32[13732] = 2;
   HEAP32[13997] = 0;
   HEAP32[13992] = 0;
   HEAP32[14e3] = 0;
   HEAP32[14001] = 12;
   HEAP32[13998] = 0;
   HEAP32[13999] = 16;
   HEAP32[13996] = 6;
   HEAP32[13974] = 8;
   HEAP32[13972] = 8;
   HEAP32[13973] = 16;
   HEAP32[13950] = 12;
   HEAP32[13951] = 1;
   HEAP32[13948] = 28;
   HEAP32[13949] = 2;
   $1 = HEAP32[13635];
   HEAP32[13975] = 8;
   HEAP32[13976] = 2;
   GetFontDefault($0 + 88 | 0);
   $1 = ($1 | 0) != HEAP32[$0 + 100 >> 2];
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9) {
     HEAP32[$0 - -64 >> 2] = HEAP32[13639];
     $1 = HEAP32[13638];
     HEAP32[$0 + 56 >> 2] = HEAP32[13637];
     HEAP32[$0 + 60 >> 2] = $1;
     $1 = HEAP32[13636];
     HEAP32[$0 + 48 >> 2] = HEAP32[13635];
     HEAP32[$0 + 52 >> 2] = $1;
     $1 = $0 + 48 | 0;
    }
    if (!global$9 | !$2) {
     UnloadTexture($1);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAP32[13640];
    if (!global$9 | ($2 | 0) == 1) {
     emscripten_builtin_free($1);
     $3 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAP32[13641];
    if (!global$9 | ($2 | 0) == 2) {
     emscripten_builtin_free($1);
     $3 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAP32[13640] = 0;
     HEAP32[13641] = 0;
     GetFontDefault($0 + 88 | 0);
     $2 = HEAP32[$0 + 124 >> 2];
     $1 = HEAP32[$0 + 120 >> 2];
     HEAP32[13640] = $1;
     HEAP32[13641] = $2;
     $2 = HEAP32[$0 + 116 >> 2];
     HEAP32[13638] = HEAP32[$0 + 112 >> 2];
     HEAP32[13639] = $2;
     $2 = HEAP32[$0 + 108 >> 2];
     HEAP32[13636] = HEAP32[$0 + 104 >> 2];
     HEAP32[13637] = $2;
     $2 = HEAP32[$0 + 100 >> 2];
     HEAP32[13634] = HEAP32[$0 + 96 >> 2];
     HEAP32[13635] = $2;
     $2 = HEAP32[$0 + 92 >> 2];
     HEAP32[13632] = HEAP32[$0 + 88 >> 2];
     HEAP32[13633] = $2;
     $4 = HEAPF32[$1 + 1532 >> 2];
     $5 = HEAPF32[$1 + 1520 >> 2];
     $6 = HEAPF32[$1 + 1524 >> 2];
     $2 = $0 + 80 | 0;
     HEAPF32[$2 >> 2] = HEAPF32[$1 + 1528 >> 2] + Math_fround(-2.0);
     HEAPF32[$0 + 76 >> 2] = $6 + Math_fround(1.0);
     HEAPF32[$0 + 72 >> 2] = $5 + Math_fround(1.0);
     HEAPF32[$0 + 84 >> 2] = $4 + Math_fround(-2.0);
     $1 = HEAP32[13638];
     HEAP32[$0 + 32 >> 2] = HEAP32[13637];
     HEAP32[$0 + 36 >> 2] = $1;
     HEAP32[$0 + 40 >> 2] = HEAP32[13639];
     $1 = HEAP32[13635];
     $3 = HEAP32[13636];
     $7 = HEAP32[$2 + 4 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 20 >> 2] = $7;
     HEAP32[$0 + 24 >> 2] = $1;
     HEAP32[$0 + 28 >> 2] = $3;
     $1 = HEAP32[$0 + 76 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 72 >> 2];
     HEAP32[$0 + 12 >> 2] = $1;
     SetShapesTexture($0 + 24 | 0, $0 + 8 | 0);
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 128 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function GuiDrawRectangle_28Rectangle_2c_20int_2c_20Color_2c_20Color_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + -64;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $9 = HEAPF32[$5 + 20 >> 2];
   $6 = HEAPF32[$5 + 24 >> 2];
   $10 = HEAP32[$5 + 28 >> 2];
   $13 = HEAP32[$5 + 32 >> 2];
   $7 = HEAPF32[$5 + 36 >> 2];
   $14 = HEAP32[$5 + 40 >> 2];
   $12 = HEAP32[$5 + 44 >> 2];
   $16 = HEAP32[$5 + 48 >> 2];
   $15 = HEAP32[$5 + 52 >> 2];
   $11 = HEAP32[$5 + 56 >> 2];
   $17 = HEAP32[$5 + 60 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $18 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 48 | 0;
   __stack_pointer = $4;
   $13 = HEAPU8[$3 + 3 | 0];
  }
  block1 : {
   if ((global$9 | 0) == 2 | $13) {
    if (!global$9) {
     $3 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
     $13 = $3 >>> 24 | 0;
     $14 = $3 >>> 16 | 0;
     $16 = $3 >>> 8 | 0;
     $6 = HEAPF32[$0 + 12 >> 2];
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $15 = ~~$6
     } else {
      $15 = -2147483648
     }
     $6 = HEAPF32[$0 + 8 >> 2];
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $10 = ~~$6
     } else {
      $10 = -2147483648
     }
     $6 = HEAPF32[$0 + 4 >> 2];
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $11 = ~~$6
     } else {
      $11 = -2147483648
     }
     $6 = HEAPF32[$0 >> 2];
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $12 = ~~$6
     } else {
      $12 = -2147483648
     }
     $6 = HEAPF32[10852];
     $17 = $6 < Math_fround(0.0);
     block : {
      if ($17) {
       break block
      }
      $7 = $6;
      $17 = !($6 > Math_fround(1.0));
      if ($17) {
       break block
      }
      $7 = Math_fround(1.0);
     }
     HEAP8[$4 + 46 | 0] = $14;
     HEAP8[$4 + 45 | 0] = $16;
     HEAP8[$4 + 44 | 0] = $3;
     $6 = Math_fround($7 * Math_fround($13 >>> 0));
     if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
      $3 = ~~$6 >>> 0
     } else {
      $3 = 0
     }
     HEAP8[$4 + 47 | 0] = $3;
     HEAP32[$4 + 24 >> 2] = HEAPU8[$4 + 44 | 0] | HEAPU8[$4 + 45 | 0] << 8 | (HEAPU8[$4 + 46 | 0] << 16 | HEAPU8[$4 + 47 | 0] << 24);
     $3 = $4 + 24 | 0;
    }
    if (!global$9 | !$18) {
     DrawRectangle($12, $11, $10, $15, $3);
     $5 = 0;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   $3 = global$9 ? $3 : ($1 | 0) > 0;
   if ($3 | (global$9 | 0) == 2) {
    if (!global$9) {
     $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
     $10 = $3 >>> 24 | 0;
     $2 = $3 >>> 16 | 0;
     $13 = $3 >>> 8 | 0;
     $6 = Math_fround(0.0);
     $7 = HEAPF32[$0 + 8 >> 2];
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $16 = ~~$7
     } else {
      $16 = -2147483648
     }
     $7 = HEAPF32[$0 + 4 >> 2];
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $15 = ~~$7
     } else {
      $15 = -2147483648
     }
     $7 = HEAPF32[$0 >> 2];
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $14 = ~~$7
     } else {
      $14 = -2147483648
     }
     $7 = HEAPF32[10852];
     $11 = $7 < Math_fround(0.0);
     block2 : {
      if ($11) {
       break block2
      }
      $9 = $7;
      $11 = !($7 > Math_fround(1.0));
      if ($11) {
       break block2
      }
      $9 = Math_fround(1.0);
     }
     HEAP8[$4 + 42 | 0] = $2;
     HEAP8[$4 + 41 | 0] = $13;
     HEAP8[$4 + 40 | 0] = $3;
     $7 = Math_fround($10 >>> 0);
     $8 = Math_fround($9 * $7);
     if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
      $10 = ~~$8 >>> 0
     } else {
      $10 = 0
     }
     HEAP8[$4 + 43 | 0] = $10;
     HEAP32[$4 + 20 >> 2] = HEAPU8[$4 + 40 | 0] | HEAPU8[$4 + 41 | 0] << 8 | (HEAPU8[$4 + 42 | 0] << 16 | HEAPU8[$4 + 43 | 0] << 24);
     $10 = $4 + 20 | 0;
    }
    if (!global$9 | ($18 | 0) == 1) {
     DrawRectangle($14, $15, $16, $1, $10);
     $5 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     $10 = $1 + $15 | 0;
     $9 = HEAPF32[$0 + 12 >> 2];
     if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
      $11 = ~~$9
     } else {
      $11 = -2147483648
     }
     $0 = $11 - ($1 << 1) | 0;
     $9 = HEAPF32[10852];
     block3 : {
      if ($9 < Math_fround(0.0)) {
       break block3
      }
      $6 = $9;
      if (!($6 > Math_fround(1.0))) {
       break block3
      }
      $6 = Math_fround(1.0);
     }
     HEAP8[$4 + 38 | 0] = $2;
     HEAP8[$4 + 37 | 0] = $13;
     HEAP8[$4 + 36 | 0] = $3;
     $8 = Math_fround($6 * $7);
     if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
      $12 = ~~$8 >>> 0
     } else {
      $12 = 0
     }
     HEAP8[$4 + 39 | 0] = $12;
     HEAP32[$4 + 16 >> 2] = HEAPU8[$4 + 36 | 0] | HEAPU8[$4 + 37 | 0] << 8 | (HEAPU8[$4 + 38 | 0] << 16 | HEAPU8[$4 + 39 | 0] << 24);
     $12 = $4 + 16 | 0;
    }
    if (!global$9 | ($18 | 0) == 2) {
     DrawRectangle($14, $10, $1, $0, $12);
     $5 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     $12 = ($14 - $1 | 0) + $16 | 0;
     $6 = Math_fround(0.0);
     $9 = Math_fround(0.0);
     $8 = HEAPF32[10852];
     block4 : {
      if ($8 < Math_fround(0.0)) {
       break block4
      }
      $9 = $8;
      if (!($8 > Math_fround(1.0))) {
       break block4
      }
      $9 = Math_fround(1.0);
     }
     HEAP8[$4 + 34 | 0] = $2;
     HEAP8[$4 + 33 | 0] = $13;
     HEAP8[$4 + 32 | 0] = $3;
     $8 = Math_fround($9 * $7);
     if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
      $5 = ~~$8 >>> 0
     } else {
      $5 = 0
     }
     HEAP8[$4 + 35 | 0] = $5;
     HEAP32[$4 + 12 >> 2] = HEAPU8[$4 + 32 | 0] | HEAPU8[$4 + 33 | 0] << 8 | (HEAPU8[$4 + 34 | 0] << 16 | HEAPU8[$4 + 35 | 0] << 24);
     $17 = $4 + 12 | 0;
    }
    if (!global$9 | ($18 | 0) == 3) {
     DrawRectangle($12, $10, $1, $0, $17);
     $5 = 3;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     $0 = ($15 - $1 | 0) + $11 | 0;
     $9 = HEAPF32[10852];
     block5 : {
      if ($9 < Math_fround(0.0)) {
       break block5
      }
      $6 = $9;
      if (!($6 > Math_fround(1.0))) {
       break block5
      }
      $6 = Math_fround(1.0);
     }
     HEAP8[$4 + 30 | 0] = $2;
     HEAP8[$4 + 29 | 0] = $13;
     HEAP8[$4 + 28 | 0] = $3;
     $8 = Math_fround($6 * $7);
     if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
      $2 = ~~$8 >>> 0
     } else {
      $2 = 0
     }
     HEAP8[$4 + 31 | 0] = $2;
     HEAP32[$4 + 8 >> 2] = HEAPU8[$4 + 28 | 0] | HEAPU8[$4 + 29 | 0] << 8 | (HEAPU8[$4 + 30 | 0] << 16 | HEAPU8[$4 + 31 | 0] << 24);
     $2 = $4 + 8 | 0;
    }
    if (!global$9 | ($18 | 0) == 4) {
     DrawRectangle($14, $0, $16, $1, $2);
     $5 = 4;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 48 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAPF32[$5 + 20 >> 2] = $9;
  HEAPF32[$5 + 24 >> 2] = $6;
  HEAP32[$5 + 28 >> 2] = $10;
  HEAP32[$5 + 32 >> 2] = $13;
  HEAPF32[$5 + 36 >> 2] = $7;
  HEAP32[$5 + 40 >> 2] = $14;
  HEAP32[$5 + 44 >> 2] = $12;
  HEAP32[$5 + 48 >> 2] = $16;
  HEAP32[$5 + 52 >> 2] = $15;
  HEAP32[$5 + 56 >> 2] = $11;
  HEAP32[$5 + 60 >> 2] = $17;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - -64;
 }
 
 function GetTextBounds_28int_2c_20Rectangle_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $4 = HEAP32[$5 + 12 >> 2];
   $6 = HEAPF32[$5 + 16 >> 2];
   $8 = HEAP32[$5 + 20 >> 2];
   $7 = HEAP32[$5 + 24 >> 2];
   $10 = HEAPF32[$5 + 28 >> 2];
   $11 = HEAP32[$5 + 32 >> 2];
   $5 = HEAP32[$5 + 36 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 4 >> 2] = $4;
   $4 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = $4;
   $10 = HEAPF32[$2 >> 2];
   $8 = 1;
   $7 = !HEAPU8[54525];
   $4 = 1;
  }
  block : {
   if ((global$9 | 0) == 2 | $7) {
    if (!global$9 | !$9) {
     GuiLoadStyleDefault();
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $4 = HEAPU8[54525]
    }
   }
   if (!global$9) {
    $11 = Math_imul($1, 24);
    $5 = $11 << 2;
    $1 = $5 + 54624 | 0;
    $7 = HEAP32[$1 >> 2];
    $10 = Math_fround($10 + Math_fround($7 | 0));
    HEAPF32[$0 >> 2] = $10;
    $6 = HEAPF32[$2 + 4 >> 2];
    $4 = $4 & 1;
   }
   block1 : {
    if (!($4 ? global$9 : 1)) {
     break block1
    }
    if (!global$9 | ($9 | 0) == 1) {
     GuiLoadStyleDefault();
     $3 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $7 = HEAP32[$1 >> 2];
     $4 = HEAPU8[54525];
     if ($4) {
      break block1
     }
    }
    if (!global$9 | ($9 | 0) == 2) {
     GuiLoadStyleDefault();
     $3 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $8 = global$9 ? $8 : HEAPU8[54525];
   }
   if (!global$9) {
    $4 = $5 + 54628 | 0;
    HEAPF32[$0 + 4 >> 2] = Math_fround($6 + Math_fround($7 | 0)) + Math_fround(HEAP32[$4 >> 2]);
    $8 = $8 & 1;
    $6 = HEAPF32[$2 + 8 >> 2];
    $7 = 1;
   }
   block2 : {
    if (!($8 ? global$9 : 1)) {
     $8 = HEAP32[$1 >> 2];
     break block2;
    }
    if (!global$9 | ($9 | 0) == 3) {
     GuiLoadStyleDefault();
     $3 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $8 = HEAP32[$1 >> 2];
     if (HEAPU8[54525]) {
      break block2
     }
    }
    if (!global$9 | ($9 | 0) == 4) {
     GuiLoadStyleDefault();
     $3 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $7 = global$9 ? $7 : HEAPU8[54525];
   }
   if (!global$9) {
    HEAPF32[$0 + 8 >> 2] = Math_fround($6 - Math_fround($8 << 1)) - Math_fround(HEAP32[$4 >> 2] << 1);
    $6 = HEAPF32[$2 + 12 >> 2];
    $2 = $7 & 1;
   }
   block4 : {
    block3 : {
     if (!($2 ? global$9 : 1)) {
      $2 = HEAP32[$1 >> 2];
      break block3;
     }
     if (!global$9 | ($9 | 0) == 5) {
      GuiLoadStyleDefault();
      $3 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = HEAP32[$1 >> 2];
      $1 = HEAPU8[54525];
      if ($1) {
       break block3
      }
     }
     if (!global$9 | ($9 | 0) == 6) {
      GuiLoadStyleDefault();
      $3 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $1 = HEAPU8[54525];
      $6 = Math_fround($6 - Math_fround($2 << 1));
      $2 = HEAP32[$4 >> 2] << 1;
      $6 = Math_fround($6 - Math_fround($2 | 0));
      HEAPF32[$0 + 12 >> 2] = $6;
      if ($1) {
       break block4
      }
     }
     if (!global$9 | ($9 | 0) == 7) {
      GuiLoadStyleDefault();
      $3 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block4
     }
    }
    if (!global$9) {
     $1 = HEAP32[$4 >> 2] << 1;
     HEAPF32[$0 + 12 >> 2] = Math_fround($6 - Math_fround($2 << 1)) - Math_fround($1 | 0);
    }
   }
   if (!global$9) {
    $2 = HEAPU8[54525];
    $1 = HEAP32[($11 << 2) + 54632 >> 2] == 2;
   }
   $3 = (global$9 | 0) == 2;
   if ($3 | $1) {
    $1 = global$9 ? $1 : !($2 & 1);
    if (!global$9 | ($9 | 0) == 8 ? $3 | $1 : 0) {
     GuiLoadStyleDefault();
     $3 = 8;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAPF32[$0 >> 2] = $10 - Math_fround(HEAP32[$4 >> 2]);
     return;
    }
   }
   if (!global$9 | ($9 | 0) == 9 ? (global$9 | 0) == 2 | (global$9 ? $1 : !($2 & 1)) : 0) {
    GuiLoadStyleDefault();
    $3 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAPF32[$0 >> 2] = $10 + Math_fround(HEAP32[$4 >> 2])
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAPF32[$3 + 16 >> 2] = $6;
  HEAP32[$3 + 20 >> 2] = $8;
  HEAP32[$3 + 24 >> 2] = $7;
  HEAPF32[$3 + 28 >> 2] = $10;
  HEAP32[$3 + 32 >> 2] = $11;
  HEAP32[$3 + 36 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
 }
 
 function GuiDrawText_28char_20const__2c_20Rectangle_2c_20int_2c_20Color_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = 0, $39 = Math_fround(0), $40 = 0, $41 = 0, $42 = Math_fround(0), $43 = 0, $44 = 0, $45 = Math_fround(0), $46 = 0, $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0);
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 192;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $7 = HEAPF32[$1 + 28 >> 2];
   $13 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $16 = HEAPF32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $14 = HEAP32[$1 + 52 >> 2];
   $11 = HEAPF32[$1 + 56 >> 2];
   $24 = HEAPF32[$1 + 60 >> 2];
   $9 = HEAP32[$1 + 64 >> 2];
   $20 = HEAPF32[$1 + 68 >> 2];
   $22 = HEAP32[$1 + 72 >> 2];
   $21 = HEAP32[$1 + 76 >> 2];
   $19 = HEAP32[$1 + 80 >> 2];
   $23 = HEAP32[$1 + 84 >> 2];
   $26 = HEAP32[$1 + 88 >> 2];
   $25 = HEAP32[$1 + 92 >> 2];
   $27 = HEAPF32[$1 + 96 >> 2];
   $28 = HEAPF32[$1 + 100 >> 2];
   $29 = HEAP32[$1 + 104 >> 2];
   $30 = HEAP32[$1 + 108 >> 2];
   $31 = HEAP32[$1 + 112 >> 2];
   $32 = HEAP32[$1 + 116 >> 2];
   $33 = HEAP32[$1 + 120 >> 2];
   $34 = HEAPF32[$1 + 124 >> 2];
   $35 = HEAPF32[$1 + 128 >> 2];
   $36 = HEAPF32[$1 + 132 >> 2];
   $37 = HEAPF32[$1 + 136 >> 2];
   $40 = HEAP32[$1 + 140 >> 2];
   $45 = HEAPF32[$1 + 144 >> 2];
   $38 = HEAP32[$1 + 148 >> 2];
   $39 = HEAPF32[$1 + 152 >> 2];
   $41 = HEAP32[$1 + 156 >> 2];
   $42 = HEAPF32[$1 + 160 >> 2];
   $43 = HEAP32[$1 + 164 >> 2];
   $46 = HEAP32[$1 + 168 >> 2];
   $47 = HEAPF32[$1 + 172 >> 2];
   $48 = HEAPF32[$1 + 176 >> 2];
   $44 = HEAP32[$1 + 180 >> 2];
   $49 = HEAPF32[$1 + 184 >> 2];
   $50 = HEAPF32[$1 + 188 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $17 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 512 | 0;
   __stack_pointer = $4;
   $12 = !$0;
  }
  block3 : {
   block : {
    if (!global$9) {
     if (!HEAPU8[$0 | 0] | $12) {
      break block
     }
     wasm2js_memory_fill(56128, 0, 512);
     $12 = strlen($0);
     HEAP32[14032] = $0;
     $26 = 1;
     $15 = ($12 | 0) <= 0;
     block1 : {
      if ($15) {
       break block1
      }
      while (1) {
       $15 = ($26 | 0) > 127;
       if ($15) {
        break block1
       }
       $13 = $0 + $8 | 0;
       if (HEAPU8[$13 | 0] == 10) {
        $22 = $22 + 1 | 0;
        $13 = $13 + 1 | 0;
        HEAP32[($22 << 2) + 56128 >> 2] = $13;
        $26 = $26 + 1 | 0;
       }
       $8 = $8 + 1 | 0;
       $15 = ($12 | 0) != ($8 | 0);
       if ($15) {
        continue
       }
       break;
      };
     }
     $0 = HEAPU8[54525];
    }
    block5 : {
     block4 : {
      block2 : {
       if (!($0 ? global$9 : 1)) {
        $40 = HEAP32[13665];
        break block2;
       }
       if (!global$9 | !$17) {
        GuiLoadStyleDefault();
        if ((global$9 | 0) == 1) {
         break block3
        }
       }
       if (!global$9) {
        $40 = HEAP32[13665];
        $0 = !HEAPU8[54525];
        if ($0) {
         break block4
        }
       }
      }
      if (!global$9) {
       $22 = HEAP32[13666];
       $8 = HEAP32[13660];
       $0 = $8;
       break block5;
      }
     }
     if (!global$9 | ($17 | 0) == 1) {
      GuiLoadStyleDefault();
      $18 = 1;
      if ((global$9 | 0) == 1) {
       break block3
      }
     }
     if (!global$9) {
      $22 = HEAP32[13666];
      $0 = HEAPU8[54525];
      if ($0) {
       $8 = HEAP32[13660];
       $0 = $8;
       break block5;
      }
     }
     if (!global$9 | ($17 | 0) == 2) {
      GuiLoadStyleDefault();
      $18 = 2;
      if ((global$9 | 0) == 1) {
       break block3
      }
     }
     if (!global$9) {
      $0 = HEAP32[13660];
      $8 = HEAPU8[54525];
      if ($8) {
       $8 = $0;
       break block5;
      }
     }
     if (!global$9 | ($17 | 0) == 3) {
      GuiLoadStyleDefault();
      $18 = 3;
      if ((global$9 | 0) == 1) {
       break block3
      }
     }
     $8 = global$9 ? $8 : HEAP32[13660];
    }
    if (!global$9) {
     $8 = (Math_imul($26 - 1 | 0, $8) | 0) / 2 | 0;
     $12 = ($26 | 0) <= 0;
     if ($12) {
      break block
     }
     $0 = Math_imul($0, $26) + $8 | 0;
     $42 = Math_fround($0 | 0);
     $45 = Math_fround($42 * Math_fround(.5));
     $41 = $4 + 264 | 0;
    }
    while (1) {
     if (!global$9) {
      $0 = -1;
      $25 = ($38 << 2) + 56128 | 0;
      $8 = HEAP32[$25 >> 2];
      $12 = HEAPU8[$8 | 0] != 35;
      block6 : {
       if ($12) {
        break block6
       }
       HEAP32[$4 + 508 >> 2] = 0;
       $13 = HEAPU8[$8 + 1 | 0];
       $12 = 1;
       block7 : {
        if (($13 - 48 & 255) >>> 0 > 9) {
         break block7
        }
        HEAP8[$4 + 508 | 0] = $13;
        $13 = HEAPU8[$8 + 2 | 0];
        $12 = 2;
        if (($13 - 48 & 255) >>> 0 > 9) {
         break block7
        }
        HEAP8[$4 + 509 | 0] = $13;
        $13 = HEAPU8[$8 + 3 | 0];
        $12 = 3;
        if (($13 - 48 & 255) >>> 0 > 9) {
         break block7
        }
        HEAP8[$4 + 510 | 0] = $13;
        $13 = HEAPU8[$8 + 4 | 0];
        $12 = 4;
       }
       $15 = ($13 & 255) != 35;
       if ($15) {
        break block6
       }
       $15 = $8;
       $10 = ($8 + $12 | 0) + 1 | 0;
       $13 = 0;
       $12 = 0;
       $6 = 1;
       block9 : {
        block8 : {
         $8 = $4 + 508 | 0;
         $0 = HEAPU8[$8 | 0];
         switch ($0 - 43 | 0) {
         case 0:
         case 2:
          break block8;
         default:
          break block9;
         };
        }
        $6 = ($0 | 0) == 45 ? -1 : 1;
        $0 = HEAPU8[$8 + 1 | 0];
        $8 = $8 + 1 | 0;
       }
       $14 = ($0 - 48 & 255) >>> 0 < 10;
       if ($14) {
        while (1) {
         $13 = Math_imul($13, 10) + ($0 - 48 & 255) | 0;
         $12 = $12 + 1 | 0;
         $0 = HEAPU8[$12 + $8 | 0];
         $14 = ($0 - 48 & 255) >>> 0 < 10;
         if ($14) {
          continue
         }
         break;
        }
       }
       $0 = Math_imul($6, $13);
       $8 = ($0 | 0) < 0 ? $15 : $10;
      }
      HEAP32[$25 >> 2] = $8;
      $24 = HEAPF32[$1 + 4 >> 2];
      $16 = HEAPF32[$1 >> 2];
     }
     if (!global$9 | ($17 | 0) == 4) {
      $5 = GetTextWidth_28char_20const__29($8);
      $18 = 4;
      if ((global$9 | 0) == 1) {
       break block3
      }
      $8 = $5;
     }
     if (!global$9) {
      $13 = ($0 | 0) < 0;
      block10 : {
       if ($13) {
        break block10
       }
       $8 = (HEAP32[10854] << 4) + $8 | 0;
       $12 = HEAP32[$25 >> 2];
       $15 = !$12;
       if ($15) {
        break block10
       }
       $15 = $8 + 4 | 0;
       $8 = HEAPU8[$12 | 0] ? $15 : $8;
      }
      block14 : {
       block13 : {
        switch ($2 | 0) {
        case 0:
         $16 = HEAPF32[$1 >> 2];
         break block14;
        case 1:
         $11 = Math_fround(($8 | 0) / 2 | 0);
         $16 = Math_fround(Math_fround(HEAPF32[$1 >> 2] + Math_fround(HEAPF32[$1 + 8 >> 2] * Math_fround(.5))) - $11);
         break block14;
        case 2:
         break block13;
        default:
         break block14;
        };
       }
       $11 = Math_fround($8 | 0);
       $16 = Math_fround(Math_fround(HEAPF32[$1 >> 2] + HEAPF32[$1 + 8 >> 2]) - $11);
      }
      $7 = Math_fround($8 | 0);
      $39 = HEAPF32[$1 + 8 >> 2];
      $43 = $7 > $39;
      block15 : {
       if (!$43) {
        break block15
       }
       $8 = HEAP32[$25 >> 2];
       if (!$8) {
        break block15
       }
       $7 = HEAPF32[$1 >> 2];
       $16 = HEAPU8[$8 | 0] ? $7 : $16;
      }
      block19 : {
       block18 : {
        switch ($40 | 0) {
        case 0:
         $7 = HEAPF32[$1 + 4 >> 2];
         $24 = Math_fround($27 + $7);
         break block19;
        case 1:
         $11 = HEAPF32[$1 + 12 >> 2];
         $7 = Math_fround(Math_fround(Math_fround($27 + HEAPF32[$1 + 4 >> 2]) + Math_fround($11 * Math_fround(.5))) - $45);
         $11 = Math_fround(((Math_fround(Math_abs($11)) < Math_fround(2147483648.0) ? ~~$11 : -2147483648) | 0) % 2 | 0);
         $24 = Math_fround($7 + $11);
         break block19;
        case 2:
         break block18;
        default:
         break block19;
        };
       }
       $11 = HEAPF32[$1 + 12 >> 2];
       $7 = Math_fround(Math_fround(Math_fround($27 + HEAPF32[$1 + 4 >> 2]) + $11) - $42);
       $11 = Math_fround(((Math_fround(Math_abs($11)) < Math_fround(2147483648.0) ? ~~$11 : -2147483648) | 0) % 2 | 0);
       $24 = Math_fround($7 + $11);
      }
      $12 = Math_fround(Math_abs($16)) < Math_fround(2147483648.0) ? ~~$16 : -2147483648;
      $28 = Math_fround($12 | 0);
      $8 = Math_fround(Math_abs($24)) < Math_fround(2147483648.0) ? ~~$24 : -2147483648;
     }
     block20 : {
      if (!global$9) {
       if ($13) {
        $36 = Math_fround(0.0);
        break block20;
       }
       $7 = HEAPF32[$1 + 4 >> 2];
       $11 = HEAPF32[$1 + 12 >> 2];
       $15 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
       HEAP32[$4 + 504 >> 2] = $15;
       HEAP32[$4 + 272 >> 2] = $15;
       $23 = 0;
       $6 = __stack_pointer - 16 | 0;
       __stack_pointer = $6;
       $29 = $0 << 5;
       $0 = $4 + 272 | 0;
       $10 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
       $30 = $10 >>> 16 | 0;
       $31 = $10 >>> 8 | 0;
       $21 = HEAP32[10853];
       $16 = Math_fround($12 | 0);
       $13 = HEAP32[10854];
       $11 = Math_fround(Math_fround(Math_fround($7 + Math_fround($11 * Math_fround(.5))) - Math_fround(($13 << 3 & 2147483640) >>> 0)) + Math_fround(((Math_fround(Math_abs($11)) < Math_fround(2147483648.0) ? ~~$11 : -2147483648) | 0) % 2 | 0));
       if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
        $0 = ~~$11
       } else {
        $0 = -2147483648
       }
       $24 = Math_fround($0 | 0);
       $7 = Math_fround($13 | 0);
       if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
        $15 = ~~$7
       } else {
        $15 = -2147483648
       }
       $32 = $10 >>> 0 < 16777216;
       $14 = 0;
       $0 = $10 >>> 24 | 0;
       $11 = Math_fround($0 >>> 0);
      }
      while (1) {
       if (!global$9) {
        $12 = $23 << 2;
        $0 = 0;
       }
       while (1) {
        $9 = global$9 ? $9 : !(HEAP32[($12 + $21 | 0) + $29 >> 2] >>> $0 & 1);
        block21 : {
         if (!global$9) {
          if ($9 | $32) {
           break block21
          }
          $7 = Math_fround($24 + Math_fround(Math_imul($13, $14) | 0));
          if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
           $21 = ~~$7
          } else {
           $21 = -2147483648
          }
          $7 = Math_fround($16 + Math_fround(Math_imul($0 & 15, $13) | 0));
          if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
           $9 = ~~$7
          } else {
           $9 = -2147483648
          }
          $7 = HEAPF32[10852];
          $20 = Math_fround(0.0);
          block22 : {
           if ($7 < Math_fround(0.0)) {
            break block22
           }
           $20 = $7;
           if (!($7 > Math_fround(1.0))) {
            break block22
           }
           $20 = Math_fround(1.0);
          }
          HEAP8[$6 + 14 | 0] = $30;
          HEAP8[$6 + 13 | 0] = $31;
          HEAP8[$6 + 12 | 0] = $10;
          $7 = Math_fround($20 * $11);
          if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
           $5 = ~~$7 >>> 0
          } else {
           $5 = 0
          }
          HEAP8[$6 + 15 | 0] = $5;
          HEAP32[$6 + 8 >> 2] = HEAPU8[$6 + 12 | 0] | HEAPU8[$6 + 13 | 0] << 8 | (HEAPU8[$6 + 14 | 0] << 16 | HEAPU8[$6 + 15 | 0] << 24);
          $33 = $6 + 8 | 0;
         }
         if (!global$9 | ($17 | 0) == 5) {
          DrawRectangle($9, $21, $15, $15, $33);
          $18 = 5;
          if ((global$9 | 0) == 1) {
           break block3
          }
         }
         $21 = global$9 ? $21 : HEAP32[10853];
        }
        if (!global$9) {
         $14 = (($0 & 15) == 15) + $14 | 0;
         $0 = $0 + 1 | 0;
         $9 = ($0 | 0) != 32;
         if ($9) {
          continue
         }
        }
        break;
       };
       if (!global$9) {
        $23 = $23 + 1 | 0;
        $0 = ($23 | 0) != 8;
        if ($0) {
         continue
        }
       }
       break;
      };
      if (!global$9) {
       __stack_pointer = $6 + 16 | 0;
       $0 = HEAP32[10854] << 4 | 4;
       $36 = Math_fround($0 >>> 0);
       $28 = Math_fround($28 + $36);
      }
     }
     if (!global$9) {
      $34 = Math_fround($8 | 0);
      $13 = 0;
      $0 = HEAP32[$25 >> 2];
     }
     block25 : {
      while (1) {
       block24 : {
        if (!global$9) {
         $8 = HEAPU8[$0 + $13 | 0];
         $12 = $8 >>> 0 > 13;
        }
        block23 : {
         if (!global$9) {
          if ($12) {
           break block23
          }
          $8 = !(1 << $8 & 9217);
          if ($8) {
           break block23
          }
          $0 = !HEAPU8[54525];
         }
         if (!global$9 | ($17 | 0) == 6 ? (global$9 | 0) == 2 | $0 : 0) {
          GuiLoadStyleDefault();
          $18 = 6;
          if ((global$9 | 0) == 1) {
           break block3
          }
         }
         if (!global$9) {
          $8 = HEAP32[13660];
          $0 = HEAP32[13632];
         }
         if (!global$9 | ($17 | 0) == 7) {
          $5 = GetTextWidth_28char_20const__29(11919);
          $18 = 7;
          if ((global$9 | 0) == 1) {
           break block3
          }
          $29 = $5;
         }
         if (!global$9) {
          HEAP32[$4 + 508 >> 2] = 0;
          if ($13) {
           break block24
          }
          $16 = Math_fround(0.0);
          break block25;
         }
        }
        if (!global$9) {
         $13 = $13 + 1 | 0;
         continue;
        }
       }
       break;
      };
      if (!global$9) {
       $24 = Math_fround(Math_fround($8 | 0) / Math_fround($0 | 0));
       $46 = ($29 | 0) / 3 | 0;
       $37 = Math_fround($39 - $36);
       $21 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
       $30 = $21 >>> 16 | 0;
       $31 = $21 >>> 8 | 0;
       $7 = HEAPF32[$1 + 4 >> 2];
       $11 = HEAPF32[$1 + 12 >> 2];
       $47 = Math_fround($7 + $11);
       $35 = Math_fround($21 >>> 24 >>> 0);
       $48 = Math_fround($29 | 0);
       $16 = Math_fround(0.0);
       $23 = 0;
       $15 = 0;
       $32 = 0;
       $33 = 0;
       $0 = 0;
      }
      while (1) {
       if (!global$9) {
        $8 = GetCodepointNext(HEAP32[$25 >> 2] + $0 | 0, $4 + 508 | 0);
        $12 = HEAP32[13641];
        HEAP32[$41 >> 2] = HEAP32[13640];
        HEAP32[$41 + 4 >> 2] = $12;
        $12 = HEAP32[13639];
        HEAP32[$4 + 256 >> 2] = HEAP32[13638];
        HEAP32[$4 + 260 >> 2] = $12;
        $12 = HEAP32[13637];
        HEAP32[$4 + 248 >> 2] = HEAP32[13636];
        HEAP32[$4 + 252 >> 2] = $12;
        $12 = HEAP32[13635];
        HEAP32[$4 + 240 >> 2] = HEAP32[13634];
        HEAP32[$4 + 244 >> 2] = $12;
        $12 = HEAP32[13633];
        HEAP32[$4 + 232 >> 2] = HEAP32[13632];
        HEAP32[$4 + 236 >> 2] = $12;
        $12 = GetGlyphIndex($4 + 232 | 0, $8);
        if (($8 | 0) == 63) {
         HEAP32[$4 + 508 >> 2] = 1
        }
        $44 = Math_imul($12, 36);
        $6 = HEAP32[($44 + HEAP32[13641] | 0) + 12 >> 2];
        $10 = !$6;
        block26 : {
         if ($10) {
          $10 = $12 << 4;
          $7 = HEAPF32[($10 + HEAP32[13640] | 0) + 8 >> 2];
          break block26;
         }
         $7 = Math_fround($6 | 0);
        }
        $7 = Math_fround($24 * $7);
        $6 = $22 - 1 | 0;
       }
       block29 : {
        block30 : {
         block28 : {
          if (!global$9) {
           block27 : {
            switch ($6 | 0) {
            case 0:
             break block27;
            case 1:
             break block28;
            default:
             break block29;
            };
           }
           $22 = 1;
           $11 = Math_fround($16 + $7);
           $6 = !($37 < $11);
           if ($6) {
            break block29
           }
           $6 = !HEAPU8[54525];
          }
          if (!global$9 | ($17 | 0) == 8 ? (global$9 | 0) == 2 | $6 : 0) {
           GuiLoadStyleDefault();
           $18 = 8;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          if (!global$9) {
           $22 = $32 ? 2 : 1;
           $32 = 0;
           $6 = HEAP32[13664];
           $15 = $15 + $6 | 0;
           break block30;
          }
         }
         if (!global$9) {
          $10 = $4 + 500 | 0;
          $6 = HEAP32[$25 >> 2] + $0 | 0;
         }
         if (!global$9 | ($17 | 0) == 9) {
          $51 = GetNextSpaceWidth_28char_20const__2c_20int__29($6, $10);
          $18 = 9;
          if ((global$9 | 0) == 1) {
           break block3
          }
          $20 = $51;
         }
         if (!global$9) {
          $22 = 1;
          $10 = $4 + 496 | 0;
          $33 = ($8 | 0) == 32 ? $0 : $33;
          $6 = ($33 + HEAP32[$25 >> 2] | 0) + 1 | 0;
         }
         if (!global$9 | ($17 | 0) == 10) {
          $51 = GetNextSpaceWidth_28char_20const__2c_20int__29($6, $10);
          $18 = 10;
          if ((global$9 | 0) == 1) {
           break block3
          }
          $11 = $51;
         }
         if (!global$9) {
          $6 = $11 > $37;
          if ($6) {
           $32 = 1;
           break block29;
          }
          $22 = 2;
          $11 = Math_fround($16 + $20);
          $6 = !($37 < $11);
          if ($6) {
           break block29
          }
          $6 = !HEAPU8[54525];
         }
         if (!global$9 | ($17 | 0) == 11 ? (global$9 | 0) == 2 | $6 : 0) {
          GuiLoadStyleDefault();
          $18 = 11;
          if ((global$9 | 0) == 1) {
           break block3
          }
         }
         if (!global$9) {
          $6 = HEAP32[13664];
          $15 = $15 + $6 | 0;
         }
        }
        $16 = global$9 ? $16 : Math_fround(0.0);
       }
       $6 = global$9 ? $6 : $8 - 9 | 0;
       block32 : {
        block31 : {
         if (!global$9) {
          block33 : {
           switch ($6 | 0) {
           case 0:
           case 23:
            break block31;
           case 1:
            break block32;
           default:
            break block33;
           };
          }
          $6 = !$22;
         }
         $5 = (global$9 | 0) == 2;
         if ($5 | $6) {
          if ($5 | $43) {
           if (!global$9) {
            $7 = Math_fround(Math_fround(Math_fround($39 - $7) - $36) - $48);
            $6 = $16 <= $7;
           }
           if ((global$9 | 0) == 2 | $6) {
            if (!global$9) {
             $9 = HEAP32[13641];
             $6 = $4 + 488 | 0;
             HEAP32[$6 >> 2] = HEAP32[13640];
             HEAP32[$6 + 4 >> 2] = $9;
             $5 = HEAP32[13639];
             $14 = $4 + 480 | 0;
             $9 = $14;
             HEAP32[$9 >> 2] = HEAP32[13638];
             HEAP32[$9 + 4 >> 2] = $5;
             $5 = HEAP32[13637];
             $10 = $4 + 472 | 0;
             $9 = $10;
             HEAP32[$9 >> 2] = HEAP32[13636];
             HEAP32[$9 + 4 >> 2] = $5;
             $5 = HEAP32[13635];
             $9 = $4 + 464 | 0;
             HEAP32[$9 >> 2] = HEAP32[13634];
             HEAP32[$9 + 4 >> 2] = $5;
             $5 = HEAP32[13633];
             HEAP32[$4 + 456 >> 2] = HEAP32[13632];
             HEAP32[$4 + 460 >> 2] = $5;
             HEAPF32[$4 + 448 >> 2] = $28 + $16;
             $7 = Math_fround($34 + Math_fround($15 | 0));
             HEAPF32[$4 + 452 >> 2] = $7;
             $19 = !HEAPU8[54525];
            }
            if (!global$9 | ($17 | 0) == 12 ? (global$9 | 0) == 2 | $19 : 0) {
             GuiLoadStyleDefault();
             $18 = 12;
             if ((global$9 | 0) == 1) {
              break block3
             }
            }
            if (!global$9) {
             $7 = Math_fround(0.0);
             $20 = Math_fround(HEAP32[13660]);
             $11 = HEAPF32[10852];
             $19 = $11 < Math_fround(0.0);
             block34 : {
              if ($19) {
               break block34
              }
              $7 = $11;
              $19 = !($7 > Math_fround(1.0));
              if ($19) {
               break block34
              }
              $7 = Math_fround(1.0);
             }
             $5 = HEAP32[$9 + 4 >> 2];
             HEAP32[$4 + 88 >> 2] = HEAP32[$9 >> 2];
             HEAP32[$4 + 92 >> 2] = $5;
             $5 = HEAP32[$10 + 4 >> 2];
             HEAP32[$4 + 96 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$4 + 100 >> 2] = $5;
             $5 = HEAP32[$14 + 4 >> 2];
             HEAP32[$4 + 104 >> 2] = HEAP32[$14 >> 2];
             HEAP32[$4 + 108 >> 2] = $5;
             $5 = HEAP32[$6 + 4 >> 2];
             HEAP32[$4 + 112 >> 2] = HEAP32[$6 >> 2];
             HEAP32[$4 + 116 >> 2] = $5;
             HEAP8[$4 + 446 | 0] = $30;
             HEAP8[$4 + 445 | 0] = $31;
             HEAP8[$4 + 444 | 0] = $21;
             $7 = Math_fround($7 * $35);
             if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
              $10 = ~~$7 >>> 0
             } else {
              $10 = 0
             }
             HEAP8[$4 + 447 | 0] = $10;
             $6 = HEAP32[$4 + 460 >> 2];
             HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 456 >> 2];
             HEAP32[$4 + 84 >> 2] = $6;
             $6 = HEAP32[$4 + 452 >> 2];
             HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 448 >> 2];
             HEAP32[$4 + 76 >> 2] = $6;
             HEAP32[$4 + 68 >> 2] = HEAPU8[$4 + 444 | 0] | HEAPU8[$4 + 445 | 0] << 8 | (HEAPU8[$4 + 446 | 0] << 16 | HEAPU8[$4 + 447 | 0] << 24);
             $10 = $4 + 72 | 0;
             $14 = $4 + 68 | 0;
             $6 = $4 + 80 | 0;
            }
            if (!global$9 | ($17 | 0) == 13) {
             DrawTextCodepoint($6, $8, $10, $20, $14);
             $18 = 13;
             if ((global$9 | 0) == 1) {
              break block3
             }
            }
            if (!global$9) {
             break block31
            }
           }
           if (!global$9) {
            $8 = (($29 | 0) <= 0 | $23) & 1;
            if ($8) {
             $23 = 1;
             break block31;
            }
            $49 = Math_fround($28 + $16);
            $7 = Math_fround($15 | 0);
            $50 = Math_fround($34 + $7);
            $8 = 0;
           }
           while (1) {
            if (!global$9) {
             $9 = HEAP32[13641];
             $6 = $4 + 432 | 0;
             HEAP32[$6 >> 2] = HEAP32[13640];
             HEAP32[$6 + 4 >> 2] = $9;
             $5 = HEAP32[13639];
             $23 = $4 + 424 | 0;
             $9 = $23;
             HEAP32[$9 >> 2] = HEAP32[13638];
             HEAP32[$9 + 4 >> 2] = $5;
             $5 = HEAP32[13637];
             $14 = $4 + 416 | 0;
             $9 = $14;
             HEAP32[$9 >> 2] = HEAP32[13636];
             HEAP32[$9 + 4 >> 2] = $5;
             $5 = HEAP32[13635];
             $10 = $4 + 408 | 0;
             $9 = $10;
             HEAP32[$9 >> 2] = HEAP32[13634];
             HEAP32[$9 + 4 >> 2] = $5;
             HEAPF32[$4 + 396 >> 2] = $50;
             $9 = HEAP32[13633];
             HEAP32[$4 + 400 >> 2] = HEAP32[13632];
             HEAP32[$4 + 404 >> 2] = $9;
             $7 = Math_fround($49 + Math_fround($8 >>> 0));
             HEAPF32[$4 + 392 >> 2] = $7;
             $9 = !HEAPU8[54525];
            }
            if (!global$9 | ($17 | 0) == 14 ? (global$9 | 0) == 2 | $9 : 0) {
             GuiLoadStyleDefault();
             $18 = 14;
             if ((global$9 | 0) == 1) {
              break block3
             }
            }
            if (!global$9) {
             $7 = Math_fround(0.0);
             $20 = Math_fround(HEAP32[13660]);
             $11 = HEAPF32[10852];
             $9 = $11 < Math_fround(0.0);
             block35 : {
              if ($9) {
               break block35
              }
              $7 = $11;
              $9 = !($7 > Math_fround(1.0));
              if ($9) {
               break block35
              }
              $7 = Math_fround(1.0);
             }
             $5 = HEAP32[$10 + 4 >> 2];
             HEAP32[$4 + 32 >> 2] = HEAP32[$10 >> 2];
             HEAP32[$4 + 36 >> 2] = $5;
             $5 = HEAP32[$14 + 4 >> 2];
             HEAP32[$4 + 40 >> 2] = HEAP32[$14 >> 2];
             HEAP32[$4 + 44 >> 2] = $5;
             $5 = HEAP32[$23 + 4 >> 2];
             HEAP32[$4 + 48 >> 2] = HEAP32[$23 >> 2];
             HEAP32[$4 + 52 >> 2] = $5;
             $5 = HEAP32[$6 + 4 >> 2];
             HEAP32[$4 + 56 >> 2] = HEAP32[$6 >> 2];
             HEAP32[$4 + 60 >> 2] = $5;
             HEAP8[$4 + 390 | 0] = $30;
             HEAP8[$4 + 389 | 0] = $31;
             HEAP8[$4 + 388 | 0] = $21;
             $7 = Math_fround($7 * $35);
             if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
              $10 = ~~$7 >>> 0
             } else {
              $10 = 0
             }
             HEAP8[$4 + 391 | 0] = $10;
             $6 = HEAP32[$4 + 404 >> 2];
             HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 400 >> 2];
             HEAP32[$4 + 28 >> 2] = $6;
             $6 = HEAP32[$4 + 396 >> 2];
             HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 392 >> 2];
             HEAP32[$4 + 20 >> 2] = $6;
             HEAP32[$4 + 12 >> 2] = HEAPU8[$4 + 388 | 0] | HEAPU8[$4 + 389 | 0] << 8 | (HEAPU8[$4 + 390 | 0] << 16 | HEAPU8[$4 + 391 | 0] << 24);
             $10 = $4 + 16 | 0;
             $14 = $4 + 12 | 0;
             $6 = $4 + 24 | 0;
            }
            if (!global$9 | ($17 | 0) == 15) {
             DrawTextCodepoint($6, 46, $10, $20, $14);
             $18 = 15;
             if ((global$9 | 0) == 1) {
              break block3
             }
            }
            if (!global$9) {
             $8 = $8 + $46 | 0;
             $6 = ($29 | 0) > ($8 | 0);
             if ($6) {
              continue
             }
            }
            break;
           };
           if (!global$9) {
            $23 = 1;
            break block31;
           }
          }
          if (!global$9) {
           $9 = HEAP32[13641];
           $6 = $4 + 376 | 0;
           HEAP32[$6 >> 2] = HEAP32[13640];
           HEAP32[$6 + 4 >> 2] = $9;
           $5 = HEAP32[13639];
           $14 = $4 + 368 | 0;
           $9 = $14;
           HEAP32[$9 >> 2] = HEAP32[13638];
           HEAP32[$9 + 4 >> 2] = $5;
           $5 = HEAP32[13637];
           $10 = $4 + 360 | 0;
           $9 = $10;
           HEAP32[$9 >> 2] = HEAP32[13636];
           HEAP32[$9 + 4 >> 2] = $5;
           $5 = HEAP32[13635];
           $9 = $4 + 352 | 0;
           HEAP32[$9 >> 2] = HEAP32[13634];
           HEAP32[$9 + 4 >> 2] = $5;
           $5 = HEAP32[13633];
           HEAP32[$4 + 344 >> 2] = HEAP32[13632];
           HEAP32[$4 + 348 >> 2] = $5;
           HEAPF32[$4 + 336 >> 2] = $28 + $16;
           $7 = Math_fround($34 + Math_fround($15 | 0));
           HEAPF32[$4 + 340 >> 2] = $7;
           $19 = !HEAPU8[54525];
          }
          if (!global$9 | ($17 | 0) == 16 ? (global$9 | 0) == 2 | $19 : 0) {
           GuiLoadStyleDefault();
           $18 = 16;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          if (!global$9) {
           $7 = Math_fround(0.0);
           $20 = Math_fround(HEAP32[13660]);
           $11 = HEAPF32[10852];
           $19 = $11 < Math_fround(0.0);
           block36 : {
            if ($19) {
             break block36
            }
            $7 = $11;
            $19 = !($7 > Math_fround(1.0));
            if ($19) {
             break block36
            }
            $7 = Math_fround(1.0);
           }
           $5 = HEAP32[$9 + 4 >> 2];
           HEAP32[$4 + 144 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$4 + 148 >> 2] = $5;
           $5 = HEAP32[$10 + 4 >> 2];
           HEAP32[$4 + 152 >> 2] = HEAP32[$10 >> 2];
           HEAP32[$4 + 156 >> 2] = $5;
           $5 = HEAP32[$14 + 4 >> 2];
           HEAP32[$4 + 160 >> 2] = HEAP32[$14 >> 2];
           HEAP32[$4 + 164 >> 2] = $5;
           $5 = HEAP32[$6 + 4 >> 2];
           HEAP32[$4 + 168 >> 2] = HEAP32[$6 >> 2];
           HEAP32[$4 + 172 >> 2] = $5;
           HEAP8[$4 + 334 | 0] = $30;
           HEAP8[$4 + 333 | 0] = $31;
           HEAP8[$4 + 332 | 0] = $21;
           $7 = Math_fround($7 * $35);
           if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
            $10 = ~~$7 >>> 0
           } else {
            $10 = 0
           }
           HEAP8[$4 + 335 | 0] = $10;
           $6 = HEAP32[$4 + 348 >> 2];
           HEAP32[$4 + 136 >> 2] = HEAP32[$4 + 344 >> 2];
           HEAP32[$4 + 140 >> 2] = $6;
           $6 = HEAP32[$4 + 340 >> 2];
           HEAP32[$4 + 128 >> 2] = HEAP32[$4 + 336 >> 2];
           HEAP32[$4 + 132 >> 2] = $6;
           HEAP32[$4 + 124 >> 2] = HEAPU8[$4 + 332 | 0] | HEAPU8[$4 + 333 | 0] << 8 | (HEAPU8[$4 + 334 | 0] << 16 | HEAPU8[$4 + 335 | 0] << 24);
           $10 = $4 + 128 | 0;
           $14 = $4 + 124 | 0;
           $6 = $4 + 136 | 0;
          }
          if (!global$9 | ($17 | 0) == 17) {
           DrawTextCodepoint($6, $8, $10, $20, $14);
           $18 = 17;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          if (!global$9) {
           break block31
          }
         }
         if (!global$9) {
          $6 = $22 >>> 0 > 2;
          if ($6) {
           break block31
          }
          $6 = !HEAPU8[54525];
          $7 = Math_fround($34 + Math_fround($15 | 0));
         }
         if (!global$9 | ($17 | 0) == 18 ? (global$9 | 0) == 2 | $6 : 0) {
          GuiLoadStyleDefault();
          $18 = 18;
          if ((global$9 | 0) == 1) {
           break block3
          }
         }
         if (!global$9) {
          $20 = Math_fround(HEAP32[13660]);
          $11 = Math_fround($47 - $20);
          $6 = !($11 >= $7);
          if ($6) {
           break block31
          }
          $9 = HEAP32[13641];
          $6 = $4 + 320 | 0;
          HEAP32[$6 >> 2] = HEAP32[13640];
          HEAP32[$6 + 4 >> 2] = $9;
          $5 = HEAP32[13639];
          $14 = $4 + 312 | 0;
          $9 = $14;
          HEAP32[$9 >> 2] = HEAP32[13638];
          HEAP32[$9 + 4 >> 2] = $5;
          $5 = HEAP32[13637];
          $10 = $4 + 304 | 0;
          $9 = $10;
          HEAP32[$9 >> 2] = HEAP32[13636];
          HEAP32[$9 + 4 >> 2] = $5;
          $5 = HEAP32[13635];
          $9 = $4 + 296 | 0;
          HEAP32[$9 >> 2] = HEAP32[13634];
          HEAP32[$9 + 4 >> 2] = $5;
          HEAPF32[$4 + 284 >> 2] = $7;
          $5 = HEAP32[13633];
          HEAP32[$4 + 288 >> 2] = HEAP32[13632];
          HEAP32[$4 + 292 >> 2] = $5;
          $7 = Math_fround($28 + $16);
          HEAPF32[$4 + 280 >> 2] = $7;
          $19 = !HEAPU8[54525];
         }
         if ((global$9 | 0) == 2 | $19) {
          if (!global$9 | ($17 | 0) == 19) {
           GuiLoadStyleDefault();
           $18 = 19;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          if (!global$9) {
           $19 = HEAP32[13660];
           $20 = Math_fround($19 | 0);
          }
         }
         if (!global$9) {
          $7 = Math_fround(0.0);
          $11 = HEAPF32[10852];
          $19 = $11 < Math_fround(0.0);
          block37 : {
           if ($19) {
            break block37
           }
           $7 = $11;
           $19 = !($7 > Math_fround(1.0));
           if ($19) {
            break block37
           }
           $7 = Math_fround(1.0);
          }
          $5 = HEAP32[$9 + 4 >> 2];
          HEAP32[$4 + 200 >> 2] = HEAP32[$9 >> 2];
          HEAP32[$4 + 204 >> 2] = $5;
          $5 = HEAP32[$10 + 4 >> 2];
          HEAP32[$4 + 208 >> 2] = HEAP32[$10 >> 2];
          HEAP32[$4 + 212 >> 2] = $5;
          $5 = HEAP32[$14 + 4 >> 2];
          HEAP32[$4 + 216 >> 2] = HEAP32[$14 >> 2];
          HEAP32[$4 + 220 >> 2] = $5;
          $5 = HEAP32[$6 + 4 >> 2];
          HEAP32[$4 + 224 >> 2] = HEAP32[$6 >> 2];
          HEAP32[$4 + 228 >> 2] = $5;
          HEAP8[$4 + 278 | 0] = $30;
          HEAP8[$4 + 277 | 0] = $31;
          HEAP8[$4 + 276 | 0] = $21;
          $7 = Math_fround($7 * $35);
          if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
           $10 = ~~$7 >>> 0
          } else {
           $10 = 0
          }
          HEAP8[$4 + 279 | 0] = $10;
          $6 = HEAP32[$4 + 292 >> 2];
          HEAP32[$4 + 192 >> 2] = HEAP32[$4 + 288 >> 2];
          HEAP32[$4 + 196 >> 2] = $6;
          $6 = HEAP32[$4 + 284 >> 2];
          HEAP32[$4 + 184 >> 2] = HEAP32[$4 + 280 >> 2];
          HEAP32[$4 + 188 >> 2] = $6;
          HEAP32[$4 + 180 >> 2] = HEAPU8[$4 + 276 | 0] | HEAPU8[$4 + 277 | 0] << 8 | (HEAPU8[$4 + 278 | 0] << 16 | HEAPU8[$4 + 279 | 0] << 24);
          $10 = $4 + 184 | 0;
          $14 = $4 + 180 | 0;
          $6 = $4 + 192 | 0;
         }
         if (!global$9 | ($17 | 0) == 20) {
          DrawTextCodepoint($6, $8, $10, $20, $14);
          $18 = 20;
          if ((global$9 | 0) == 1) {
           break block3
          }
         }
        }
        if (!global$9) {
         $8 = HEAP32[(HEAP32[13641] + $44 | 0) + 12 >> 2];
         $6 = !$8;
        }
        block39 : {
         if (!global$9) {
          block38 : {
           if ($6) {
            $12 = $12 << 4;
            $7 = HEAPF32[($12 + HEAP32[13640] | 0) + 8 >> 2];
            $8 = !HEAPU8[54525];
            if ($8) {
             break block38
            }
            break block39;
           }
           $7 = Math_fround($8 | 0);
           $8 = HEAPU8[54525];
           if ($8) {
            break block39
           }
          }
         }
         if (!global$9 | ($17 | 0) == 21) {
          GuiLoadStyleDefault();
          $18 = 21;
          if ((global$9 | 0) == 1) {
           break block3
          }
         }
        }
        if (!global$9) {
         $11 = Math_fround(HEAP32[13661]);
         $7 = Math_fround(Math_fround($7 * $24) + $11);
         $16 = Math_fround($16 + $7);
         $0 = HEAP32[$4 + 508 >> 2] + $0 | 0;
         $8 = ($13 | 0) > ($0 | 0);
         if ($8) {
          continue
         }
        }
       }
       break;
      };
      $16 = global$9 ? $16 : Math_fround($15 | 0);
     }
     $0 = global$9 ? $0 : !$22;
     block40 : {
      if ($0 | (global$9 | 0) == 2) {
       $0 = global$9 ? $0 : !HEAPU8[54525];
       if (!global$9 | ($17 | 0) == 22 ? $0 | (global$9 | 0) == 2 : 0) {
        GuiLoadStyleDefault();
        $18 = 22;
        if ((global$9 | 0) == 1) {
         break block3
        }
       }
       if (!global$9) {
        $7 = Math_fround(HEAP32[13664]);
        $27 = Math_fround($27 + $7);
        break block40;
       }
      }
      if (global$9) {
       $5 = $0
      } else {
       if ($22 >>> 0 > 2) {
        break block40
       }
       $5 = !HEAPU8[54525];
      }
      if (!global$9 | ($17 | 0) == 23 ? $5 | (global$9 | 0) == 2 : 0) {
       GuiLoadStyleDefault();
       $18 = 23;
       if ((global$9 | 0) == 1) {
        break block3
       }
      }
      if (!global$9) {
       $7 = Math_fround($16 + Math_fround(HEAP32[13664]));
       $27 = Math_fround($27 + $7);
      }
     }
     if (!global$9) {
      $38 = $38 + 1 | 0;
      $0 = ($38 | 0) != ($26 | 0);
      if ($0) {
       continue
      }
     }
     break;
    };
   }
   if (!global$9) {
    __stack_pointer = $4 + 512 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $18;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $8;
  HEAPF32[$5 + 28 >> 2] = $7;
  HEAP32[$5 + 32 >> 2] = $13;
  HEAP32[$5 + 36 >> 2] = $10;
  HEAPF32[$5 + 40 >> 2] = $16;
  HEAP32[$5 + 44 >> 2] = $12;
  HEAP32[$5 + 48 >> 2] = $15;
  HEAP32[$5 + 52 >> 2] = $14;
  HEAPF32[$5 + 56 >> 2] = $11;
  HEAPF32[$5 + 60 >> 2] = $24;
  HEAP32[$5 + 64 >> 2] = $9;
  HEAPF32[$5 + 68 >> 2] = $20;
  HEAP32[$5 + 72 >> 2] = $22;
  HEAP32[$5 + 76 >> 2] = $21;
  HEAP32[$5 + 80 >> 2] = $19;
  HEAP32[$5 + 84 >> 2] = $23;
  HEAP32[$5 + 88 >> 2] = $26;
  HEAP32[$5 + 92 >> 2] = $25;
  HEAPF32[$5 + 96 >> 2] = $27;
  HEAPF32[$5 + 100 >> 2] = $28;
  HEAP32[$5 + 104 >> 2] = $29;
  HEAP32[$5 + 108 >> 2] = $30;
  HEAP32[$5 + 112 >> 2] = $31;
  HEAP32[$5 + 116 >> 2] = $32;
  HEAP32[$5 + 120 >> 2] = $33;
  HEAPF32[$5 + 124 >> 2] = $34;
  HEAPF32[$5 + 128 >> 2] = $35;
  HEAPF32[$5 + 132 >> 2] = $36;
  HEAPF32[$5 + 136 >> 2] = $37;
  HEAP32[$5 + 140 >> 2] = $40;
  HEAPF32[$5 + 144 >> 2] = $45;
  HEAP32[$5 + 148 >> 2] = $38;
  HEAPF32[$5 + 152 >> 2] = $39;
  HEAP32[$5 + 156 >> 2] = $41;
  HEAPF32[$5 + 160 >> 2] = $42;
  HEAP32[$5 + 164 >> 2] = $43;
  HEAP32[$5 + 168 >> 2] = $46;
  HEAPF32[$5 + 172 >> 2] = $47;
  HEAPF32[$5 + 176 >> 2] = $48;
  HEAP32[$5 + 180 >> 2] = $44;
  HEAPF32[$5 + 184 >> 2] = $49;
  HEAPF32[$5 + 188 >> 2] = $50;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 192;
 }
 
 function GetTextWidth_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 52;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $9 = HEAPF32[$1 + 20 >> 2];
   $10 = HEAP32[$1 + 24 >> 2];
   $7 = HEAPF32[$1 + 28 >> 2];
   $8 = HEAPF32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $12 = HEAP32[$1 + 40 >> 2];
   $13 = HEAP32[$1 + 44 >> 2];
   $14 = HEAP32[$1 + 48 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 48 | 0;
   __stack_pointer = $4;
   $2 = !$0;
  }
  block2 : {
   block : {
    if (!global$9) {
     if ($2) {
      break block
     }
     $1 = HEAPU8[$0 | 0];
     if (!$1) {
      break block
     }
     block1 : {
      if (($1 | 0) != 35) {
       break block1
      }
      $1 = HEAPU8[$0 + 1 | 0];
      if (!$1) {
       $6 = $1;
       break block1;
      }
      if (($1 | 0) == 35) {
       $6 = 1;
       break block1;
      }
      $1 = HEAPU8[$0 + 2 | 0];
      if (!$1) {
       $6 = $1;
       break block1;
      }
      if (($1 | 0) == 35) {
       $6 = 2;
       break block1;
      }
      $1 = HEAPU8[$0 + 3 | 0];
      if (!$1) {
       $6 = $1;
       break block1;
      }
      if (($1 | 0) == 35) {
       $6 = 3;
       break block1;
      }
      if (HEAPU8[$0 + 4 | 0] != 35) {
       break block1
      }
      $6 = 4;
     }
     $2 = !HEAPU8[54525];
     $1 = 0;
    }
    if (!global$9 | !$3 ? (global$9 | 0) == 2 | $2 : 0) {
     GuiLoadStyleDefault();
     if ((global$9 | 0) == 1) {
      break block2
     }
    }
    $2 = global$9 ? $2 : !HEAP32[13635];
    block3 : {
     if (!global$9) {
      if ($2) {
       break block3
      }
      $10 = $0 + $6 | 0;
      $8 = Math_fround(HEAP32[13660]);
      block9 : {
       block4 : {
        while (1) {
         $2 = $1;
         block5 : {
          $0 = HEAPU8[$1 + $10 | 0];
          switch ($0 | 0) {
          case 0:
          case 10:
           break block4;
          default:
           break block5;
          };
         }
         block6 : {
          $2 = $1 | 1;
          $0 = HEAPU8[$10 + $2 | 0];
          switch ($0 | 0) {
          case 0:
          case 10:
           break block4;
          default:
           break block6;
          };
         }
         block7 : {
          $2 = $1 | 2;
          $0 = HEAPU8[$10 + $2 | 0];
          switch ($0 | 0) {
          case 0:
          case 10:
           break block4;
          default:
           break block7;
          };
         }
         block8 : {
          $2 = $1 | 3;
          $0 = HEAPU8[$10 + $2 | 0];
          switch ($0 | 0) {
          case 0:
          case 10:
           break block4;
          default:
           break block8;
          };
         }
         $1 = $1 + 4 | 0;
         $0 = ($1 | 0) != 256;
         if ($0) {
          continue
         }
         break;
        };
        $1 = HEAP32[13632];
        HEAP32[$4 + 44 >> 2] = 0;
        $2 = 256;
        break block9;
       }
       $1 = HEAP32[13632];
       HEAP32[$4 + 44 >> 2] = 0;
       if ($2) {
        break block9
       }
       $9 = Math_fround(0.0);
       break block3;
      }
      $8 = Math_fround($8 / Math_fround($1 | 0));
      $9 = Math_fround(0.0);
      $11 = $4 + 32 | 0;
      $12 = $4 + 24 | 0;
      $13 = $4 + 16 | 0;
      $14 = $4 + 8 | 0;
      $1 = 0;
     }
     while (1) {
      if (!global$9) {
       $0 = GetCodepointNext($1 + $10 | 0, $4 + 44 | 0);
       $5 = HEAP32[13641];
       HEAP32[$11 >> 2] = HEAP32[13640];
       HEAP32[$11 + 4 >> 2] = $5;
       $5 = HEAP32[13639];
       HEAP32[$12 >> 2] = HEAP32[13638];
       HEAP32[$12 + 4 >> 2] = $5;
       $5 = HEAP32[13637];
       HEAP32[$13 >> 2] = HEAP32[13636];
       HEAP32[$13 + 4 >> 2] = $5;
       $5 = HEAP32[13635];
       HEAP32[$14 >> 2] = HEAP32[13634];
       HEAP32[$14 + 4 >> 2] = $5;
       $5 = HEAP32[13633];
       HEAP32[$4 >> 2] = HEAP32[13632];
       HEAP32[$4 + 4 >> 2] = $5;
       $0 = GetGlyphIndex($4, $0);
       $5 = HEAP32[(HEAP32[13641] + Math_imul($0, 36) | 0) + 12 >> 2];
       if ($5) {
        $7 = Math_fround($5 | 0)
       } else {
        $7 = HEAPF32[(HEAP32[13640] + ($0 << 4) | 0) + 8 >> 2]
       }
       $7 = Math_fround($8 * $7);
       $0 = !HEAPU8[54525];
      }
      if (!global$9 | ($3 | 0) == 1 ? (global$9 | 0) == 2 | $0 : 0) {
       GuiLoadStyleDefault();
       $5 = 1;
       if ((global$9 | 0) == 1) {
        break block2
       }
      }
      if (!global$9) {
       $7 = Math_fround($7 + Math_fround(HEAP32[13661]));
       $9 = Math_fround($9 + $7);
       $1 = HEAP32[$4 + 44 >> 2] + $1 | 0;
       $0 = ($2 | 0) > ($1 | 0);
       if ($0) {
        continue
       }
      }
      break;
     };
    }
    $8 = $6 ? Math_fround($9 + Math_fround(20.0)) : $9;
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $0 = ~~$8
    } else {
     $0 = -2147483648
    }
    $1 = global$9 ? $1 : $0;
   }
   if (!global$9) {
    __stack_pointer = $4 + 48 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $6;
  HEAPF32[$3 + 20 >> 2] = $9;
  HEAP32[$3 + 24 >> 2] = $10;
  HEAPF32[$3 + 28 >> 2] = $7;
  HEAPF32[$3 + 32 >> 2] = $8;
  HEAP32[$3 + 36 >> 2] = $11;
  HEAP32[$3 + 40 >> 2] = $12;
  HEAP32[$3 + 44 >> 2] = $13;
  HEAP32[$3 + 48 >> 2] = $14;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 52;
  return 0;
 }
 
 function GetNextSpaceWidth_28char_20const__2c_20int__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 48;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAPF32[$1 + 20 >> 2];
   $10 = HEAP32[$1 + 24 >> 2];
   $11 = HEAP32[$1 + 28 >> 2];
   $12 = HEAPF32[$1 + 32 >> 2];
   $15 = HEAPF32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $16 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 48 | 0;
   __stack_pointer = $5;
   HEAP32[$5 + 44 >> 2] = 0;
   $4 = !HEAPU8[54525];
  }
  block : {
   if (!global$9 | !$16 ? (global$9 | 0) == 2 | $4 : 0) {
    GuiLoadStyleDefault();
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $13 = $5 + 24 | 0;
    $14 = $5 + 16 | 0;
    $11 = $5 + 8 | 0;
    $4 = HEAP32[13632];
    $6 = Math_fround($4 | 0);
    $15 = Math_fround(Math_fround(HEAP32[13660]) / $6);
   }
   block1 : {
    while (1) {
     if (!global$9) {
      $3 = $0 + $10 | 0;
      $2 = HEAPU8[$3 | 0];
      if (!$2) {
       break block1
      }
      $4 = ($2 | 0) != 32;
     }
     if ((global$9 | 0) == 2 | $4) {
      if (!global$9) {
       $7 = HEAP8[$3 | 0];
       $4 = $5 + 44 | 0;
       HEAP32[$4 >> 2] = 1;
       block2 : {
        if (($7 | 0) >= 0) {
         $2 = HEAP8[$3 | 0];
         break block2;
        }
        block3 : {
         $8 = $7 & 255;
         if (($8 & 224) == 192) {
          $2 = HEAPU8[$3 + 1 | 0];
          if (($2 & 192) == 128) {
           if (($7 + 62 & 255) >>> 0 > 29) {
            break block3
           }
           HEAP32[$4 >> 2] = 2;
           $2 = $2 & 63 | $8 << 6 & 1984;
           break block2;
          }
          HEAP32[$4 >> 2] = 2;
          break block3;
         }
         if (($8 & 240) == 224) {
          $2 = HEAPU8[$3 + 1 | 0];
          if (($2 & 192) != 128) {
           HEAP32[$4 >> 2] = 2;
           break block3;
          }
          $3 = HEAPU8[$3 + 2 | 0];
          if (($3 & 192) != 128) {
           HEAP32[$4 >> 2] = 3;
           break block3;
          }
          $9 = $2 << 24 >> 24;
          if (!(!(($7 | 0) == -32 & ($9 & 224) != 160) & (($7 | 0) != -19 | ($9 | 0) < -96))) {
           HEAP32[$4 >> 2] = 2;
           break block3;
          }
          if (($7 & -16) != -32) {
           break block3
          }
          HEAP32[$4 >> 2] = 3;
          $2 = $3 & 63 | ($8 << 12 & 61440 | $2 << 6 & 4032);
          break block2;
         }
         $2 = 63;
         block5 : {
          if (($8 & 248) != 240 | $7 >>> 0 > 4294967284) {
           break block5
          }
          $9 = HEAPU8[$3 + 1 | 0];
          if (($9 & 192) != 128) {
           HEAP32[$4 >> 2] = 2;
           break block2;
          }
          $17 = HEAPU8[$3 + 2 | 0];
          if (($17 & 192) != 128) {
           HEAP32[$4 >> 2] = 3;
           break block2;
          }
          $18 = HEAPU8[$3 + 3 | 0];
          if (($18 & 192) != 128) {
           HEAP32[$4 >> 2] = 4;
           break block2;
          }
          $3 = $9 << 24 >> 24;
          if (!(!(($7 | 0) == -16 & ($3 + 112 & 255) >>> 0 > 47) & (($7 | 0) != -12 | ($3 | 0) < -112))) {
           HEAP32[$4 >> 2] = 2;
           break block2;
          }
          if ($7 >>> 0 < 4294967280) {
           break block5
          }
          HEAP32[$4 >> 2] = 4;
          $2 = $8 << 18 & 1835008 | $9 << 12 & 258048;
          $2 = $2 >>> 0 > 1114111 ? 63 : $2 | ($17 << 6 & 4032 | $18 & 63);
         }
         break block2;
        }
        $2 = 63;
       }
       $3 = HEAP32[13641];
       HEAP32[$5 + 32 >> 2] = HEAP32[13640];
       HEAP32[$5 + 36 >> 2] = $3;
       $3 = HEAP32[13639];
       HEAP32[$13 >> 2] = HEAP32[13638];
       HEAP32[$13 + 4 >> 2] = $3;
       $3 = HEAP32[13637];
       HEAP32[$14 >> 2] = HEAP32[13636];
       HEAP32[$14 + 4 >> 2] = $3;
       $3 = HEAP32[13635];
       HEAP32[$11 >> 2] = HEAP32[13634];
       HEAP32[$11 + 4 >> 2] = $3;
       $3 = HEAP32[13633];
       HEAP32[$5 >> 2] = HEAP32[13632];
       HEAP32[$5 + 4 >> 2] = $3;
       $2 = GetGlyphIndex($5, $2);
       $3 = HEAP32[(Math_imul($2, 36) + HEAP32[13641] | 0) + 12 >> 2];
       block8 : {
        if (!$3) {
         $6 = HEAPF32[(HEAP32[13640] + ($2 << 4) | 0) + 8 >> 2];
         break block8;
        }
        $6 = Math_fround($3 | 0);
       }
       $6 = Math_fround($15 * $6);
       $4 = !HEAPU8[54525];
      }
      if (!global$9 | ($16 | 0) == 1 ? (global$9 | 0) == 2 | $4 : 0) {
       GuiLoadStyleDefault();
       $2 = 1;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $10 = $10 + 1 | 0;
       $4 = HEAP32[13661];
       $6 = Math_fround($6 + Math_fround($4 | 0));
       $12 = Math_fround($12 + $6);
       continue;
      }
     }
     break;
    };
    if (!global$9) {
     HEAP32[$1 >> 2] = $10
    }
   }
   if (!global$9) {
    __stack_pointer = $5 + 48 | 0;
    return $12;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $5;
  HEAPF32[$2 + 20 >> 2] = $6;
  HEAP32[$2 + 24 >> 2] = $10;
  HEAP32[$2 + 28 >> 2] = $11;
  HEAPF32[$2 + 32 >> 2] = $12;
  HEAPF32[$2 + 36 >> 2] = $15;
  HEAP32[$2 + 40 >> 2] = $13;
  HEAP32[$2 + 44 >> 2] = $14;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 48;
  return Math_fround(0.0);
 }
 
 function rlMatrixMultiply($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0);
  $3 = HEAPF32[$1 + 48 >> 2];
  $11 = HEAPF32[$2 + 12 >> 2];
  $4 = HEAPF32[$1 + 32 >> 2];
  $12 = HEAPF32[$2 + 8 >> 2];
  $5 = HEAPF32[$1 >> 2];
  $13 = HEAPF32[$2 >> 2];
  $6 = HEAPF32[$1 + 16 >> 2];
  $14 = HEAPF32[$2 + 4 >> 2];
  HEAPF32[$0 >> 2] = Math_fround($3 * $11) + Math_fround(Math_fround($4 * $12) + Math_fround(Math_fround($5 * $13) + Math_fround($6 * $14)));
  $15 = HEAPF32[$2 + 28 >> 2];
  $16 = HEAPF32[$2 + 24 >> 2];
  $17 = HEAPF32[$2 + 16 >> 2];
  $18 = HEAPF32[$2 + 20 >> 2];
  HEAPF32[$0 + 16 >> 2] = Math_fround($3 * $15) + Math_fround(Math_fround($4 * $16) + Math_fround(Math_fround($5 * $17) + Math_fround($6 * $18)));
  $19 = HEAPF32[$2 + 44 >> 2];
  $20 = HEAPF32[$2 + 40 >> 2];
  $21 = HEAPF32[$2 + 32 >> 2];
  $22 = HEAPF32[$2 + 36 >> 2];
  HEAPF32[$0 + 32 >> 2] = Math_fround($3 * $19) + Math_fround(Math_fround($4 * $20) + Math_fround(Math_fround($5 * $21) + Math_fround($6 * $22)));
  $7 = $3;
  $3 = HEAPF32[$2 + 60 >> 2];
  $8 = $4;
  $4 = HEAPF32[$2 + 56 >> 2];
  $9 = $5;
  $5 = HEAPF32[$2 + 48 >> 2];
  $10 = $6;
  $6 = HEAPF32[$2 + 52 >> 2];
  HEAPF32[$0 + 48 >> 2] = Math_fround($7 * $3) + Math_fround(Math_fround($8 * $4) + Math_fround(Math_fround($9 * $5) + Math_fround($10 * $6)));
  $7 = HEAPF32[$1 + 52 >> 2];
  $8 = HEAPF32[$1 + 36 >> 2];
  $9 = HEAPF32[$1 + 4 >> 2];
  $10 = HEAPF32[$1 + 20 >> 2];
  HEAPF32[$0 + 52 >> 2] = Math_fround($3 * $7) + Math_fround(Math_fround($4 * $8) + Math_fround(Math_fround($5 * $9) + Math_fround($6 * $10)));
  HEAPF32[$0 + 36 >> 2] = Math_fround($7 * $19) + Math_fround(Math_fround($8 * $20) + Math_fround(Math_fround($9 * $21) + Math_fround($22 * $10)));
  HEAPF32[$0 + 20 >> 2] = Math_fround($7 * $15) + Math_fround(Math_fround($8 * $16) + Math_fround(Math_fround($9 * $17) + Math_fround($18 * $10)));
  HEAPF32[$0 + 4 >> 2] = Math_fround($7 * $11) + Math_fround(Math_fround($8 * $12) + Math_fround(Math_fround($9 * $13) + Math_fround($14 * $10)));
  $7 = HEAPF32[$1 + 56 >> 2];
  $8 = HEAPF32[$1 + 40 >> 2];
  $9 = HEAPF32[$1 + 8 >> 2];
  $10 = HEAPF32[$1 + 24 >> 2];
  HEAPF32[$0 + 56 >> 2] = Math_fround($3 * $7) + Math_fround(Math_fround($4 * $8) + Math_fround(Math_fround($5 * $9) + Math_fround($6 * $10)));
  HEAPF32[$0 + 40 >> 2] = Math_fround($7 * $19) + Math_fround(Math_fround($8 * $20) + Math_fround(Math_fround($9 * $21) + Math_fround($22 * $10)));
  HEAPF32[$0 + 24 >> 2] = Math_fround($7 * $15) + Math_fround(Math_fround($8 * $16) + Math_fround(Math_fround($9 * $17) + Math_fround($18 * $10)));
  HEAPF32[$0 + 8 >> 2] = Math_fround($7 * $11) + Math_fround(Math_fround($8 * $12) + Math_fround(Math_fround($9 * $13) + Math_fround($14 * $10)));
  $7 = $3;
  $3 = HEAPF32[$1 + 60 >> 2];
  $8 = $4;
  $4 = HEAPF32[$1 + 44 >> 2];
  $9 = $5;
  $5 = HEAPF32[$1 + 12 >> 2];
  $10 = $6;
  $6 = HEAPF32[$1 + 28 >> 2];
  HEAPF32[$0 + 60 >> 2] = Math_fround($7 * $3) + Math_fround(Math_fround($8 * $4) + Math_fround(Math_fround($9 * $5) + Math_fround($10 * $6)));
  HEAPF32[$0 + 44 >> 2] = Math_fround($3 * $19) + Math_fround(Math_fround($4 * $20) + Math_fround(Math_fround($5 * $21) + Math_fround($22 * $6)));
  HEAPF32[$0 + 28 >> 2] = Math_fround($3 * $15) + Math_fround(Math_fround($4 * $16) + Math_fround(Math_fround($5 * $17) + Math_fround($18 * $6)));
  HEAPF32[$0 + 12 >> 2] = Math_fround($3 * $11) + Math_fround(Math_fround($4 * $12) + Math_fround(Math_fround($5 * $13) + Math_fround($14 * $6)));
 }
 
 function rlBegin() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $0 = HEAP32[global$10 >> 2];
   $1 = HEAP32[$0 >> 2];
   $3 = HEAP32[$0 + 8 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = HEAP32[14160];
   $0 = HEAP32[$1 + 16 >> 2];
   $2 = HEAP32[$1 + 12 >> 2] + ($0 << 4) | 0;
   $4 = HEAP32[$2 - 16 >> 2];
   $3 = ($4 | 0) != 7;
  }
  block4 : {
   if ((global$9 | 0) == 2 | $3) {
    if (!global$9) {
     $3 = HEAP32[$2 - 12 >> 2];
     $6 = ($3 | 0) <= 0;
    }
    block : {
     if (!global$9) {
      if ($6) {
       break block
      }
      $1 = 0;
      block2 : {
       block3 : {
        switch ($4 - 1 | 0) {
        case 0:
         $1 = $3 & 3;
         break block2;
        case 3:
         break block3;
        default:
         break block2;
        };
       }
       $1 = $3 >>> 0 < 4 ? 1 : 4 - ($3 & 3) | 0;
      }
      HEAP32[$2 - 8 >> 2] = $1;
      $2 = HEAP32[14160];
      $0 = HEAP32[$2 + 12 >> 2];
      $1 = HEAP32[($0 + (HEAP32[$2 + 16 >> 2] << 4) | 0) - 8 >> 2];
     }
     if (!global$9 | !$5) {
      $2 = rlCheckRenderBatchLimit($1);
      $4 = 0;
      if ((global$9 | 0) == 1) {
       break block4
      }
      $0 = $2;
     }
     if (!global$9) {
      $1 = HEAP32[14160];
      if ($0) {
       $0 = HEAP32[$1 + 16 >> 2];
       break block;
      }
      $3 = HEAP32[(HEAP32[$1 + 12 >> 2] + (HEAP32[$1 + 16 >> 2] << 4) | 0) - 8 >> 2];
      HEAP32[14167] = $3 + HEAP32[14167];
      $0 = HEAP32[$1 + 16 >> 2] + 1 | 0;
      HEAP32[$1 + 16 >> 2] = $0;
     }
    }
    if ((global$9 | 0) == 2 | (global$9 ? $3 : ($0 | 0) >= 256)) {
     if (!global$9 | ($5 | 0) == 1) {
      rlDrawRenderBatch($1);
      $4 = 1;
      if ((global$9 | 0) == 1) {
       break block4
      }
     }
     if (!global$9) {
      $1 = HEAP32[14160];
      $0 = HEAP32[$1 + 16 >> 2];
     }
    }
    if (!global$9) {
     HEAP32[(HEAP32[$1 + 12 >> 2] + ($0 << 4) | 0) - 16 >> 2] = 7;
     $0 = HEAP32[14160];
     HEAP32[((HEAP32[$0 + 16 >> 2] << 4) + HEAP32[$0 + 12 >> 2] | 0) - 12 >> 2] = 0;
     $0 = HEAP32[14160];
     HEAP32[((HEAP32[$0 + 16 >> 2] << 4) + HEAP32[$0 + 12 >> 2] | 0) - 4 >> 2] = HEAP32[14738];
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function rlCheckRenderBatchLimit($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = HEAP32[14167] + $0 | 0;
   $0 = HEAP32[14160];
   $4 = HEAP32[HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) >> 2] << 2;
   $2 = ($3 | 0) >= ($4 | 0);
  }
  block : {
   if ((global$9 | 0) == 2 | $2) {
    if (!global$9) {
     $2 = HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 16 >> 2] << 4) | 0;
     $5 = HEAP32[$2 - 4 >> 2];
     $2 = HEAP32[$2 - 16 >> 2];
    }
    if (!global$9 | !$6) {
     rlDrawRenderBatch($0);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $0 = HEAP32[14160];
     HEAP32[((HEAP32[$0 + 16 >> 2] << 4) + HEAP32[$0 + 12 >> 2] | 0) - 16 >> 2] = $2;
     $0 = HEAP32[14160];
     HEAP32[((HEAP32[$0 + 16 >> 2] << 4) + HEAP32[$0 + 12 >> 2] | 0) - 4 >> 2] = $5;
    }
   }
   if (!global$9) {
    return ($3 | 0) >= ($4 | 0)
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $4;
  HEAP32[$1 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function rlDrawRenderBatch($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $3 = HEAP32[$1 + 16 >> 2];
   $26 = HEAP32[$1 + 20 >> 2];
   $38 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 768 | 0;
   __stack_pointer = $5;
   $2 = HEAP32[14167] <= 0;
  }
  block1 : {
   block : {
    if (!global$9) {
     if ($2) {
      break block
     }
     $2 = HEAPU8[59308] == 1;
    }
    if ((global$9 | 0) == 2 | $2) {
     if (!global$9) {
      $3 = HEAP32[14834];
      $2 = HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 24 >> 2];
     }
     if (!global$9 | !$7) {
      FUNCTION_TABLE[$3 | 0]($2);
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9) {
     glBindBuffer(34962, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 28 >> 2]);
     glBufferSubData(34962, 0, Math_imul(HEAP32[14167], 12) | 0, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 4 >> 2]);
     glBindBuffer(34962, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 32 >> 2]);
     glBufferSubData(34962, 0, HEAP32[14167] << 3, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 8 >> 2]);
     glBindBuffer(34962, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 36 >> 2]);
     glBufferSubData(34962, 0, Math_imul(HEAP32[14167], 12) | 0, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 12 >> 2]);
     glBindBuffer(34962, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 40 >> 2]);
     glBufferSubData(34962, 0, HEAP32[14167] << 2, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 16 >> 2]);
     $2 = HEAPU8[59308] != 1;
     if ($2) {
      break block
     }
     $2 = HEAP32[14834];
    }
    if (!global$9 | ($7 | 0) == 1) {
     FUNCTION_TABLE[$2 | 0](0);
     $6 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    __memcpy($5 + 640 | 0, 56768, 64);
    $2 = __memcpy($5 + 576 | 0, 56704, 64);
    $38 = 1;
    $26 = HEAPU8[58996];
   }
   while (1) {
    if (!global$9) {
     if ($26 & 1) {
      $2 = HEAP32[14825];
      glViewport((Math_imul($2, $1) | 0) / 2 | 0, 0, ($2 | 0) / 2 | 0, HEAP32[14826]);
      $2 = $5 + 192 | 0;
      __memcpy($2, $5 + 576 | 0, 64);
      $6 = $5 + 128 | 0;
      $1 = $1 << 6;
      __memcpy($6, $1 + 59128 | 0, 64);
      $27 = $5 + 704 | 0;
      rlMatrixMultiply($27, $2, $6);
      __memcpy(56704, $27, 64);
      __memcpy(56768, $1 + 59e3 | 0, 64);
     }
     $2 = HEAP32[14167] > 0;
    }
    if ((global$9 | 0) == 2 | $2) {
     if (!global$9) {
      glUseProgram(HEAP32[14747]);
      __memcpy($5 - -64 | 0, 56704, 64);
      $1 = __memcpy($5, 56768, 64);
      rlMatrixMultiply($1 + 704 | 0, $1 - -64 | 0, $1);
      $2 = HEAP32[HEAP32[14748] + 24 >> 2];
      $4 = HEAPF32[$1 + 704 >> 2];
      $8 = HEAPF32[$1 + 720 >> 2];
      $9 = HEAPF32[$1 + 736 >> 2];
      $10 = HEAPF32[$1 + 752 >> 2];
      $11 = HEAPF32[$1 + 708 >> 2];
      $20 = HEAPF32[$1 + 724 >> 2];
      $12 = HEAPF32[$1 + 740 >> 2];
      $13 = HEAPF32[$1 + 756 >> 2];
      $21 = HEAPF32[$1 + 712 >> 2];
      $14 = HEAPF32[$1 + 728 >> 2];
      $15 = HEAPF32[$1 + 744 >> 2];
      $16 = HEAPF32[$1 + 760 >> 2];
      $17 = HEAPF32[$1 + 716 >> 2];
      $18 = HEAPF32[$1 + 732 >> 2];
      $19 = HEAPF32[$1 + 748 >> 2];
      HEAPF32[$1 + 572 >> 2] = HEAPF32[$1 + 764 >> 2];
      HEAPF32[$1 + 568 >> 2] = $19;
      HEAPF32[$1 + 564 >> 2] = $18;
      HEAPF32[$1 + 560 >> 2] = $17;
      HEAPF32[$1 + 556 >> 2] = $16;
      HEAPF32[$1 + 552 >> 2] = $15;
      HEAPF32[$1 + 548 >> 2] = $14;
      HEAPF32[$1 + 544 >> 2] = $21;
      HEAPF32[$1 + 540 >> 2] = $13;
      HEAPF32[$1 + 536 >> 2] = $12;
      HEAPF32[$1 + 532 >> 2] = $20;
      HEAPF32[$1 + 528 >> 2] = $11;
      HEAPF32[$1 + 524 >> 2] = $10;
      HEAPF32[$1 + 520 >> 2] = $9;
      HEAPF32[$1 + 516 >> 2] = $8;
      HEAPF32[$1 + 512 >> 2] = $4;
      glUniformMatrix4fv($2 | 0, 1, 0, $1 + 512 | 0);
      $2 = HEAP32[14748];
      $3 = HEAP32[$2 + 32 >> 2];
      if (($3 | 0) != -1) {
       HEAPF32[$1 + 508 >> 2] = HEAPF32[14207];
       HEAPF32[$1 + 504 >> 2] = HEAPF32[14203];
       HEAPF32[$1 + 500 >> 2] = HEAPF32[14199];
       HEAPF32[$1 + 496 >> 2] = HEAPF32[14195];
       HEAPF32[$1 + 492 >> 2] = HEAPF32[14206];
       HEAPF32[$1 + 488 >> 2] = HEAPF32[14202];
       HEAPF32[$1 + 484 >> 2] = HEAPF32[14198];
       HEAPF32[$1 + 480 >> 2] = HEAPF32[14194];
       HEAPF32[$1 + 476 >> 2] = HEAPF32[14205];
       HEAPF32[$1 + 472 >> 2] = HEAPF32[14201];
       HEAPF32[$1 + 468 >> 2] = HEAPF32[14197];
       HEAPF32[$1 + 464 >> 2] = HEAPF32[14193];
       HEAPF32[$1 + 460 >> 2] = HEAPF32[14204];
       HEAPF32[$1 + 456 >> 2] = HEAPF32[14200];
       HEAPF32[$1 + 452 >> 2] = HEAPF32[14196];
       HEAPF32[$1 + 448 >> 2] = HEAPF32[14192];
       glUniformMatrix4fv($3 | 0, 1, 0, $1 + 448 | 0);
       $2 = HEAP32[14748];
      }
      $3 = HEAP32[$2 + 28 >> 2];
      if (($3 | 0) != -1) {
       HEAPF32[$1 + 444 >> 2] = HEAPF32[14191];
       HEAPF32[$1 + 440 >> 2] = HEAPF32[14187];
       HEAPF32[$1 + 436 >> 2] = HEAPF32[14183];
       HEAPF32[$1 + 432 >> 2] = HEAPF32[14179];
       HEAPF32[$1 + 428 >> 2] = HEAPF32[14190];
       HEAPF32[$1 + 424 >> 2] = HEAPF32[14186];
       HEAPF32[$1 + 420 >> 2] = HEAPF32[14182];
       HEAPF32[$1 + 416 >> 2] = HEAPF32[14178];
       HEAPF32[$1 + 412 >> 2] = HEAPF32[14189];
       HEAPF32[$1 + 408 >> 2] = HEAPF32[14185];
       HEAPF32[$1 + 404 >> 2] = HEAPF32[14181];
       HEAPF32[$1 + 400 >> 2] = HEAPF32[14177];
       HEAPF32[$1 + 396 >> 2] = HEAPF32[14188];
       HEAPF32[$1 + 392 >> 2] = HEAPF32[14184];
       HEAPF32[$1 + 388 >> 2] = HEAPF32[14180];
       HEAPF32[$1 + 384 >> 2] = HEAPF32[14176];
       glUniformMatrix4fv($3 | 0, 1, 0, $1 + 384 | 0);
       $2 = HEAP32[14748];
      }
      $3 = HEAP32[$2 + 36 >> 2];
      if (($3 | 0) != -1) {
       HEAPF32[$1 + 380 >> 2] = HEAPF32[14223];
       HEAPF32[$1 + 376 >> 2] = HEAPF32[14219];
       HEAPF32[$1 + 372 >> 2] = HEAPF32[14215];
       HEAPF32[$1 + 368 >> 2] = HEAPF32[14211];
       HEAPF32[$1 + 364 >> 2] = HEAPF32[14222];
       HEAPF32[$1 + 360 >> 2] = HEAPF32[14218];
       HEAPF32[$1 + 356 >> 2] = HEAPF32[14214];
       HEAPF32[$1 + 352 >> 2] = HEAPF32[14210];
       HEAPF32[$1 + 348 >> 2] = HEAPF32[14221];
       HEAPF32[$1 + 344 >> 2] = HEAPF32[14217];
       HEAPF32[$1 + 340 >> 2] = HEAPF32[14213];
       HEAPF32[$1 + 336 >> 2] = HEAPF32[14209];
       HEAPF32[$1 + 332 >> 2] = HEAPF32[14220];
       HEAPF32[$1 + 328 >> 2] = HEAPF32[14216];
       HEAPF32[$1 + 324 >> 2] = HEAPF32[14212];
       HEAPF32[$1 + 320 >> 2] = HEAPF32[14208];
       glUniformMatrix4fv($3 | 0, 1, 0, $1 + 320 | 0);
       $2 = HEAP32[14748];
      }
      $2 = HEAP32[$2 + 40 >> 2];
      if (($2 | 0) != -1) {
       $8 = HEAPF32[14208];
       $9 = HEAPF32[14213];
       $10 = HEAPF32[14212];
       $11 = HEAPF32[14209];
       $20 = Math_fround(Math_fround($8 * $9) - Math_fround($10 * $11));
       $12 = HEAPF32[14217];
       $13 = HEAPF32[14216];
       $21 = Math_fround(Math_fround($10 * $12) - Math_fround($13 * $9));
       $14 = HEAPF32[14221];
       $15 = HEAPF32[14220];
       $28 = Math_fround(Math_fround($13 * $14) - Math_fround($15 * $12));
       $16 = HEAPF32[14210];
       $17 = HEAPF32[14215];
       $18 = HEAPF32[14214];
       $19 = HEAPF32[14211];
       $29 = Math_fround(Math_fround($16 * $17) - Math_fround($18 * $19));
       $22 = HEAPF32[14223];
       $23 = HEAPF32[14222];
       $30 = Math_fround(Math_fround($16 * $22) - Math_fround($23 * $19));
       $31 = Math_fround(Math_fround($8 * $14) - Math_fround($15 * $11));
       $24 = HEAPF32[14219];
       $25 = HEAPF32[14218];
       $32 = Math_fround(Math_fround($18 * $24) - Math_fround($25 * $17));
       $33 = Math_fround(Math_fround($25 * $22) - Math_fround($23 * $24));
       $34 = Math_fround(Math_fround($8 * $12) - Math_fround($13 * $11));
       $35 = Math_fround(Math_fround($18 * $22) - Math_fround($23 * $17));
       $36 = Math_fround(Math_fround($10 * $14) - Math_fround($15 * $9));
       $37 = Math_fround(Math_fround($16 * $24) - Math_fround($25 * $19));
       $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround($28 * $29) + Math_fround(Math_fround(Math_fround($21 * $30) + Math_fround(Math_fround($31 * $32) + Math_fround(Math_fround($20 * $33) - Math_fround($34 * $35)))) - Math_fround($36 * $37))));
       HEAPF32[$1 + 316 >> 2] = Math_fround(Math_fround($25 * $20) + Math_fround(Math_fround($16 * $21) - Math_fround($18 * $34))) * $4;
       HEAPF32[$1 + 312 >> 2] = Math_fround(Math_fround(Math_fround($18 * $31) - Math_fround($16 * $36)) - Math_fround($23 * $20)) * $4;
       HEAPF32[$1 + 308 >> 2] = Math_fround(Math_fround($23 * $34) + Math_fround(Math_fround($16 * $28) - Math_fround($25 * $31))) * $4;
       HEAPF32[$1 + 304 >> 2] = Math_fround(Math_fround(Math_fround($25 * $36) - Math_fround($18 * $28)) - Math_fround($23 * $21)) * $4;
       HEAPF32[$1 + 300 >> 2] = Math_fround(Math_fround(Math_fround($17 * $34) - Math_fround($19 * $21)) - Math_fround($24 * $20)) * $4;
       HEAPF32[$1 + 296 >> 2] = Math_fround(Math_fround($22 * $20) + Math_fround(Math_fround($19 * $36) - Math_fround($17 * $31))) * $4;
       HEAPF32[$1 + 292 >> 2] = Math_fround(Math_fround(Math_fround($24 * $31) - Math_fround($19 * $28)) - Math_fround($22 * $34)) * $4;
       HEAPF32[$1 + 288 >> 2] = Math_fround(Math_fround($22 * $21) + Math_fround(Math_fround($17 * $28) - Math_fround($24 * $36))) * $4;
       HEAPF32[$1 + 284 >> 2] = Math_fround(Math_fround($13 * $29) + Math_fround(Math_fround($8 * $32) - Math_fround($10 * $37))) * $4;
       HEAPF32[$1 + 280 >> 2] = Math_fround(Math_fround(Math_fround($10 * $30) - Math_fround($8 * $35)) - Math_fround($15 * $29)) * $4;
       HEAPF32[$1 + 276 >> 2] = Math_fround(Math_fround($15 * $37) + Math_fround(Math_fround($8 * $33) - Math_fround($13 * $30))) * $4;
       HEAPF32[$1 + 272 >> 2] = Math_fround(Math_fround(Math_fround($13 * $35) - Math_fround($10 * $33)) - Math_fround($15 * $32)) * $4;
       HEAPF32[$1 + 268 >> 2] = Math_fround(Math_fround(Math_fround($9 * $37) - Math_fround($11 * $32)) - Math_fround($12 * $29)) * $4;
       HEAPF32[$1 + 264 >> 2] = Math_fround(Math_fround($14 * $29) + Math_fround(Math_fround($11 * $35) - Math_fround($9 * $30))) * $4;
       HEAPF32[$1 + 260 >> 2] = Math_fround(Math_fround(Math_fround($12 * $30) - Math_fround($11 * $33)) - Math_fround($14 * $37)) * $4;
       HEAPF32[$1 + 256 >> 2] = Math_fround(Math_fround($14 * $32) + Math_fround(Math_fround($9 * $33) - Math_fround($12 * $35))) * $4;
       $1 = $1 + 256 | 0;
       glUniformMatrix4fv($2 | 0, 1, 0, $1 | 0);
      }
      $2 = HEAPU8[59308] == 1;
     }
     block2 : {
      if ((global$9 | 0) == 2 | $2) {
       if (!global$9) {
        $1 = HEAP32[14834];
        $2 = HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 24 >> 2];
       }
       if (!global$9 | ($7 | 0) == 2) {
        FUNCTION_TABLE[$1 | 0]($2);
        $6 = 2;
        if ((global$9 | 0) == 1) {
         break block1
        }
       }
       if (!global$9) {
        break block2
       }
      }
      if (!global$9) {
       glBindBuffer(34962, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 28 >> 2]);
       glVertexAttribPointer(HEAP32[HEAP32[14748] >> 2], 3, 5126, 0, 0, 0);
       glEnableVertexAttribArray(HEAP32[HEAP32[14748] >> 2]);
       glBindBuffer(34962, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 32 >> 2]);
       glVertexAttribPointer(HEAP32[HEAP32[14748] + 4 >> 2], 2, 5126, 0, 0, 0);
       glEnableVertexAttribArray(HEAP32[HEAP32[14748] + 4 >> 2]);
       glBindBuffer(34962, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 36 >> 2]);
       glVertexAttribPointer(HEAP32[HEAP32[14748] + 12 >> 2], 3, 5126, 0, 0, 0);
       glEnableVertexAttribArray(HEAP32[HEAP32[14748] + 12 >> 2]);
       glBindBuffer(34962, HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 40 >> 2]);
       glVertexAttribPointer(HEAP32[HEAP32[14748] + 20 >> 2], 4, 5121, 1, 0, 0);
       glEnableVertexAttribArray(HEAP32[HEAP32[14748] + 20 >> 2]);
       $2 = HEAP32[(HEAP32[$0 + 8 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 48) | 0) + 44 >> 2];
       glBindBuffer(34963, $2 | 0);
      }
     }
     if (!global$9) {
      $1 = 0;
      glUniform4f(HEAP32[HEAP32[14748] + 48 >> 2], Math_fround(Math_fround(1.0)), Math_fround(Math_fround(1.0)), Math_fround(Math_fround(1.0)), Math_fround(Math_fround(1.0)));
      glUniform1i(HEAP32[HEAP32[14748] + 60 >> 2], 0);
      while (1) {
       $2 = ($1 << 2) + 58956 | 0;
       if (HEAP32[$2 >> 2]) {
        glActiveTexture($1 + 33985 | 0);
        glBindTexture(3553, HEAP32[$2 >> 2]);
       }
       $1 = $1 + 1 | 0;
       if (($1 | 0) != 4) {
        continue
       }
       break;
      };
      glActiveTexture(33984);
      if (HEAP32[$0 + 16 >> 2] > 0) {
       $6 = HEAP32[$0 + 12 >> 2];
       $1 = 0;
       $2 = 0;
       while (1) {
        $3 = $2 << 4;
        glBindTexture(3553, HEAP32[($3 + $6 | 0) + 12 >> 2]);
        block5 : {
         block4 : {
          block3 : {
           $6 = $3 + HEAP32[$0 + 12 >> 2] | 0;
           $27 = HEAP32[$6 >> 2];
           switch ($27 - 1 | 0) {
           case 0:
           case 3:
            break block3;
           default:
            break block4;
           };
          }
          glDrawArrays($27 | 0, $1 | 0, HEAP32[$6 + 4 >> 2]);
          break block5;
         }
         glDrawElements(4, Math_imul(HEAP32[$6 + 4 >> 2] / 4 | 0, 6) | 0, 5123, Math_imul(($1 | 0) / 4 | 0, 12) | 0);
        }
        $6 = HEAP32[$0 + 12 >> 2];
        $3 = $3 + $6 | 0;
        $1 = (HEAP32[$3 + 4 >> 2] + $1 | 0) + HEAP32[$3 + 8 >> 2] | 0;
        $2 = $2 + 1 | 0;
        if (($2 | 0) < HEAP32[$0 + 16 >> 2]) {
         continue
        }
        break;
       };
      }
      $2 = !HEAPU8[59308];
      if ($2) {
       glBindBuffer(34962, 0);
       glBindBuffer(34963, 0);
      }
      glBindTexture(3553, 0);
     }
    }
    $2 = global$9 ? $2 : HEAPU8[59308] == 1;
    if ($2 | (global$9 | 0) == 2) {
     $2 = global$9 ? $2 : HEAP32[14834];
     if (!global$9 | ($7 | 0) == 3) {
      FUNCTION_TABLE[$2 | 0](0);
      $6 = 3;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9) {
     glUseProgram(0);
     $2 = $26 & $38;
     $1 = 1;
     $38 = 0;
     $2 = $2 & 1;
     if ($2) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    if ($26 & 1) {
     glViewport(0, 0, HEAP32[14825], HEAP32[14826])
    }
    HEAP32[14167] = 0;
    HEAP32[$0 + 20 >> 2] = -1082130432;
    __memcpy(56768, $5 + 640 | 0, 64);
    __memcpy(56704, $5 + 576 | 0, 64);
    $1 = 0;
    while (1) {
     $2 = $1 << 4;
     HEAP32[$2 + HEAP32[$0 + 12 >> 2] >> 2] = 7;
     HEAP32[($2 + HEAP32[$0 + 12 >> 2] | 0) + 4 >> 2] = 0;
     HEAP32[($2 + HEAP32[$0 + 12 >> 2] | 0) + 12 >> 2] = HEAP32[14738];
     $1 = $1 + 1 | 0;
     if (($1 | 0) != 256) {
      continue
     }
     break;
    };
    HEAP32[14741] = 0;
    HEAP32[14742] = 0;
    HEAP32[14739] = 0;
    HEAP32[14740] = 0;
    HEAP32[$0 + 16 >> 2] = 1;
    $2 = HEAP32[$0 + 4 >> 2] + 1 | 0;
    HEAP32[$0 + 4 >> 2] = ($2 | 0) < HEAP32[$0 >> 2] ? $2 : 0;
    __stack_pointer = $5 + 768 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $5;
  HEAP32[$7 + 16 >> 2] = $3;
  HEAP32[$7 + 20 >> 2] = $26;
  HEAP32[$7 + 24 >> 2] = $38;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function rlEnd() {
  var $0 = 0;
  $0 = HEAP32[14160];
  HEAPF32[$0 + 20 >> 2] = HEAPF32[$0 + 20 >> 2] + Math_fround(4.999999873689376e-05);
 }
 
 function rlVertex2f($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAPF32[$3 >> 2];
   $2 = HEAP32[$3 + 4 >> 2];
   $4 = HEAPF32[$3 + 8 >> 2];
   $5 = HEAPF32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = HEAPF32[HEAP32[14160] + 20 >> 2];
   block : {
    if (HEAPU8[56896] != 1) {
     $4 = $1;
     $5 = $6;
     break block;
    }
    $5 = Math_fround(HEAPF32[14219] + Math_fround(Math_fround(HEAPF32[14218] * $6) + Math_fround(Math_fround(HEAPF32[14216] * $0) + Math_fround($1 * HEAPF32[14217]))));
    $4 = Math_fround(HEAPF32[14215] + Math_fround(Math_fround(HEAPF32[14214] * $6) + Math_fround(Math_fround(HEAPF32[14212] * $0) + Math_fround($1 * HEAPF32[14213]))));
    $0 = Math_fround(HEAPF32[14211] + Math_fround(Math_fround(HEAPF32[14210] * $6) + Math_fround(Math_fround(HEAPF32[14208] * $0) + Math_fround($1 * HEAPF32[14209]))));
   }
   $7 = HEAP32[14160];
   $2 = HEAP32[14167] <= ((HEAP32[HEAP32[$7 + 8 >> 2] + Math_imul(HEAP32[$7 + 4 >> 2], 48) >> 2] << 2) - 4 | 0);
  }
  block6 : {
   block1 : {
    if (!global$9) {
     if ($2) {
      break block1
     }
     $2 = 4;
     block5 : {
      block4 : {
       block3 : {
        block2 : {
         $3 = HEAP32[$7 + 12 >> 2] + (HEAP32[$7 + 16 >> 2] << 4) | 0;
         switch (HEAP32[$3 - 16 >> 2] - 1 | 0) {
         case 0:
          break block2;
         case 3:
          break block3;
         case 6:
          break block4;
         default:
          break block1;
         };
        }
        if (HEAP8[$3 - 12 | 0] & 1) {
         break block1
        }
        $2 = 3;
        break block5;
       }
       if (!(HEAP32[$3 - 12 >> 2] % 3 | 0)) {
        break block5
       }
       break block1;
      }
      if (HEAPU8[$3 - 12 | 0] & 3) {
       break block1
      }
      $2 = 5;
     }
    }
    if (!global$9 | !$8) {
     rlCheckRenderBatchLimit($2);
     if ((global$9 | 0) == 1) {
      break block6
     }
    }
   }
   if (!global$9) {
    $2 = HEAP32[14160];
    HEAPF32[HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 4 >> 2] + Math_imul(HEAP32[14167], 12) >> 2] = $0;
    $2 = HEAP32[14160];
    HEAPF32[(HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 4 >> 2] + Math_imul(HEAP32[14167], 12) | 0) + 4 >> 2] = $4;
    $2 = HEAP32[14160];
    HEAPF32[(HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 4 >> 2] + Math_imul(HEAP32[14167], 12) | 0) + 8 >> 2] = $5;
    $2 = HEAP32[14160];
    HEAPF32[HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 8 >> 2] + (HEAP32[14167] << 3) >> 2] = HEAPF32[14168];
    $2 = HEAP32[14160];
    HEAPF32[(HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 8 >> 2] + (HEAP32[14167] << 3) | 0) + 4 >> 2] = HEAPF32[14169];
    $2 = HEAP32[14160];
    HEAPF32[HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 12 >> 2] + Math_imul(HEAP32[14167], 12) >> 2] = HEAPF32[14170];
    $2 = HEAP32[14160];
    HEAPF32[(HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 12 >> 2] + Math_imul(HEAP32[14167], 12) | 0) + 4 >> 2] = HEAPF32[14171];
    $2 = HEAP32[14160];
    HEAPF32[(HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 12 >> 2] + Math_imul(HEAP32[14167], 12) | 0) + 8 >> 2] = HEAPF32[14172];
    $2 = HEAP32[14160];
    HEAP8[HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 16 >> 2] + (HEAP32[14167] << 2) | 0] = HEAPU8[56692];
    $2 = HEAP32[14160];
    HEAP8[(HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 16 >> 2] + (HEAP32[14167] << 2) | 0) + 1 | 0] = HEAPU8[56693];
    $2 = HEAP32[14160];
    HEAP8[(HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 16 >> 2] + (HEAP32[14167] << 2) | 0) + 2 | 0] = HEAPU8[56694];
    $2 = HEAP32[14160];
    HEAP8[(HEAP32[(Math_imul(HEAP32[$2 + 4 >> 2], 48) + HEAP32[$2 + 8 >> 2] | 0) + 16 >> 2] + (HEAP32[14167] << 2) | 0) + 3 | 0] = HEAPU8[56695];
    HEAP32[14167] = HEAP32[14167] + 1;
    $2 = HEAP32[14160];
    $2 = ((HEAP32[$2 + 16 >> 2] << 4) + HEAP32[$2 + 12 >> 2] | 0) - 12 | 0;
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAPF32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAPF32[$3 + 8 >> 2] = $4;
  HEAPF32[$3 + 12 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function rlTexCoord2f($0, $1) {
  HEAPF32[14169] = $1;
  HEAPF32[14168] = $0;
 }
 
 function rlNormal3f() {
  var $0 = Math_fround(0), $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0);
  if (HEAPU8[56896] != 1) {
   $0 = Math_fround(1.0)
  } else {
   $2 = Math_fround(Math_fround(HEAPF32[14214] * Math_fround(1.0)) + Math_fround(Math_fround(HEAPF32[14212] * Math_fround(0.0)) + Math_fround(HEAPF32[14213] * Math_fround(0.0))));
   $3 = Math_fround(Math_fround(HEAPF32[14210] * Math_fround(1.0)) + Math_fround(Math_fround(HEAPF32[14208] * Math_fround(0.0)) + Math_fround(HEAPF32[14209] * Math_fround(0.0))));
   $0 = Math_fround(Math_fround(HEAPF32[14218] * Math_fround(1.0)) + Math_fround(Math_fround(HEAPF32[14216] * Math_fround(0.0)) + Math_fround(HEAPF32[14217] * Math_fround(0.0))));
  }
  $1 = Math_fround(Math_fround($0 * $0) + Math_fround(Math_fround($3 * $3) + Math_fround($2 * $2)));
  if ($1 != Math_fround(0.0)) {
   $1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($1)));
   $0 = Math_fround($0 * $1);
   $3 = Math_fround($3 * $1);
   $2 = Math_fround($2 * $1);
  }
  HEAPF32[14172] = $0;
  HEAPF32[14171] = $2;
  HEAPF32[14170] = $3;
 }
 
 function rlColor4ub($0, $1, $2, $3) {
  HEAP8[56695] = $3;
  HEAP8[56694] = $2;
  HEAP8[56693] = $1;
  HEAP8[56692] = $0;
 }
 
 function rlSetTexture($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $3 = HEAP32[$2 + 12 >> 2];
   $5 = HEAP32[$2 + 16 >> 2];
   $6 = HEAP32[$2 + 20 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   $1 = global$9 ? $1 : !$0;
   block : {
    if ($1 | (global$9 | 0) == 2) {
     if (!global$9) {
      $0 = HEAP32[14160];
      $3 = Math_imul(HEAP32[$0 + 4 >> 2], 48);
      $2 = HEAP32[$3 + HEAP32[$0 + 8 >> 2] >> 2] << 2;
      $1 = ($2 | 0) > HEAP32[14167];
      if ($1) {
       break block
      }
     }
     if (!global$9 | !$7) {
      rlDrawRenderBatch($0);
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      return
     }
    }
    if (!global$9) {
     $1 = HEAP32[14160];
     $2 = HEAP32[$1 + 16 >> 2];
     $3 = HEAP32[$1 + 12 >> 2] + ($2 << 4) | 0;
     if (HEAP32[$3 - 4 >> 2] == ($0 | 0)) {
      break block
     }
     $5 = HEAP32[$3 - 12 >> 2];
     $6 = ($5 | 0) <= 0;
    }
    block2 : {
     if (!global$9) {
      if ($6) {
       break block2
      }
      $1 = 0;
      block4 : {
       block5 : {
        switch (HEAP32[$3 - 16 >> 2] - 1 | 0) {
        case 0:
         $1 = $5 & 3;
         break block4;
        case 3:
         break block5;
        default:
         break block4;
        };
       }
       $1 = $5 >>> 0 < 4 ? 1 : 4 - ($5 & 3) | 0;
      }
      HEAP32[$3 - 8 >> 2] = $1;
      $4 = HEAP32[14160];
      $2 = HEAP32[$4 + 12 >> 2];
      $1 = HEAP32[($2 + (HEAP32[$4 + 16 >> 2] << 4) | 0) - 8 >> 2];
     }
     if (!global$9 | ($7 | 0) == 1) {
      $4 = rlCheckRenderBatchLimit($1);
      $8 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $2 = $4;
     }
     if (!global$9) {
      $1 = HEAP32[14160];
      if ($2) {
       $2 = HEAP32[$1 + 16 >> 2];
       break block2;
      }
      $3 = HEAP32[(HEAP32[$1 + 12 >> 2] + (HEAP32[$1 + 16 >> 2] << 4) | 0) - 8 >> 2];
      HEAP32[14167] = $3 + HEAP32[14167];
      $2 = HEAP32[$1 + 16 >> 2] + 1 | 0;
      HEAP32[$1 + 16 >> 2] = $2;
     }
    }
    if ((global$9 | 0) == 2 | (global$9 ? $3 : ($2 | 0) >= 256)) {
     if (!global$9 | ($7 | 0) == 2) {
      rlDrawRenderBatch($1);
      $8 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = HEAP32[14160];
      $2 = HEAP32[$1 + 16 >> 2];
     }
    }
    if (!global$9) {
     HEAP32[(HEAP32[$1 + 12 >> 2] + ($2 << 4) | 0) - 4 >> 2] = $0;
     $0 = HEAP32[14160];
     HEAP32[((HEAP32[$0 + 16 >> 2] << 4) + HEAP32[$0 + 12 >> 2] | 0) - 12 >> 2] = 0;
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function rlLoadTexture($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 68;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $7 = HEAP32[$6 + 24 >> 2];
   $8 = HEAP32[$6 + 28 >> 2];
   $11 = HEAP32[$6 + 32 >> 2];
   $9 = HEAP32[$6 + 36 >> 2];
   $12 = HEAP32[$6 + 40 >> 2];
   $10 = HEAP32[$6 + 44 >> 2];
   $14 = HEAP32[$6 + 48 >> 2];
   $15 = HEAP32[$6 + 52 >> 2];
   $16 = HEAP32[$6 + 56 >> 2];
   $17 = HEAP32[$6 + 60 >> 2];
   $19 = HEAP32[$6 + 64 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = __stack_pointer - 48 | 0;
   __stack_pointer = $8;
   HEAP32[$8 + 44 >> 2] = 0;
   glBindTexture(3553, 0);
   $5 = $3 - 18 >>> 0 < 4294967292;
  }
  block1 : {
   block2 : {
    block : {
     if (!global$9) {
      if ($5) {
       break block
      }
      $5 = HEAP8[59315] & 1;
      if ($5) {
       break block
      }
     }
     if (!global$9 | !$13) {
      TraceLog(4, 8432, 0);
      $6 = 0;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      break block2
     }
    }
    $5 = global$9 ? $5 : ($3 | 0) != 18;
    block3 : {
     if (!global$9) {
      if ($5) {
       break block3
      }
      $5 = HEAP8[59316] & 1;
      if ($5) {
       break block3
      }
     }
     if (!global$9 | ($13 | 0) == 1) {
      TraceLog(4, 8627, 0);
      $6 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      break block2
     }
    }
    $5 = global$9 ? $5 : $3 - 21 >>> 0 < 4294967294;
    block4 : {
     if (!global$9) {
      if ($5) {
       break block4
      }
      $5 = HEAP8[59317] & 1;
      if ($5) {
       break block4
      }
     }
     if (!global$9 | ($13 | 0) == 2) {
      TraceLog(4, 8578, 0);
      $6 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      break block2
     }
    }
    $5 = global$9 ? $5 : $3 - 23 >>> 0 < 4294967294;
    block5 : {
     if (!global$9) {
      if ($5) {
       break block5
      }
      $5 = HEAP8[59318] & 1;
      if ($5) {
       break block5
      }
     }
     if (!global$9 | ($13 | 0) == 3) {
      TraceLog(4, 8480, 0);
      $6 = 3;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      break block2
     }
    }
    $5 = global$9 ? $5 : $3 - 25 >>> 0 < 4294967294;
    block6 : {
     if (!global$9) {
      if ($5) {
       break block6
      }
      $5 = HEAP8[59319] & 1;
      if ($5) {
       break block6
      }
     }
     if (!global$9 | ($13 | 0) == 4) {
      TraceLog(4, 8529, 0);
      $6 = 4;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      break block2
     }
    }
    if (!global$9) {
     glPixelStorei(3317, 1);
     glGenTextures(1, $8 + 44 | 0);
     glBindTexture(3553, HEAP32[$8 + 44 >> 2]);
     $5 = ($4 | 0) > 0;
    }
    if ((global$9 | 0) == 2 | $5) {
     if (!global$9) {
      $19 = ($3 | 0) > 13;
      $14 = $0;
      $11 = $2;
      $12 = $1;
     }
     while (1) {
      if (!global$9) {
       $18 = 0.0;
       $17 = ($12 | 0) > 3;
       $5 = $3 - 1 | 0;
       if ($5 >>> 0 <= 23) {
        $18 = HEAPF64[($5 << 3) + 14680 >> 3]
       }
       $18 = $18 * +($12 | 0) * +($11 | 0);
       block7 : {
        if (Math_abs($18) < 2147483648.0) {
         $5 = ~~$18;
         break block7;
        }
        $5 = -2147483648;
       }
       if (!(($11 | 0) > 3 | $17)) {
        $5 = ($3 & -2) == 14 ? 8 : ($3 & -8) == 16 ? 16 : $5
       }
       $17 = $5;
       $15 = __stack_pointer - 16 | 0;
       __stack_pointer = $15;
       $5 = $8 + 40 | 0;
       HEAP32[$5 >> 2] = 0;
       $7 = $8 + 36 | 0;
       HEAP32[$7 >> 2] = 0;
       $9 = $8 + 32 | 0;
       HEAP32[$9 >> 2] = 0;
       $10 = $3 - 1 | 0;
      }
      block34 : {
       if (!global$9) {
        block33 : {
         switch ($10 | 0) {
         case 0:
          HEAP32[$5 >> 2] = 6409;
          HEAP32[$7 >> 2] = 6409;
          HEAP32[$9 >> 2] = 5121;
          break block34;
         case 1:
          HEAP32[$5 >> 2] = 6410;
          HEAP32[$7 >> 2] = 6410;
          HEAP32[$9 >> 2] = 5121;
          break block34;
         case 2:
          HEAP32[$5 >> 2] = 6407;
          HEAP32[$7 >> 2] = 6407;
          HEAP32[$9 >> 2] = 33635;
          break block34;
         case 3:
          HEAP32[$5 >> 2] = 6407;
          HEAP32[$7 >> 2] = 6407;
          HEAP32[$9 >> 2] = 5121;
          break block34;
         case 4:
          HEAP32[$5 >> 2] = 6408;
          HEAP32[$7 >> 2] = 6408;
          HEAP32[$9 >> 2] = 32820;
          break block34;
         case 5:
          HEAP32[$5 >> 2] = 6408;
          HEAP32[$7 >> 2] = 6408;
          HEAP32[$9 >> 2] = 32819;
          break block34;
         case 6:
          HEAP32[$5 >> 2] = 6408;
          HEAP32[$7 >> 2] = 6408;
          HEAP32[$9 >> 2] = 5121;
          break block34;
         case 7:
          $10 = HEAPU8[59313] == 1;
          if ($10) {
           HEAP32[$5 >> 2] = 6409
          }
          HEAP32[$7 >> 2] = 6409;
          HEAP32[$9 >> 2] = 5126;
          break block34;
         case 8:
          $10 = HEAPU8[59313] == 1;
          if ($10) {
           HEAP32[$5 >> 2] = 6407
          }
          HEAP32[$7 >> 2] = 6407;
          HEAP32[$9 >> 2] = 5126;
          break block34;
         case 9:
          $10 = HEAPU8[59313] == 1;
          if ($10) {
           HEAP32[$5 >> 2] = 6408
          }
          HEAP32[$7 >> 2] = 6408;
          HEAP32[$9 >> 2] = 5126;
          break block34;
         case 10:
          $10 = HEAPU8[59314] == 1;
          if ($10) {
           HEAP32[$5 >> 2] = 6409
          }
          HEAP32[$7 >> 2] = 6409;
          HEAP32[$9 >> 2] = 36193;
          break block34;
         case 11:
          $10 = HEAPU8[59314] == 1;
          if ($10) {
           HEAP32[$5 >> 2] = 6407
          }
          HEAP32[$7 >> 2] = 6407;
          HEAP32[$9 >> 2] = 36193;
          break block34;
         case 12:
          $10 = HEAPU8[59314] == 1;
          if ($10) {
           HEAP32[$5 >> 2] = 6408
          }
          HEAP32[$7 >> 2] = 6408;
          HEAP32[$9 >> 2] = 36193;
          break block34;
         case 13:
          if (HEAPU8[59315] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 33776;
          break block34;
         case 14:
          if (HEAPU8[59315] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 33777;
          break block34;
         case 15:
          if (HEAPU8[59315] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 33778;
          break block34;
         case 16:
          if (HEAPU8[59315] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 33779;
          break block34;
         case 17:
          if (HEAPU8[59316] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 36196;
          break block34;
         case 18:
          if (HEAPU8[59317] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 37492;
          break block34;
         case 19:
          if (HEAPU8[59317] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 37496;
          break block34;
         case 20:
          if (HEAPU8[59318] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 35840;
          break block34;
         case 21:
          if (HEAPU8[59318] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 35842;
          break block34;
         case 22:
          if (HEAPU8[59319] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 37808;
          break block34;
         case 23:
          if (HEAPU8[59319] != 1) {
           break block34
          }
          HEAP32[$5 >> 2] = 37815;
          break block34;
         default:
          break block33;
         };
        }
        HEAP32[$15 >> 2] = $3;
       }
       if (!global$9 | ($13 | 0) == 5) {
        TraceLog(4, 12635, $15);
        $6 = 5;
        if ((global$9 | 0) == 1) {
         break block1
        }
       }
      }
      if (!global$9) {
       __stack_pointer = $15 + 16 | 0;
       $5 = HEAP32[$8 + 40 >> 2];
       $7 = !$5;
       block35 : {
        if ($7) {
         break block35
        }
        $7 = !$19;
        if ($7) {
         $7 = HEAP32[$8 + 36 >> 2];
         $9 = HEAP32[$8 + 32 >> 2];
         glTexImage2D(3553, $16 | 0, $5 | 0, $12 | 0, $11 | 0, 0, $7 | 0, $9 | 0, $14 | 0);
         break block35;
        }
        glCompressedTexImage2D(3553, $16 | 0, $5 | 0, $12 | 0, $11 | 0, 0, $17 | 0, $14 | 0);
       }
       $5 = ($11 | 0) / 2 | 0;
       $11 = ($5 | 0) <= 1 ? 1 : $5;
       $5 = ($12 | 0) / 2 | 0;
       $12 = ($5 | 0) <= 1 ? 1 : $5;
       $14 = ($0 ? $17 : 0) + $14 | 0;
       $16 = $16 + 1 | 0;
       $5 = ($16 | 0) != ($4 | 0);
       if ($5) {
        continue
       }
      }
      break;
     };
    }
    if (!global$9) {
     $11 = HEAPU8[59310] ? 10497 : 33071;
     glTexParameteri(3553, 10242, $11 | 0);
     glTexParameteri(3553, 10243, $11 | 0);
     glTexParameteri(3553, 10240, 9728);
     glTexParameteri(3553, 10241, 9728);
     glBindTexture(3553, 0);
     $11 = HEAP32[$8 + 44 >> 2];
    }
    if ((global$9 | 0) == 2 | $11) {
     if (!global$9) {
      HEAP32[$8 + 16 >> 2] = $4;
      $3 = $3 - 1 | 0;
      if ($3 >>> 0 <= 23) {
       $6 = HEAP32[($3 << 2) + 14872 >> 2]
      } else {
       $6 = 10622
      }
      HEAP32[$8 + 12 >> 2] = $6;
      HEAP32[$8 + 8 >> 2] = $2;
      HEAP32[$8 + 4 >> 2] = $1;
      HEAP32[$8 >> 2] = $11;
     }
     if (!global$9 | ($13 | 0) == 6) {
      TraceLog(3, 12083, $8);
      $6 = 6;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      break block2
     }
    }
    if (!global$9 | ($13 | 0) == 7) {
     TraceLog(4, 7730, 0);
     $6 = 7;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $8 + 48 | 0;
    return HEAP32[$8 + 44 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $8;
  HEAP32[$6 + 32 >> 2] = $11;
  HEAP32[$6 + 36 >> 2] = $9;
  HEAP32[$6 + 40 >> 2] = $12;
  HEAP32[$6 + 44 >> 2] = $10;
  HEAP32[$6 + 48 >> 2] = $14;
  HEAP32[$6 + 52 >> 2] = $15;
  HEAP32[$6 + 56 >> 2] = $16;
  HEAP32[$6 + 60 >> 2] = $17;
  HEAP32[$6 + 64 >> 2] = $19;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 68;
  return 0;
 }
 
 function rlCompileShader($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 80 | 0;
   __stack_pointer = $2;
   HEAP32[$2 + 76 >> 2] = $0;
   $0 = glCreateShader($1 | 0) | 0;
   glShaderSource($0 | 0, 1, $2 + 76 | 0, 0);
   HEAP32[$2 + 72 >> 2] = 0;
   glCompileShader($0 | 0);
   glGetShaderiv($0 | 0, 35713, $2 + 72 | 0);
   $3 = !HEAP32[$2 + 72 >> 2];
  }
  block3 : {
   block4 : {
    if ((global$9 | 0) == 2 | $3) {
     if (!global$9) {
      $3 = 8067;
      $1 = $1 - 35632 | 0;
     }
     block2 : {
      if (!global$9) {
       block1 : {
        switch ($1 | 0) {
        case 0:
         $3 = 8120;
         break;
        case 1:
         break block1;
        default:
         break block2;
        };
       }
       HEAP32[$2 + 16 >> 2] = $0;
       $1 = $2 + 16 | 0;
      }
      if (!global$9 | !$5) {
       TraceLog(4, $3, $1);
       if ((global$9 | 0) == 1) {
        break block3
       }
      }
     }
     if (!global$9) {
      HEAP32[$2 + 68 >> 2] = 0;
      glGetShaderiv($0 | 0, 35716, $2 + 68 | 0);
      $1 = HEAP32[$2 + 68 >> 2];
      $3 = ($1 | 0) > 0;
     }
     if ((global$9 | 0) == 2 | $3) {
      if (!global$9) {
       HEAP32[$2 + 64 >> 2] = 0;
       $7 = $2 - -64 | 0;
      }
      if (!global$9 | ($5 | 0) == 1) {
       $4 = emscripten_builtin_calloc($1, 1);
       $6 = 1;
       if ((global$9 | 0) == 1) {
        break block3
       }
       $3 = $4;
      }
      if (!global$9) {
       glGetShaderInfoLog($0 | 0, $1 | 0, $7 | 0, $3 | 0);
       HEAP32[$2 + 4 >> 2] = $3;
       HEAP32[$2 >> 2] = $0;
      }
      if (!global$9 | ($5 | 0) == 2) {
       TraceLog(4, 3967, $2);
       $6 = 2;
       if ((global$9 | 0) == 1) {
        break block3
       }
      }
      if (!global$9 | ($5 | 0) == 3) {
       emscripten_builtin_free($3);
       $6 = 3;
       if ((global$9 | 0) == 1) {
        break block3
       }
      }
     }
     if (!global$9) {
      $0 = 0;
      break block4;
     }
    }
    $1 = global$9 ? $1 : $1 - 35632 | 0;
    block5 : {
     if (!global$9) {
      block6 : {
       switch ($1 | 0) {
       case 0:
        break block5;
       case 1:
        break block6;
       default:
        break block4;
       };
      }
      HEAP32[$2 + 32 >> 2] = $0;
      $1 = $2 + 32 | 0;
     }
     if (!global$9 | ($5 | 0) == 4) {
      TraceLog(3, 1457, $1);
      $6 = 4;
      if ((global$9 | 0) == 1) {
       break block3
      }
     }
     if (!global$9) {
      break block4
     }
    }
    if (!global$9) {
     HEAP32[$2 + 48 >> 2] = $0;
     $1 = $2 + 48 | 0;
    }
    if (!global$9 | ($5 | 0) == 5) {
     TraceLog(3, 1509, $1);
     $6 = 5;
     if ((global$9 | 0) == 1) {
      break block3
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $2 + 80 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function rlReadScreenPixels($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = $0 << 2;
   $3 = Math_imul($4, $1);
  }
  block : {
   if (!global$9 | !$8) {
    $2 = emscripten_builtin_calloc($3, 1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $5 = $2;
   }
   if (!global$9) {
    glReadPixels(0, 0, $0 | 0, $1 | 0, 6408, 5121, $5 | 0)
   }
   if (!global$9 | ($8 | 0) == 1) {
    $2 = emscripten_builtin_malloc($3);
    $7 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $2;
   }
   if (!global$9 & ($1 | 0) > 0) {
    $7 = ($4 | 0) <= 1 ? 1 : $4;
    $9 = $1 - 1 | 0;
    $2 = $9;
    while (1) {
     if (($0 | 0) > 0) {
      $10 = Math_imul($2, $4) + $5 | 0;
      $11 = Math_imul($9 - $2 | 0, $4) + $6 | 0;
      $1 = 0;
      while (1) {
       $3 = $1 + 1 | 0;
       HEAP8[$1 + $11 | 0] = $3 & 3 ? HEAPU8[$1 + $10 | 0] : -1;
       $1 = $3;
       if (($7 | 0) != ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $1 = ($2 | 0) > 0;
     $2 = $2 - 1 | 0;
     if ($1) {
      continue
     }
     break;
    };
   }
   if (!global$9 | ($8 | 0) == 2) {
    emscripten_builtin_free($5);
    $7 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $6
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $5;
  HEAP32[$2 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function ProcessGestureEvent($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0.0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
  $5 = global$9;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[12917] = $2;
  block2 : {
   block1 : {
    switch ($2 - 1 | 0) {
    case 0:
     block5 : {
      switch (HEAP32[$0 >> 2]) {
      case 1:
       $2 = HEAP32[12936];
       HEAP32[12936] = $2 + 1;
       block7 : {
        block6 : {
         if (HEAP32[12914] | ($2 | 0) <= 0) {
          break block6
         }
         $3 = +glfwGetTime();
         if ((global$9 | 0) != ($5 | 0)) {
          wasm2js_trap()
         }
         if (!($3 - HEAPF64[6459] < .30000001192092896)) {
          break block6
         }
         $1 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[12922]);
         $4 = Math_fround($1 * $1);
         $1 = Math_fround(HEAPF32[$0 + 44 >> 2] - HEAPF32[12923]);
         if (!(Math_fround(Math_sqrt(Math_fround($4 + Math_fround($1 * $1)))) < Math_fround(.029999999329447746))) {
          break block6
         }
         HEAP32[12914] = 2;
         HEAP32[12936] = 0;
         break block7;
        }
        HEAP32[12914] = 1;
        HEAP32[12936] = 1;
       }
       $8 = HEAP32[$0 + 44 >> 2];
       $0 = HEAP32[$0 + 40 >> 2];
       HEAP32[12926] = $0;
       HEAP32[12927] = $8;
       HEAP32[12922] = $0;
       HEAP32[12923] = $8;
       HEAP32[12920] = $0;
       HEAP32[12921] = $8;
       $3 = +glfwGetTime();
       if ((global$9 | 0) != ($5 | 0)) {
        wasm2js_trap()
       }
       HEAPF64[6459] = $3;
       $3 = +glfwGetTime();
       if ((global$9 | 0) != ($5 | 0)) {
        wasm2js_trap()
       }
       HEAP32[12942] = 0;
       HEAP32[12943] = 0;
       HEAPF64[6474] = $3;
       return;
      case 0:
       block10 : {
        block8 : {
         switch (HEAP32[12914] - 4 | 0) {
         default:
          $1 = HEAPF32[12920];
          $4 = HEAPF32[12921];
          break block10;
         case 0:
         case 4:
          break block8;
         };
        }
        $1 = HEAPF32[$0 + 40 >> 2];
        $2 = HEAP32[$0 + 40 >> 2];
        $4 = HEAPF32[$0 + 44 >> 2];
        $0 = HEAP32[$0 + 44 >> 2];
        HEAP32[12920] = $2;
        HEAP32[12921] = $0;
       }
       $0 = 0;
       $1 = Math_fround($1 - HEAPF32[12922]);
       $6 = Math_fround($1 * $1);
       $1 = Math_fround($4 - HEAPF32[12923]);
       $1 = Math_fround(Math_sqrt(Math_fround($6 + Math_fround($1 * $1))));
       HEAPF32[12945] = $1;
       $3 = +glfwGetTime();
       if ((global$9 | 0) != ($5 | 0)) {
        wasm2js_trap()
       }
       $1 = Math_fround($1 / Math_fround($3 - HEAPF64[6474]));
       HEAPF32[12946] = $1;
       block12 : {
        if (!(!($1 > Math_fround(.20000000298023224)) | HEAP32[12914] == 8)) {
         $1 = atan2f(Math_fround(HEAPF32[12921] - HEAPF32[12923]), Math_fround(HEAPF32[12920] - HEAPF32[12922]));
         if ((global$9 | 0) != ($5 | 0)) {
          wasm2js_trap()
         }
         $1 = Math_fround($1 * Math_fround(57.2957763671875));
         $1 = Math_fround(Math_fround(360.0) - ($1 < Math_fround(0.0) ? Math_fround($1 + Math_fround(360.0)) : $1));
         HEAPF32[12944] = $1;
         $0 = 16;
         if ($1 < Math_fround(30.0) | $1 > Math_fround(330.0)) {
          break block12
         }
         if (!(!($1 >= Math_fround(30.0)) | !($1 <= Math_fround(150.0)))) {
          $0 = 64;
          break block12;
         }
         if (!(!($1 > Math_fround(150.0)) | !($1 < Math_fround(210.0)))) {
          $0 = 32;
          break block12;
         }
         $0 = $1 >= Math_fround(210.0) ? ($1 <= Math_fround(330.0)) << 7 : 0;
         break block12;
        }
        HEAP32[12944] = 0;
        HEAP32[12945] = 0;
        HEAP32[12946] = 0;
       }
       HEAP32[12926] = 0;
       HEAP32[12927] = 0;
       HEAP32[12914] = $0;
       HEAP32[12917] = 0;
       return;
      case 2:
       break block5;
      default:
       break block2;
      };
     }
     $2 = HEAP32[$0 + 40 >> 2];
     $0 = HEAP32[$0 + 44 >> 2];
     HEAP32[12928] = $2;
     HEAP32[12929] = $0;
     block15 : {
      if (HEAP32[12914] != 4) {
       break block15
      }
      if (HEAPU8[51752] == 1) {
       HEAP32[12922] = $2;
       HEAP32[12923] = $0;
      }
      HEAP8[51752] = 0;
      $3 = +glfwGetTime();
      if ((global$9 | 0) != ($5 | 0)) {
       wasm2js_trap()
      }
      if (!($3 - HEAPF64[6459] > .30000001192092896)) {
       break block15
      }
      $3 = +glfwGetTime();
      if ((global$9 | 0) != ($5 | 0)) {
       wasm2js_trap()
      }
      HEAP32[12914] = 8;
      HEAPF64[6459] = $3;
     }
     HEAPF32[12942] = HEAPF32[12928] - HEAPF32[12926];
     HEAPF32[12943] = HEAPF32[12929] - HEAPF32[12927];
     return;
    case 1:
     break block1;
    default:
     break block2;
    };
   }
   block16 : {
    switch (HEAP32[$0 >> 2]) {
    case 1:
     $4 = HEAPF32[$0 + 44 >> 2];
     $2 = HEAP32[$0 + 44 >> 2];
     $1 = HEAPF32[$0 + 40 >> 2];
     $8 = HEAP32[$0 + 40 >> 2];
     HEAP32[12922] = $8;
     HEAP32[12923] = $2;
     $7 = HEAPF32[$0 + 48 >> 2];
     $12 = HEAP32[$0 + 48 >> 2];
     $6 = HEAPF32[$0 + 52 >> 2];
     $0 = HEAP32[$0 + 52 >> 2];
     HEAP32[12934] = $12;
     HEAP32[12935] = $0;
     HEAP32[12932] = $8;
     HEAP32[12933] = $2;
     HEAP32[12924] = $12;
     HEAP32[12925] = $0;
     HEAP32[12914] = 4;
     HEAPF32[12950] = $7 - $1;
     HEAPF32[12951] = $6 - $4;
     $3 = +glfwGetTime();
     if ((global$9 | 0) != ($5 | 0)) {
      wasm2js_trap()
     }
     HEAPF64[6470] = $3;
     return;
    case 2:
     $1 = Math_fround(HEAPF32[12930] - HEAPF32[12928]);
     $4 = Math_fround($1 * $1);
     $1 = Math_fround(HEAPF32[12931] - HEAPF32[12929]);
     HEAPF32[12953] = Math_sqrt(Math_fround($4 + Math_fround($1 * $1)));
     $9 = HEAPF32[$0 + 44 >> 2];
     $8 = HEAP32[$0 + 44 >> 2];
     $1 = HEAPF32[$0 + 40 >> 2];
     HEAP32[12928] = HEAP32[$0 + 40 >> 2];
     HEAP32[12929] = $8;
     $13 = HEAPF32[$0 + 52 >> 2];
     $2 = HEAP32[$0 + 52 >> 2];
     $7 = HEAPF32[$0 + 48 >> 2];
     $0 = HEAP32[$0 + 48 >> 2];
     HEAP32[12930] = $0;
     HEAP32[12931] = $2;
     $10 = Math_fround($7 - $1);
     HEAPF32[12950] = $10;
     $6 = $9;
     $4 = Math_fround($13 - $6);
     HEAPF32[12951] = $4;
     $14 = HEAPF32[12935];
     $15 = HEAPF32[12934];
     block20 : {
      block19 : {
       $6 = $1;
       $1 = HEAPF32[12932];
       $11 = Math_fround($6 - $1);
       $16 = Math_fround($11 * $11);
       $6 = HEAPF32[12933];
       $11 = Math_fround($9 - $6);
       if (!(Math_fround(Math_sqrt(Math_fround($16 + Math_fround($11 * $11)))) >= Math_fround(.004999999888241291))) {
        $7 = Math_fround($7 - $15);
        $9 = Math_fround($7 * $7);
        $7 = Math_fround($13 - $14);
        if (!(Math_fround(Math_sqrt(Math_fround($9 + Math_fround($7 * $7)))) >= Math_fround(.004999999888241291))) {
         break block19
        }
       }
       $1 = Math_fround($15 - $1);
       $9 = Math_fround($1 * $1);
       $1 = Math_fround($14 - $6);
       if (Math_fround(Math_sqrt(Math_fround($9 + Math_fround($1 * $1)))) > Math_fround(Math_sqrt(Math_fround(Math_fround($10 * $10) + Math_fround($4 * $4))))) {
        HEAP32[12914] = 256;
        break block20;
       }
       HEAP32[12914] = 512;
       break block20;
      }
      HEAP32[12914] = 4;
      $3 = +glfwGetTime();
      if ((global$9 | 0) != ($5 | 0)) {
       wasm2js_trap()
      }
      HEAPF64[6470] = $3;
      $10 = Math_fround(HEAPF32[12930] - HEAPF32[12928]);
      $4 = Math_fround(HEAPF32[12931] - HEAPF32[12929]);
     }
     $1 = atan2f($4, $10);
     if ((global$9 | 0) != ($5 | 0)) {
      wasm2js_trap()
     }
     $1 = Math_fround($1 * Math_fround(57.2957763671875));
     HEAPF32[12952] = Math_fround(360.0) - ($1 < Math_fround(0.0) ? Math_fround($1 + Math_fround(360.0)) : $1);
     return;
    case 0:
     break block16;
    default:
     break block2;
    };
   }
   HEAP32[12950] = 0;
   HEAP32[12951] = 0;
   HEAP32[12952] = 0;
   HEAP32[12953] = 0;
   HEAP32[12914] = 0;
   HEAP32[12917] = 0;
  }
 }
 
 function msf_free_gif_state() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $0 = global$9 ? $0 : HEAP32[15541];
   if (!global$9 | !$3 ? $0 | (global$9 | 0) == 2 : 0) {
    emscripten_builtin_free($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : HEAP32[15547];
   if (!global$9 | ($3 | 0) == 1 ? $0 | (global$9 | 0) == 2 : 0) {
    emscripten_builtin_free($0);
    $2 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : HEAP32[15553];
   if (!global$9 | ($3 | 0) == 2 ? $0 | (global$9 | 0) == 2 : 0) {
    emscripten_builtin_free($0);
    $2 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : HEAP32[15554];
   if ($0 | (global$9 | 0) == 2) {
    while (1) {
     $1 = global$9 ? $1 : HEAP32[$0 >> 2];
     if (!global$9 | ($3 | 0) == 3) {
      emscripten_builtin_free($0);
      $2 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $0 = $1;
      if ($0) {
       continue
      }
     }
     break;
    }
   }
   if (!global$9) {
    HEAP32[15554] = 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function msf_gif_end($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = global$9 ? $2 : HEAP32[15554];
   if ($2 | (global$9 | 0) == 2) {
    if (!global$9) {
     $3 = 1;
     $1 = $2;
     while (1) {
      $4 = HEAP32[$1 + 4 >> 2];
      $3 = $3 + $4 | 0;
      $1 = HEAP32[$1 >> 2];
      if ($1) {
       continue
      }
      break;
     };
    }
    if (!global$9 | !$5) {
     $1 = emscripten_builtin_malloc($3);
     if ((global$9 | 0) == 1) {
      break block
     }
     $4 = $1;
    }
    if (!($4 ? global$9 : 1)) {
     $1 = $4;
     while (1) {
      $1 = __memcpy($1, $2 + 8 | 0, HEAP32[$2 + 4 >> 2]) + HEAP32[$2 + 4 >> 2] | 0;
      $2 = HEAP32[$2 >> 2];
      if ($2) {
       continue
      }
      break;
     };
     HEAP8[$1 | 0] = 59;
    }
    if (!global$9 | ($5 | 0) == 1) {
     msf_free_gif_state();
     $6 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAP32[$0 + 8 >> 2] = $3;
     HEAP32[$0 + 4 >> 2] = $3;
     HEAP32[$0 >> 2] = $4;
     HEAP32[$0 + 12 >> 2] = HEAP32[15558];
     return;
    }
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function EmscriptenResizeCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $4 = global$9;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 1;
  block : {
   if (!(HEAPU8[59372] & 4)) {
    break block
   }
   HEAP8[$2 + 15 | 0] = 0;
   $0 = emscripten_asm_const_int(54408, $2 + 15 | 0, 0) | 0;
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
   HEAP8[$2 + 14 | 0] = 0;
   $3 = emscripten_asm_const_int(54434, $2 + 14 | 0, 0) | 0;
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
   $1 = HEAP32[14862];
   if (($0 | 0) >= ($1 | 0)) {
    $1 = HEAP32[14864];
    $1 = $1 ? (($0 | 0) < ($1 | 0) ? $0 : $1) : $0;
   }
   $0 = HEAP32[14863];
   if (($3 | 0) >= ($0 | 0)) {
    $0 = HEAP32[14865];
    $0 = $0 ? (($0 | 0) > ($3 | 0) ? $3 : $0) : $3;
   }
   emscripten_set_canvas_element_size(3869, $1 | 0, $0 | 0) | 0;
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
   SetupViewport($1, $0);
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
   HEAP32[14857] = $0;
   HEAP32[14856] = $1;
   HEAP8[59379] = 1;
   $3 = 1;
   if (HEAPU8[59377]) {
    break block
   }
   HEAP32[14853] = $0;
   HEAP32[14852] = $1;
   $3 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function SetupViewport($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = Math_fround(0), $6 = Math_fround(0);
  $2 = global$9;
  HEAP32[14859] = $1;
  HEAP32[14858] = $0;
  glViewport(HEAP32[14860] / 2 | 0, HEAP32[14861] / 2 | 0, $0 | 0, $1 | 0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  HEAP32[14193] = 0;
  HEAP32[14194] = 0;
  HEAP32[14192] = 1065353216;
  HEAP32[14174] = 5889;
  HEAP32[14175] = 56768;
  HEAP32[14195] = 0;
  HEAP32[14196] = 0;
  HEAP32[14198] = 0;
  HEAP32[14199] = 0;
  HEAP32[14197] = 1065353216;
  HEAP32[14200] = 0;
  HEAP32[14201] = 0;
  HEAP32[14203] = 0;
  HEAP32[14204] = 0;
  HEAP32[14202] = 1065353216;
  HEAP32[14205] = 0;
  HEAP32[14206] = 0;
  HEAP32[14207] = 1065353216;
  $3 = +HEAPU32[14858];
  $4 = +HEAPU32[14859];
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAP32[$0 + 240 >> 2] = 0;
  HEAP32[$0 + 244 >> 2] = 0;
  HEAP32[$0 + 224 >> 2] = 0;
  HEAP32[$0 + 228 >> 2] = 0;
  HEAP32[$0 + 216 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP32[$0 + 200 >> 2] = 0;
  HEAP32[$0 + 248 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 1065353216;
  $5 = Math_fround($3 + -0.0);
  HEAPF32[$0 + 192 >> 2] = Math_fround(2.0) / $5;
  $6 = Math_fround(0.0 - $4);
  HEAPF32[$0 + 212 >> 2] = Math_fround(2.0) / $6;
  HEAPF32[$0 + 232 >> 2] = -2;
  HEAPF32[$0 + 236 >> 2] = -1;
  HEAPF32[$0 + 220 >> 2] = Math_fround(-Math_fround(Math_fround($4) + Math_fround(0.0))) / $6;
  HEAPF32[$0 + 204 >> 2] = Math_fround(-Math_fround(Math_fround($3) + Math_fround(0.0))) / $5;
  $1 = HEAP32[14175];
  __memcpy($0 - -64 | 0, $1, 64);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  $0 = __memcpy($0, $0 + 192 | 0, 64);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  rlMatrixMultiply($0 + 128 | 0, $0 - -64 | 0, $0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  __memcpy($1, $0 + 128 | 0, 64);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $0 + 256 | 0;
  HEAP32[14177] = 0;
  HEAP32[14178] = 0;
  HEAP32[14176] = 1065353216;
  HEAP32[14174] = 5888;
  HEAP32[14175] = 56704;
  HEAP32[14179] = 0;
  HEAP32[14180] = 0;
  HEAP32[14182] = 0;
  HEAP32[14183] = 0;
  HEAP32[14181] = 1065353216;
  HEAP32[14184] = 0;
  HEAP32[14185] = 0;
  HEAP32[14187] = 0;
  HEAP32[14188] = 0;
  HEAP32[14186] = 1065353216;
  HEAP32[14189] = 0;
  HEAP32[14190] = 0;
  HEAP32[14191] = 1065353216;
 }
 
 function ErrorCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   HEAP32[$2 + 4 >> 2] = $1;
   HEAP32[$2 >> 2] = $0;
  }
  block : {
   if (!global$9 | !$3) {
    TraceLog(4, 4020, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $2 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function WindowSizeCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $2 = HEAP32[global$10 >> 2];
   $1 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   SetupViewport($1, $2);
   HEAP32[14857] = $2;
   HEAP32[14856] = $1;
   HEAP8[59379] = 1;
   $0 = !HEAPU8[59377];
  }
  block : {
   if ((global$9 | 0) == 2 | $0) {
    if (!global$9) {
     $0 = HEAPU8[59373] & 32
    }
    block2 : {
     if ((global$9 | 0) == 2 | $0) {
      if (!global$9 | !$4) {
       TraceLog(4, 5176, 0);
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $3 = Math_fround($1 | 0);
       block1 : {
        if ($3 < Math_fround(4294967296.0) & $3 >= Math_fround(0.0)) {
         $0 = ~~$3 >>> 0;
         break block1;
        }
        $0 = 0;
       }
       HEAP32[14852] = $0;
       $3 = Math_fround($2 | 0);
       if ($3 < Math_fround(4294967296.0) & $3 >= Math_fround(0.0)) {
        $2 = ~~$3 >>> 0;
        break block2;
       }
       $2 = 0;
       break block2;
      }
     }
     if (!global$9) {
      HEAP32[14852] = $1
     }
    }
    if (!global$9) {
     HEAP32[14853] = $2
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $0 = HEAP32[global$10 >> 2];
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function WindowIconifyCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[14843] = HEAP32[14843] & -513 | (($1 | 0) != 0) << 9;
 }
 
 function WindowFocusCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[14843] = HEAP32[14843] & -2049 | !$1 << 11;
 }
 
 function WindowDropCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $0 = global$9 ? $0 : ($1 | 0) > 0;
   if ($0 | (global$9 | 0) == 2) {
    if (!global$9) {
     $3 = HEAP32[14883];
     $0 = 0;
    }
    if ((global$9 | 0) == 2 | $3) {
     while (1) {
      $3 = global$9 ? $3 : HEAP32[HEAP32[14882] + ($0 << 2) >> 2];
      if (!global$9 | !$5) {
       emscripten_builtin_free($3);
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = $0 + 1 | 0;
       $3 = $0 >>> 0 < HEAPU32[14883];
       if ($3) {
        continue
       }
      }
      break;
     };
     $0 = global$9 ? $0 : HEAP32[14882];
     if (!global$9 | ($5 | 0) == 1) {
      emscripten_builtin_free($0);
      $6 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     HEAP32[14883] = $1
    }
    if (!global$9 | ($5 | 0) == 2) {
     $4 = emscripten_builtin_calloc($1, 4);
     $6 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     HEAP32[14882] = $0;
     $0 = 0;
    }
    while (1) {
     if (!global$9 | ($5 | 0) == 3) {
      $4 = emscripten_builtin_calloc(4096, 1);
      $6 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $4;
     }
     if (!global$9) {
      $1 = $0 << 2;
      HEAP32[$1 + HEAP32[14882] >> 2] = $3;
      $3 = HEAP32[HEAP32[14882] + $1 >> 2];
      strcpy($3, HEAP32[$1 + $2 >> 2]);
      $0 = $0 + 1 | 0;
      if ($0 >>> 0 < HEAPU32[14883]) {
       continue
      }
     }
     break;
    };
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function WindowContentScaleCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  HEAP32[14867] = 0;
  HEAP32[14868] = 0;
  HEAPF32[14866] = $1;
  HEAP32[14869] = 0;
  HEAP32[14870] = 0;
  HEAP32[14872] = 0;
  HEAP32[14873] = 0;
  HEAPF32[14871] = $2;
  HEAP32[14874] = 0;
  HEAP32[14875] = 0;
  HEAP32[14877] = 0;
  HEAP32[14878] = 0;
  HEAP32[14876] = 1065353216;
  HEAP32[14879] = 0;
  HEAP32[14880] = 0;
  HEAP32[14881] = 1065353216;
 }
 
 function KeyCallback($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $0 = global$9;
  block : {
   if (($1 | 0) < 0) {
    break block
   }
   block2 : {
    switch ($3 | 0) {
    case 0:
     HEAP8[$1 + 59544 | 0] = 0;
     return;
    case 2:
     HEAP8[$1 + 60568 | 0] = 1;
     return;
    case 1:
     break block2;
    default:
     break block;
    };
   }
   HEAP8[$1 + 59544 | 0] = 1;
   $2 = HEAP32[15286];
   if (($2 | 0) <= 15) {
    HEAP32[($2 << 2) + 61080 >> 2] = $1;
    HEAP32[15286] = HEAP32[15286] + 1;
   }
   if (HEAP32[14885] != ($1 | 0)) {
    break block
   }
   glfwSetWindowShouldClose(HEAP32[16589], 1);
   if ((global$9 | 0) != ($0 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function CharCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[15303];
  if (($0 | 0) <= 15) {
   HEAP32[($0 << 2) + 61148 >> 2] = $1;
   HEAP32[15303] = HEAP32[15303] + 1;
  }
 }
 
 function MouseButtonCallback($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0);
  $3 = global$9;
  $0 = __stack_pointer - 208 | 0;
  __stack_pointer = $0;
  HEAP8[$1 + 61254 | 0] = $2;
  HEAP8[$1 + 61388 | 0] = $2;
  __memset($0 + 104 | 0, 0, 104);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  if (!(HEAPU8[$1 + 61262 | 0] | ($2 & 255) != 1)) {
   HEAP32[$0 + 104 >> 2] = 1
  }
  HEAP32[$0 + 108 >> 2] = 1;
  HEAP32[$0 + 112 >> 2] = 0;
  $4 = Math_fround(Math_fround(HEAPF32[15308] + HEAPF32[15304]) * HEAPF32[15306]);
  HEAPF32[$0 + 144 >> 2] = $4 / Math_fround(HEAP32[14852]);
  $5 = Math_fround(Math_fround(HEAPF32[15309] + HEAPF32[15305]) * HEAPF32[15307]);
  HEAPF32[$0 + 148 >> 2] = $5 / Math_fround(HEAP32[14853]);
  if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
   $1 = ~~$4
  } else {
   $1 = -2147483648
  }
  if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
   $2 = ~~$5
  } else {
   $2 = -2147483648
  }
  if ($2 | $1) {
   $1 = __memcpy($0, $0 + 104 | 0, 104);
   if ((global$9 | 0) != ($3 | 0)) {
    wasm2js_trap()
   }
   ProcessGestureEvent($1);
   if ((global$9 | 0) != ($3 | 0)) {
    wasm2js_trap()
   }
  }
  __stack_pointer = $0 + 208 | 0;
 }
 
 function MouseCursorPosCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 208 | 0;
  __stack_pointer = $3;
  block : {
   if (HEAPU8[61252] == 1) {
    $0 = HEAP32[15331];
    $5 = HEAP32[15332];
    break block;
   }
   HEAPF32[15309] = $2;
   HEAPF32[15308] = $1;
   $5 = HEAP32[15309];
   $0 = HEAP32[15308];
   HEAP32[15331] = $0;
   HEAP32[15332] = $5;
  }
  __memset($3 + 116 | 0, 0, 92);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$3 + 112 >> 2] = 0;
  HEAP32[$3 + 104 >> 2] = 2;
  HEAP32[$3 + 108 >> 2] = 1;
  HEAPF32[$3 + 144 >> 2] = (wasm2js_scratch_store_i32(2, $0), wasm2js_scratch_load_f32()) / Math_fround(HEAP32[14852]);
  HEAPF32[$3 + 148 >> 2] = (wasm2js_scratch_store_i32(2, $5), wasm2js_scratch_load_f32()) / Math_fround(HEAP32[14853]);
  $0 = __memcpy($3, $3 + 104 | 0, 104);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  ProcessGestureEvent($0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $0 + 208 | 0;
 }
 
 function MouseScrollCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  HEAPF32[15319] = $2;
  HEAPF32[15318] = $1;
 }
 
 function CursorEnterCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[61253] = ($1 | 0) != 0;
 }
 
 function EmscriptenFullscreenChangeCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $1 = global$9;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (HEAPU8[66360]) {
    HEAP8[66360] = 0;
    break block;
   }
   HEAP32[$0 >> 2] = 0;
   HEAP8[$0 + 14 | 0] = 105;
   HEAP8[$0 + 15 | 0] = 0;
   $2 = emscripten_asm_const_int(54362, $0 + 14 | 0, $0 | 0) | 0;
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
   if ($2) {
    break block
   }
   HEAP32[14843] = HEAP32[14843] & -32771;
   HEAP8[59377] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
  return 1;
 }
 
 function EmscriptenMouseCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return 1;
 }
 
 function EmscriptenPointerlockCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2 = global$9;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 >> 2] = 0;
  HEAP8[$0 + 14 | 0] = 105;
  HEAP8[$0 + 15 | 0] = 0;
  $1 = emscripten_asm_const_int(54461, $0 + 14 | 0, $0 | 0) | 0;
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  HEAP8[61252] = ($1 | 0) != 0;
  if ($1) {
   $1 = HEAP32[15309];
   $2 = HEAP32[15308];
   HEAP32[15536] = $2;
   HEAP32[15537] = $1;
   HEAP32[15310] = $2;
   HEAP32[15311] = $1;
  }
  __stack_pointer = $0 + 16 | 0;
  return 1;
 }
 
 function EmscriptenMouseMoveCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (HEAPU8[61252] == 1) {
   HEAPF32[15310] = HEAPF32[15536] - Math_fround(HEAP32[$1 + 32 >> 2]);
   HEAPF32[15311] = HEAPF32[15537] - Math_fround(HEAP32[$1 + 36 >> 2]);
  }
  return 1;
 }
 
 function EmscriptenTouchCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0);
  $7 = global$9;
  $3 = __stack_pointer - 224 | 0;
  __stack_pointer = $3;
  HEAP32[15322] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 216 >> 2] = 0;
  HEAP32[$3 + 220 >> 2] = 0;
  HEAP32[$3 + 208 >> 2] = 0;
  HEAP32[$3 + 212 >> 2] = 0;
  emscripten_get_element_css_size(3869, $3 + 216 | 0, $3 + 208 | 0) | 0;
  if ((global$9 | 0) != ($7 | 0)) {
   wasm2js_trap()
  }
  $6 = 1;
  $4 = HEAP32[15322];
  block : {
   if (($4 | 0) <= 0) {
    break block
   }
   $2 = $4 - 1 | 0;
   $8 = $2 >>> 0 >= 7 ? 7 : $2;
   $5 = $1 + 16 | 0;
   $9 = Math_fround(Math_fround(HEAP32[14853]) / Math_fround(HEAPF64[$3 + 208 >> 3]));
   $10 = Math_fround(Math_fround(HEAP32[14852]) / Math_fround(HEAPF64[$3 + 216 >> 3]));
   $12 = $0 - 22 | 0;
   $1 = 0;
   while (1) {
    $2 = $5 + Math_imul($1, 48) | 0;
    HEAP32[($1 << 2) + 61292 >> 2] = HEAP32[$2 >> 2];
    $13 = HEAP32[$2 + 32 >> 2];
    $11 = $1 << 3;
    HEAPF32[$11 + 61328 >> 2] = $9 * Math_fround(HEAP32[$2 + 36 >> 2]);
    HEAPF32[$11 + 61324 >> 2] = $10 * Math_fround($13 | 0);
    $2 = 1;
    block3 : {
     switch ($12 | 0) {
     case 1:
      $2 = 0;
     case 0:
      HEAP8[$1 + 61388 | 0] = $2;
      break;
     default:
      break block3;
     };
    }
    $2 = ($1 | 0) == ($8 | 0);
    $1 = $1 + 1 | 0;
    if (!$2) {
     continue
    }
    break;
   };
   if (($4 | 0) != 1) {
    break block
   }
   $1 = HEAP32[15332];
   HEAP32[15308] = HEAP32[15331];
   HEAP32[15309] = $1;
  }
  __memset($3 + 104 | 0, 0, 104);
  if ((global$9 | 0) != ($7 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$3 + 108 >> 2] = $4;
  block5 : {
   block4 : {
    block7 : {
     switch ($0 - 22 | 0) {
     case 2:
      $6 = 2;
      break block4;
     case 0:
      break block4;
     case 3:
      break block7;
     default:
      break block5;
     };
    }
    $6 = 3;
   }
   HEAP32[$3 + 104 >> 2] = $6;
  }
  if (($4 | 0) > 0) {
   $1 = $4 - 1 | 0;
   $4 = $1 >>> 0 >= 7 ? 7 : $1;
   $6 = $3 + 144 | 0;
   $8 = $3 + 112 | 0;
   $1 = 0;
   $9 = Math_fround(HEAP32[14853]);
   $10 = Math_fround(HEAP32[14852]);
   while (1) {
    $2 = $1 << 2;
    HEAP32[$2 + $8 >> 2] = HEAP32[$2 + 61292 >> 2];
    $5 = $1 << 3;
    $2 = $5 + $6 | 0;
    $5 = $5 + 61324 | 0;
    $14 = HEAPF32[$5 + 4 >> 2];
    HEAPF32[$2 >> 2] = HEAPF32[$5 >> 2] / $10;
    HEAPF32[$2 + 4 >> 2] = $14 / $9;
    $2 = ($1 | 0) == ($4 | 0);
    $1 = $1 + 1 | 0;
    if (!$2) {
     continue
    }
    break;
   };
  }
  $1 = __memcpy($3, $3 + 104 | 0, 104);
  if ((global$9 | 0) != ($7 | 0)) {
   wasm2js_trap()
  }
  ProcessGestureEvent($1);
  if ((global$9 | 0) != ($7 | 0)) {
   wasm2js_trap()
  }
  if (($0 | 0) == 23) {
   $0 = HEAP32[15322];
   HEAP32[15322] = (($0 | 0) <= 1 ? 1 : $0) - 1;
  }
  __stack_pointer = $1 + 224 | 0;
  return 1;
 }
 
 function EmscriptenGamepadCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2 = global$9;
  $0 = HEAP32[$1 + 1108 >> 2];
  block1 : {
   if (!(HEAPU8[$1 + 1104 | 0] != 1 | ($0 | 0) > 3)) {
    HEAP8[$0 + 61424 | 0] = 1;
    strcpy((HEAP32[$1 + 1108 >> 2] << 6) + 61428 | 0, $1 + 1112 | 0);
    if ((global$9 | 0) != ($2 | 0)) {
     wasm2js_trap()
    }
    break block1;
   }
   HEAP8[$0 + 61424 | 0] = 0;
  }
  return 1;
 }
 
 function IsFileExtension($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = global$9;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = strlen($0);
  if ((global$9 | 0) != ($6 | 0)) {
   wasm2js_trap()
  }
  $5 = $4 + 1 | 0;
  while (1) {
   block : {
    $4 = 0;
    if (!$5) {
     break block
    }
    $5 = $5 - 1 | 0;
    $4 = $5 + $0 | 0;
    if (HEAPU8[$4 | 0] != 46) {
     continue
    }
   }
   break;
  };
  block1 : {
   if (!$4 | ($0 | 0) == ($4 | 0)) {
    break block1
   }
   $0 = 0;
   HEAP32[$3 + 28 >> 2] = 0;
   $9 = $3 + 28 | 0;
   $5 = __memset(71040, 0, 1024);
   if ((global$9 | 0) != ($6 | 0)) {
    wasm2js_trap()
   }
   HEAP32[17632] = $5;
   block2 : {
    if (!$1) {
     break block2
    }
    $10 = $1;
    $1 = 1;
    while (1) {
     $8 = $5 + $7 | 0;
     $2 = HEAPU8[$7 + $10 | 0];
     HEAP8[$8 | 0] = $2;
     if (!$2) {
      $2 = $1;
      break block2;
     }
     if (($2 | 0) == 59) {
      HEAP8[$8 | 0] = 0;
      HEAP32[($1 << 2) + 70528 >> 2] = $7 + 71041;
      $2 = 128;
      $1 = $1 + 1 | 0;
      if (($1 | 0) == 128) {
       break block2
      }
     }
     $2 = $1;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != 1024) {
      continue
     }
     break;
    };
   }
   HEAP32[$9 >> 2] = $2;
   HEAP8[$3 + 16 | 0] = 0;
   $1 = TextToLower($4);
   if ((global$9 | 0) != ($6 | 0)) {
    wasm2js_trap()
   }
   $1 = strncpy($3, $1, 16);
   if ((global$9 | 0) != ($6 | 0)) {
    wasm2js_trap()
   }
   if (HEAP32[$3 + 28 >> 2] <= 0) {
    break block1
   }
   while (1) {
    $2 = TextToLower(HEAP32[($0 << 2) + 70528 >> 2]);
    if ((global$9 | 0) != ($6 | 0)) {
     wasm2js_trap()
    }
    $2 = strcmp($1, $2);
    if ((global$9 | 0) != ($6 | 0)) {
     wasm2js_trap()
    }
    $11 = !$2;
    if (!$2) {
     break block1
    }
    $0 = $0 + 1 | 0;
    if (($0 | 0) < HEAP32[$3 + 28 >> 2]) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $3 + 32 | 0;
  return $11;
 }
 
 function SetShapesTexture($0, $1) {
  var $2 = 0;
  if (!(!(!HEAP32[$0 >> 2] | HEAPF32[$1 + 8 >> 2] == Math_fround(0.0)) & HEAPF32[$1 + 12 >> 2] != Math_fround(0.0))) {
   HEAP32[12958] = 7;
   HEAP32[12956] = 1;
   HEAP32[12957] = 1;
   HEAP32[12954] = 1;
   HEAP32[12955] = 1;
   HEAP32[12961] = 1065353216;
   HEAP32[12962] = 1065353216;
   HEAP32[12959] = 0;
   HEAP32[12960] = 0;
   return;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[12954] = HEAP32[$0 >> 2];
  HEAP32[12955] = $2;
  HEAP32[12958] = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[12956] = HEAP32[$0 + 8 >> 2];
  HEAP32[12957] = $2;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[12959] = HEAP32[$1 >> 2];
  HEAP32[12960] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[12961] = HEAP32[$1 + 8 >> 2];
  HEAP32[12962] = $0;
 }
 
 function DrawRectangle($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $6 = HEAPF32[$5 + 8 >> 2];
   $7 = HEAPF32[$5 + 12 >> 2];
   $9 = HEAPF32[$5 + 16 >> 2];
   $10 = HEAPF32[$5 + 20 >> 2];
   $12 = HEAPF32[$5 + 24 >> 2];
   $11 = HEAPF32[$5 + 28 >> 2];
   $13 = HEAPF32[$5 + 32 >> 2];
   $14 = HEAPF32[$5 + 36 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer + -64 | 0;
   __stack_pointer = $5;
   $4 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24);
   $15 = $5 + 56 | 0;
   HEAPF32[$15 >> 2] = $2 | 0;
   HEAPF32[$5 + 60 >> 2] = $3 | 0;
   $2 = HEAP32[$15 + 4 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$5 + 28 >> 2] = $2;
   HEAPF32[$5 + 52 >> 2] = $1 | 0;
   HEAPF32[$5 + 48 >> 2] = $0 | 0;
   HEAP32[$5 + 32 >> 2] = $4;
   HEAP32[$5 + 40 >> 2] = 0;
   HEAP32[$5 + 44 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   HEAP32[$5 + 12 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = $4;
   $0 = HEAP32[$5 + 52 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 48 >> 2];
   HEAP32[$5 + 20 >> 2] = $0;
   $0 = $5 + 16 | 0;
   $1 = $5 + 8 | 0;
   $10 = Math_fround(HEAPF32[$0 + 4 >> 2] - HEAPF32[$1 + 4 >> 2]);
   $12 = Math_fround($10 + HEAPF32[$0 + 12 >> 2]);
   $7 = HEAPF32[$1 >> 2];
   $11 = Math_fround(HEAPF32[$0 >> 2] - $7);
   $6 = HEAPF32[$0 + 8 >> 2];
   $13 = Math_fround($11 + $6);
   $0 = HEAP32[12954];
  }
  block : {
   if (!global$9 | !$8) {
    rlSetTexture($0);
    $1 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $14 = HEAPF32[12961];
    $7 = HEAPF32[12962];
    $9 = HEAPF32[12960];
    $6 = HEAPF32[12959];
   }
   if (!global$9 | ($8 | 0) == 1) {
    rlBegin();
    $1 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    rlNormal3f();
    $0 = $5 + 4 | 0;
    rlColor4ub(HEAPU8[$0 | 0], HEAPU8[$0 + 1 | 0], HEAPU8[$0 + 2 | 0], HEAPU8[$0 + 3 | 0]);
    rlTexCoord2f(Math_fround($6 / Math_fround(HEAP32[12955])), Math_fround($9 / Math_fround(HEAP32[12956])));
   }
   if (!global$9 | ($8 | 0) == 2) {
    rlVertex2f($11, $10);
    $1 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $7 = Math_fround($9 + $7);
    rlTexCoord2f(Math_fround($6 / Math_fround(HEAP32[12955])), Math_fround($7 / Math_fround(HEAP32[12956])));
   }
   if (!global$9 | ($8 | 0) == 3) {
    rlVertex2f($11, $12);
    $1 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $6 = Math_fround($6 + $14);
    rlTexCoord2f(Math_fround($6 / Math_fround(HEAP32[12955])), Math_fround($7 / Math_fround(HEAP32[12956])));
   }
   if (!global$9 | ($8 | 0) == 4) {
    rlVertex2f($13, $12);
    $1 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    rlTexCoord2f(Math_fround($6 / Math_fround(HEAP32[12955])), Math_fround($9 / Math_fround(HEAP32[12956])))
   }
   if (!global$9 | ($8 | 0) == 5) {
    rlVertex2f($13, $10);
    $1 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    rlEnd()
   }
   if (!global$9 | ($8 | 0) == 6) {
    rlSetTexture(0);
    $1 = 6;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $5 - -64 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $5;
  HEAPF32[$1 + 8 >> 2] = $6;
  HEAPF32[$1 + 12 >> 2] = $7;
  HEAPF32[$1 + 16 >> 2] = $9;
  HEAPF32[$1 + 20 >> 2] = $10;
  HEAPF32[$1 + 24 >> 2] = $12;
  HEAPF32[$1 + 28 >> 2] = $11;
  HEAPF32[$1 + 32 >> 2] = $13;
  HEAPF32[$1 + 36 >> 2] = $14;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
 }
 
 function stbiw__outfile($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 76;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $9 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $13 = HEAP32[$1 + 48 >> 2];
   $14 = HEAP32[$1 + 52 >> 2];
   $16 = HEAP32[$1 + 56 >> 2];
   $17 = HEAP32[$1 + 60 >> 2];
   $18 = HEAP32[$1 + 64 >> 2];
   $19 = HEAP32[$1 + 68 >> 2];
   $20 = HEAP32[$1 + 72 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $17 = __stack_pointer - 16 | 0;
   __stack_pointer = $17;
   $9 = ($1 | $2) >= 0;
  }
  block5 : {
   if ((global$9 | 0) == 2 | $9) {
    if (!global$9) {
     HEAP32[$17 + 8 >> 2] = $8;
     $9 = __stack_pointer - 16 | 0;
     __stack_pointer = $9;
     $10 = HEAPU8[$7 | 0];
    }
    block7 : {
     block2 : {
      if ((global$9 | 0) == 2 | $10) {
       while (1) {
        $12 = global$9 ? $12 : $10 - 49 | 0;
        block6 : {
         block4 : {
          block3 : {
           block1 : {
            if (!global$9) {
             block : {
              switch ($12 | 0) {
              case 0:
               break block;
              case 1:
               break block1;
              case 2:
               break block2;
              case 3:
               break block3;
              default:
               break block4;
              };
             }
             HEAP8[$9 + 15 | 0] = HEAP32[$8 >> 2];
             $12 = $9 + 15 | 0;
             $14 = HEAP32[$0 >> 2];
             $10 = HEAP32[$0 + 4 >> 2];
            }
            if (!global$9 | !$11) {
             FUNCTION_TABLE[$14 | 0]($10, $12, 1);
             $15 = 0;
             if ((global$9 | 0) == 1) {
              break block5
             }
            }
            if (!global$9) {
             $8 = $8 + 4 | 0;
             break block6;
            }
           }
           if (!global$9) {
            $10 = HEAP32[$8 >> 2];
            HEAP8[$9 + 13 | 0] = $10;
            HEAP8[$9 + 14 | 0] = $10 >>> 8;
            $12 = $9 + 13 | 0;
            $14 = HEAP32[$0 >> 2];
            $10 = HEAP32[$0 + 4 >> 2];
           }
           if (!global$9 | ($11 | 0) == 1) {
            FUNCTION_TABLE[$14 | 0]($10, $12, 2);
            $15 = 1;
            if ((global$9 | 0) == 1) {
             break block5
            }
           }
           if (!global$9) {
            $8 = $8 + 4 | 0;
            break block6;
           }
          }
          if (!global$9) {
           $10 = HEAP32[$8 >> 2];
           HEAP8[$9 + 9 | 0] = $10;
           HEAP8[$9 + 10 | 0] = $10 >>> 8;
           HEAP8[$9 + 11 | 0] = $10 >>> 16;
           HEAP8[$9 + 12 | 0] = $10 >>> 24;
           $12 = $9 + 9 | 0;
           $14 = HEAP32[$0 >> 2];
           $10 = HEAP32[$0 + 4 >> 2];
          }
          if (!global$9 | ($11 | 0) == 2) {
           FUNCTION_TABLE[$14 | 0]($10, $12, 4);
           $15 = 2;
           if ((global$9 | 0) == 1) {
            break block5
           }
          }
          if (!global$9) {
           $8 = $8 + 4 | 0;
           break block6;
          }
         }
         if (!global$9) {
          $10 = ($10 | 0) != 32;
          if ($10) {
           break block2
          }
         }
        }
        if (!global$9) {
         $7 = $7 + 1 | 0;
         $10 = HEAPU8[$7 | 0];
         if ($10) {
          continue
         }
        }
        break;
       }
      }
      if (!global$9) {
       $7 = $9 + 16 | 0;
       __stack_pointer = $7;
       break block7;
      }
     }
     if (!global$9) {
      __assert_fail(11914, 6972, 372, 2674);
      wasm2js_trap();
     }
    }
    if (!global$9) {
     HEAP32[$17 + 12 >> 2] = 0
    }
    if ((global$9 | 0) == 2 | $2) {
     if (!global$9) {
      $12 = HEAP32[16591];
      $7 = $12 ? $2 : -1;
      $19 = $12 ? 1 : -1;
      $20 = $0 + 8 | 0;
      $2 = $2 - 1 | 0;
      $8 = $12 ? 0 : $2;
     }
     while (1) {
      if ((global$9 | 0) == 2 | $1) {
       if (!global$9) {
        $12 = Math_imul($1, $8);
        $2 = 0;
       }
       while (1) {
        if (!global$9) {
         $10 = Math_imul($2 + $12 | 0, $3) + $4 | 0;
         $14 = __stack_pointer - 16 | 0;
         __stack_pointer = $14;
         $13 = $3 - 1 | 0;
         $9 = 0;
        }
        block11 : {
         block9 : {
          block10 : {
           if (!global$9) {
            block8 : {
             switch ($13 | 0) {
             case 3:
              break block10;
             case 0:
             case 1:
              break block8;
             case 2:
              break block9;
             default:
              break block11;
             };
            }
            $9 = HEAPU8[$10 | 0];
           }
           if (!global$9 | ($11 | 0) == 3) {
            stbiw__write3($0, $9, $9, $9);
            $15 = 3;
            if ((global$9 | 0) == 1) {
             break block5
            }
           }
           if (!global$9) {
            break block11
           }
          }
          if (!global$9) {
           if ($5) {
            break block9
           }
           $13 = HEAPU8[$10 + 3 | 0];
           while (1) {
            $18 = ($14 + 13 | 0) + $9 | 0;
            $15 = HEAPU8[$9 + 15252 | 0];
            HEAP8[$18 | 0] = $15 + ((Math_imul($13, HEAPU8[$9 + $10 | 0] - $15 | 0) | 0) / 255 | 0);
            $9 = $9 + 1 | 0;
            if (($9 | 0) != 3) {
             continue
            }
            break;
           };
           $13 = HEAPU8[$14 + 14 | 0];
           $16 = HEAPU8[$14 + 13 | 0];
           $9 = HEAPU8[$14 + 15 | 0];
          }
          if (!global$9 | ($11 | 0) == 4) {
           stbiw__write3($0, $9, $13, $16);
           $15 = 4;
           if ((global$9 | 0) == 1) {
            break block5
           }
          }
          if (!global$9) {
           break block11
          }
         }
         if (!global$9) {
          $13 = HEAPU8[$10 + 1 | 0];
          $16 = HEAPU8[$10 | 0];
          $9 = HEAPU8[$10 + 2 | 0];
         }
         if (!global$9 | ($11 | 0) == 5) {
          stbiw__write3($0, $9, $13, $16);
          $15 = 5;
          if ((global$9 | 0) == 1) {
           break block5
          }
         }
        }
        if ((global$9 | 0) == 2 | $5) {
         if (!global$9) {
          $9 = HEAP32[$0 + 72 >> 2];
          $13 = $9 + -64 >>> 0 <= 4294967230;
          $10 = HEAPU8[($3 + $10 | 0) - 1 | 0];
         }
         if ((global$9 | 0) == 2 | $13) {
          if (!global$9) {
           $16 = $0 + 8 | 0;
           $18 = HEAP32[$0 >> 2];
           $13 = HEAP32[$0 + 4 >> 2];
          }
          if (!global$9 | ($11 | 0) == 6) {
           FUNCTION_TABLE[$18 | 0]($13, $16, $9);
           $15 = 6;
           if ((global$9 | 0) == 1) {
            break block5
           }
          }
          $9 = global$9 ? $9 : 0;
         }
         if (!global$9) {
          $13 = $9 + 1 | 0;
          HEAP32[$0 + 72 >> 2] = $13;
          $9 = $0 + $9 | 0;
          HEAP8[$9 + 8 | 0] = $10;
         }
        }
        if (!global$9) {
         __stack_pointer = $14 + 16 | 0;
         $2 = $2 + 1 | 0;
         $9 = ($2 | 0) != ($1 | 0);
         if ($9) {
          continue
         }
        }
        break;
       };
      }
      $2 = global$9 ? $2 : HEAP32[$0 + 72 >> 2];
      if ($2 | (global$9 | 0) == 2) {
       if (!global$9) {
        $10 = HEAP32[$0 >> 2];
        $9 = HEAP32[$0 + 4 >> 2];
       }
       if (!global$9 | ($11 | 0) == 7) {
        FUNCTION_TABLE[$10 | 0]($9, $20, $2);
        $15 = 7;
        if ((global$9 | 0) == 1) {
         break block5
        }
       }
       if (!global$9) {
        HEAP32[$0 + 72 >> 2] = 0
       }
      }
      if (!global$9) {
       $9 = $17 + 12 | 0;
       $10 = HEAP32[$0 >> 2];
       $2 = HEAP32[$0 + 4 >> 2];
      }
      if (!global$9 | ($11 | 0) == 8) {
       FUNCTION_TABLE[$10 | 0]($2, $9, $6);
       $15 = 8;
       if ((global$9 | 0) == 1) {
        break block5
       }
      }
      if (!global$9) {
       $8 = $8 + $19 | 0;
       $2 = ($8 | 0) != ($7 | 0);
       if ($2) {
        continue
       }
      }
      break;
     };
    }
    $12 = global$9 ? $12 : 1;
   }
   if (!global$9) {
    __stack_pointer = $17 + 16 | 0;
    return $12;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $15;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $11 = HEAP32[global$10 >> 2];
  HEAP32[$11 >> 2] = $0;
  HEAP32[$11 + 4 >> 2] = $1;
  HEAP32[$11 + 8 >> 2] = $2;
  HEAP32[$11 + 12 >> 2] = $3;
  HEAP32[$11 + 16 >> 2] = $4;
  HEAP32[$11 + 20 >> 2] = $5;
  HEAP32[$11 + 24 >> 2] = $6;
  HEAP32[$11 + 28 >> 2] = $7;
  HEAP32[$11 + 32 >> 2] = $8;
  HEAP32[$11 + 36 >> 2] = $9;
  HEAP32[$11 + 40 >> 2] = $10;
  HEAP32[$11 + 44 >> 2] = $12;
  HEAP32[$11 + 48 >> 2] = $13;
  HEAP32[$11 + 52 >> 2] = $14;
  HEAP32[$11 + 56 >> 2] = $16;
  HEAP32[$11 + 60 >> 2] = $17;
  HEAP32[$11 + 64 >> 2] = $18;
  HEAP32[$11 + 68 >> 2] = $19;
  HEAP32[$11 + 72 >> 2] = $20;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 76;
  return 0;
 }
 
 function stbi__stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  block : {
   $4 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $3 = 0
   }
   if ($4 | !$3) {
    fwrite($1, 1, $2, $0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function stbiw__sbgrowf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = HEAP32[$0 >> 2];
   if ($2) {
    $3 = HEAP32[$2 - 8 >> 2] << 1 | 1
   } else {
    $3 = 2
   }
   $2 = $2 ? $2 - 8 | 0 : 0;
   $1 = Math_imul($1, $3) + 8 | 0;
  }
  block : {
   if (!global$9 | !$4) {
    $4 = emscripten_builtin_realloc($2, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $4;
   }
   if (!global$9) {
    if ($2) {
     if (!HEAP32[$0 >> 2]) {
      HEAP32[$2 + 4 >> 2] = 0
     }
     HEAP32[$0 >> 2] = $2 + 8;
     HEAP32[$2 >> 2] = $3;
     return;
    }
    __assert_fail(4904, 6972, 830, 7137);
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function stbiw__zlib_flushf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $4 = HEAP32[$3 + 12 >> 2];
   $5 = HEAP32[$3 + 16 >> 2];
   $3 = HEAP32[$3 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   HEAP32[$5 + 12 >> 2] = $0;
   $4 = HEAP32[$2 >> 2] >= 8;
  }
  block1 : {
   if ((global$9 | 0) == 2 | $4) {
    while (1) {
     block : {
      if (!global$9) {
       if ($0) {
        $4 = HEAP32[$0 - 4 >> 2];
        $3 = $4 + 1 | 0;
        if (($3 | 0) < HEAP32[$0 - 8 >> 2]) {
         break block
        }
       }
       $0 = $5 + 12 | 0;
      }
      if (!global$9 | !$6) {
       stbiw__sbgrowf($0, 1);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $0 = HEAP32[$5 + 12 >> 2];
       $4 = HEAP32[$0 - 4 >> 2];
       $3 = $4 + 1 | 0;
      }
     }
     if (!global$9) {
      $7 = HEAP32[$1 >> 2];
      HEAP32[$0 - 4 >> 2] = $3;
      HEAP8[$0 + $4 | 0] = $7;
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] >>> 8;
      $4 = HEAP32[$2 >> 2];
      $3 = $4 - 8 | 0;
      HEAP32[$2 >> 2] = $3;
      $4 = ($4 | 0) > 15;
      if ($4) {
       continue
      }
     }
     break;
    };
    if (!global$9) {
     $0 = HEAP32[$5 + 12 >> 2]
    }
   }
   if (!global$9) {
    __stack_pointer = $5 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 16 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function stbiw__encode_png_line($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $9 = global$9;
  $10 = ($4 ^ -1) + $3 | 0;
  $3 = HEAP32[16591];
  $0 = Math_imul($3 ? $10 : $4, $1) + $0 | 0;
  $4 = HEAP32[($6 << 2) + ($4 ? 15264 : 15296) >> 2];
  if ($4) {
   $1 = $3 ? 0 - $1 | 0 : $1;
   if (($5 | 0) > 0) {
    $6 = $4 - 1 | 0;
    while (1) {
     $10 = $7 + $8 | 0;
     block6 : {
      block7 : {
       block5 : {
        switch ($6 | 0) {
        case 0:
         $3 = HEAPU8[$0 + $8 | 0];
         break block7;
        case 1:
         $3 = HEAPU8[$0 + $8 | 0] - HEAPU8[$0 + ($8 - $1 | 0) | 0] | 0;
         break block7;
        case 2:
         $3 = HEAPU8[$0 + $8 | 0] - (HEAPU8[$0 + ($8 - $1 | 0) | 0] >>> 1 | 0) | 0;
         break block7;
        case 3:
         $3 = HEAPU8[$0 + $8 | 0] - HEAPU8[$0 + ($8 - $1 | 0) | 0] | 0;
         break block7;
        case 4:
         $3 = HEAPU8[$0 + $8 | 0];
         break block7;
        case 5:
         break block5;
        default:
         break block6;
        };
       }
       $3 = HEAPU8[$0 + $8 | 0];
      }
      HEAP8[$10 | 0] = $3;
     }
     $8 = $8 + 1 | 0;
     if (($8 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   block14 : {
    block8 : {
     switch ($4 - 1 | 0) {
     case 5:
      $1 = Math_imul($2, $5);
      if (($1 | 0) <= ($5 | 0)) {
       break block14
      }
      $8 = $5;
      while (1) {
       HEAP8[$7 + $8 | 0] = HEAPU8[$0 + $8 | 0] - HEAPU8[$0 + ($8 - $5 | 0) | 0];
       $8 = $8 + 1 | 0;
       if (($1 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
      break block14;
     case 4:
      $1 = Math_imul($2, $5);
      if (($1 | 0) <= ($5 | 0)) {
       break block14
      }
      $8 = $5;
      while (1) {
       HEAP8[$7 + $8 | 0] = HEAPU8[$0 + $8 | 0] - (HEAPU8[$0 + ($8 - $5 | 0) | 0] >>> 1 | 0);
       $8 = $8 + 1 | 0;
       if (($1 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
      break block14;
     case 3:
      $11 = Math_imul($2, $5);
      if (($11 | 0) <= ($5 | 0)) {
       break block14
      }
      $8 = $5;
      while (1) {
       $3 = $8 - $1 | 0;
       $2 = HEAPU8[$0 + ($3 - $5 | 0) | 0];
       $3 = HEAPU8[$0 + $3 | 0];
       $4 = HEAPU8[$0 + ($8 - $5 | 0) | 0];
       $6 = ($3 + $4 | 0) - $2 | 0;
       $12 = $6 - $3 | 0;
       $9 = $12 >> 31;
       $13 = $6 - $2 | 0;
       $14 = $13 >> 31;
       $15 = $6 - $4 | 0;
       $6 = $15 >> 31;
       $10 = $2;
       $16 = $3;
       $2 = ($9 ^ $12) - $9 | 0;
       $3 = ($14 ^ $13) - $14 | 0;
       $9 = $2 >>> 0 > $3 >>> 0 ? $10 : $16;
       $10 = $3;
       $3 = ($6 ^ $15) - $6 | 0;
       HEAP8[$7 + $8 | 0] = HEAPU8[$0 + $8 | 0] - ($2 >>> 0 < $3 >>> 0 ? $9 : $10 >>> 0 < $3 >>> 0 ? $9 : $4);
       $8 = $8 + 1 | 0;
       if (($11 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
      break block14;
     case 2:
      $2 = Math_imul($2, $5);
      if (($2 | 0) <= ($5 | 0)) {
       break block14
      }
      $8 = $5;
      while (1) {
       HEAP8[$7 + $8 | 0] = HEAPU8[$0 + $8 | 0] - (HEAPU8[$0 + ($8 - $1 | 0) | 0] + HEAPU8[$0 + ($8 - $5 | 0) | 0] >>> 1 | 0);
       $8 = $8 + 1 | 0;
       if (($2 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
      break block14;
     case 1:
      $2 = Math_imul($2, $5);
      if (($2 | 0) <= ($5 | 0)) {
       break block14
      }
      while (1) {
       HEAP8[$5 + $7 | 0] = HEAPU8[$0 + $5 | 0] - HEAPU8[$0 + ($5 - $1 | 0) | 0];
       $5 = $5 + 1 | 0;
       if (($2 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
      break block14;
     case 0:
      break block8;
     default:
      break block14;
     };
    }
    $1 = Math_imul($2, $5);
    if (($1 | 0) <= ($5 | 0)) {
     break block14
    }
    $8 = $5;
    while (1) {
     HEAP8[$7 + $8 | 0] = HEAPU8[$0 + $8 | 0] - HEAPU8[$0 + ($8 - $5 | 0) | 0];
     $8 = $8 + 1 | 0;
     if (($1 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   return;
  }
  __memcpy($7, $0, Math_imul($2, $5));
  if ((global$9 | 0) != ($9 | 0)) {
   wasm2js_trap()
  }
 }
 
 function stbiw__wpcrc($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = HEAP32[$0 >> 2];
  $4 = $3;
  if (($1 | 0) >= -3) {
   $3 = ($3 - $1 | 0) - 4 | 0;
   $5 = $1 + 3 | 0;
   $1 = -1;
   while (1) {
    $1 = HEAP32[((HEAPU8[$2 + $3 | 0] ^ $1 & 255) << 2) + 15328 >> 2] ^ $1 >>> 8;
    $6 = ($2 | 0) != ($5 | 0);
    $2 = $2 + 1 | 0;
    if ($6) {
     continue
    }
    break;
   };
   $2 = $1 ^ -1;
  }
  HEAP8[$4 | 0] = $2 >>> 24;
  HEAP8[HEAP32[$0 >> 2] + 1 | 0] = $2 >>> 16;
  HEAP8[HEAP32[$0 >> 2] + 2 | 0] = $2 >>> 8;
  HEAP8[HEAP32[$0 >> 2] + 3 | 0] = $2;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 4;
 }
 
 function stbiw__jpg_processDU($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + -64;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $13 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $14 = HEAP32[$1 + 48 >> 2];
   $9 = HEAP32[$1 + 52 >> 2];
   $15 = HEAP32[$1 + 56 >> 2];
   $17 = HEAP32[$1 + 60 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $12 = __stack_pointer - 288 | 0;
   __stack_pointer = $12;
   HEAP16[$12 + 284 >> 1] = HEAPU16[$8 >> 1];
   HEAP16[$12 + 286 >> 1] = HEAPU16[$8 + 2 >> 1];
   HEAP16[$12 + 280 >> 1] = HEAPU16[$8 + 960 >> 1];
   HEAP16[$12 + 282 >> 1] = HEAPU16[$8 + 962 >> 1];
   $13 = $4 << 3;
   while (1) {
    $9 = ($10 << 2) + $3 | 0;
    stbiw__jpg_DCT($9, $9 + 4 | 0, $9 + 8 | 0, $9 + 12 | 0, $9 + 16 | 0, $9 + 20 | 0, $9 + 24 | 0, $9 + 28 | 0);
    $10 = $4 + $10 | 0;
    if ($13 >>> 0 > $10 >>> 0) {
     continue
    }
    break;
   };
   $14 = Math_imul($4, 28);
   $16 = Math_imul($4, 24);
   $17 = Math_imul($4, 20);
   $19 = $4 << 4;
   $20 = Math_imul($4, 12);
   $10 = 0;
   while (1) {
    $9 = ($10 << 2) + $3 | 0;
    stbiw__jpg_DCT($9, $9 + ($4 << 2) | 0, $9 + $13 | 0, $9 + $20 | 0, $9 + $19 | 0, $9 + $17 | 0, $9 + $16 | 0, $9 + $14 | 0);
    $10 = $10 + 1 | 0;
    if (($10 | 0) != 8) {
     continue
    }
    break;
   };
   $13 = 0;
   while (1) {
    $14 = (Math_imul($4, $15) << 2) + $3 | 0;
    $10 = 0;
    while (1) {
     $16 = ($12 + 16 | 0) + (HEAPU8[$13 + 21472 | 0] << 2) | 0;
     $18 = Math_fround(HEAPF32[($10 << 2) + $14 >> 2] * HEAPF32[($13 << 2) + $5 >> 2]);
     $18 = Math_fround($18 + ($18 < Math_fround(0.0) ? Math_fround(-.5) : Math_fround(.5)));
     block : {
      if (Math_fround(Math_abs($18)) < Math_fround(2147483648.0)) {
       $9 = ~~$18;
       break block;
      }
      $9 = -2147483648;
     }
     HEAP32[$16 >> 2] = $9;
     $13 = $13 + 1 | 0;
     $10 = $10 + 1 | 0;
     if (($10 | 0) != 8) {
      continue
     }
     break;
    };
    $15 = $15 + 1 | 0;
    $9 = ($15 | 0) != 8;
    if ($9) {
     continue
    }
    break;
   };
   $17 = HEAP32[$12 + 16 >> 2];
   $3 = ($17 | 0) == ($6 | 0);
  }
  block1 : {
   block2 : {
    if ((global$9 | 0) == 2 | $3) {
     if (!global$9 | !$11) {
      stbiw__jpg_writeBits($0, $1, $2, $7);
      $16 = 0;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      break block2
     }
    }
    if (!global$9) {
     $3 = $17 - $6 | 0;
     $10 = $3 >> 31;
     $4 = ($10 ^ $3) - $10 | 0;
     $9 = $4 >>> 0 < 2 ? 1 : 32 - Math_clz32($4) | 0;
     HEAP16[$12 + 14 >> 1] = $9;
     $13 = $9 & 65535;
     $4 = -1 << $13 ^ -1;
     HEAP16[$12 + 12 >> 1] = $4 & $3 + $10;
     $3 = ($13 << 2) + $7 | 0;
    }
    if (!global$9 | ($11 | 0) == 1) {
     stbiw__jpg_writeBits($0, $1, $2, $3);
     $16 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    $3 = global$9 ? $3 : $12 + 12 | 0;
    if (!global$9 | ($11 | 0) == 2) {
     stbiw__jpg_writeBits($0, $1, $2, $3);
     $16 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   $4 = global$9 ? $4 : 63;
   block5 : {
    block3 : {
     if (!global$9) {
      while (1) {
       $5 = $4 << 2;
       $3 = !HEAP32[$5 + ($12 + 16 | 0) >> 2];
       if ($3) {
        $13 = $4 >>> 0 > 1;
        $4 = $4 - 1 | 0;
        if ($13) {
         continue
        }
        break block3;
       }
       break;
      };
      $3 = ($4 | 0) <= 0;
      if ($3) {
       break block3
      }
      $9 = 1;
     }
     while (1) {
      if (!global$9) {
       $3 = $9;
       $14 = 0;
       while (1) {
        block4 : {
         $5 = $14;
         $13 = $9;
         $9 = $9 + 1 | 0;
         $10 = HEAP32[($12 + 16 | 0) + ($13 << 2) >> 2];
         if (($4 | 0) < ($13 | 0)) {
          break block4
         }
         $14 = $5 + 1 | 0;
         if (!$10) {
          continue
         }
        }
        break;
       };
       $15 = $13 - $3 | 0;
       $3 = ($15 | 0) >= 16;
      }
      if ((global$9 | 0) == 2 | $3) {
       if (!global$9) {
        $14 = 1;
        $5 = $5 >>> 4 | 0;
        $3 = $5 >>> 0 <= 1 ? 1 : $5;
       }
       while (1) {
        $5 = global$9 ? $5 : $12 + 280 | 0;
        if (!global$9 | ($11 | 0) == 3) {
         stbiw__jpg_writeBits($0, $1, $2, $5);
         $16 = 3;
         if ((global$9 | 0) == 1) {
          break block1
         }
        }
        if (!global$9) {
         $5 = ($3 | 0) != ($14 | 0);
         $14 = $14 + 1 | 0;
         if ($5) {
          continue
         }
        }
        break;
       };
       $15 = global$9 ? $15 : $15 & 15;
      }
      if (!global$9) {
       $14 = $10 >> 31;
       $3 = ($14 ^ $10) - $14 | 0;
       $3 = $3 >>> 0 < 2 ? 1 : 32 - Math_clz32($3) | 0;
       HEAP16[$12 + 14 >> 1] = $3;
       $5 = $10 + $14 | 0;
       $10 = $3 & 65535;
       HEAP16[$12 + 12 >> 1] = $5 & (-1 << $10 ^ -1);
       $5 = $10 << 2;
       $3 = $5 + (($15 << 6) + $8 | 0) | 0;
      }
      if (!global$9 | ($11 | 0) == 4) {
       stbiw__jpg_writeBits($0, $1, $2, $3);
       $16 = 4;
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      $3 = global$9 ? $3 : $12 + 12 | 0;
      if (!global$9 | ($11 | 0) == 5) {
       stbiw__jpg_writeBits($0, $1, $2, $3);
       $16 = 5;
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $3 = ($4 | 0) > ($13 | 0);
       if ($3) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      $3 = ($4 | 0) == 63;
      if ($3) {
       break block5
      }
     }
    }
    $3 = global$9 ? $3 : $12 + 284 | 0;
    if (!global$9 | ($11 | 0) == 6) {
     stbiw__jpg_writeBits($0, $1, $2, $3);
     $16 = 6;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $12 + 288 | 0;
    return $17;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $16;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $11 = HEAP32[global$10 >> 2];
  HEAP32[$11 >> 2] = $0;
  HEAP32[$11 + 4 >> 2] = $1;
  HEAP32[$11 + 8 >> 2] = $2;
  HEAP32[$11 + 12 >> 2] = $3;
  HEAP32[$11 + 16 >> 2] = $4;
  HEAP32[$11 + 20 >> 2] = $5;
  HEAP32[$11 + 24 >> 2] = $6;
  HEAP32[$11 + 28 >> 2] = $7;
  HEAP32[$11 + 32 >> 2] = $8;
  HEAP32[$11 + 36 >> 2] = $13;
  HEAP32[$11 + 40 >> 2] = $10;
  HEAP32[$11 + 44 >> 2] = $12;
  HEAP32[$11 + 48 >> 2] = $14;
  HEAP32[$11 + 52 >> 2] = $9;
  HEAP32[$11 + 56 >> 2] = $15;
  HEAP32[$11 + 60 >> 2] = $17;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - -64;
  return 0;
 }
 
 function stbiw__jpg_writeBits($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   $6 = HEAP32[$4 + 20 >> 2];
   $7 = HEAP32[$4 + 24 >> 2];
   $8 = HEAP32[$4 + 28 >> 2];
   $9 = HEAP32[$4 + 32 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $8 = HEAPU16[$3 >> 1];
   $7 = HEAPU16[$3 + 2 >> 1] + HEAP32[$2 >> 2] | 0;
   $3 = HEAP32[$1 >> 2] | $8 << 24 - $7;
   $5 = ($7 | 0) >= 8;
  }
  block : {
   if ((global$9 | 0) == 2 | $5) {
    while (1) {
     if (!global$9) {
      HEAP8[$6 + 14 | 0] = $3 >>> 16;
      $8 = $6 + 14 | 0;
      $9 = HEAP32[$0 >> 2];
      $5 = HEAP32[$0 + 4 >> 2];
     }
     if (!global$9 | !$10) {
      FUNCTION_TABLE[$9 | 0]($5, $8, 1);
      $4 = 0;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $5 = global$9 ? $5 : ($3 & 16711680) == 16711680;
     if ($5 | (global$9 | 0) == 2) {
      if (!global$9) {
       HEAP8[$6 + 15 | 0] = 0;
       $8 = $6 + 15 | 0;
       $9 = HEAP32[$0 >> 2];
       $5 = HEAP32[$0 + 4 >> 2];
      }
      if (!global$9 | ($10 | 0) == 1) {
       FUNCTION_TABLE[$9 | 0]($5, $8, 1);
       $4 = 1;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $3 = $3 << 8;
      $5 = ($7 | 0) > 15;
      $7 = $7 - 8 | 0;
      if ($5) {
       continue
      }
     }
     break;
    }
   }
   if (!global$9) {
    HEAP32[$1 >> 2] = $3;
    HEAP32[$2 >> 2] = $7;
    __stack_pointer = $6 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $7;
  HEAP32[$4 + 28 >> 2] = $8;
  HEAP32[$4 + 32 >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
 }
 
 function GetPixelDataSize($0, $1, $2) {
  var $3 = 0, $4 = 0.0;
  $3 = $2 - 1 | 0;
  if ($3 >>> 0 <= 23) {
   $4 = HEAPF64[($3 << 3) + 21584 >> 3]
  }
  $3 = ($0 | 0) > 3;
  $4 = $4 * +($0 | 0) * +($1 | 0);
  block : {
   if (Math_abs($4) < 2147483648.0) {
    $0 = ~~$4;
    break block;
   }
   $0 = -2147483648;
  }
  if (!(($1 | 0) > 3 | $3)) {
   return ($2 & -2) == 14 ? 8 : ($2 & -8) == 16 ? 16 : $0
  }
  return $0;
 }
 
 function UnloadImage($0) {
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : HEAP32[$0 >> 2];
  block : {
   if (!global$9 | !$1) {
    emscripten_builtin_free($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function HalfToFloat($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = $0 << 13;
  $1 = $2 & 8380416;
  $3 = (wasm2js_scratch_store_f32(Math_fround($1 >>> 0)), wasm2js_scratch_load_i32(2));
  $4 = $0 << 16 & -2147483648;
  $0 = $0 >>> 10 & 31;
  return wasm2js_scratch_store_i32(2, $4 | ($0 ? ($0 << 23 | $1) + 939524096 | 0 : 0) | ($0 ? 0 : $1 ? ($3 & 2139095040 | $2 << 150 - ($3 >>> 23 | 0) & 8380416) - 310378496 | 0 : 0)), wasm2js_scratch_load_f32();
 }
 
 function UnloadTexture($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
   $0 = HEAP32[$0 >> 2];
  }
  block : {
   if ((global$9 | 0) == 2 | $0) {
    if (!global$9) {
     $2 = __stack_pointer - 16 | 0;
     __stack_pointer = $2;
     HEAP32[$2 + 12 >> 2] = $0;
     glDeleteTextures(1, $2 + 12 | 0);
     __stack_pointer = $2 + 16 | 0;
     HEAP32[$1 >> 2] = $0;
    }
    if (!global$9 | !$3) {
     TraceLog(3, 12746, $1);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $1 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function GetColor($0, $1) {
  $1 = $1 << 24 | ($1 & 65280) << 8 | ($1 >>> 8 & 65280 | $1 >>> 24);
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
 }
 
 function stbiw__write3($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $6 = HEAP32[$4 + 16 >> 2];
   $7 = HEAP32[$4 + 20 >> 2];
   $8 = HEAP32[$4 + 24 >> 2];
   $4 = HEAP32[$4 + 28 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = HEAP32[$0 + 72 >> 2];
   $7 = $6 - 62 >>> 0 <= 4294967230;
  }
  block : {
   if ((global$9 | 0) == 2 | $7) {
    if (!global$9) {
     $8 = $0 + 8 | 0;
     $7 = HEAP32[$0 + 4 >> 2];
     $4 = HEAP32[$0 >> 2];
    }
    if (!global$9 | !$5) {
     FUNCTION_TABLE[$4 | 0]($7, $8, $6);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $6 = global$9 ? $6 : 0;
   }
   if (!global$9) {
    HEAP32[$0 + 72 >> 2] = $6 + 3;
    $0 = $0 + $6 | 0;
    HEAP8[$0 + 10 | 0] = $3;
    HEAP8[$0 + 9 | 0] = $2;
    HEAP8[$0 + 8 | 0] = $1;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $6;
  HEAP32[$5 + 20 >> 2] = $7;
  HEAP32[$5 + 24 >> 2] = $8;
  HEAP32[$5 + 28 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
 }
 
 function stbiw__jpg_DCT($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
  $11 = HEAPF32[$0 >> 2];
  $12 = HEAPF32[$7 >> 2];
  $8 = Math_fround($11 - $12);
  $13 = HEAPF32[$2 >> 2];
  $16 = HEAPF32[$5 >> 2];
  $10 = Math_fround($13 - $16);
  $17 = HEAPF32[$1 >> 2];
  $18 = HEAPF32[$6 >> 2];
  $14 = Math_fround($17 - $18);
  $19 = Math_fround(Math_fround($10 + $14) * Math_fround(.7071067690849304));
  $9 = Math_fround($8 - $19);
  $20 = HEAPF32[$3 >> 2];
  $21 = HEAPF32[$4 >> 2];
  $15 = Math_fround(Math_fround($20 - $21) + $10);
  $14 = Math_fround($14 + $8);
  $10 = Math_fround(Math_fround($15 - $14) * Math_fround(.3826834261417389));
  $15 = Math_fround(Math_fround($15 * Math_fround(.5411961078643799)) + $10);
  HEAPF32[$5 >> 2] = $9 + $15;
  HEAPF32[$3 >> 2] = $9 - $15;
  $8 = Math_fround($8 + $19);
  $9 = Math_fround(Math_fround($14 * Math_fround(1.3065630197525024)) + $10);
  HEAPF32[$1 >> 2] = $8 + $9;
  HEAPF32[$7 >> 2] = $8 - $9;
  $9 = Math_fround($13 + $16);
  $10 = Math_fround($17 + $18);
  $13 = Math_fround($9 + $10);
  $8 = Math_fround($20 + $21);
  $11 = Math_fround($11 + $12);
  $12 = Math_fround($8 + $11);
  HEAPF32[$0 >> 2] = $13 + $12;
  $8 = Math_fround($11 - $8);
  $9 = Math_fround(Math_fround($8 + Math_fround($10 - $9)) * Math_fround(.7071067690849304));
  HEAPF32[$2 >> 2] = $8 + $9;
  HEAPF32[$4 >> 2] = $12 - $13;
  HEAPF32[$6 >> 2] = $8 - $9;
 }
 
 function GetFontDefault($0) {
  var $1 = 0;
  $1 = global$9;
  __memcpy($0, 66368, 40);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
 }
 
 function TextFormat($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   $2 = HEAP32[$2 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
   $2 = __memset((HEAP32[17628] << 10) + 66416 | 0, 0, 1024);
   HEAP32[$4 + 12 >> 2] = $1;
  }
  block : {
   if (!global$9 | !$3) {
    $3 = vsnprintf($2, 1024, $0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    $1 = HEAP32[17628];
    if (($0 | 0) >= 1024) {
     HEAP32[($1 << 10) + 67436 >> 2] = 3026478
    }
    HEAP32[17628] = ($1 | 0) <= 2 ? $1 + 1 | 0 : 0;
    __stack_pointer = $4 + 16 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function TextToLower($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = global$9;
  $3 = __memset(72064, 0, 1024);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  block : {
   if (!$0) {
    break block
   }
   while (1) {
    $1 = HEAPU8[$0 + $2 | 0];
    if (!$1) {
     break block
    }
    HEAP8[$2 + $3 | 0] = ($1 - 65 & 255) >>> 0 < 26 ? $1 | 32 : $1;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != 1023) {
     continue
    }
    break;
   };
  }
  return $3;
 }
 
 function GetCodepointNext($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  HEAP32[$1 >> 2] = 1;
  block2 : {
   $5 = $1;
   $1 = HEAP8[$0 | 0];
   block : {
    block1 : {
     if (($1 & 248) == 240) {
      $2 = 63;
      $3 = HEAP8[$0 + 1 | 0];
      if (($3 & 192) != 128) {
       break block
      }
      $4 = HEAP8[$0 + 2 | 0];
      if (($4 & 192) != 128) {
       break block
      }
      $0 = HEAPU8[$0 + 3 | 0];
      if (($0 & 192) != 128) {
       break block
      }
      $2 = $0 & 63 | ($4 << 6 & 4032 | ($3 << 12 & 258048 | $1 << 18 & 1835008));
      $0 = 4;
      break block1;
     }
     if (($1 & 240) == 224) {
      $2 = 63;
      $3 = HEAP8[$0 + 1 | 0];
      if (($3 & 192) != 128) {
       break block
      }
      $0 = HEAPU8[$0 + 2 | 0];
      if (($0 & 192) != 128) {
       break block
      }
      $2 = $0 & 63 | ($3 << 6 & 4032 | $1 << 12 & 61440);
      $0 = 3;
      break block1;
     }
     if (($1 & 224) != 192) {
      break block2
     }
     $2 = 63;
     $0 = HEAPU8[$0 + 1 | 0];
     if (($0 & 192) != 128) {
      break block
     }
     $2 = $0 & 63 | $1 << 6 & 1984;
     $0 = 2;
    }
    HEAP32[$5 >> 2] = $0;
   }
   return $2;
  }
  return $1 & 128 ? 63 : $1;
 }
 
 function DrawTextCodepoint($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 68;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAPF32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAPF32[$1 + 20 >> 2];
   $7 = HEAPF32[$1 + 24 >> 2];
   $9 = HEAPF32[$1 + 28 >> 2];
   $10 = HEAP32[$1 + 32 >> 2];
   $11 = HEAPF32[$1 + 36 >> 2];
   $14 = HEAPF32[$1 + 40 >> 2];
   $12 = HEAPF32[$1 + 44 >> 2];
   $15 = HEAPF32[$1 + 48 >> 2];
   $16 = HEAPF32[$1 + 52 >> 2];
   $17 = HEAPF32[$1 + 56 >> 2];
   $19 = HEAPF32[$1 + 60 >> 2];
   $20 = HEAPF32[$1 + 64 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 112 | 0;
   __stack_pointer = $5;
   $18 = HEAP32[$0 + 36 >> 2];
   $21 = HEAP32[$0 + 4 >> 2];
   block2 : {
    block : {
     if (($21 | 0) <= 0) {
      break block
     }
     while (1) {
      block1 : {
       $22 = HEAP32[$18 + Math_imul($8, 36) >> 2];
       $10 = ($22 | 0) == 63 ? $8 : $10;
       if (($1 | 0) == ($22 | 0)) {
        break block1
       }
       $8 = $8 + 1 | 0;
       if (($21 | 0) != ($8 | 0)) {
        continue
       }
       break block;
      }
      break;
     };
     if ($8) {
      break block2
     }
    }
    $8 = HEAP32[$18 >> 2] != ($1 | 0) ? $10 : 0;
   }
   $7 = Math_fround(HEAP32[$0 + 8 >> 2]);
   $3 = Math_fround($3 / Math_fround(HEAP32[$0 >> 2]));
   $6 = Math_fround(Math_fround(-$7) * $3);
   $1 = $18 + Math_imul($8, 36) | 0;
   HEAPF32[$5 + 96 >> 2] = $6 + Math_fround(Math_fround(Math_fround(HEAP32[$1 + 4 >> 2]) * $3) + HEAPF32[$2 >> 2]);
   HEAPF32[$5 + 100 >> 2] = $6 + Math_fround(Math_fround(Math_fround(HEAP32[$1 + 8 >> 2]) * $3) + HEAPF32[$2 + 4 >> 2]);
   $10 = $5 + 104 | 0;
   $6 = Math_fround($7 + $7);
   $1 = HEAP32[$0 + 32 >> 2] + ($8 << 4) | 0;
   $9 = Math_fround($6 + HEAPF32[$1 + 8 >> 2]);
   HEAPF32[$10 >> 2] = $3 * $9;
   $11 = HEAPF32[$1 + 12 >> 2];
   $6 = Math_fround($6 + $11);
   HEAPF32[$5 + 108 >> 2] = $3 * $6;
   HEAPF32[$5 + 80 >> 2] = HEAPF32[$1 >> 2] - $7;
   $3 = HEAPF32[$1 + 4 >> 2];
   $8 = $5 + 88 | 0;
   HEAPF32[$8 >> 2] = $9;
   HEAPF32[$5 + 92 >> 2] = $6;
   HEAP32[$5 + 72 >> 2] = 0;
   HEAP32[$5 + 76 >> 2] = 0;
   $3 = Math_fround($3 - $7);
   HEAPF32[$5 + 84 >> 2] = $3;
   $1 = HEAP32[$0 + 24 >> 2];
   HEAP32[$5 + 56 >> 2] = HEAP32[$0 + 20 >> 2];
   HEAP32[$5 + 60 >> 2] = $1;
   $1 = $5 - -64 | 0;
   $2 = HEAP32[$0 + 28 >> 2];
   HEAP32[$1 >> 2] = $2;
   $18 = HEAP32[$0 + 12 >> 2];
   $0 = HEAP32[$0 + 16 >> 2];
   $21 = HEAP32[$8 + 4 >> 2];
   HEAP32[$5 + 40 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$5 + 44 >> 2] = $21;
   HEAP32[$5 + 48 >> 2] = $18;
   HEAP32[$5 + 52 >> 2] = $0;
   $0 = HEAP32[$5 + 84 >> 2];
   HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 80 >> 2];
   HEAP32[$5 + 36 >> 2] = $0;
   $0 = HEAP32[$10 + 4 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$5 + 28 >> 2] = $0;
   $0 = HEAP32[$5 + 76 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2];
   HEAP32[$5 + 12 >> 2] = $0;
   $0 = HEAP32[$5 + 100 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 96 >> 2];
   HEAP32[$5 + 20 >> 2] = $0;
   $0 = HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24);
   HEAP32[$5 + 4 >> 2] = $0;
   $4 = $5 + 48 | 0;
   $10 = HEAP32[$4 >> 2];
  }
  block3 : {
   if ((global$9 | 0) == 2 | $10) {
    if (!global$9) {
     $1 = $5 + 16 | 0;
     $8 = $5 + 8 | 0;
     $2 = $5 + 4 | 0;
     $0 = $5 + 32 | 0;
     $7 = HEAPF32[$0 + 8 >> 2];
     $15 = HEAPF32[$0 + 12 >> 2];
     if ($15 < Math_fround(0.0)) {
      HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] - $15
     }
     $3 = Math_fround(HEAPF32[$1 + 4 >> 2] - HEAPF32[$8 + 4 >> 2]);
     $6 = HEAPF32[$1 + 12 >> 2];
     $16 = Math_fround($3 + ($6 < Math_fround(0.0) ? Math_fround(-$6) : $6));
     $11 = Math_fround(HEAPF32[$1 >> 2] - HEAPF32[$8 >> 2]);
     $6 = HEAPF32[$1 + 8 >> 2];
     $19 = Math_fround($11 + ($6 < Math_fround(0.0) ? Math_fround(-$6) : $6));
     $6 = Math_fround(-$7);
     $14 = $7 < Math_fround(0.0) ? $6 : $7;
     $1 = HEAP32[$4 + 4 >> 2];
     $17 = Math_fround($1 | 0);
     $9 = Math_fround(HEAP32[$4 + 8 >> 2]);
    }
    if (!global$9 | !$13) {
     rlSetTexture($10);
     $4 = 0;
     if ((global$9 | 0) == 1) {
      break block3
     }
    }
    if (!global$9 | ($13 | 0) == 1) {
     rlBegin();
     $4 = 1;
     if ((global$9 | 0) == 1) {
      break block3
     }
    }
    if (!global$9) {
     rlColor4ub(HEAPU8[$2 | 0], HEAPU8[$2 + 1 | 0], HEAPU8[$2 + 2 | 0], HEAPU8[$2 + 3 | 0]);
     rlNormal3f();
     $6 = HEAPF32[$0 >> 2];
     $1 = $7 < Math_fround(0.0);
    }
    block4 : {
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9) {
       $14 = Math_fround(Math_fround($6 + $14) / $17);
       $12 = HEAPF32[$0 + 4 >> 2];
       $7 = Math_fround($12 / $9);
       rlTexCoord2f($14, $7);
      }
      if (!global$9 | ($13 | 0) == 2) {
       rlVertex2f($11, $3);
       $4 = 2;
       if ((global$9 | 0) == 1) {
        break block3
       }
      }
      if (!global$9) {
       $12 = Math_fround($15 + $12);
       $9 = Math_fround($12 / $9);
       rlTexCoord2f($14, $9);
      }
      if (!global$9 | ($13 | 0) == 3) {
       rlVertex2f($11, $16);
       $4 = 3;
       if ((global$9 | 0) == 1) {
        break block3
       }
      }
      if (!global$9) {
       break block4
      }
     }
     if (!global$9) {
      $12 = Math_fround($6 / $17);
      $20 = HEAPF32[$0 + 4 >> 2];
      $7 = Math_fround($20 / $9);
      rlTexCoord2f($12, $7);
     }
     if (!global$9 | ($13 | 0) == 4) {
      rlVertex2f($11, $3);
      $4 = 4;
      if ((global$9 | 0) == 1) {
       break block3
      }
     }
     if (!global$9) {
      $9 = Math_fround(Math_fround($15 + $20) / $9);
      rlTexCoord2f($12, $9);
     }
     if (!global$9 | ($13 | 0) == 5) {
      rlVertex2f($11, $16);
      $4 = 5;
      if ((global$9 | 0) == 1) {
       break block3
      }
     }
     $6 = global$9 ? $6 : Math_fround($6 + $14);
    }
    if (!global$9) {
     $6 = Math_fround($6 / $17);
     rlTexCoord2f($6, $9);
    }
    if (!global$9 | ($13 | 0) == 6) {
     rlVertex2f($19, $16);
     $4 = 6;
     if ((global$9 | 0) == 1) {
      break block3
     }
    }
    if (!global$9) {
     rlTexCoord2f($6, $7)
    }
    if (!global$9 | ($13 | 0) == 7) {
     rlVertex2f($19, $3);
     $4 = 7;
     if ((global$9 | 0) == 1) {
      break block3
     }
    }
    if (!global$9) {
     rlEnd()
    }
    if (!global$9 | ($13 | 0) == 8) {
     rlSetTexture(0);
     $4 = 8;
     if ((global$9 | 0) == 1) {
      break block3
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $5 + 112 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAPF32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAPF32[$4 + 20 >> 2] = $6;
  HEAPF32[$4 + 24 >> 2] = $7;
  HEAPF32[$4 + 28 >> 2] = $9;
  HEAP32[$4 + 32 >> 2] = $10;
  HEAPF32[$4 + 36 >> 2] = $11;
  HEAPF32[$4 + 40 >> 2] = $14;
  HEAPF32[$4 + 44 >> 2] = $12;
  HEAPF32[$4 + 48 >> 2] = $15;
  HEAPF32[$4 + 52 >> 2] = $16;
  HEAPF32[$4 + 56 >> 2] = $17;
  HEAPF32[$4 + 60 >> 2] = $19;
  HEAPF32[$4 + 64 >> 2] = $20;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 68;
 }
 
 function GetGlyphIndex($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 36 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  block2 : {
   block : {
    if (($3 | 0) <= 0) {
     break block
    }
    $0 = 0;
    while (1) {
     block1 : {
      $4 = HEAP32[Math_imul($0, 36) + $2 >> 2];
      $5 = ($4 | 0) == 63 ? $0 : $5;
      if (($1 | 0) == ($4 | 0)) {
       break block1
      }
      $0 = $0 + 1 | 0;
      if (($3 | 0) != ($0 | 0)) {
       continue
      }
      break block;
     }
     break;
    };
    if ($0) {
     break block2
    }
   }
   $0 = HEAP32[$2 >> 2] != ($1 | 0) ? $5 : 0;
  }
  return $0;
 }
 
 function TraceLog($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 272 | 0;
   __stack_pointer = $5;
   $4 = HEAP32[12966] > ($0 | 0);
  }
  block1 : {
   block9 : {
    block : {
     if (!global$9) {
      if ($4) {
       break block
      }
      HEAP32[$5 + 268 >> 2] = $2;
      $2 = HEAP32[18272];
     }
     if ((global$9 | 0) == 2 | $2) {
      $4 = global$9 ? $4 : HEAP32[$5 + 268 >> 2];
      if (!global$9 | !$6) {
       FUNCTION_TABLE[$2 | 0]($0, $1, $4);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       break block
      }
     }
     if (!global$9) {
      $2 = __memset($5, 0, 256);
      block8 : {
       block7 : {
        switch ($0 - 1 | 0) {
        case 0:
         HEAP32[$2 >> 2] = 1128354388;
         HEAP32[$2 + 4 >> 2] = 2112069;
         break block8;
        case 1:
         HEAP32[$2 >> 2] = 1430406468;
         HEAP32[$2 + 4 >> 2] = 2112071;
         break block8;
        case 2:
         $3 = HEAPU8[13319] | HEAPU8[13320] << 8 | (HEAPU8[13321] << 16 | HEAPU8[13322] << 24);
         HEAP8[$2 + 3 | 0] = $3;
         HEAP8[$2 + 4 | 0] = $3 >>> 8;
         HEAP8[$2 + 5 | 0] = $3 >>> 16;
         HEAP8[$2 + 6 | 0] = $3 >>> 24;
         HEAP32[$2 >> 2] = HEAPU8[13316] | HEAPU8[13317] << 8 | (HEAPU8[13318] << 16 | HEAPU8[13319] << 24);
         break block8;
        case 3:
         HEAP16[$2 + 8 >> 1] = HEAPU8[13331] | HEAPU8[13332] << 8;
         $3 = HEAPU8[13327] | HEAPU8[13328] << 8 | (HEAPU8[13329] << 16 | HEAPU8[13330] << 24);
         HEAP32[$2 >> 2] = HEAPU8[13323] | HEAPU8[13324] << 8 | (HEAPU8[13325] << 16 | HEAPU8[13326] << 24);
         HEAP32[$2 + 4 >> 2] = $3;
         break block8;
        case 4:
         HEAP32[$2 >> 2] = 1330795077;
         HEAP32[$2 + 4 >> 2] = 2112082;
         break block8;
        case 5:
         break block7;
        default:
         break block8;
        };
       }
       HEAP32[$2 >> 2] = 1096040774;
       HEAP32[$2 + 4 >> 2] = 2112076;
      }
      $4 = strlen($1);
      __memcpy(strlen($2) + $2 | 0, $1, $4 >>> 0 >= 244 ? 244 : $4);
      $1 = strlen($2) + $2 | 0;
      HEAP8[$1 | 0] = 10;
      HEAP8[$1 + 1 | 0] = 0;
      $1 = HEAP32[$2 + 268 >> 2];
     }
     if (!global$9 | ($6 | 0) == 1) {
      $3 = vfprintf(51928, $2, $1);
      $7 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $3;
     }
     $1 = global$9 ? $1 : HEAP32[6911];
     if (!global$9 | ($6 | 0) == 2) {
      fflush($1);
      $7 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9 & ($0 | 0) == 6) {
      break block9
     }
    }
    if (!global$9) {
     __stack_pointer = $5 + 272 | 0;
     return;
    }
   }
   if (!global$9) {
    exit(1);
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function SaveFileData($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $8 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer + -64 | 0;
   __stack_pointer = $4;
  }
  block : {
   block1 : {
    if ((global$9 | 0) == 2 | $0) {
     $5 = global$9 ? $5 : HEAP32[18273];
     if ($5 | (global$9 | 0) == 2) {
      if (!global$9 | !$6) {
       $3 = FUNCTION_TABLE[$5 | 0]($0, $1, $2) | 0;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $3;
      }
      if (!global$9) {
       break block1
      }
     }
     if (!global$9 | ($6 | 0) == 1) {
      $3 = fopen($0);
      $7 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $5 = $3;
     }
     if ((global$9 | 0) == 2 | $5) {
      if (!global$9 | ($6 | 0) == 2) {
       $3 = fwrite($1, 1, $2, $5);
       $7 = 2;
       if ((global$9 | 0) == 1) {
        break block
       }
       $1 = $3;
      }
      block2 : {
       if ((global$9 | 0) == 2 | (global$9 ? $8 : !$1)) {
        if (!global$9) {
         HEAP32[$4 + 16 >> 2] = $0;
         $0 = $4 + 16 | 0;
        }
        if (!global$9 | ($6 | 0) == 3) {
         TraceLog(4, 7862, $0);
         $7 = 3;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         break block2
        }
       }
       if ((global$9 | 0) == 2 | (global$9 ? $1 : ($1 | 0) != ($2 | 0))) {
        if (!global$9) {
         HEAP32[$4 + 48 >> 2] = $0;
         $0 = $4 + 48 | 0;
        }
        if (!global$9 | ($6 | 0) == 4) {
         TraceLog(4, 5062, $0);
         $7 = 4;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         break block2
        }
       }
       if (!global$9) {
        HEAP32[$4 + 32 >> 2] = $0;
        $0 = $4 + 32 | 0;
       }
       if (!global$9 | ($6 | 0) == 5) {
        TraceLog(3, 1352, $0);
        $7 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
      }
      if (!global$9 | ($6 | 0) == 6) {
       $3 = fclose($5);
       $7 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $3;
      }
      if (!global$9) {
       $0 = !$0;
       break block1;
      }
     }
     if (!global$9) {
      HEAP32[$4 >> 2] = $0
     }
     if (!global$9 | ($6 | 0) == 7) {
      TraceLog(4, 7829, $4);
      $7 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $0 = 0;
      break block1;
     }
    }
    if (!global$9 | ($6 | 0) == 8) {
     TraceLog(4, 8349, 0);
     $7 = 8;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : 0;
   }
   if (!global$9) {
    __stack_pointer = $4 - -64 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function _emscripten_tls_init() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9) {
    $1 = __tls_base;
    $2 = thread_ptr;
    $0 = HEAP32[$2 + 116 >> 2];
    if ($0) {
     HEAP32[$2 + 116 >> 2] = 0;
     __wasm_init_tls($0);
     return $0 | 0;
    }
    $0 = $1 ? g_needs_dynamic_alloc : 1;
   }
   if ($0 | (global$9 | 0) == 2) {
    if (!global$9) {
     g_needs_dynamic_alloc = 1
    }
    if (!global$9 | !$3) {
     $0 = emscripten_builtin_malloc(8);
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $0;
    }
   }
   if (!global$9) {
    __wasm_init_tls($1);
    return $1 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function glfwGetProcAddress($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = strlen($0) + 1 | 0
  }
  block : {
   if (!global$9 | !$3) {
    $2 = emscripten_builtin_malloc($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    $0 = strcpy($1, $0);
    $1 = strstr($0, 10524);
    if ($1) {
     HEAP8[$1 | 0] = 0
    }
    $1 = strstr($0, 11068);
    if ($1) {
     HEAP8[$1 | 0] = 0
    }
    $1 = strstr($0, 10609);
    if ($1) {
     HEAP8[$1 | 0] = 0
    }
    $1 = strstr($0, 10912);
    if ($1) {
     HEAP8[$1 | 0] = 0
    }
    $1 = strstr($0, 10800);
    if ($1) {
     HEAP8[$1 | 0] = 0
    }
    $1 = 43;
    block1 : {
     if (!strcmp($0, 7774)) {
      break block1
     }
     $1 = 44;
     if (!strcmp($0, 4584)) {
      break block1
     }
     $1 = 45;
     if (!strcmp($0, 5037)) {
      break block1
     }
     $1 = 46;
     if (!strcmp($0, 4514)) {
      break block1
     }
     $1 = 47;
     if (!strcmp($0, 4485)) {
      break block1
     }
     $1 = 48;
     if (!strcmp($0, 4450)) {
      break block1
     }
     $1 = 49;
     if (!strcmp($0, 7790)) {
      break block1
     }
     $1 = 50;
     if (!strcmp($0, 4255)) {
      break block1
     }
     $1 = 51;
     if (!strcmp($0, 4980)) {
      break block1
     }
     $1 = 52;
     if (!strcmp($0, 7444)) {
      break block1
     }
     $1 = 53;
     if (!strcmp($0, 9447)) {
      break block1
     }
     $1 = 54;
     if (!strcmp($0, 7512)) {
      break block1
     }
     $1 = 55;
     if (!strcmp($0, 10042)) {
      break block1
     }
     $1 = 56;
     if (!strcmp($0, 10055)) {
      break block1
     }
     $1 = 57;
     if (!strcmp($0, 3403)) {
      break block1
     }
     $1 = 58;
     if (!strcmp($0, 4748)) {
      break block1
     }
     $1 = 59;
     if (!strcmp($0, 4242)) {
      break block1
     }
     $1 = 60;
     if (!strcmp($0, 7198)) {
      break block1
     }
     $1 = 61;
     if (!strcmp($0, 5420)) {
      break block1
     }
     $1 = 62;
     if (!strcmp($0, 5570)) {
      break block1
     }
     $1 = 63;
     if (!strcmp($0, 4644)) {
      break block1
     }
     $1 = 64;
     if (!strcmp($0, 10981)) {
      break block1
     }
     $1 = 65;
     if (!strcmp($0, 11040)) {
      break block1
     }
     $1 = 66;
     if (!strcmp($0, 10951)) {
      break block1
     }
     $1 = 67;
     if (!strcmp($0, 11004)) {
      break block1
     }
     $1 = 68;
     if (!strcmp($0, 5360)) {
      break block1
     }
     $1 = 69;
     if (!strcmp($0, 4629)) {
      break block1
     }
     $1 = 70;
     if (!strcmp($0, 8266)) {
      break block1
     }
     $1 = 71;
     if (!strcmp($0, 3667)) {
      break block1
     }
     $1 = 72;
     if (!strcmp($0, 3619)) {
      break block1
     }
     $1 = 73;
     if (!strcmp($0, 5344)) {
      break block1
     }
     $1 = 74;
     if (!strcmp($0, 3579)) {
      break block1
     }
     $1 = 75;
     if (!strcmp($0, 4614)) {
      break block1
     }
     $1 = 76;
     if (!strcmp($0, 3809)) {
      break block1
     }
     $1 = 77;
     if (!strcmp($0, 9435)) {
      break block1
     }
     $1 = 78;
     if (!strcmp($0, 5596)) {
      break block1
     }
     $1 = 79;
     if (!strcmp($0, 7244)) {
      break block1
     }
     $1 = 80;
     if (!strcmp($0, 4599)) {
      break block1
     }
     $1 = 81;
     if (!strcmp($0, 7896)) {
      break block1
     }
     $1 = 82;
     if (!strcmp($0, 1922)) {
      break block1
     }
     $1 = 83;
     if (!strcmp($0, 3373)) {
      break block1
     }
     $1 = 84;
     if (!strcmp($0, 3428)) {
      break block1
     }
     $1 = 85;
     if (!strcmp($0, 7906)) {
      break block1
     }
     $1 = 86;
     if (!strcmp($0, 1949)) {
      break block1
     }
     $1 = 87;
     if (!strcmp($0, 6957)) {
      break block1
     }
     $1 = 88;
     if (!strcmp($0, 6949)) {
      break block1
     }
     $1 = 89;
     if (!strcmp($0, 4424)) {
      break block1
     }
     $1 = 90;
     if (!strcmp($0, 10928)) {
      break block1
     }
     $1 = 91;
     if (!strcmp($0, 8254)) {
      break block1
     }
     $1 = 92;
     if (!strcmp($0, 3654)) {
      break block1
     }
     $1 = 93;
     if (!strcmp($0, 4865)) {
      break block1
     }
     $1 = 94;
     if (!strcmp($0, 3601)) {
      break block1
     }
     $1 = 95;
     if (!strcmp($0, 3560)) {
      break block1
     }
     $1 = 96;
     if (!strcmp($0, 3795)) {
      break block1
     }
     $1 = 97;
     if (!strcmp($0, 9987)) {
      break block1
     }
     $1 = 98;
     if (!strcmp($0, 5231)) {
      break block1
     }
     $1 = 99;
     if (!strcmp($0, 3683)) {
      break block1
     }
     $1 = 100;
     if (!strcmp($0, 5017)) {
      break block1
     }
     $1 = 101;
     if (!strcmp($0, 2313)) {
      break block1
     }
     $1 = 102;
     if (!strcmp($0, 2483)) {
      break block1
     }
     $1 = 103;
     if (!strcmp($0, 4219)) {
      break block1
     }
     $1 = 104;
     if (!strcmp($0, 2257)) {
      break block1
     }
     $1 = 105;
     if (!strcmp($0, 2416)) {
      break block1
     }
     $1 = 106;
     if (!strcmp($0, 2295)) {
      break block1
     }
     $1 = 107;
     if (!strcmp($0, 2535)) {
      break block1
     }
     $1 = 108;
     if (!strcmp($0, 7029)) {
      break block1
     }
     $1 = 109;
     if (!strcmp($0, 2454)) {
      break block1
     }
     $1 = 110;
     if (!strcmp($0, 2506)) {
      break block1
     }
     $1 = 111;
     if (!strcmp($0, 7010)) {
      break block1
     }
     $1 = 112;
     if (!strcmp($0, 3230)) {
      break block1
     }
     $1 = 113;
     if (!strcmp($0, 8175)) {
      break block1
     }
     $1 = 114;
     if (!strcmp($0, 7081)) {
      break block1
     }
     $1 = 115;
     if (!strcmp($0, 2622)) {
      break block1
     }
     $1 = 116;
     if (!strcmp($0, 2379)) {
      break block1
     }
     $1 = 117;
     if (!strcmp($0, 2659)) {
      break block1
     }
     $1 = 118;
     if (!strcmp($0, 2520)) {
      break block1
     }
     $1 = 119;
     if (!strcmp($0, 4996)) {
      break block1
     }
     $1 = 120;
     if (!strcmp($0, 2689)) {
      break block1
     }
     $1 = 121;
     if (!strcmp($0, 2550)) {
      break block1
     }
     $1 = 122;
     if (!strcmp($0, 2269)) {
      break block1
     }
     $1 = 123;
     if (!strcmp($0, 3036)) {
      break block1
     }
     $1 = 124;
     if (!strcmp($0, 4503)) {
      break block1
     }
     $1 = 125;
     if (!strcmp($0, 9083)) {
      break block1
     }
     $1 = 126;
     if (!strcmp($0, 4469)) {
      break block1
     }
     $1 = 127;
     if (!strcmp($0, 5318)) {
      break block1
     }
     $1 = 128;
     if (!strcmp($0, 4407)) {
      break block1
     }
     $1 = 129;
     if (!strcmp($0, 4573)) {
      break block1
     }
     $1 = 130;
     if (!strcmp($0, 7762)) {
      break block1
     }
     $1 = 131;
     if (!strcmp($0, 6937)) {
      break block1
     }
     $1 = 132;
     if (!strcmp($0, 5330)) {
      break block1
     }
     $1 = 133;
     if (!strcmp($0, 5633)) {
      break block1
     }
     $1 = 134;
     if (!strcmp($0, 3136)) {
      break block1
     }
     $1 = 135;
     if (!strcmp($0, 3748)) {
      break block1
     }
     $1 = 136;
     if (!strcmp($0, 4383)) {
      break block1
     }
     $1 = 137;
     if (!strcmp($0, 7992)) {
      break block1
     }
     $1 = 138;
     if (!strcmp($0, 8014)) {
      break block1
     }
     $1 = 139;
     if (!strcmp($0, 4171)) {
      break block1
     }
     $1 = 140;
     if (!strcmp($0, 1134)) {
      break block1
     }
     $1 = 141;
     if (!strcmp($0, 8193)) {
      break block1
     }
     $1 = 142;
     if (!strcmp($0, 9421)) {
      break block1
     }
     $1 = 143;
     if (!strcmp($0, 7490)) {
      break block1
     }
     $1 = 144;
     if (!strcmp($0, 5582)) {
      break block1
     }
     $1 = 145;
     if (!strcmp($0, 7468)) {
      break block1
     }
     $1 = 146;
     if (!strcmp($0, 4882)) {
      break block1
     }
     $1 = 147;
     if (!strcmp($0, 7424)) {
      break block1
     }
     $1 = 148;
     if (!strcmp($0, 10968)) {
      break block1
     }
     $1 = 149;
     if (!strcmp($0, 7152)) {
      break block1
     }
     $1 = 150;
     if (!strcmp($0, 2642)) {
      break block1
     }
     $1 = 151;
     if (!strcmp($0, 5608)) {
      break block1
     }
     $1 = 152;
     if (!strcmp($0, 2399)) {
      break block1
     }
     $1 = 153;
     if (!strcmp($0, 11024)) {
      break block1
     }
     $1 = 154;
     if (!strcmp($0, 7355)) {
      break block1
     }
     $1 = 155;
     if (!strcmp($0, 2859)) {
      break block1
     }
     $1 = 156;
     if (!strcmp($0, 5683)) {
      break block1
     }
     $1 = 157;
     if (!strcmp($0, 2609)) {
      break block1
     }
     $1 = 158;
     if (!strcmp($0, 7326)) {
      break block1
     }
     $1 = 159;
     if (!strcmp($0, 2828)) {
      break block1
     }
     $1 = 160;
     if (!strcmp($0, 5671)) {
      break block1
     }
     $1 = 161;
     if (!strcmp($0, 2596)) {
      break block1
     }
     $1 = 162;
     if (!strcmp($0, 7297)) {
      break block1
     }
     $1 = 163;
     if (!strcmp($0, 2778)) {
      break block1
     }
     $1 = 164;
     if (!strcmp($0, 5659)) {
      break block1
     }
     $1 = 165;
     if (!strcmp($0, 2583)) {
      break block1
     }
     $1 = 166;
     if (!strcmp($0, 7268)) {
      break block1
     }
     $1 = 167;
     if (!strcmp($0, 2728)) {
      break block1
     }
     $1 = 168;
     if (!strcmp($0, 5647)) {
      break block1
     }
     $1 = 169;
     if (!strcmp($0, 2570)) {
      break block1
     }
     $1 = 170;
     if (!strcmp($0, 2809)) {
      break block1
     }
     $1 = 171;
     if (!strcmp($0, 2759)) {
      break block1
     }
     $1 = 172;
     if (!strcmp($0, 2709)) {
      break block1
     }
     $1 = 173;
     if (!strcmp($0, 5394)) {
      break block1
     }
     $1 = 174;
     if (!strcmp($0, 5376)) {
      break block1
     }
     $1 = 175;
     if (!strcmp($0, 7367)) {
      break block1
     }
     $1 = 176;
     if (!strcmp($0, 2872)) {
      break block1
     }
     $1 = 177;
     if (!strcmp($0, 7338)) {
      break block1
     }
     $1 = 178;
     if (!strcmp($0, 2841)) {
      break block1
     }
     $1 = 179;
     if (!strcmp($0, 7309)) {
      break block1
     }
     $1 = 180;
     if (!strcmp($0, 2791)) {
      break block1
     }
     $1 = 181;
     if (!strcmp($0, 7280)) {
      break block1
     }
     $1 = 182;
     if (!strcmp($0, 2741)) {
      break block1
     }
     $1 = 183;
     if (!strcmp($0, 4283)) {
      break block1
     }
     $1 = 184;
     if (!strcmp($0, 3005)) {
      break block1
     }
     $1 = 24;
     if (!strcmp($0, 10357)) {
      break block1
     }
     $1 = 25;
     if (!strcmp($0, 10373)) {
      break block1
     }
     $1 = 26;
     if (!strcmp($0, 10204)) {
      break block1
     }
     $1 = 27;
     if (!strcmp($0, 10217)) {
      break block1
     }
     $1 = 28;
     if (!strcmp($0, 10233)) {
      break block1
     }
     $1 = 29;
     if (!strcmp($0, 10417)) {
      break block1
     }
     $1 = 30;
     if (!strcmp($0, 10247)) {
      break block1
     }
     $1 = 31;
     if (!strcmp($0, 10286)) {
      break block1
     }
     $1 = 32;
     if (!strcmp($0, 10263)) {
      break block1
     }
     $1 = 33;
     if (!strcmp($0, 10333)) {
      break block1
     }
     $1 = 34;
     if (!strcmp($0, 10308)) {
      break block1
     }
     $1 = 35;
     if (!strcmp($0, 10547)) {
      break block1
     }
     $1 = 36;
     if (!strcmp($0, 10589)) {
      break block1
     }
     $1 = 37;
     if (!strcmp($0, 10568)) {
      break block1
     }
     $1 = 38;
     if (!strcmp($0, 10528)) {
      break block1
     }
     $1 = 39;
     if (!strcmp($0, 10768)) {
      break block1
     }
     $1 = 40;
     if (!strcmp($0, 10862)) {
      break block1
     }
     $1 = 41;
     if (!strcmp($0, 10889)) {
      break block1
     }
     $1 = 42;
     if (!strcmp($0, 10835)) {
      break block1
     }
     $1 = 185;
     if (!strcmp($0, 10435)) {
      break block1
     }
     $1 = 186;
     if (!strcmp($0, 10459)) {
      break block1
     }
     $1 = strcmp($0, 10787) ? 0 : 187;
    }
    if (!$1) {
     $1 = 24;
     block2 : {
      if (!strcmp($0, 3826)) {
       break block2
      }
      $1 = 25;
      if (!strcmp($0, 3839)) {
       break block2
      }
      $1 = 26;
      if (!strcmp($0, 1083)) {
       break block2
      }
      $1 = 27;
      if (!strcmp($0, 1093)) {
       break block2
      }
      $1 = 28;
      if (!strcmp($0, 1106)) {
       break block2
      }
      $1 = 29;
      if (!strcmp($0, 4268)) {
       break block2
      }
      $1 = 30;
      if (!strcmp($0, 2327)) {
       break block2
      }
      $1 = 31;
      if (!strcmp($0, 2360)) {
       break block2
      }
      $1 = 32;
      if (!strcmp($0, 2340)) {
       break block2
      }
      $1 = 33;
      if (!strcmp($0, 2912)) {
       break block2
      }
      $1 = 34;
      if (!strcmp($0, 2890)) {
       break block2
      }
      $1 = 35;
      if (!strcmp($0, 1904)) {
       break block2
      }
      $1 = 36;
      if (!strcmp($0, 3352)) {
       break block2
      }
      $1 = 37;
      if (!strcmp($0, 3334)) {
       break block2
      }
      $1 = 38;
      if (!strcmp($0, 1888)) {
       break block2
      }
      $1 = 39;
      if (!strcmp($0, 3640)) {
       break block2
      }
      $1 = 40;
      if (!strcmp($0, 9138)) {
       break block2
      }
      $1 = 41;
      if (!strcmp($0, 9160)) {
       break block2
      }
      $1 = strcmp($0, 4181) ? 0 : 42;
     }
    }
   }
   if (!global$9 | ($3 | 0) == 1) {
    emscripten_builtin_free($0);
    $4 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $1 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function atan2f($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0);
  $5 = global$9;
  if (!(((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 < 2139095041 & ((wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 <= 2139095040)) {
   return Math_fround($0 + $1)
  }
  $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
  if (($2 | 0) == 1065353216) {
   $0 = atanf($0);
   if ((global$9 | 0) != ($5 | 0)) {
    wasm2js_trap()
   }
   return $0;
  }
  $6 = $2 >>> 30 & 2;
  $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $4 = $6 | $3 >>> 31;
  folding_inner0 : {
   block8 : {
    $3 = $3 & 2147483647;
    block3 : {
     if (!$3) {
      block2 : {
       switch ($4 - 2 | 0) {
       case 0:
        return Math_fround(3.1415927410125732);
       case 1:
        break block2;
       default:
        break block3;
       };
      }
      return Math_fround(-3.1415927410125732);
     }
     $2 = $2 & 2147483647;
     if (($2 | 0) != 2139095040) {
      if (!$2 | !(($3 | 0) != 2139095040 & $3 >>> 0 <= $2 + 218103808 >>> 0)) {
       break folding_inner0
      }
      block4 : {
       if ($6) {
        if ($2 >>> 0 > $3 + 218103808 >>> 0) {
         break block4
        }
       }
       $7 = atanf(Math_fround(Math_abs(Math_fround($0 / $1))));
       if ((global$9 | 0) != ($5 | 0)) {
        wasm2js_trap()
       }
      }
      $0 = $7;
      block7 : {
       switch ($4 - 1 | 0) {
       case 0:
        return Math_fround(-$0);
       case 1:
        return Math_fround(Math_fround(3.1415927410125732) - Math_fround($0 + Math_fround(8.742277657347586e-08)));
       case 2:
        break block7;
       default:
        break block3;
       };
      }
      return Math_fround(Math_fround($0 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
     }
     if (($3 | 0) == 2139095040) {
      break block8
     }
     $0 = HEAPF32[($4 << 2) + 24736 >> 2];
    }
    return $0;
   }
   return HEAPF32[($4 << 2) + 24720 >> 2];
  }
  return wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141403), wasm2js_scratch_load_f32();
 }
 
 function atanf($0) {
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
  $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $2 = $5 & 2147483647;
  if ($2 >>> 0 >= 1283457024) {
   return ((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095040 ? $0 : (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141402), wasm2js_scratch_load_f32())
  }
  block1 : {
   block : {
    if ($2 >>> 0 <= 1054867455) {
     $1 = -1;
     if ($2 >>> 0 >= 964689920) {
      break block
     }
     break block1;
    }
    $0 = Math_fround(Math_abs($0));
    if ($2 >>> 0 <= 1066926079) {
     if ($2 >>> 0 <= 1060110335) {
      $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1.0)) / Math_fround($0 + Math_fround(2.0)));
      $1 = 0;
      break block;
     }
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.0)) / Math_fround($0 + Math_fround(1.0)));
     $1 = 1;
     break block;
    }
    if ($2 >>> 0 <= 1075576831) {
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1.0)));
     $1 = 2;
     break block;
    }
    $0 = Math_fround(Math_fround(-1.0) / $0);
    $1 = 3;
   }
   $4 = Math_fround($0 * $0);
   $3 = Math_fround($4 * $4);
   $6 = Math_fround($3 * Math_fround(Math_fround($3 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $3 = Math_fround($4 * Math_fround(Math_fround($3 * Math_fround(Math_fround($3 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   if ($2 >>> 0 <= 1054867455) {
    return Math_fround($0 - Math_fround($0 * Math_fround($6 + $3)))
   }
   $1 = $1 << 2;
   $0 = Math_fround(HEAPF32[$1 + 24752 >> 2] - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $3)) - HEAPF32[$1 + 24768 >> 2]) - $0));
   $0 = ($5 | 0) < 0 ? Math_fround(-$0) : $0;
  }
  return $0;
 }
 
 function dummy($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __cosdf($0) {
  var $1 = 0.0;
  $0 = $0 * $0;
  $1 = $0 * $0;
  return Math_fround($0 * $1 * ($0 * 2.439044879627741e-05 + -.001388676377460993) + ($1 * .04166662332373906 + ($0 * -.499999997251031 + 1.0)));
 }
 
 function __sindf($0) {
  var $1 = 0.0, $2 = 0.0;
  $1 = $0 * $0;
  $2 = $0 * $1;
  return Math_fround($2 * ($1 * $1) * ($1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
 }
 
 function __rem_pio2f($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $16 = global$9;
  $14 = __stack_pointer - 16 | 0;
  __stack_pointer = $14;
  $18 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $4 = $18 & 2147483647;
  block : {
   if ($4 >>> 0 <= 1305022426) {
    $8 = +$0;
    $3 = $8 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $17 = $8 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
    HEAPF64[$1 >> 3] = $17;
    $2 = Math_abs($3) < 2147483647.0 ? ~~$3 : -2147483648;
    if ($17 < -.7853981852531433) {
     $3 = $3 + -1.0;
     HEAPF64[$1 >> 3] = $8 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
     $2 = $2 - 1 | 0;
     break block;
    }
    if (!($17 > .7853981852531433)) {
     break block
    }
    $3 = $3 + 1.0;
    HEAPF64[$1 >> 3] = $8 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
    $2 = $2 + 1 | 0;
    break block;
   }
   if ($4 >>> 0 >= 2139095040) {
    HEAPF64[$1 >> 3] = Math_fround($0 - $0);
    break block;
   }
   $2 = $4;
   $4 = ($4 >>> 23 | 0) - 150 | 0;
   HEAPF64[$14 + 8 >> 3] = (wasm2js_scratch_store_i32(2, $2 - ($4 << 23) | 0), wasm2js_scratch_load_f32());
   $19 = $14 + 8 | 0;
   $6 = __stack_pointer - 560 | 0;
   __stack_pointer = $6;
   $2 = ($4 - 3 | 0) / 24 | 0;
   $15 = ($2 | 0) > 0 ? $2 : 0;
   $13 = $4 + Math_imul($15, -24) | 0;
   $12 = HEAP32[6196];
   if (($12 | 0) >= 0) {
    $4 = $12 + 1 | 0;
    $2 = $15;
    while (1) {
     HEAPF64[($6 + 320 | 0) + ($5 << 3) >> 3] = ($2 | 0) < 0 ? 0.0 : +HEAP32[($2 << 2) + 24800 >> 2];
     $2 = $2 + 1 | 0;
     $5 = $5 + 1 | 0;
     if (($4 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   $7 = $13 - 24 | 0;
   $4 = 0;
   $5 = ($12 | 0) > 0 ? $12 : 0;
   while (1) {
    $2 = 0;
    $3 = 0.0;
    while (1) {
     $3 = HEAPF64[$19 + ($2 << 3) >> 3] * HEAPF64[($6 + 320 | 0) + ($4 - $2 << 3) >> 3] + $3;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 1) {
      continue
     }
     break;
    };
    HEAPF64[($4 << 3) + $6 >> 3] = $3;
    $2 = ($4 | 0) == ($5 | 0);
    $4 = $4 + 1 | 0;
    if (!$2) {
     continue
    }
    break;
   };
   $23 = 47 - $13 | 0;
   $20 = 48 - $13 | 0;
   $24 = $13 - 25 | 0;
   $4 = $12;
   block11 : {
    while (1) {
     $3 = HEAPF64[($4 << 3) + $6 >> 3];
     $2 = 0;
     $5 = $4;
     if (($4 | 0) > 0) {
      while (1) {
       $10 = ($6 + 480 | 0) + ($2 << 2) | 0;
       $8 = $3 * 5.9604644775390625e-08;
       if (Math_abs($8) < 2147483647.0) {
        $9 = ~~$8
       } else {
        $9 = -2147483648
       }
       $8 = +($9 | 0);
       $3 = $8 * -16777216.0 + $3;
       if (Math_abs($3) < 2147483647.0) {
        $9 = ~~$3
       } else {
        $9 = -2147483648
       }
       HEAP32[$10 >> 2] = $9;
       $5 = $5 - 1 | 0;
       $3 = HEAPF64[($5 << 3) + $6 >> 3] + $8;
       $2 = $2 + 1 | 0;
       if (($4 | 0) != ($2 | 0)) {
        continue
       }
       break;
      }
     }
     $3 = scalbn($3, $7);
     if ((global$9 | 0) != ($16 | 0)) {
      wasm2js_trap()
     }
     $3 = $3 + Math_floor($3 * .125) * -8.0;
     if (Math_abs($3) < 2147483647.0) {
      $9 = ~~$3
     } else {
      $9 = -2147483648
     }
     $3 = $3 - +($9 | 0);
     block3 : {
      block4 : {
       block2 : {
        $21 = ($7 | 0) <= 0;
        block1 : {
         if (!$21) {
          $5 = (($4 << 2) + $6 | 0) + 476 | 0;
          $10 = HEAP32[$5 >> 2];
          $2 = $10 >> $20;
          $11 = $5;
          $5 = $10 - ($2 << $20) | 0;
          HEAP32[$11 >> 2] = $5;
          $9 = $2 + $9 | 0;
          $10 = $5 >> $23;
          break block1;
         }
         if ($7) {
          break block2
         }
         $10 = HEAP32[(($4 << 2) + $6 | 0) + 476 >> 2] >> 23;
        }
        if (($10 | 0) <= 0) {
         break block3
        }
        break block4;
       }
       $10 = 2;
       if ($3 >= .5) {
        break block4
       }
       $10 = 0;
       break block3;
      }
      $2 = 0;
      $11 = 0;
      $5 = 1;
      if (($4 | 0) > 0) {
       while (1) {
        $5 = ($6 + 480 | 0) + ($2 << 2) | 0;
        $22 = HEAP32[$5 >> 2];
        block6 : {
         block5 : {
          if ($11) {
           $11 = 16777215
          } else {
           if (!$22) {
            break block5
           }
           $11 = 16777216;
          }
          HEAP32[$5 >> 2] = $11 - $22;
          $11 = 1;
          $5 = 0;
          break block6;
         }
         $11 = 0;
         $5 = 1;
        }
        $2 = $2 + 1 | 0;
        if (($4 | 0) != ($2 | 0)) {
         continue
        }
        break;
       }
      }
      block7 : {
       if ($21) {
        break block7
       }
       $2 = 8388607;
       block8 : {
        switch ($24 | 0) {
        case 1:
         $2 = 4194303;
         break;
        case 0:
         break block8;
        default:
         break block7;
        };
       }
       $11 = (($4 << 2) + $6 | 0) + 476 | 0;
       HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & $2;
      }
      $9 = $9 + 1 | 0;
      if (($10 | 0) != 2) {
       break block3
      }
      $3 = 1.0 - $3;
      $10 = 2;
      if ($5) {
       break block3
      }
      $8 = scalbn(1.0, $7);
      if ((global$9 | 0) != ($16 | 0)) {
       wasm2js_trap()
      }
      $3 = $3 - $8;
     }
     if ($3 == 0.0) {
      $5 = 0;
      block10 : {
       $2 = $4;
       if (($12 | 0) >= ($2 | 0)) {
        break block10
       }
       while (1) {
        $2 = $2 - 1 | 0;
        $5 = HEAP32[($6 + 480 | 0) + ($2 << 2) >> 2] | $5;
        if (($2 | 0) > ($12 | 0)) {
         continue
        }
        break;
       };
       if (!$5) {
        break block10
       }
       while (1) {
        $7 = $7 - 24 | 0;
        $4 = $4 - 1 | 0;
        if (!HEAP32[($6 + 480 | 0) + ($4 << 2) >> 2]) {
         continue
        }
        break;
       };
       break block11;
      }
      $2 = 1;
      while (1) {
       $5 = $2;
       $2 = $2 + 1 | 0;
       if (!HEAP32[($6 + 480 | 0) + ($12 - $5 << 2) >> 2]) {
        continue
       }
       break;
      };
      $5 = $4 + $5 | 0;
      while (1) {
       $4 = $4 + 1 | 0;
       $9 = $4;
       HEAPF64[($6 + 320 | 0) + ($4 << 3) >> 3] = HEAP32[($4 + $15 << 2) + 24800 >> 2];
       $2 = 0;
       $3 = 0.0;
       while (1) {
        $3 = HEAPF64[$19 + ($2 << 3) >> 3] * HEAPF64[($6 + 320 | 0) + ($9 - $2 << 3) >> 3] + $3;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != 1) {
         continue
        }
        break;
       };
       HEAPF64[($4 << 3) + $6 >> 3] = $3;
       if (($4 | 0) < ($5 | 0)) {
        continue
       }
       break;
      };
      $4 = $5;
      continue;
     }
     break;
    };
    $3 = scalbn($3, 24 - $13 | 0);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    block12 : {
     if ($3 >= 16777216.0) {
      $7 = ($6 + 480 | 0) + ($4 << 2) | 0;
      $8 = $3 * 5.9604644775390625e-08;
      if (Math_abs($8) < 2147483647.0) {
       $2 = ~~$8
      } else {
       $2 = -2147483648
      }
      $3 = +($2 | 0) * -16777216.0 + $3;
      if (Math_abs($3) < 2147483647.0) {
       $5 = ~~$3
      } else {
       $5 = -2147483648
      }
      HEAP32[$7 >> 2] = $5;
      $4 = $4 + 1 | 0;
      $7 = $13;
      break block12;
     }
     $2 = Math_abs($3) < 2147483647.0 ? ~~$3 : -2147483648;
    }
    HEAP32[($6 + 480 | 0) + ($4 << 2) >> 2] = $2;
   }
   $3 = scalbn(1.0, $7);
   if ((global$9 | 0) != ($16 | 0)) {
    wasm2js_trap()
   }
   if (($4 | 0) >= 0) {
    $7 = $4;
    while (1) {
     $2 = $7;
     HEAPF64[($2 << 3) + $6 >> 3] = $3 * +HEAP32[($6 + 480 | 0) + ($2 << 2) >> 2];
     $7 = $2 - 1 | 0;
     $3 = $3 * 5.9604644775390625e-08;
     if ($2) {
      continue
     }
     break;
    };
    $5 = $4;
    while (1) {
     $3 = 0.0;
     $2 = 0;
     $7 = $4 - $5 | 0;
     $13 = ($7 | 0) > ($12 | 0) ? $12 : $7;
     if (($13 | 0) >= 0) {
      while (1) {
       $3 = HEAPF64[($2 << 3) + 27568 >> 3] * HEAPF64[($2 + $5 << 3) + $6 >> 3] + $3;
       $15 = ($2 | 0) != ($13 | 0);
       $2 = $2 + 1 | 0;
       if ($15) {
        continue
       }
       break;
      }
     }
     HEAPF64[($6 + 160 | 0) + ($7 << 3) >> 3] = $3;
     $2 = ($5 | 0) > 0;
     $5 = $5 - 1 | 0;
     if ($2) {
      continue
     }
     break;
    };
   }
   $3 = 0.0;
   if (($4 | 0) >= 0) {
    while (1) {
     $2 = $4;
     $4 = $2 - 1 | 0;
     $3 = $3 + HEAPF64[($6 + 160 | 0) + ($2 << 3) >> 3];
     if ($2) {
      continue
     }
     break;
    }
   }
   HEAPF64[$14 >> 3] = $10 ? -$3 : $3;
   __stack_pointer = $6 + 560 | 0;
   $2 = $9 & 7;
   $3 = HEAPF64[$14 >> 3];
   if (($18 | 0) < 0) {
    HEAPF64[$1 >> 3] = -$3;
    $2 = 0 - $2 | 0;
    break block;
   }
   HEAPF64[$1 >> 3] = $3;
  }
  __stack_pointer = $14 + 16 | 0;
  return $2;
 }
 
 function cosf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0;
  $2 = global$9;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $3 = $5 & 2147483647;
  block : {
   if ($3 >>> 0 <= 1061752794) {
    $1 = Math_fround(1.0);
    if ($3 >>> 0 < 964689920) {
     break block
    }
    $1 = __cosdf(+$0);
    if ((global$9 | 0) != ($2 | 0)) {
     wasm2js_trap()
    }
    break block;
   }
   if ($3 >>> 0 <= 1081824209) {
    if ($3 >>> 0 >= 1075235812) {
     $0 = __cosdf((($5 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + +$0);
     if ((global$9 | 0) != ($2 | 0)) {
      wasm2js_trap()
     }
     $1 = Math_fround(-$0);
     break block;
    }
    $4 = +$0;
    if (($5 | 0) < 0) {
     $1 = __sindf($4 + 1.5707963267948966);
     if ((global$9 | 0) != ($2 | 0)) {
      wasm2js_trap()
     }
     break block;
    }
    $1 = __sindf(1.5707963267948966 - $4);
    if ((global$9 | 0) != ($2 | 0)) {
     wasm2js_trap()
    }
    break block;
   }
   if ($3 >>> 0 <= 1088565717) {
    if ($3 >>> 0 >= 1085271520) {
     $1 = __cosdf((($5 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
     if ((global$9 | 0) != ($2 | 0)) {
      wasm2js_trap()
     }
     break block;
    }
    if (($5 | 0) < 0) {
     $1 = __sindf(-4.71238898038469 - +$0);
     if ((global$9 | 0) != ($2 | 0)) {
      wasm2js_trap()
     }
     break block;
    }
    $1 = __sindf(+$0 + -4.71238898038469);
    if ((global$9 | 0) != ($2 | 0)) {
     wasm2js_trap()
    }
    break block;
   }
   $1 = Math_fround($0 - $0);
   if ($3 >>> 0 >= 2139095040) {
    break block
   }
   $3 = __rem_pio2f($0, $6 + 8 | 0);
   if ((global$9 | 0) != ($2 | 0)) {
    wasm2js_trap()
   }
   $4 = HEAPF64[$6 + 8 >> 3];
   block3 : {
    switch (($3 & 3) - 1 | 0) {
    default:
     $1 = __cosdf($4);
     if ((global$9 | 0) != ($2 | 0)) {
      wasm2js_trap()
     }
     break block;
    case 0:
     $1 = __sindf(-$4);
     if ((global$9 | 0) != ($2 | 0)) {
      wasm2js_trap()
     }
     break block;
    case 1:
     $0 = __cosdf($4);
     if ((global$9 | 0) != ($2 | 0)) {
      wasm2js_trap()
     }
     $1 = Math_fround(-$0);
     break block;
    case 2:
     break block3;
    };
   }
   $1 = __sindf($4);
   if ((global$9 | 0) != ($2 | 0)) {
    wasm2js_trap()
   }
  }
  __stack_pointer = $6 + 16 | 0;
  return $1;
 }
 
 function __memcpy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  if ($2 >>> 0 >= 512) {
   if ($2) {
    wasm2js_memory_copy($0, $1, $2)
   }
   return $0;
  }
  $3 = $0 + $2 | 0;
  block2 : {
   if (!(($0 ^ $1) & 3)) {
    block : {
     if (!($0 & 3)) {
      $2 = $0;
      break block;
     }
     if (!$2) {
      $2 = $0;
      break block;
     }
     $2 = $0;
     while (1) {
      HEAP8[$2 | 0] = HEAPU8[$1 | 0];
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (!($2 & 3)) {
       break block
      }
      if ($2 >>> 0 < $3 >>> 0) {
       continue
      }
      break;
     };
    }
    $4 = $3 & -4;
    block1 : {
     if ($3 >>> 0 < 64) {
      break block1
     }
     $5 = $4 + -64 | 0;
     if ($5 >>> 0 < $2 >>> 0) {
      break block1
     }
     while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
      HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
      HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
      HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
      HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
      HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
      HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
      HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
      HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
      HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
      HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
      HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
      HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
      $1 = $1 - -64 | 0;
      $2 = $2 - -64 | 0;
      if ($5 >>> 0 >= $2 >>> 0) {
       continue
      }
      break;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break block2
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($4 >>> 0 > $2 >>> 0) {
      continue
     }
     break;
    };
    break block2;
   }
   if ($3 >>> 0 < 4) {
    $2 = $0;
    break block2;
   }
   $4 = $3 - 4 | 0;
   if ($4 >>> 0 < $0 >>> 0) {
    $2 = $0;
    break block2;
   }
   $2 = $0;
   while (1) {
    HEAP8[$2 | 0] = HEAPU8[$1 | 0];
    HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
    HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
    HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($4 >>> 0 >= $2 >>> 0) {
     continue
    }
    break;
   };
  }
  if ($2 >>> 0 < $3 >>> 0) {
   while (1) {
    HEAP8[$2 | 0] = HEAPU8[$1 | 0];
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue
    }
    break;
   }
  }
  return $0;
 }
 
 function memmove($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$9;
  block : {
   if (($0 | 0) == ($1 | 0)) {
    break block
   }
   $4 = $0 + $2 | 0;
   if ($1 - $4 >>> 0 <= 0 - ($2 << 1) >>> 0) {
    $0 = __memcpy($0, $1, $2);
    if ((global$9 | 0) != ($3 | 0)) {
     wasm2js_trap()
    }
    return $0;
   }
   $3 = ($0 ^ $1) & 3;
   block1 : {
    block2 : {
     if ($0 >>> 0 < $1 >>> 0) {
      if ($3) {
       $3 = $0;
       break block1;
      }
      if (!($0 & 3)) {
       $3 = $0;
       break block2;
      }
      $3 = $0;
      while (1) {
       if (!$2) {
        break block
       }
       HEAP8[$3 | 0] = HEAPU8[$1 | 0];
       $1 = $1 + 1 | 0;
       $2 = $2 - 1 | 0;
       $3 = $3 + 1 | 0;
       if ($3 & 3) {
        continue
       }
       break;
      };
      break block2;
     }
     block3 : {
      if ($3) {
       break block3
      }
      if ($4 & 3) {
       while (1) {
        if (!$2) {
         break block
        }
        $2 = $2 - 1 | 0;
        $3 = $2 + $0 | 0;
        HEAP8[$3 | 0] = HEAPU8[$1 + $2 | 0];
        if ($3 & 3) {
         continue
        }
        break;
       }
      }
      if ($2 >>> 0 <= 3) {
       break block3
      }
      while (1) {
       $2 = $2 - 4 | 0;
       HEAP32[$2 + $0 >> 2] = HEAP32[$1 + $2 >> 2];
       if ($2 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2) {
      break block
     }
     while (1) {
      $2 = $2 - 1 | 0;
      HEAP8[$2 + $0 | 0] = HEAPU8[$1 + $2 | 0];
      if ($2) {
       continue
      }
      break;
     };
     break block;
    }
    if ($2 >>> 0 <= 3) {
     break block1
    }
    while (1) {
     HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
     $1 = $1 + 4 | 0;
     $3 = $3 + 4 | 0;
     $2 = $2 - 4 | 0;
     if ($2 >>> 0 > 3) {
      continue
     }
     break;
    };
   }
   if (!$2) {
    break block
   }
   while (1) {
    HEAP8[$3 | 0] = HEAPU8[$1 | 0];
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function __memset($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  block : {
   if (!$2) {
    break block
   }
   HEAP8[$0 | 0] = $1;
   $3 = $0 + $2 | 0;
   HEAP8[$3 - 1 | 0] = $1;
   if ($2 >>> 0 < 3) {
    break block
   }
   HEAP8[$0 + 2 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1;
   HEAP8[$3 - 3 | 0] = $1;
   HEAP8[$3 - 2 | 0] = $1;
   if ($2 >>> 0 < 7) {
    break block
   }
   HEAP8[$0 + 3 | 0] = $1;
   HEAP8[$3 - 4 | 0] = $1;
   if ($2 >>> 0 < 9) {
    break block
   }
   $3 = 0 - $0 & 3;
   $4 = $3 + $0 | 0;
   $1 = Math_imul($1 & 255, 16843009);
   HEAP32[$4 >> 2] = $1;
   $3 = $2 - $3 & -4;
   $2 = $3 + $4 | 0;
   HEAP32[$2 - 4 >> 2] = $1;
   if ($3 >>> 0 < 9) {
    break block
   }
   HEAP32[$4 + 8 >> 2] = $1;
   HEAP32[$4 + 4 >> 2] = $1;
   HEAP32[$2 - 8 >> 2] = $1;
   HEAP32[$2 - 12 >> 2] = $1;
   if ($3 >>> 0 < 25) {
    break block
   }
   HEAP32[$4 + 24 >> 2] = $1;
   HEAP32[$4 + 20 >> 2] = $1;
   HEAP32[$4 + 16 >> 2] = $1;
   HEAP32[$4 + 12 >> 2] = $1;
   HEAP32[$2 - 16 >> 2] = $1;
   HEAP32[$2 - 20 >> 2] = $1;
   HEAP32[$2 - 24 >> 2] = $1;
   HEAP32[$2 - 28 >> 2] = $1;
   $6 = $4 & 4 | 24;
   $2 = $3 - $6 | 0;
   if ($2 >>> 0 < 32) {
    break block
   }
   $3 = __wasm_i64_mul($1, 0, 1, 1);
   $5 = i64toi32_i32$HIGH_BITS;
   $1 = $4 + $6 | 0;
   while (1) {
    HEAP32[$1 + 24 >> 2] = $3;
    HEAP32[$1 + 28 >> 2] = $5;
    HEAP32[$1 + 16 >> 2] = $3;
    HEAP32[$1 + 20 >> 2] = $5;
    HEAP32[$1 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $5;
    HEAP32[$1 >> 2] = $3;
    HEAP32[$1 + 4 >> 2] = $5;
    $1 = $1 + 32 | 0;
    $2 = $2 - 32 | 0;
    if ($2 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function __set_thread_state($0, $1, $2, $3) {
  thread_ptr = $0;
  is_main_thread = $1;
  is_runtime_thread = $2;
  supports_wait = $3;
 }
 
 function _emscripten_thread_crashed() {
  Atomics.store(HEAP32, 18274, thread_ptr);
 }
 
 function _emscripten_yield() {
  var $0 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   block : {
    if ((global$9 | 0) == 2 | (global$9 ? 0 : is_runtime_thread)) {
     if (!global$9) {
      if (Atomics.load(HEAP32, 18274)) {
       break block
      }
      if (!is_runtime_thread) {
       __assert_fail(12980, 9929, 127, 3704);
       wasm2js_trap();
      }
     }
     if (!global$9 | !$0) {
      emscripten_proxy_execute_queue();
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9) {
     return
    }
   }
   if (!global$9) {
    _emscripten_thread_set_strongref(Atomics.load(HEAP32, 18274) | 0);
    emscripten_exit_with_live_runtime();
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function emscripten_futex_wake($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $4 = global$9;
  folding_inner0 : {
   block3 : {
    block2 : {
     block : {
      if ($0 & 3 | (!$0 | ($1 | 0) < 0)) {
       break block
      }
      if (!$1) {
       return
      }
      $3 = Atomics.compareExchange(HEAP32, 0 + 73100 >> 2, $0, 0) | 0;
      $2 = $1;
      block1 : {
       if (((($0 | 0) == ($3 | 0) ? $0 : $3) | 0) != ($0 | 0)) {
        break block1
       }
       if (is_main_thread) {
        break block2
       }
       $2 = 2147483647;
       if (($1 | 0) == 2147483647) {
        break block1
       }
       if (($1 | 0) == 1) {
        break block
       }
       $2 = $1 - 1 | 0;
      }
      if ((Atomics.notify(HEAP32, $0 >> 2, $2 >>> 0) | 0) < 0) {
       break block3
      }
     }
     return;
    }
    __assert_fail(12943, 9868, 35, 7956);
    break folding_inner0;
   }
   __assert_fail(11862, 9868, 47, 7956);
  }
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  wasm2js_trap();
 }
 
 function emscripten_futex_wait($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   wasm2js_scratch_store_i32(0, HEAP32[$1 + 8 >> 2]);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $2 = +wasm2js_scratch_load_f64();
   $3 = HEAP32[$1 + 16 >> 2];
   $4 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   wasm2js_scratch_store_i32(0, $7 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $6 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $7 = (global$9 | 0) == 2;
  $3 = global$9 ? $3 : $0 & 3;
  $4 = global$9 ? 0 : $3;
  $0 = (global$9 ? 0 : $7 | $4) ? -28 : $0;
  block : {
   block4 : {
    if ($7 | !$4) {
     if (!global$9 | !$5) {
      _emscripten_yield();
      $4 = 0;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      emscripten_conditional_set_current_thread_status(1, 3);
      $3 = !supports_wait;
     }
     $4 = (global$9 | 0) == 2;
     if ($4 | $3) {
      $3 = global$9 ? $3 : is_main_thread;
      block2 : {
       block3 : {
        block1 : {
         if ($4 | $3) {
          if (!global$9) {
           $6 = +emscripten_get_now();
           $3 = a_cas_p_473(0, $0);
           if ($3) {
            break block1
           }
           $6 = $2 + $6;
          }
          while (1) {
           if (!global$9) {
            $2 = +emscripten_get_now();
            $3 = a_cas_p_473($0, 0);
            $4 = ($3 | 0) == ($0 | 0) | !$3;
            if ($2 > $6) {
             $3 = -73;
             if ($4) {
              break block2
             }
             __assert_fail(11880, 9551, 56, 9188);
             wasm2js_trap();
            }
            if (!$4) {
             break block3
            }
            $4 = !$3;
            $3 = 0;
            if ($4) {
             break block2
            }
           }
           if (!global$9 | ($5 | 0) == 1) {
            _emscripten_yield();
            $4 = 1;
            if ((global$9 | 0) == 1) {
             break block
            }
           }
           if (!global$9) {
            $3 = -6;
            if ((Atomics.load(HEAP32, $0 >> 2) | 0) != ($1 | 0)) {
             break block2
            }
            $3 = !a_cas_p_473(0, $0);
            if ($3) {
             continue
            }
           }
           break;
          };
          if (!global$9) {
           __assert_fail(11901, 9551, 112, 9188);
           wasm2js_trap();
          }
         }
         if (!global$9) {
          __assert_fail(12944, 9551, 26, 9188);
          wasm2js_trap();
         }
        }
        if (!global$9) {
         __assert_fail(11901, 9551, 45, 9188);
         wasm2js_trap();
        }
       }
       if (!global$9) {
        __assert_fail(11880, 9551, 65, 9188);
        wasm2js_trap();
       }
      }
      if (!global$9) {
       emscripten_conditional_set_current_thread_status(3, 1);
       return $3;
      }
     }
     if (!global$9) {
      $6 = $2 * 1.0e3 * 1.0e3;
      if (Math_abs($6) < 9223372036854775808.0) {
       $3 = ~~$6 >>> 0;
       if (Math_abs($6) >= 1.0) {
        $5 = ~~($6 > 0.0 ? Math_min(Math_floor($6 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($6 - +(~~$6 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
       } else {
        $5 = 0
       }
      } else {
       $3 = 0;
       $5 = -2147483648;
      }
      $4 = $3;
      $3 = $2 == Infinity;
      $0 = wasm2js_atomic_wait_i32(0, $0 | 0, $1 | 0, ($3 ? -1 : $4) | 0, ($3 ? -1 : $5) | 0) | 0;
      emscripten_conditional_set_current_thread_status(3, 1);
      if ($0 >>> 0 >= 3) {
       break block4
      }
      $0 = HEAP32[($0 << 2) + 27632 >> 2];
     }
    }
    if (!global$9) {
     return $0
    }
   }
   if (!global$9) {
    __assert_fail(11871, 9551, 179, 3114);
    wasm2js_trap();
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  wasm2js_scratch_store_f64(+$2);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 12 >> 2] = $0;
  HEAP32[$5 + 16 >> 2] = $3;
  wasm2js_scratch_store_f64(+$6);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 24 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function a_cas_p_473($0, $1) {
  $1 = Atomics.compareExchange(HEAP32, 0 + 73100 >> 2, $0, $1) | 0;
  return ($0 | 0) == ($1 | 0) ? $0 : $1;
 }
 
 function __wait($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $3 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $4 = HEAP32[$1 + 32 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   wasm2js_scratch_store_i32(0, $8 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $9 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $5 = global$9 ? $5 : 100;
  block5 : {
   block1 : {
    if (!global$9) {
     block2 : {
      block : {
       while (1) {
        if ($5) {
         if (HEAP32[$1 >> 2] ? $1 : 0) {
          break block
         }
         $5 = $5 - 1 | 0;
         if (HEAP32[$0 >> 2] == ($2 | 0)) {
          continue
         }
         break block1;
        }
        break;
       };
       if ($1) {
        break block
       }
       $7 = 1;
       break block2;
      }
      a_inc($1);
      $7 = 0;
     }
     $6 = is_runtime_thread;
     $5 = HEAP32[$0 >> 2] != ($2 | 0);
    }
    block3 : {
     if (!global$9) {
      if ($5) {
       break block3
      }
      $9 = $6 ? 1.0 : 100.0;
      $5 = thread_ptr;
     }
     while (1) {
      $3 = global$9 ? $3 : !$6;
      block6 : {
       block4 : {
        if (!($3 ? global$9 : 1)) {
         $3 = HEAPU8[$5 + 41 | 0] != 1;
         if ($3) {
          break block4
         }
        }
        while (1) {
         if (!global$9) {
          $3 = HEAP32[$5 + 36 >> 2];
          if ($3) {
           break block3
          }
         }
         if (!global$9 | !$10) {
          $4 = emscripten_futex_wait($0, $2, $9);
          $8 = 0;
          if ((global$9 | 0) == 1) {
           break block5
          }
          $3 = $4;
         }
         if (!global$9) {
          $3 = ($3 | 0) == -73;
          if ($3) {
           continue
          }
         }
         break;
        };
        if (!global$9) {
         break block6
        }
       }
       if (!global$9 | ($10 | 0) == 1) {
        emscripten_futex_wait($0, $2, Infinity);
        $8 = 1;
        if ((global$9 | 0) == 1) {
         break block5
        }
       }
      }
      if (!global$9) {
       $3 = HEAP32[$0 >> 2] == ($2 | 0);
       if ($3) {
        continue
       }
      }
      break;
     };
    }
    if (!global$9) {
     if ($7) {
      break block1
     }
     a_dec($1);
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $5;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $7;
  wasm2js_scratch_store_f64(+$9);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 32 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
 }
 
 function a_inc($0) {
  Atomics.add(HEAP32, $0 >> 2, 1);
 }
 
 function a_dec($0) {
  Atomics.sub(HEAP32, $0 >> 2, 1);
 }
 
 function __lockfile($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $2 = HEAP32[global$10 >> 2];
   $1 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   $2 = HEAP32[$2 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = HEAP32[thread_ptr + 24 >> 2];
   $3 = ($1 | 0) == (HEAP32[$0 + 76 >> 2] & -1073741825);
  }
  block3 : {
   block : {
    if (!global$9) {
     if ($3) {
      break block
     }
     $4 = 1;
     $3 = $0 + 76 | 0;
     if (!a_cas($3, 0, $1)) {
      break block
     }
     $2 = $1 | 1073741824;
     $0 = a_cas($3, 0, $2);
     $1 = !$0;
     if ($1) {
      break block
     }
    }
    while (1) {
     $1 = global$9 ? $1 : $0 & 1073741824;
     block2 : {
      if (!global$9) {
       block1 : {
        if ($1) {
         $1 = $0;
         break block1;
        }
        $1 = $0 | 1073741824;
        if ((a_cas($3, $0, $1) | 0) != ($0 | 0)) {
         break block2
        }
       }
      }
      if (!global$9 | !$5) {
       __futexwait($3, $1);
       if ((global$9 | 0) == 1) {
        break block3
       }
      }
     }
     if (!global$9) {
      $0 = a_cas($3, 0, $2);
      if ($0) {
       continue
      }
     }
     break;
    };
   }
   if (!global$9) {
    return $4
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $0 = HEAP32[global$10 >> 2];
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function a_cas($0, $1, $2) {
  return Atomics.compareExchange(HEAP32, $0 >> 2, $1, $2) | 0;
 }
 
 function __futexwait($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    __wait($0, 0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function __unlockfile($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $0 = $0 + 76 | 0;
  $2 = a_swap($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  if ($2 & 1073741824) {
   __wake($0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function a_swap($0) {
  return Atomics.exchange(HEAP32, $0 >> 2, 0);
 }
 
 function __wake($0) {
  var $1 = 0;
  $1 = global$9;
  emscripten_futex_wake($0, 1);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
 }
 
 function dummy_483($0) {
  $0 = $0 | 0;
 }
 
 function fclose($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $5 = HEAP32[$3 + 8 >> 2];
   $7 = HEAP32[$3 + 12 >> 2];
   $8 = HEAP32[$3 + 16 >> 2];
   $3 = HEAP32[$3 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[$0 + 76 >> 2] < 0;
  $4 = (global$9 | 0) == 2;
  $2 = global$9 ? 0 : $1;
  $1 = (global$9 ? 0 : $4 | $2) ? 0 : $1;
  block : {
   if (($4 | !$2) & (!global$9 | !$6)) {
    $2 = __lockfile($0);
    $4 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   $1 = global$9 ? $1 : !$1;
   if (!global$9 | ($6 | 0) == 1) {
    $2 = fflush($0);
    $4 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $8 = $2;
   }
   $5 = global$9 ? $5 : HEAP32[$0 + 12 >> 2];
   if (!global$9 | ($6 | 0) == 2) {
    $2 = FUNCTION_TABLE[$5 | 0]($0) | 0;
    $4 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $3 = $2;
   }
   if (!global$9) {
    if (!$1) {
     __unlockfile($0)
    }
    $1 = !(HEAP8[$0 | 0] & 1);
   }
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9 | ($6 | 0) == 3) {
     $2 = __ofl_lock();
     $4 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $7 = $2;
    }
    if (!global$9) {
     $1 = HEAP32[$0 + 56 >> 2];
     $5 = HEAP32[$0 + 52 >> 2];
     if ($5) {
      HEAP32[$5 + 56 >> 2] = $1
     }
     if ($1) {
      HEAP32[$1 + 52 >> 2] = $5
     }
     if (HEAP32[$7 >> 2] == ($0 | 0)) {
      HEAP32[$7 >> 2] = $1
     }
     __unlock(73296);
     $1 = HEAP32[$0 + 96 >> 2];
    }
    if (!global$9 | ($6 | 0) == 4) {
     emscripten_builtin_free($1);
     $4 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($6 | 0) == 5) {
     emscripten_builtin_free($0);
     $4 = 5;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    return $3 | $8
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $5;
  HEAP32[$2 + 12 >> 2] = $7;
  HEAP32[$2 + 16 >> 2] = $8;
  HEAP32[$2 + 20 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$1 + 16 >> 2];
   $8 = HEAP32[$1 + 20 >> 2];
   $9 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $3 = global$9 ? $3 : !$0;
   if ($3 | (global$9 | 0) == 2) {
    $0 = global$9 ? $0 : HEAP32[13018];
    if ($0 | (global$9 | 0) == 2) {
     $0 = global$9 ? $0 : HEAP32[13018];
     if (!global$9 | !$5) {
      $2 = fflush($0);
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $2;
     }
    }
    $0 = global$9 ? $0 : HEAP32[13056];
    if ($0 | (global$9 | 0) == 2) {
     $0 = global$9 ? $0 : HEAP32[13056];
     if (!global$9 | ($5 | 0) == 1) {
      $2 = fflush($0);
      $6 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $2;
     }
     $1 = global$9 ? $1 : $0 | $1;
    }
    if (!global$9 | ($5 | 0) == 2) {
     $2 = __ofl_lock();
     $6 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    $0 = global$9 ? $0 : HEAP32[$0 >> 2];
    if ($0 | (global$9 | 0) == 2) {
     while (1) {
      $3 = global$9 ? $3 : HEAP32[$0 + 76 >> 2] < 0;
      $7 = global$9 ? $7 : $3;
      $2 = (global$9 | 0) == 2;
      $3 = (global$9 ? 0 : $7 | $2) ? 0 : $3;
      if (!global$9 | ($5 | 0) == 3 ? $2 | !$7 : 0) {
       $2 = __lockfile($0);
       $6 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $3 = $2;
      }
      if (!global$9) {
       $9 = HEAP32[$0 + 28 >> 2];
       $4 = ($9 | 0) != HEAP32[$0 + 20 >> 2];
       $3 = !$3;
      }
      if ((global$9 | 0) == 2 | $4) {
       if (!global$9 | ($5 | 0) == 4) {
        $2 = fflush($0);
        $6 = 4;
        if ((global$9 | 0) == 1) {
         break block
        }
        $4 = $2;
       }
       $1 = global$9 ? $1 : $1 | $4;
      }
      if (!global$9) {
       $3 = !$3;
       if ($3) {
        __unlockfile($0)
       }
       $0 = HEAP32[$0 + 56 >> 2];
       if ($0) {
        continue
       }
      }
      break;
     }
    }
    if (!global$9) {
     __unlock(73296);
     return $1 | 0;
    }
   }
   $1 = global$9 ? $1 : HEAP32[$0 + 76 >> 2] < 0;
   $8 = global$9 ? $8 : $1;
   $2 = (global$9 | 0) == 2;
   $1 = (global$9 ? 0 : $8 | $2) ? 0 : $1;
   if (!global$9 | ($5 | 0) == 5 ? $2 | !$8 : 0) {
    $2 = __lockfile($0);
    $6 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    $3 = !$1;
    $4 = HEAP32[$0 + 28 >> 2];
    $1 = ($4 | 0) == HEAP32[$0 + 20 >> 2];
   }
   block3 : {
    block2 : {
     block1 : {
      if (!global$9) {
       if ($1) {
        break block1
       }
       $1 = HEAP32[$0 + 36 >> 2];
      }
      if (!global$9 | ($5 | 0) == 6) {
       $2 = FUNCTION_TABLE[$1 | 0]($0, 0, 0) | 0;
       $6 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
       $1 = $2;
      }
      if (!global$9) {
       $1 = HEAP32[$0 + 20 >> 2];
       if ($1) {
        break block1
       }
       $1 = -1;
       if (!$3) {
        break block2
       }
       break block3;
      }
     }
     if (global$9) {
      $2 = $9
     } else {
      $1 = HEAP32[$0 + 4 >> 2];
      $4 = HEAP32[$0 + 8 >> 2];
      $2 = ($1 | 0) != ($4 | 0);
     }
     if ($2 | (global$9 | 0) == 2) {
      if (!global$9) {
       $10 = $1 - $4 | 0;
       $11 = $10 >> 31;
       $1 = HEAP32[$0 + 40 >> 2];
      }
      if (!global$9 | ($5 | 0) == 7) {
       FUNCTION_TABLE[$1 | 0]($0, $10, $11, 1) | 0;
       $6 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $1 = 0;
      HEAP32[$0 + 28 >> 2] = 0;
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = 0;
      if ($3) {
       break block3
      }
     }
    }
    if (!global$9) {
     __unlockfile($0)
    }
   }
   if (!global$9) {
    return $1 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $7;
  HEAP32[$2 + 20 >> 2] = $8;
  HEAP32[$2 + 24 >> 2] = $9;
  HEAP32[$2 + 28 >> 2] = $10;
  HEAP32[$2 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function __toread($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = HEAP32[$0 + 72 >> 2];
   HEAP32[$0 + 72 >> 2] = $1 | $1 - 1;
   $1 = HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2];
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    $1 = global$9 ? $1 : HEAP32[$0 + 36 >> 2];
    if (!global$9 | !$2) {
     FUNCTION_TABLE[$1 | 0]($0, 0, 0) | 0;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    $1 = HEAP32[$0 >> 2];
    if ($1 & 4) {
     HEAP32[$0 >> 2] = $1 | 32;
     return -1;
    }
    $2 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $2;
    return $1 << 27 >> 31;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function __uflow($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 4 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   $4 = -1;
  }
  block : {
   if (!global$9 | !$6) {
    $2 = __toread($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   block1 : {
    if (!global$9) {
     if ($1) {
      break block1
     }
     $5 = HEAP32[$0 + 32 >> 2];
     $1 = $3 + 15 | 0;
    }
    if (!global$9 | ($6 | 0) == 1) {
     $2 = FUNCTION_TABLE[$5 | 0]($0, $1, 1) | 0;
     $7 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    if (!global$9) {
     if (($0 | 0) != 1) {
      break block1
     }
     $4 = HEAPU8[$3 + 15 | 0];
    }
   }
   if (!global$9) {
    __stack_pointer = $3 + 16 | 0;
    return $4;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $4;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $3;
  HEAP32[$2 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function __stdio_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $5 = global$9;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $0 = legalimport$__wasi_fd_seek(HEAP32[$0 + 60 >> 2], $1 | 0, $2 | 0, $3 & 255, $4 + 8 | 0) | 0;
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  $0 = __wasi_syscall_ret($0);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $4 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $0 ? -1 : HEAP32[$4 + 12 >> 2];
  return ($0 ? -1 : HEAP32[$4 + 8 >> 2]) | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $8 = global$9;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $3 = HEAP32[$0 + 28 >> 2];
  HEAP32[$4 + 16 >> 2] = $3;
  $6 = HEAP32[$0 + 20 >> 2];
  HEAP32[$4 + 28 >> 2] = $2;
  HEAP32[$4 + 24 >> 2] = $1;
  $1 = $6 - $3 | 0;
  HEAP32[$4 + 20 >> 2] = $1;
  $6 = $1 + $2 | 0;
  $1 = $4 + 16 | 0;
  $9 = 2;
  $3 = __wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, 2, $4 + 12 | 0) | 0;
  if ((global$9 | 0) != ($8 | 0)) {
   wasm2js_trap()
  }
  $3 = __wasi_syscall_ret($3);
  if ((global$9 | 0) != ($8 | 0)) {
   wasm2js_trap()
  }
  block3 : {
   block2 : {
    block1 : {
     block : {
      if ($3) {
       $3 = $1;
       break block;
      }
      while (1) {
       $5 = HEAP32[$4 + 12 >> 2];
       if (($5 | 0) == ($6 | 0)) {
        break block1
       }
       if (($5 | 0) < 0) {
        $3 = $1;
        break block2;
       }
       $7 = HEAP32[$1 + 4 >> 2];
       $10 = $7 >>> 0 < $5 >>> 0;
       $3 = ($10 << 3) + $1 | 0;
       $7 = $5 - ($10 ? $7 : 0) | 0;
       HEAP32[$3 >> 2] = $7 + HEAP32[$3 >> 2];
       $1 = ($10 ? 12 : 4) + $1 | 0;
       HEAP32[$1 >> 2] = HEAP32[$1 >> 2] - $7;
       $6 = $6 - $5 | 0;
       $1 = $3;
       $9 = $9 - $10 | 0;
       $5 = __wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, $9 | 0, $4 + 12 | 0) | 0;
       if ((global$9 | 0) != ($8 | 0)) {
        wasm2js_trap()
       }
       $5 = __wasi_syscall_ret($5);
       if ((global$9 | 0) != ($8 | 0)) {
        wasm2js_trap()
       }
       if (!$5) {
        continue
       }
       break;
      };
     }
     if (($6 | 0) != -1) {
      break block2
     }
    }
    $1 = HEAP32[$0 + 44 >> 2];
    HEAP32[$0 + 28 >> 2] = $1;
    HEAP32[$0 + 20 >> 2] = $1;
    HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
    $0 = $2;
    break block3;
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
   $0 = 0;
   if (($9 | 0) == 2) {
    break block3
   }
   $0 = $2 - HEAP32[$3 + 4 >> 2] | 0;
  }
  __stack_pointer = $4 + 32 | 0;
  return $0 | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 16 >> 2] = $1;
  $5 = HEAP32[$0 + 48 >> 2];
  HEAP32[$3 + 20 >> 2] = $2 - (($5 | 0) != 0);
  $7 = HEAP32[$0 + 44 >> 2];
  HEAP32[$3 + 28 >> 2] = $5;
  HEAP32[$3 + 24 >> 2] = $7;
  $5 = __wasi_fd_read(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0;
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  $7 = __wasi_syscall_ret($5);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  block1 : {
   block : {
    if ($7) {
     $1 = 32
    } else {
     $4 = HEAP32[$3 + 12 >> 2];
     if (($4 | 0) > 0) {
      break block
     }
     $1 = $4 ? 32 : 16;
    }
    HEAP32[$0 >> 2] = $1 | HEAP32[$0 >> 2];
    break block1;
   }
   $6 = $4;
   $5 = HEAP32[$3 + 20 >> 2];
   if ($5 >>> 0 >= $4 >>> 0) {
    break block1
   }
   $6 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 4 >> 2] = $6;
   HEAP32[$0 + 8 >> 2] = $6 + ($4 - $5 | 0);
   if (HEAP32[$0 + 48 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $6 + 1;
    HEAP8[($1 + $2 | 0) - 1 | 0] = HEAPU8[$6 | 0];
   }
   $6 = $2;
  }
  __stack_pointer = $3 + 32 | 0;
  return $6 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$9;
  $0 = __wasi_fd_close(HEAP32[$0 + 60 >> 2]) | 0;
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  $0 = __wasi_syscall_ret($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $0 | 0;
 }
 
 function fopen($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $5 = HEAP32[$2 + 8 >> 2];
   $4 = HEAP32[$2 + 16 >> 2];
   $6 = HEAP32[$2 + 20 >> 2];
   $2 = HEAP32[$2 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $1 = !strchr(10009, HEAP8[9984]);
  }
  block3 : {
   block1 : {
    block : {
     if (!global$9) {
      if ($1) {
       HEAP32[__tls_base >> 2] = 28;
       break block;
      }
      $5 = 2;
      if (!strchr(9984, 43)) {
       $5 = HEAPU8[9984] != 114
      }
      $1 = strchr(9984, 120) ? $5 | 128 : $5;
      $1 = strchr(9984, 101) ? $1 | 524288 : $1;
      $3 = HEAPU8[9984];
      $1 = ($3 | 0) == 114 ? $1 : $1 | 64;
      $1 = ($3 | 0) == 119 ? $1 | 512 : $1;
      HEAP32[$6 >> 2] = 438;
      HEAP32[$6 + 4 >> 2] = 0;
      $0 = __syscall_ret(__syscall_openat(-100, $0 | 0, (($3 | 0) == 97 ? $1 | 1024 : $1) | 32768, $6 | 0) | 0);
      if (($0 | 0) < 0) {
       break block1
      }
      $4 = __stack_pointer - 32 | 0;
      __stack_pointer = $4;
      $5 = $0;
      $1 = !strchr(10009, HEAP8[9984]);
     }
     block5 : {
      block4 : {
       block2 : {
        if (!($1 ? global$9 : 1)) {
         $1 = __tls_base;
         HEAP32[$1 >> 2] = 28;
         break block2;
        }
        if (!global$9 | !$7) {
         $3 = emscripten_builtin_malloc(1176);
         if ((global$9 | 0) == 1) {
          break block3
         }
         $1 = $3;
        }
        if (!($1 ? global$9 : 1)) {
         break block4
        }
       }
       if (!global$9) {
        $1 = 0;
        break block5;
       }
      }
      if (!global$9) {
       __memset($1, 0, 144);
       if (!strchr(9984, 43)) {
        HEAP32[$1 >> 2] = HEAPU8[9984] == 114 ? 8 : 4
       }
       block6 : {
        if (HEAPU8[9984] != 97) {
         $2 = HEAP32[$1 >> 2];
         break block6;
        }
        $2 = __syscall_fcntl64($5 | 0, 3, 0) | 0;
        if (!($2 & 1024)) {
         $2 = $2 | 1024;
         HEAP32[$4 + 16 >> 2] = $2;
         HEAP32[$4 + 20 >> 2] = $2 >> 31;
         __syscall_fcntl64($5 | 0, 4, $4 + 16 | 0) | 0;
        }
        $2 = HEAP32[$1 >> 2] | 128;
        HEAP32[$1 >> 2] = $2;
       }
       HEAP32[$1 + 80 >> 2] = -1;
       HEAP32[$1 + 48 >> 2] = 1024;
       HEAP32[$1 + 60 >> 2] = $5;
       HEAP32[$1 + 44 >> 2] = $1 + 152;
       $2 = $2 & 8;
       block7 : {
        if ($2) {
         break block7
        }
        $2 = $4 + 24 | 0;
        HEAP32[$4 >> 2] = $2;
        HEAP32[$4 + 4 >> 2] = 0;
        if (__syscall_ioctl($5 | 0, 21523, $4 | 0) | 0) {
         break block7
        }
        HEAP32[$1 + 80 >> 2] = 10;
       }
       HEAP32[$1 + 40 >> 2] = 188;
       HEAP32[$1 + 36 >> 2] = 189;
       HEAP32[$1 + 32 >> 2] = 190;
       HEAP32[$1 + 12 >> 2] = 191;
       if (!HEAPU8[73105]) {
        HEAP32[$1 + 76 >> 2] = -1
       }
      }
      if (!global$9 | ($7 | 0) == 1) {
       $3 = __ofl_lock();
       $8 = 1;
       if ((global$9 | 0) == 1) {
        break block3
       }
       $2 = $3;
      }
      if (!global$9) {
       $3 = HEAP32[$2 >> 2];
       HEAP32[$1 + 56 >> 2] = $3;
       if ($3) {
        HEAP32[$3 + 52 >> 2] = $1
       }
       HEAP32[$2 >> 2] = $1;
       __unlock(73296);
      }
     }
     if (!global$9) {
      __stack_pointer = $4 + 32 | 0;
      $2 = $1;
      if ($1) {
       break block1
      }
      __wasi_fd_close($0 | 0) | 0;
     }
    }
    $2 = global$9 ? $2 : 0;
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $5;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = $4;
  HEAP32[$3 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function frexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $4 = global$9;
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $5 = wasm2js_scratch_load_i32(0) | 0;
  $2 = $3 >>> 20 & 2047;
  if (($2 | 0) != 2047) {
   if (!$2) {
    if ($0 == 0.0) {
     $2 = 0
    } else {
     $0 = frexp($0 * 18446744073709551615.0, $1);
     if ((global$9 | 0) != ($4 | 0)) {
      wasm2js_trap()
     }
     $2 = HEAP32[$1 >> 2] + -64 | 0;
    }
    HEAP32[$1 >> 2] = $2;
    return $0;
   }
   HEAP32[$1 >> 2] = $2 - 1022;
   wasm2js_scratch_store_i32(0, $5 | 0);
   wasm2js_scratch_store_i32(1, $3 & -2146435073 | 1071644672);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function __towrite($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 72 >> 2];
  HEAP32[$0 + 72 >> 2] = $1 - 1 | $1;
  $1 = HEAP32[$0 >> 2];
  if ($1 & 8) {
   HEAP32[$0 >> 2] = $1 | 32;
   return -1;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
  return 0;
 }
 
 function __fwritex($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $3 = global$9 ? $3 : HEAP32[$2 + 16 >> 2];
  block1 : {
   block : {
    if (!global$9) {
     if (!$3) {
      if (__towrite($2)) {
       break block
      }
      $3 = HEAP32[$2 + 16 >> 2];
     }
     $4 = HEAP32[$2 + 20 >> 2];
     $3 = $3 - $4 >>> 0 < $1 >>> 0;
    }
    if ((global$9 | 0) == 2 | $3) {
     $3 = global$9 ? $3 : HEAP32[$2 + 36 >> 2];
     if (!global$9 | !$7) {
      $5 = FUNCTION_TABLE[$3 | 0]($2, $0, $1) | 0;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $0 = $5;
     }
     if (!global$9) {
      return $0
     }
    }
    $3 = global$9 ? $3 : HEAP32[$2 + 80 >> 2] < 0;
    block3 : {
     block2 : {
      if (!global$9) {
       if ($3) {
        break block2
       }
       $3 = !$1;
       if ($3) {
        break block2
       }
       $3 = $1;
       while (1) {
        $6 = $0 + $3 | 0;
        if (HEAPU8[$6 - 1 | 0] != 10) {
         $3 = $3 - 1 | 0;
         if ($3) {
          continue
         }
         break block2;
        }
        break;
       };
       $4 = HEAP32[$2 + 36 >> 2];
      }
      if (!global$9 | ($7 | 0) == 1) {
       $5 = FUNCTION_TABLE[$4 | 0]($2, $0, $3) | 0;
       $8 = 1;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $4 = $5;
      }
      if (!global$9) {
       if ($3 >>> 0 > $4 >>> 0) {
        break block
       }
       $1 = $1 - $3 | 0;
       $4 = HEAP32[$2 + 20 >> 2];
       break block3;
      }
     }
     if (!global$9) {
      $6 = $0;
      $3 = 0;
     }
    }
    if (!global$9) {
     __memcpy($4, $6, $1);
     HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
     $4 = $1 + $3 | 0;
    }
   }
   if (!global$9) {
    return $4
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function fwrite($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = Math_imul($1, $2);
   $6 = HEAP32[$3 + 76 >> 2] < 0;
  }
  block : {
   block1 : {
    if ((global$9 | 0) == 2 | $6) {
     if (!global$9 | !$7) {
      $4 = __fwritex($0, $5, $3);
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $4;
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9 | ($7 | 0) == 1) {
     $4 = __lockfile($3);
     $8 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $6 = $4;
    }
    if (!global$9 | ($7 | 0) == 2) {
     $4 = __fwritex($0, $5, $3);
     $8 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $4;
    }
    if (!global$9) {
     if (!$6) {
      break block1
     }
     __unlockfile($3);
    }
   }
   if (!global$9) {
    if (($0 | 0) == ($5 | 0)) {
     return $1 ? $2 : 0
    }
    return ($0 >>> 0) / ($1 >>> 0) | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function getcwd($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $4 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = __stack_pointer;
   $3 = $1;
   $5 = 4096;
   $4 = $1 - ($0 ? 16 : 4096) | 0;
   __stack_pointer = $4;
   $2 = !$0;
   $1 = $4;
  }
  block3 : {
   block1 : {
    if (!global$9) {
     if (!$2) {
      $5 = 4095;
      $1 = $0;
     }
     $0 = 0;
     $2 = __syscall_ret(__syscall_getcwd($1 | 0, $5 | 0) | 0);
     if (($2 | 0) < 0) {
      break block1
     }
     if (!(HEAPU8[$1 | 0] == 47 ? $2 : 0)) {
      HEAP32[__tls_base >> 2] = 44;
      break block1;
     }
     if (($1 | 0) != ($4 | 0)) {
      $0 = $1;
      break block1;
     }
     $0 = strlen($1) + 1 | 0;
    }
    if (!global$9 | !$6) {
     $2 = emscripten_builtin_malloc($0);
     if ((global$9 | 0) == 1) {
      break block3
     }
     $4 = $2;
    }
    if (!global$9) {
     if ($4) {
      $0 = __memcpy($4, $1, $0)
     } else {
      $0 = 0
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $3;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function memchr($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != 0;
  block2 : {
   block1 : {
    block : {
     if (!($0 & 3) | !$2) {
      break block
     }
     $4 = $1 & 255;
     while (1) {
      if (($4 | 0) == HEAPU8[$0 | 0]) {
       break block1
      }
      $2 = $2 - 1 | 0;
      $3 = ($2 | 0) != 0;
      $0 = $0 + 1 | 0;
      if (!($0 & 3)) {
       break block
      }
      if ($2) {
       continue
      }
      break;
     };
    }
    if (!$3) {
     break block2
    }
    $3 = $1 & 255;
    if (!(($3 | 0) == HEAPU8[$0 | 0] | $2 >>> 0 < 4)) {
     $3 = Math_imul($3, 16843009);
     while (1) {
      $4 = $3 ^ HEAP32[$0 >> 2];
      if (((16843008 - $4 | $4) & -2139062144) != -2139062144) {
       break block1
      }
      $0 = $0 + 4 | 0;
      $2 = $2 - 4 | 0;
      if ($2 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if (!$2) {
     break block2
    }
   }
   $1 = $1 & 255;
   while (1) {
    if (($1 | 0) == HEAPU8[$0 | 0]) {
     return $0
    }
    $0 = $0 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return 0;
 }
 
 function memcmp($0, $1, $2) {
  var $3 = 0, $4 = 0;
  block1 : {
   block : {
    if ($2 >>> 0 >= 4) {
     if (($0 | $1) & 3) {
      break block
     }
     while (1) {
      if (HEAP32[$0 >> 2] != HEAP32[$1 >> 2]) {
       break block
      }
      $1 = $1 + 4 | 0;
      $0 = $0 + 4 | 0;
      $2 = $2 - 4 | 0;
      if ($2 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if (!$2) {
     break block1
    }
   }
   while (1) {
    $3 = HEAPU8[$0 | 0];
    $4 = HEAPU8[$1 | 0];
    if (($3 | 0) == ($4 | 0)) {
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break block1;
    }
    break;
   };
   return $3 - $4 | 0;
  }
  return 0;
 }
 
 function __lock($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $3 = HEAP32[$3 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   block : {
    if (!global$9) {
     $1 = HEAP8[73107];
     if (!$1) {
      break block
     }
     $2 = a_cas($0, 0, -2147483647);
     if (($1 | 0) < 0) {
      HEAP8[73107] = 0
     }
     if (!$2) {
      break block
     }
     while (1) {
      $1 = ($2 | 0) < 0 ? $2 + 2147483647 | 0 : $2;
      $2 = a_cas($0, $1, $1 - 2147483647 | 0);
      if (($2 | 0) == ($1 | 0)) {
       break block
      }
      $4 = $4 + 1 | 0;
      if (($4 | 0) != 10) {
       continue
      }
      break;
     };
     $1 = a_fetch_add($0, 1) + 1 | 0;
    }
    while (1) {
     $3 = global$9 ? $3 : global$9 ? $2 : ($1 | 0) >= 0;
     if (!$3 | (global$9 | 0) == 2) {
      if (!global$9 | !$5) {
       __futexwait($0, $1);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      $1 = global$9 ? $1 : $1 + 2147483647 | 0;
     }
     if (!global$9) {
      $4 = $1;
      $1 = a_cas($0, $1, $1 | -2147483648);
      $2 = ($1 | 0) != ($4 | 0);
      if ($2) {
       continue
      }
     }
     break;
    };
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function a_fetch_add($0, $1) {
  return Atomics.add(HEAP32, $0 >> 2, $1);
 }
 
 function __unlock($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  block : {
   if (HEAP32[$0 >> 2] >= 0) {
    break block
   }
   $2 = a_fetch_add($0, 2147483647);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
   if (($2 | 0) == -2147483647) {
    break block
   }
   __wake($0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function __ofl_lock() {
  var $0 = 0, $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    __lock(73296);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return 73300
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function em_task_queue_create($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer + -64 | 0;
   __stack_pointer = $2;
   $1 = !__pthread_mutex_trylock(51872);
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9) {
     $1 = HEAP32[12981];
     $4 = ($1 | 0) != 51868;
    }
    if ((global$9 | 0) == 2 | $4) {
     while (1) {
      if (!global$9) {
       $4 = HEAP32[$1 + 56 >> 2];
       $5 = !Atomics.load(HEAP32, $1 >> 2);
      }
      if ((global$9 | 0) == 2 | $5) {
       if (!global$9) {
        $5 = HEAP32[$1 + 52 >> 2];
        $3 = HEAP32[$1 + 56 >> 2];
        HEAP32[$5 + 56 >> 2] = $3;
        HEAP32[$3 + 52 >> 2] = $5;
       }
       if (!global$9 | !$7) {
        em_task_queue_free($1);
        if ((global$9 | 0) == 1) {
         break block
        }
       }
      }
      if (!global$9) {
       $1 = $4;
       $4 = ($1 | 0) != 51868;
       if ($4) {
        continue
       }
      }
      break;
     }
    }
    if (!global$9) {
     $1 = __pthread_mutex_unlock(51872)
    }
   }
   if (!global$9 | ($7 | 0) == 1) {
    $3 = emscripten_builtin_malloc(60);
    $8 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   $4 = global$9 ? $4 : !$1;
   block1 : {
    if (!($4 ? global$9 : 1)) {
     break block1
    }
    if (!global$9 | ($7 | 0) == 2) {
     $3 = emscripten_builtin_malloc(1536);
     $8 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $4 = $3;
    }
    if ((global$9 | 0) == 2 | (global$9 ? $5 : !$4)) {
     if (!global$9 | ($7 | 0) == 3) {
      emscripten_builtin_free($1);
      $8 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     $6 = $2 + 40 | 0;
     $3 = $6;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $2 + 48 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$2 + 60 >> 2] = 0;
     HEAP32[$2 + 32 >> 2] = 0;
     HEAP32[$2 + 36 >> 2] = 0;
     HEAP32[$2 + 28 >> 2] = $0;
     HEAP32[$2 + 24 >> 2] = 0;
     HEAP32[$2 + 20 >> 2] = $4;
     HEAP32[$2 + 16 >> 2] = 128;
     HEAP32[$2 + 12 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$1 >> 2] = HEAP32[$2 + 60 >> 2];
     $0 = HEAP32[$3 + 4 >> 2];
     HEAP32[$1 + 20 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1 + 24 >> 2] = $0;
     $0 = HEAP32[$6 + 4 >> 2];
     HEAP32[$1 + 12 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$1 + 16 >> 2] = $0;
     $0 = HEAP32[$2 + 36 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 32 >> 2];
     HEAP32[$1 + 8 >> 2] = $0;
     HEAP32[$1 + 28 >> 2] = HEAP32[$2 + 28 >> 2];
     HEAP32[$1 + 32 >> 2] = HEAP32[$2 + 24 >> 2];
     HEAP32[$1 + 36 >> 2] = HEAP32[$2 + 20 >> 2];
     HEAP32[$1 + 40 >> 2] = HEAP32[$2 + 16 >> 2];
     HEAP32[$1 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
     HEAP32[$1 + 48 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$1 + 52 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 56 >> 2] = HEAP32[$2 >> 2];
     $6 = $1;
    }
   }
   if (!global$9) {
    __stack_pointer = $2 - -64 | 0;
    return $6;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function em_task_queue_free($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  } else {
   $1 = 0
  }
  $1 = global$9 ? $1 : $0 + 4 | 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$2) {
    pthread_mutex_destroy($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $1 = global$9 ? $1 : HEAP32[$0 + 36 >> 2];
   if (!global$9 | ($2 | 0) == 1) {
    emscripten_builtin_free($1);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($2 | 0) == 2) {
    emscripten_builtin_free($0);
    $3 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function em_task_queue_execute($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   HEAP32[$0 + 32 >> 2] = 1;
   $4 = $0 + 4 | 0;
  }
  block : {
   if (!global$9 | !$6) {
    $1 = __pthread_mutex_lock($4);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $1;
   }
   if (!global$9) {
    $2 = !em_task_queue_is_empty($0)
   }
   if ((global$9 | 0) == 2 | $2) {
    while (1) {
     if (!global$9) {
      em_task_queue_dequeue($3 + 4 | 0, $0);
      __pthread_mutex_unlock($4);
      $5 = HEAP32[$3 + 4 >> 2];
      $2 = HEAP32[$3 + 12 >> 2];
     }
     if (!global$9 | ($6 | 0) == 1) {
      FUNCTION_TABLE[$5 | 0]($2);
      $7 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9 | ($6 | 0) == 2) {
      __pthread_mutex_lock($4);
      $7 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = !em_task_queue_is_empty($0);
      if ($2) {
       continue
      }
     }
     break;
    }
   }
   if (!global$9) {
    __pthread_mutex_unlock($4);
    HEAP32[$0 + 32 >> 2] = 0;
    __stack_pointer = $3 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = $4;
  HEAP32[$1 + 12 >> 2] = $3;
  HEAP32[$1 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function em_task_queue_is_empty($0) {
  return HEAP32[$0 + 44 >> 2] == HEAP32[$0 + 48 >> 2];
 }
 
 function em_task_queue_dequeue($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 36 >> 2] + Math_imul($3, 12) | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$1 + 44 >> 2] = ($3 + 1 | 0) % HEAP32[$1 + 40 >> 2];
 }
 
 function em_task_queue_cancel($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   $4 = $0 + 4 | 0;
  }
  block : {
   if (!global$9 | !$6) {
    $1 = __pthread_mutex_lock($4);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $1;
   }
   if (!global$9) {
    $2 = !em_task_queue_is_empty($0)
   }
   if ((global$9 | 0) == 2 | $2) {
    while (1) {
     if (!global$9) {
      em_task_queue_dequeue($3 + 4 | 0, $0);
      $2 = HEAP32[$3 + 8 >> 2];
     }
     if ((global$9 | 0) == 2 | $2) {
      $5 = global$9 ? $5 : HEAP32[$3 + 12 >> 2];
      if (!global$9 | ($6 | 0) == 1) {
       FUNCTION_TABLE[$2 | 0]($5);
       $7 = 1;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $2 = !em_task_queue_is_empty($0);
      if ($2) {
       continue
      }
     }
     break;
    }
   }
   if (!global$9) {
    __pthread_mutex_unlock($4);
    Atomics.store(HEAP32, $0 >> 2, 0);
    __stack_pointer = $3 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $4;
  HEAP32[$1 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function em_task_queue_enqueue($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = HEAP32[$0 + 40 >> 2];
   $4 = (HEAP32[$0 + 48 >> 2] + 1 | 0) % ($5 | 0) | 0;
   $2 = ($4 | 0) != HEAP32[$0 + 44 >> 2];
  }
  block1 : {
   block : {
    if (!global$9) {
     if ($2) {
      break block
     }
     $2 = HEAP32[$0 + 40 >> 2];
     $4 = Math_imul($2, 24);
    }
    if (!global$9 | !$9) {
     $3 = emscripten_builtin_malloc($4);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $4 = $3;
    }
    $7 = global$9 ? $7 : $4;
    if ($7 | (global$9 | 0) == 2) {
     if (!global$9) {
      $8 = $2 << 1;
      $2 = HEAP32[$0 + 44 >> 2];
      $6 = HEAP32[$0 + 48 >> 2];
      block2 : {
       if (($2 | 0) <= ($6 | 0)) {
        $3 = HEAP32[$0 + 36 >> 2] + Math_imul($2, 12) | 0;
        $2 = $6 - $2 | 0;
        __memcpy($4, $3, Math_imul($2, 12));
        break block2;
       }
       $5 = HEAP32[$0 + 36 >> 2] + Math_imul($2, 12) | 0;
       $3 = HEAP32[$0 + 40 >> 2] - $2 | 0;
       $2 = Math_imul($3, 12);
       __memcpy($4, $5, $2);
       __memcpy($2 + $4 | 0, HEAP32[$0 + 36 >> 2], Math_imul($6, 12));
       $2 = $3 + $6 | 0;
      }
      $5 = HEAP32[$0 + 36 >> 2];
     }
     if (!global$9 | ($9 | 0) == 1) {
      emscripten_builtin_free($5);
      $6 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      HEAP32[$0 + 48 >> 2] = $2;
      HEAP32[$0 + 44 >> 2] = 0;
      HEAP32[$0 + 40 >> 2] = $8;
      HEAP32[$0 + 36 >> 2] = $4;
      $2 = 1;
     }
    }
    $2 = !global$9 & (!$7 | (global$9 | 0) == 2) ? 0 : $2;
    if (!global$9) {
     if ($2) {
      break block
     }
     return 0;
    }
   }
   if (!global$9) {
    $2 = HEAP32[$1 + 4 >> 2];
    $3 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$0 + 48 >> 2], 12) | 0;
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $2;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 48 >> 2] = (HEAP32[$0 + 48 >> 2] + 1 | 0) % HEAP32[$0 + 40 >> 2];
    return 1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $7;
  HEAP32[$3 + 24 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function cancel_notification($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    em_task_queue_cancel($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function receive_notification($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   Atomics.store(HEAP32, $0 >> 2, 1)
  }
  block : {
   if (!global$9 | !$1) {
    em_task_queue_execute($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    Atomics.compareExchange(HEAP32, $0 >> 2, 1, 0) | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function emscripten_proxy_execute_queue() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = 73304;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $0 = HEAP32[global$10 >> 2];
   $1 = HEAP32[$0 >> 2];
   $2 = HEAP32[$0 + 8 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block2 : {
   block : {
    if ((global$9 | 0) == 2 | $1) {
     if (!global$9) {
      $2 = thread_ptr;
      if (!$2) {
       break block
      }
      $0 = ($1 | 0) == 73304;
     }
     block1 : {
      if (!($0 ? global$9 : 1)) {
       $0 = __tls_base + 4 | 0;
       if (HEAP32[$0 >> 2]) {
        break block1
       }
       HEAP32[$0 >> 2] = 1;
      }
      if (!global$9 | !$4) {
       $3 = __pthread_mutex_lock($1);
       if ((global$9 | 0) == 1) {
        break block2
       }
       $0 = $3;
      }
      if (!global$9) {
       $2 = get_tasks_for_thread($1, $2);
       __pthread_mutex_unlock($1);
       $0 = !$2;
      }
      if (!global$9 | ($4 | 0) == 1 ? (HEAP32[$2 + 32 >> 2] | $0 ? global$9 : 1) : 0) {
       em_task_queue_execute($2);
       $5 = 1;
       if ((global$9 | 0) == 1) {
        break block2
       }
      }
      if (!global$9) {
       if (($1 | 0) != 73304) {
        break block1
       }
       HEAP32[__tls_base + 4 >> 2] = 0;
      }
     }
     if (!global$9) {
      return
     }
    }
    if (!global$9) {
     __assert_fail(10751, 9713, 110, 7389);
     wasm2js_trap();
    }
   }
   if (!global$9) {
    __assert_fail(12928, 9713, 111, 7389);
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function get_tasks_for_thread($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  block : {
   $2 = HEAP32[$0 + 28 >> 2];
   if (($2 | 0) <= 0) {
    break block
   }
   $4 = HEAP32[$0 + 24 >> 2];
   $0 = 0;
   while (1) {
    $3 = HEAP32[($0 << 2) + $4 >> 2];
    if (HEAP32[$3 + 28 >> 2] != ($1 | 0)) {
     $0 = $0 + 1 | 0;
     if (($2 | 0) != ($0 | 0)) {
      continue
     }
     break block;
    }
    break;
   };
   return $3;
  }
  return 0;
 }
 
 function emscripten_proxy_async($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $5 = 73304;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $3 = HEAP32[global$10 >> 2];
   $5 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   $1 = HEAP32[$3 + 8 >> 2];
   $2 = HEAP32[$3 + 12 >> 2];
   $3 = HEAP32[$3 + 16 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 32 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 28 >> 2] = $2;
   HEAP32[$3 + 16 >> 2] = $2;
   HEAP32[$3 + 24 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 20 >> 2];
   HEAP32[$3 + 12 >> 2] = $1;
   $1 = $3 + 8 | 0;
  }
  block : {
   if (!global$9 | !$4) {
    $4 = do_proxy($5, $0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $4;
   }
   if (!global$9) {
    __stack_pointer = $3 + 32 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function do_proxy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $3 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer;
   $7 = $3 - 16 | 0;
   __stack_pointer = $7;
  }
  block : {
   if ((global$9 | 0) == 2 | $0) {
    if (!global$9 | !$8) {
     $4 = __pthread_mutex_lock($0);
     if ((global$9 | 0) == 1) {
      break block
     }
     $3 = $4;
    }
    if (!global$9) {
     $3 = get_tasks_for_thread($0, $1);
     $5 = !$3;
    }
    block2 : {
     block1 : {
      if ((global$9 | 0) == 2 | $5) {
       if (!global$9) {
        $3 = HEAP32[$0 + 28 >> 2];
        $5 = ($3 | 0) == HEAP32[$0 + 32 >> 2];
       }
       if ((global$9 | 0) == 2 | $5) {
        if (!global$9) {
         $3 = $3 ? $3 << 1 : 1;
         $6 = $3 << 2;
         $5 = HEAP32[$0 + 24 >> 2];
        }
        if (!global$9 | ($8 | 0) == 1) {
         $4 = emscripten_builtin_realloc($5, $6);
         $9 = 1;
         if ((global$9 | 0) == 1) {
          break block
         }
         $5 = $4;
        }
        if (!global$9) {
         $6 = !$5;
         if ($6) {
          break block1
         }
         HEAP32[$0 + 32 >> 2] = $3;
         HEAP32[$0 + 24 >> 2] = $5;
        }
       }
       if (!global$9 | ($8 | 0) == 2) {
        $4 = em_task_queue_create($1);
        $9 = 2;
        if ((global$9 | 0) == 1) {
         break block
        }
        $3 = $4;
       }
       if (!global$9) {
        $1 = !$3;
        if ($1) {
         break block1
        }
        $1 = HEAP32[$0 + 28 >> 2];
        HEAP32[$0 + 28 >> 2] = $1 + 1;
        $5 = HEAP32[$0 + 24 >> 2];
        $1 = $5 + ($1 << 2) | 0;
        HEAP32[$1 >> 2] = $3;
       }
      }
      $4 = $3;
      if (!global$9) {
       break block2
      }
     }
     $4 = global$9 ? $1 : 0;
    }
    $1 = $4;
    if (!global$9) {
     $0 = __pthread_mutex_unlock($0)
    }
    $10 = global$9 ? $10 : $1;
    if ($10 | (global$9 | 0) == 2) {
     if (!global$9) {
      HEAP32[$7 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      $0 = HEAP32[$2 + 4 >> 2];
      HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$7 + 4 >> 2] = $0;
      $0 = $7;
      $3 = __stack_pointer - 48 | 0;
      __stack_pointer = $3;
      $4 = HEAP32[$1 + 28 >> 2];
      $5 = Atomics.load(HEAP32, $4 + 124 >> 2);
      block3 : {
       while (1) {
        $6 = 0;
        if (!$5) {
         break block3
        }
        $2 = $5;
        $5 = Atomics.compareExchange(HEAP32, $4 + 124 >> 2, $2, $2 + 1 | 0) | 0;
        if (($5 | 0) != ($2 | 0)) {
         continue
        }
        break;
       };
       $6 = 1;
      }
      $2 = !$6;
     }
     block4 : {
      if (!global$9) {
       if ($2) {
        $0 = 0;
        break block4;
       }
       $2 = $1 + 4 | 0;
      }
      if (!global$9 | ($8 | 0) == 3) {
       $4 = __pthread_mutex_lock($2);
       $9 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $5 = $4;
      }
      if (!global$9) {
       $5 = HEAP32[$0 + 8 >> 2];
       HEAP32[$3 + 32 >> 2] = $5;
       $4 = HEAP32[$0 + 4 >> 2];
       HEAP32[$3 + 24 >> 2] = HEAP32[$0 >> 2];
       HEAP32[$3 + 28 >> 2] = $4;
       $0 = $3 + 24 | 0;
      }
      if (!global$9 | ($8 | 0) == 4) {
       $4 = em_task_queue_enqueue($1, $0);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $4;
      }
      if (!global$9) {
       $2 = __pthread_mutex_unlock($2)
      }
      $11 = global$9 ? $11 : $0;
      block5 : {
       if ($11 | (global$9 | 0) == 2) {
        if (!global$9) {
         $5 = Atomics.exchange(HEAP32, $1 >> 2, 2);
         $0 = 1;
         $2 = HEAP32[$1 + 28 >> 2];
         if (($5 | 0) == 2) {
          break block5
         }
         HEAP32[$3 + 44 >> 2] = $1;
         HEAP32[$3 + 16 >> 2] = $1;
         HEAP32[$3 + 40 >> 2] = 192;
         HEAP32[$3 + 36 >> 2] = 193;
         $0 = HEAP32[$3 + 40 >> 2];
         HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 36 >> 2];
         HEAP32[$3 + 12 >> 2] = $0;
         $5 = $3 + 8 | 0;
         $6 = __stack_pointer - 16 | 0;
         __stack_pointer = $6;
         $0 = (Atomics.load(HEAP32, $2 + 124 >> 2) | 0) > 0;
        }
        block8 : {
         block6 : {
          if ((global$9 | 0) == 2 | $0) {
           $0 = global$9 ? $0 : HEAP32[$2 + 120 >> 2] + 4 | 0;
           if (!global$9 | ($8 | 0) == 5) {
            $4 = __pthread_mutex_lock($0);
            $9 = 5;
            if ((global$9 | 0) == 1) {
             break block
            }
            $0 = $4;
           }
           if (!global$9) {
            $0 = HEAP32[$2 + 120 >> 2];
            HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
            $4 = HEAP32[$5 + 4 >> 2];
            HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
            HEAP32[$6 + 4 >> 2] = $4;
           }
           if (!global$9 | ($8 | 0) == 6) {
            $4 = em_task_queue_enqueue($0, $6);
            $9 = 6;
            if ((global$9 | 0) == 1) {
             break block
            }
            $0 = $4;
           }
           if (!global$9) {
            $0 = !$0;
            if ($0) {
             break block6
            }
            __pthread_mutex_unlock(HEAP32[$2 + 120 >> 2] + 4 | 0);
            block7 : {
             if ((Atomics.exchange(HEAP32, HEAP32[$2 + 120 >> 2] >> 2, 2) | 0) == 2) {
              break block7
             }
             if (Atomics.load(HEAP32, $2 + 128 >> 2)) {
              Atomics.notify(HEAP32, $2 >> 2, 4294967295);
              break block7;
             }
             _emscripten_notify_mailbox_postmessage($2 | 0, thread_ptr | 0);
            }
            $0 = $6 + 16 | 0;
            __stack_pointer = $0;
            break block8;
           }
          }
          if (!global$9) {
           __assert_fail(11818, 9497, 93, 8292);
           wasm2js_trap();
          }
         }
         if (!global$9) {
          __assert_fail(13018, 9497, 97, 8292);
          wasm2js_trap();
         }
        }
        $0 = global$9 ? $0 : 1;
       }
       $0 = !global$9 & (!$11 | (global$9 | 0) == 2) ? 0 : $0;
       if (!global$9) {
        $2 = HEAP32[$1 + 28 >> 2]
       }
      }
      if (!global$9) {
       block9 : {
        $1 = Atomics.sub(HEAP32, $2 + 124 >> 2, 1);
        if (($1 | 0) > 0) {
         if (($1 | 0) == 1) {
          emscripten_futex_wake($2 + 124 | 0, 2147483647)
         }
         break block9;
        }
        __assert_fail(11847, 9497, 38, 7212);
        wasm2js_trap();
       }
      }
     }
     if (!global$9) {
      __stack_pointer = $3 + 48 | 0
     }
    }
    $0 = !global$9 & (!$10 | (global$9 | 0) == 2) ? 0 : $0;
    if (!global$9) {
     __stack_pointer = $7 + 16 | 0;
     return $0;
    }
   }
   if (!global$9) {
    __assert_fail(10751, 9713, 141, 1040);
    wasm2js_trap();
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $5;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $7;
  HEAP32[$4 + 28 >> 2] = $10;
  HEAP32[$4 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function remove_active_ctx($0) {
  var $1 = 0, $2 = 0;
  $2 = global$9;
  folding_inner0 : {
   block1 : {
    block : {
     if ($0) {
      $1 = HEAP32[$0 + 88 >> 2];
      if (!$1) {
       break block
      }
      if (!HEAP32[$0 + 92 >> 2]) {
       break block1
      }
      if (($0 | 0) == ($1 | 0)) {
       HEAP32[$0 + 88 >> 2] = 0;
       HEAP32[$0 + 92 >> 2] = 0;
       pthread_setspecific(HEAP32[18335], 0);
       if ((global$9 | 0) != ($2 | 0)) {
        wasm2js_trap()
       }
       return;
      }
      $1 = __pthread_getspecific(HEAP32[18335]);
      if ((global$9 | 0) != ($2 | 0)) {
       wasm2js_trap()
      }
      if (($0 | 0) == ($1 | 0)) {
       pthread_setspecific(HEAP32[18335], HEAP32[$1 + 88 >> 2]);
       if ((global$9 | 0) != ($2 | 0)) {
        wasm2js_trap()
       }
      }
      $2 = HEAP32[$0 + 92 >> 2];
      $1 = HEAP32[$0 + 88 >> 2];
      HEAP32[$2 + 88 >> 2] = $1;
      HEAP32[$1 + 92 >> 2] = $2;
      HEAP32[$0 + 88 >> 2] = 0;
      HEAP32[$0 + 92 >> 2] = 0;
      return;
     }
     __assert_fail(10703, 9713, 226, 2076);
     break folding_inner0;
    }
    __assert_fail(10733, 9713, 227, 2076);
    break folding_inner0;
   }
   __assert_fail(10715, 9713, 228, 2076);
  }
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  wasm2js_trap();
 }
 
 function free_ctx($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    em_proxying_ctx_deinit($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $2 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function call_callback_then_free_ctx($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 4 >> 2];
   $1 = HEAP32[$1 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = HEAP32[$0 + 20 >> 2];
   $3 = HEAP32[$0 + 4 >> 2];
  }
  block : {
   if (!global$9 | !$2) {
    FUNCTION_TABLE[$1 | 0]($3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($2 | 0) == 1) {
    free_ctx($0);
    $4 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function em_proxying_ctx_deinit($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $1 = global$9 ? $1 : !HEAP32[$0 + 8 >> 2];
   if ($1 | (global$9 | 0) == 2) {
    $1 = global$9 ? $1 : $0 + 16 | 0;
    if (!global$9 | !$2) {
     pthread_mutex_destroy($1);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $0 = $0 + 40 | 0;
     $1 = !HEAP32[$0 >> 2];
    }
    block1 : {
     if (!global$9) {
      if (!HEAP32[$0 + 12 >> 2] | $1) {
       break block1
      }
      $1 = $0 + 12 | 0;
      Atomics.or(HEAP32, $1 >> 2, -2147483648);
      $3 = $0 + 8 | 0;
      a_inc($3);
      __wake_563($3);
      $0 = HEAP32[$0 + 12 >> 2];
      if (!($0 & 2147483647)) {
       break block1
      }
     }
     while (1) {
      if (!global$9 | ($2 | 0) == 1) {
       __wait($1, 0, $0);
       $3 = 1;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = HEAP32[$1 >> 2];
       if ($0 & 2147483647) {
        continue
       }
      }
      break;
     };
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function cancel_ctx($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 32 | 0;
   __stack_pointer = $3;
   $2 = !HEAP32[$0 + 8 >> 2];
  }
  block : {
   block1 : {
    if ((global$9 | 0) == 2 | $2) {
     $2 = global$9 ? $2 : $0 + 16 | 0;
     if (!global$9 | !$5) {
      $1 = __pthread_mutex_lock($2);
      if ((global$9 | 0) == 1) {
       break block
      }
      $4 = $1;
     }
     if (!global$9) {
      HEAP32[$0 + 12 >> 2] = 2;
      $2 = __pthread_mutex_unlock($2);
      $0 = $0 + 40 | 0;
     }
     if (!global$9 | ($5 | 0) == 1) {
      pthread_cond_signal($0);
      $7 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block1
     }
    }
    $2 = global$9 ? $2 : HEAP32[$0 + 24 >> 2];
    if ($2 | (global$9 | 0) == 2) {
     if (!global$9) {
      $2 = HEAP32[$0 + 16 >> 2];
      $4 = HEAP32[$0 + 12 >> 2];
      HEAP32[$3 + 28 >> 2] = $0;
      HEAP32[$3 + 16 >> 2] = $0;
      HEAP32[$3 + 24 >> 2] = 194;
      HEAP32[$3 + 20 >> 2] = 199;
      $1 = HEAP32[$3 + 24 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 20 >> 2];
      HEAP32[$3 + 12 >> 2] = $1;
      $6 = $3 + 8 | 0;
     }
     if (!global$9 | ($5 | 0) == 2) {
      $1 = do_proxy($4, $2, $6);
      $7 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $1;
     }
     if (!($2 ? global$9 : 1)) {
      break block1
     }
    }
    if (!global$9 | ($5 | 0) == 3) {
     free_ctx($0);
     $7 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $3 + 32 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $4;
  HEAP32[$1 + 16 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function call_with_ctx($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   block : {
    if ($0) {
     $1 = __pthread_getspecific(HEAP32[18335]);
     if (!$1) {
      HEAP32[$0 + 88 >> 2] = $0;
      HEAP32[$0 + 92 >> 2] = $0;
      pthread_setspecific(HEAP32[18335], $0);
      break block;
     }
     HEAP32[$0 + 88 >> 2] = $1;
     HEAP32[$0 + 92 >> 2] = HEAP32[$1 + 92 >> 2];
     HEAP32[$1 + 92 >> 2] = $0;
     HEAP32[HEAP32[$0 + 92 >> 2] + 88 >> 2] = $0;
     break block;
    }
    __assert_fail(10703, 9713, 210, 2094);
    wasm2js_trap();
   }
   $2 = HEAP32[$0 >> 2];
   $1 = HEAP32[$0 + 4 >> 2];
  }
  block1 : {
   if (!global$9 | !$3) {
    FUNCTION_TABLE[$2 | 0]($0, $1);
    if ((global$9 | 0) == 1) {
     break block1
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function init_active_ctxs() {
  var $0 = 0, $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = thread_ptr;
   if (!HEAP32[$1 + 72 >> 2]) {
    HEAP32[$1 + 72 >> 2] = 73360
   }
   $0 = HEAP32[18471];
   $1 = ($0 | 0) == HEAP32[thread_ptr + 24 >> 2];
  }
  block3 : {
   block : {
    if (!global$9) {
     if ($1) {
      break block
     }
     if ((__pthread_rwlock_trywrlock() | 0) != 10) {
      break block
     }
     $0 = 100;
     while (1) {
      if (!(!$0 | !HEAP32[18468])) {
       $0 = $0 - 1 | 0;
       if (!HEAP32[18469]) {
        continue
       }
      }
      break;
     };
     $1 = (__pthread_rwlock_trywrlock() | 0) == 10;
    }
    if ((global$9 | 0) == 2 | $1) {
     while (1) {
      if (!global$9) {
       $0 = HEAP32[18468];
       $1 = !$0;
      }
      block2 : {
       if (!global$9) {
        if ($1) {
         break block2
        }
        a_inc(73876);
        $1 = $0;
        $0 = $0 | -2147483648;
        a_cas_617($1, $0);
       }
       if (!global$9 | !$2) {
        $1 = __timedwait(73872, $0);
        if ((global$9 | 0) == 1) {
         break block3
        }
        $0 = $1;
       }
       if (!global$9) {
        a_dec(73876);
        if (!$0) {
         break block2
        }
        if (($0 | 0) != 27) {
         break block
        }
       }
      }
      if (!global$9) {
       $1 = (__pthread_rwlock_trywrlock() | 0) == 10;
       if ($1) {
        continue
       }
      }
      break;
     }
    }
    if (!global$9) {
     HEAP32[18471] = HEAP32[thread_ptr + 24 >> 2]
    }
   }
   if (!global$9) {
    $2 = HEAP32[18476];
    $0 = $2;
    block4 : {
     while (1) {
      $1 = ($0 << 2) + 73920 | 0;
      if (!HEAP32[$1 >> 2]) {
       HEAP32[18335] = $0;
       HEAP32[18476] = $0;
       HEAP32[$1 >> 2] = 200;
       $1 = 0;
       break block4;
      }
      $0 = $0 + 1 & 127;
      if (($2 | 0) != ($0 | 0)) {
       continue
      }
      break;
     };
     $1 = 6;
    }
    __pthread_rwlock_unlock();
    if ($1) {
     __assert_fail(11871, 9713, 205, 3386);
     wasm2js_trap();
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function call_cancel_then_free_ctx($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 4 >> 2];
   $1 = HEAP32[$1 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = HEAP32[$0 + 24 >> 2];
   $3 = HEAP32[$0 + 4 >> 2];
  }
  block : {
   if (!global$9 | !$2) {
    FUNCTION_TABLE[$1 | 0]($3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($2 | 0) == 1) {
    free_ctx($0);
    $4 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function call_then_finish_task($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 >> 2];
  }
  block : {
   if (!global$9 | !$4) {
    FUNCTION_TABLE[$1 | 0]($2);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = __stack_pointer - 32 | 0;
    __stack_pointer = $1;
    $2 = !HEAP32[$0 + 8 >> 2];
   }
   block1 : {
    if ((global$9 | 0) == 2 | $2) {
     $2 = global$9 ? $2 : $0 + 16 | 0;
     if (!global$9 | ($4 | 0) == 1) {
      $3 = __pthread_mutex_lock($2);
      $6 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $5 = $3;
     }
     if (!global$9) {
      HEAP32[$0 + 12 >> 2] = 1;
      remove_active_ctx($0);
      $2 = __pthread_mutex_unlock($2);
      $0 = $0 + 40 | 0;
     }
     if (!global$9 | ($4 | 0) == 2) {
      pthread_cond_signal($0);
      $6 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     remove_active_ctx($0);
     $2 = HEAP32[$0 + 16 >> 2];
     $5 = HEAP32[$0 + 12 >> 2];
     HEAP32[$1 + 28 >> 2] = $0;
     HEAP32[$1 + 16 >> 2] = $0;
     HEAP32[$1 + 24 >> 2] = 194;
     HEAP32[$1 + 20 >> 2] = 195;
     $3 = HEAP32[$1 + 24 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$1 + 12 >> 2] = $3;
     $7 = $1 + 8 | 0;
    }
    if (!global$9 | ($4 | 0) == 3) {
     $3 = do_proxy($5, $2, $7);
     $6 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $3;
    }
    if (!($2 ? global$9 : 1)) {
     break block1
    }
    if (!global$9 | ($4 | 0) == 4) {
     free_ctx($0);
     $6 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $1 + 32 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $5;
  HEAP32[$3 + 16 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function _emscripten_run_on_main_thread_js($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $5 = HEAP32[$1 + 36 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   wasm2js_scratch_store_i32(0, $8 | 0);
   wasm2js_scratch_store_i32(1, $5 | 0);
   $11 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 48 | 0;
   __stack_pointer = $6;
   HEAP32[$6 + 12 >> 2] = $1;
   HEAP32[$6 + 8 >> 2] = $0;
   HEAP8[$6 + 44 | 0] = 0;
   HEAP8[$6 + 45 | 0] = 0;
   HEAP8[$6 + 46 | 0] = 0;
   HEAP8[$6 + 47 | 0] = 0;
   HEAP8[$6 + 41 | 0] = 0;
   HEAP8[$6 + 42 | 0] = 0;
   HEAP8[$6 + 43 | 0] = 0;
   HEAP8[$6 + 44 | 0] = 0;
   HEAP8[$6 + 40 | 0] = 0;
   HEAP32[$6 + 32 >> 2] = 0;
   HEAP32[$6 + 36 >> 2] = 0;
   HEAP32[$6 + 28 >> 2] = 0;
   HEAP32[$6 + 24 >> 2] = $3;
   HEAP32[$6 + 20 >> 2] = $2;
   $0 = thread_ptr;
   HEAP32[$6 + 16 >> 2] = $0;
  }
  block5 : {
   block10 : {
    block8 : {
     block9 : {
      if ((global$9 | 0) == 2 | $4) {
       if (!global$9) {
        $0 = __stack_pointer - 16 | 0;
        __stack_pointer = $0;
        HEAP32[$0 + 12 >> 2] = $6 + 8;
        HEAP32[$0 + 8 >> 2] = 0;
        HEAP32[$0 + 4 >> 2] = 202;
        $3 = $0 + 4 | 0;
        $1 = __stack_pointer - 128 | 0;
        __stack_pointer = $1;
        $2 = (thread_ptr | 0) != 73164;
       }
       block7 : {
        if ((global$9 | 0) == 2 | $2) {
         if (!global$9) {
          $2 = __stack_pointer - 96 | 0;
          __stack_pointer = $2;
          $4 = HEAP32[18336] == 2;
         }
         block : {
          if (!global$9) {
           if ($4) {
            $4 = __stack_pointer - 16 | 0;
            HEAP32[$4 + 12 >> 2] = 0;
            break block;
           }
           $4 = __stack_pointer - 16 | 0;
           __stack_pointer = $4;
          }
          while (1) {
           block6 : {
            if (!global$9) {
             $7 = a_cas(73344, 0, 1)
            }
            block4 : {
             block2 : {
              block3 : {
               if (!global$9) {
                block1 : {
                 switch ($7 | 0) {
                 case 0:
                  break block1;
                 case 1:
                  break block2;
                 case 2:
                  break block3;
                 case 3:
                  break block4;
                 default:
                  continue;
                 };
                }
                $7 = $4 + 4 | 0;
                HEAP32[$7 + 4 >> 2] = 73344;
                HEAP32[$7 >> 2] = 204;
                $5 = thread_ptr;
                HEAP32[$7 + 8 >> 2] = HEAP32[$5 + 68 >> 2];
                HEAP32[$5 + 68 >> 2] = $7;
               }
               if (!global$9 | !$9) {
                init_active_ctxs();
                $8 = 0;
                if ((global$9 | 0) == 1) {
                 break block5
                }
               }
               if (!global$9) {
                HEAP32[thread_ptr + 68 >> 2] = HEAP32[$4 + 12 >> 2];
                $7 = (a_swap_603(73344, 2) | 0) != 3;
                if ($7) {
                 break block3
                }
                __wake_563(73344);
               }
              }
              if (!global$9) {
               $4 = $4 + 16 | 0;
               __stack_pointer = $4;
               break block6;
              }
             }
             if (!global$9) {
              $7 = a_cas(73344, 1, 3)
             }
            }
            if (!global$9 | ($9 | 0) == 1) {
             __wait(73344, 0, 3);
             $8 = 1;
             if ((global$9 | 0) == 1) {
              break block5
             }
            }
            if (!global$9) {
             continue
            }
           }
           break;
          };
         }
         if (!global$9) {
          wasm2js_memory_fill($2, 0, 80);
          HEAP32[$2 + 92 >> 2] = 201;
          HEAP32[$2 + 88 >> 2] = $3;
          HEAP32[$2 + 84 >> 2] = 0;
          HEAP32[$2 + 80 >> 2] = 0;
          $5 = $1 + 32 | 0;
          HEAP32[$5 >> 2] = HEAP32[$2 + 92 >> 2];
          HEAP32[$5 + 4 >> 2] = HEAP32[$2 + 88 >> 2];
          HEAP32[$5 + 8 >> 2] = HEAP32[$2 + 84 >> 2];
          $4 = HEAP32[$2 + 80 >> 2];
          HEAP32[$5 + 12 >> 2] = $4;
          $3 = $5 + 16 | 0;
          wasm2js_memory_copy($3, $2, 80);
          __stack_pointer = $2 + 96 | 0;
          HEAP32[$1 + 24 >> 2] = 196;
          HEAP32[$1 + 20 >> 2] = 197;
          HEAP32[$1 + 28 >> 2] = $5;
          HEAP32[$1 + 16 >> 2] = $5;
          $2 = HEAP32[$1 + 24 >> 2];
          HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
          HEAP32[$1 + 12 >> 2] = $2;
          $2 = $1 + 8 | 0;
         }
         if (!global$9 | ($9 | 0) == 2) {
          $5 = do_proxy(73304, 73164, $2);
          $8 = 2;
          if ((global$9 | 0) == 1) {
           break block5
          }
          $2 = $5;
         }
         $10 = global$9 ? $10 : $2;
         if ($10 | (global$9 | 0) == 2) {
          $2 = global$9 ? $2 : $1 + 48 | 0;
          if (!global$9 | ($9 | 0) == 3) {
           $5 = __pthread_mutex_lock($2);
           $8 = 3;
           if ((global$9 | 0) == 1) {
            break block5
           }
           $3 = $5;
          }
          $3 = global$9 ? $3 : !HEAP32[$1 + 44 >> 2];
          if ($3 | (global$9 | 0) == 2) {
           $3 = global$9 ? $3 : $1 + 72 | 0;
           while (1) {
            if (!global$9 | ($9 | 0) == 4) {
             pthread_cond_wait($3, $2);
             $8 = 4;
             if ((global$9 | 0) == 1) {
              break block5
             }
            }
            if (!global$9) {
             $4 = !HEAP32[$1 + 44 >> 2];
             if ($4) {
              continue
             }
            }
            break;
           };
          }
          if (!global$9) {
           __pthread_mutex_unlock($2);
           $2 = HEAP32[$1 + 44 >> 2] == 1;
          }
         }
         $2 = !global$9 & (!$10 | (global$9 | 0) == 2) ? 0 : $2;
         $3 = global$9 ? $3 : $1 + 32 | 0;
         if (!global$9 | ($9 | 0) == 5) {
          em_proxying_ctx_deinit($3);
          $8 = 5;
          if ((global$9 | 0) == 1) {
           break block5
          }
         }
         if (!global$9) {
          __stack_pointer = $1 + 128 | 0;
          $1 = $2;
          break block7;
         }
        }
        if (!global$9) {
         __assert_fail(13158, 9713, 376, 2045);
         wasm2js_trap();
        }
       }
       if (!global$9) {
        __stack_pointer = $0 + 16 | 0;
        if (!$1) {
         break block8
        }
        $11 = HEAPF64[$6 + 32 >> 3];
        break block9;
       }
      }
      if (!global$9 | ($9 | 0) == 6) {
       $5 = emscripten_builtin_malloc(40);
       $8 = 6;
       if ((global$9 | 0) == 1) {
        break block5
       }
       $0 = $5;
      }
      if (!global$9) {
       wasm2js_memory_copy($0, $6 + 8 | 0, 40);
       HEAP8[$0 + 32 | 0] = 1;
       $2 = $2 << 3;
      }
      if (!global$9 | ($9 | 0) == 7) {
       $5 = emscripten_builtin_malloc($2);
       $8 = 7;
       if ((global$9 | 0) == 1) {
        break block5
       }
       $4 = $5;
      }
      if (!global$9) {
       HEAP32[$0 + 16 >> 2] = $4;
       __memcpy($4, $3, $2);
      }
      if (!global$9 | ($9 | 0) == 8) {
       $5 = emscripten_proxy_async(73164, 202, $0);
       $8 = 8;
       if ((global$9 | 0) == 1) {
        break block5
       }
       $0 = $5;
      }
      if (!(global$9 | $0)) {
       break block10
      }
     }
     if (!global$9) {
      __stack_pointer = $6 + 48 | 0;
      return +$11;
     }
    }
    if (!global$9) {
     __assert_fail(13118, 9713, 625, 3761);
     wasm2js_trap();
    }
   }
   if (!global$9) {
    __assert_fail(13077, 9713, 641, 3761);
    wasm2js_trap();
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $10;
  wasm2js_scratch_store_f64(+$11);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 36 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0.0;
 }
 
 function run_js_func($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   (wasm2js_i32$0 = $0, wasm2js_f64$0 = +_emscripten_receive_on_main_thread_js(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2])), HEAPF64[wasm2js_i32$0 + 24 >> 3] = wasm2js_f64$0;
   $1 = HEAPU8[$0 + 32 | 0] == 1;
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    $1 = global$9 ? $1 : HEAP32[$0 + 16 >> 2];
    if (!global$9 | !$2) {
     emscripten_builtin_free($1);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($2 | 0) == 1) {
     emscripten_builtin_free($0);
     $3 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function cancel_active_ctxs($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
   $1 = HEAP32[$1 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   pthread_setspecific(HEAP32[18335], 0);
   $2 = $0;
  }
  block : {
   while (1) {
    $1 = global$9 ? $1 : HEAP32[$2 + 88 >> 2];
    if (!global$9 | !$3) {
     cancel_ctx($2);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $2 = $1;
     $1 = ($1 | 0) != ($0 | 0);
     if ($1) {
      continue
     }
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function __wake_563($0) {
  var $1 = 0;
  $1 = global$9;
  emscripten_futex_wake($0, 2147483647);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
 }
 
 function pthread_cond_signal($0) {
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!(global$9 ? 1 : HEAP32[$0 >> 2]) | (global$9 | 0) == 2) {
    if (!global$9 | !$1) {
     $1 = __private_cond_signal($0, 1);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $1;
    }
    if (!global$9) {
     return
    }
   }
   if (!(HEAP32[$0 + 12 >> 2] ? global$9 : 1)) {
    $0 = $0 + 8 | 0;
    a_inc($0);
    __wake($0);
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function __timedwait_cp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $6 = HEAP32[$4 + 12 >> 2];
   $2 = HEAP32[$4 + 20 >> 2];
   $1 = HEAP32[$4 + 16 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $2 | 0);
   $5 = +wasm2js_scratch_load_f64();
   $2 = HEAP32[$4 + 28 >> 2];
   $1 = HEAP32[$4 + 24 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $2 | 0);
   $7 = +wasm2js_scratch_load_f64();
   $8 = HEAP32[$4 + 32 >> 2];
   $2 = HEAP32[$4 + 40 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $2 | 0);
   $9 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$4 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer;
   $8 = $3 - 16 | 0;
   __stack_pointer = $8;
   $6 = is_runtime_thread;
  }
  block5 : {
   block4 : {
    block3 : {
     block1 : {
      if (!global$9) {
       block : {
        if ($6) {
         break block
        }
        $3 = thread_ptr;
        if (HEAPU8[$3 + 40 | 0] != 1) {
         break block
        }
        $3 = !HEAPU8[$3 + 41 | 0];
        if ($3) {
         break block1
        }
       }
       $7 = $6 ? 1.0 : 100.0;
       $5 = +emscripten_get_now();
       $9 = $5 + Infinity;
       $6 = thread_ptr;
      }
      while (1) {
       if (!global$9) {
        block2 : {
         if (!HEAP32[$6 + 36 >> 2]) {
          $5 = $9 - +emscripten_get_now();
          $3 = !($5 <= 0.0);
          if ($3) {
           break block2
          }
          $2 = 73;
          break block3;
         }
         $3 = 11;
         break block4;
        }
        $3 = $5 > $7;
        $5 = $3 ? $7 : $5;
       }
       if (!global$9 | !$10) {
        $2 = emscripten_futex_wait($0, $1, $5);
        $4 = 0;
        if ((global$9 | 0) == 1) {
         break block5
        }
        $3 = $2;
       }
       if (!global$9 & ($3 | 0) == -73) {
        continue
       }
       break;
      };
      $2 = 0 - $3 | 0;
      if (!global$9) {
       break block3
      }
     }
     if (!global$9 | ($10 | 0) == 1) {
      $2 = emscripten_futex_wait($0, $1, Infinity);
      $4 = 1;
      if ((global$9 | 0) == 1) {
       break block5
      }
      $0 = $2;
     }
     $2 = global$9 ? $1 : 0 - $0 | 0;
    }
    if (!global$9) {
     $3 = ($2 | 0) != 73 ? (($2 & -17) == 11 ? $2 : 0) : $2;
     if (($3 | 0) != 27) {
      break block4
     }
     $3 = HEAP32[18337] ? 27 : 0;
    }
   }
   if (!global$9) {
    __stack_pointer = $8 + 16 | 0;
    return $3;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $6;
  wasm2js_scratch_store_f64(+$5);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[$2 + 20 >> 2] = $0;
  wasm2js_scratch_store_f64(+$7);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 32 >> 2] = $8;
  wasm2js_scratch_store_f64(+$9);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function __timedwait($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   __pthread_setcancelstate(1, $2 + 12 | 0);
   emscripten_conditional_set_current_thread_status(1, 4);
  }
  block : {
   if (!global$9 | !$3) {
    $3 = __timedwait_cp($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    emscripten_conditional_set_current_thread_status(4, 1);
    __pthread_setcancelstate(HEAP32[$2 + 12 >> 2], 0);
    __stack_pointer = $2 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function lock($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9) {
    $2 = a_cas($0, 0, 1)
   }
   if ($2 | (global$9 | 0) == 2) {
    if (!global$9) {
     a_cas($0, 1, 2)
    }
    while (1) {
     if (!global$9 | !$1) {
      __wait($0, 0, 2);
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      if (a_cas($0, 0, 2)) {
       continue
      }
     }
     break;
    };
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function unlock($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = a_swap($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  if (($2 | 0) == 2) {
   __wake($0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function a_fetch_add_573($0) {
  return Atomics.add(HEAP32, $0 >> 2, -1);
 }
 
 function a_store($0) {
  Atomics.store(HEAP32, $0 >> 2, 0);
 }
 
 function __private_cond_signal($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer;
   $3 = $2 - 16 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 12 >> 2] = 0;
   $6 = $0 + 32 | 0;
  }
  block : {
   if (!global$9 | !$4) {
    lock($6);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = HEAP32[$0 + 20 >> 2];
    $7 = ($2 | 0) != 0;
    block1 : {
     if (!$1 | !$2) {
      break block1
     }
     while (1) {
      block2 : {
       if (a_cas($2 + 8 | 0, 0, 1)) {
        HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
        HEAP32[$2 + 16 >> 2] = $3 + 12;
        break block2;
       }
       $5 = $5 ? $5 : $2;
       $1 = $1 - 1 | 0;
      }
      $2 = HEAP32[$2 >> 2];
      $7 = ($2 | 0) != 0;
      if (!$1) {
       break block1
      }
      if ($2) {
       continue
      }
      break;
     };
    }
    block3 : {
     if ($7) {
      $1 = HEAP32[$2 + 4 >> 2];
      if ($1) {
       HEAP32[$1 >> 2] = 0
      }
      HEAP32[$2 + 4 >> 2] = 0;
      break block3;
     }
     HEAP32[$0 + 4 >> 2] = 0;
    }
    HEAP32[$0 + 20 >> 2] = $2;
    unlock($6);
    $2 = HEAP32[$3 + 12 >> 2];
   }
   if ((global$9 | 0) == 2 | $2) {
    while (1) {
     $0 = global$9 ? $0 : $3 + 12 | 0;
     if (!global$9 | ($4 | 0) == 1) {
      __wait($0, 0, $2);
      $7 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = HEAP32[$3 + 12 >> 2];
      if ($2) {
       continue
      }
     }
     break;
    }
   }
   if (!global$9) {
    if ($5) {
     unlock($5 + 12 | 0)
    }
    __stack_pointer = $3 + 16 | 0;
    return 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function pthread_cond_wait($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $9 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 32 | 0;
   __stack_pointer = $2;
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   if (is_main_thread) {
    emscripten_check_blocking_allowed()
   }
   $4 = !(HEAPU8[$1 | 0] & 15);
  }
  block3 : {
   block1 : {
    if (!global$9) {
     block : {
      if ($4) {
       break block
      }
      $3 = HEAP32[$1 + 4 >> 2] & 2147483647;
      $4 = ($3 | 0) == HEAP32[thread_ptr + 24 >> 2];
      if ($4) {
       break block
      }
      break block1;
     }
     $9 = HEAP32[$0 >> 2];
    }
    block2 : {
     if (!global$9) {
      if ($9) {
       $3 = HEAP32[$0 + 8 >> 2];
       a_inc($0 + 12 | 0);
       $4 = $0 + 8 | 0;
       break block2;
      }
      $5 = $0 + 32 | 0;
     }
     if (!global$9 | !$7) {
      lock($5);
      if ((global$9 | 0) == 1) {
       break block3
      }
     }
     if (!global$9) {
      HEAP32[$2 + 20 >> 2] = 2;
      HEAP32[$2 + 16 >> 2] = 0;
      $4 = HEAP32[$0 + 4 >> 2];
      HEAP32[$2 + 12 >> 2] = $4;
      $3 = $2 + 8 | 0;
      HEAP32[$0 + 4 >> 2] = $3;
      block4 : {
       if (!HEAP32[$0 + 20 >> 2]) {
        HEAP32[$0 + 20 >> 2] = $3;
        break block4;
       }
       HEAP32[$4 >> 2] = $2 + 8;
      }
      unlock($5);
      $3 = 2;
      $4 = $2 + 20 | 0;
     }
    }
    if (!global$9) {
     __pthread_mutex_unlock($1);
     __pthread_setcancelstate(2, $2 + 4 | 0);
     $5 = HEAP32[$2 + 4 >> 2] == 1;
     if ($5) {
      __pthread_setcancelstate(1, 0)
     }
    }
    if (!global$9 | ($7 | 0) == 1) {
     $6 = __timedwait_cp($4, $3);
     $8 = 1;
     if ((global$9 | 0) == 1) {
      break block3
     }
     $5 = $6;
    }
    block5 : {
     if (!((global$9 ? $10 : HEAP32[$4 >> 2] != ($3 | 0)) ? global$9 : 1)) {
      break block5
     }
     while (1) {
      if (!(($5 ? ($5 | 0) != 27 : 0) ? global$9 : 1)) {
       break block5
      }
      if (!global$9 | ($7 | 0) == 2) {
       $6 = __timedwait_cp($4, $3);
       $8 = 2;
       if ((global$9 | 0) == 1) {
        break block3
       }
       $5 = $6;
      }
      if (!global$9 & HEAP32[$4 >> 2] == ($3 | 0)) {
       continue
      }
      break;
     };
    }
    if (!global$9) {
     $4 = ($5 | 0) != 27;
     $5 = $4 ? $5 : 0;
    }
    block12 : {
     block6 : {
      block7 : {
       if (!global$9) {
        if ($9) {
         $5 = ($5 | 0) == 11 ? (HEAP32[$0 + 8 >> 2] == ($3 | 0) ? 11 : 0) : $5;
         $3 = $0 + 12 | 0;
         $0 = (a_fetch_add_573($3) | 0) != -2147483647;
         if ($0) {
          break block6
         }
         break block7;
        }
        $4 = !a_cas($2 + 16 | 0, 0, 2);
       }
       if ((global$9 | 0) == 2 | $4) {
        $3 = global$9 ? $3 : $0 + 32 | 0;
        if (!global$9 | ($7 | 0) == 3) {
         lock($3);
         $8 = 3;
         if ((global$9 | 0) == 1) {
          break block3
         }
        }
        if (!global$9) {
         block8 : {
          if (HEAP32[$0 + 4 >> 2] == ($2 + 8 | 0)) {
           HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
           break block8;
          }
          $4 = HEAP32[$2 + 8 >> 2];
          if (!$4) {
           break block8
          }
          HEAP32[$4 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
         }
         block9 : {
          if (HEAP32[$0 + 20 >> 2] == ($2 + 8 | 0)) {
           HEAP32[$0 + 20 >> 2] = HEAP32[$2 + 8 >> 2];
           break block9;
          }
          $4 = HEAP32[$2 + 12 >> 2];
          if (!$4) {
           break block9
          }
          HEAP32[$4 >> 2] = HEAP32[$2 + 8 >> 2];
         }
         unlock($3);
         $3 = HEAP32[$2 + 24 >> 2];
         $0 = !$3;
         if ($0) {
          break block6
         }
         $0 = (a_fetch_add_573($3) | 0) != 1;
         if ($0) {
          break block6
         }
         $3 = HEAP32[$2 + 24 >> 2];
         break block7;
        }
       }
       $0 = global$9 ? $0 : $2 + 20 | 0;
       if (!global$9 | ($7 | 0) == 4) {
        lock($0);
        $8 = 4;
        if ((global$9 | 0) == 1) {
         break block3
        }
       }
       if (!global$9 | ($7 | 0) == 5) {
        $6 = __pthread_mutex_lock($1);
        $8 = 5;
        if ((global$9 | 0) == 1) {
         break block3
        }
        $0 = $6;
       }
       if (!global$9) {
        if (!(HEAP32[$2 + 12 >> 2] | HEAPU8[$1 | 0] & 8)) {
         a_inc($1 + 8 | 0)
        }
        $4 = HEAP32[$2 + 8 >> 2];
        block11 : {
         if ($4) {
          $0 = HEAP32[$1 + 4 >> 2];
          if (($0 | 0) > 0) {
           a_cas($1 + 4 | 0, $0, $0 | -2147483648)
          }
          $0 = $4 + 12 | 0;
          a_store($0);
          emscripten_futex_wake($0, 2147483647);
          break block11;
         }
         if (HEAPU8[$1 | 0] & 8) {
          break block11
         }
         a_dec($1 + 8 | 0);
        }
        $0 = HEAP32[$2 + 4 >> 2];
        break block12;
       }
      }
      if (!global$9) {
       __wake($3)
      }
     }
     if (!global$9 | ($7 | 0) == 6) {
      $6 = __pthread_mutex_lock($1);
      $8 = 6;
      if ((global$9 | 0) == 1) {
       break block3
      }
      $3 = $6;
     }
     if (!global$9) {
      __pthread_setcancelstate(HEAP32[$2 + 4 >> 2], 0);
      if ((($3 ? $3 : $5) | 0) != 11) {
       break block1
      }
      $0 = 1;
     }
    }
    if (!global$9) {
     __pthread_setcancelstate($0, 0)
    }
   }
   if (!global$9) {
    __stack_pointer = $2 + 32 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $9;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
 }
 
 function __pthread_getspecific($0) {
  return HEAP32[HEAP32[thread_ptr + 72 >> 2] + ($0 << 2) >> 2];
 }
 
 function pthread_mutex_destroy($0) {
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $0 = global$9 ? $0 : HEAP32[$0 >> 2] >= 129;
   if ($0 | (global$9 | 0) == 2) {
    $0 = global$9 ? $0 : HEAP32[18608];
    if ($0 | (global$9 | 0) == 2) {
     while (1) {
      if (!global$9 | !$1) {
       __wait(74432, 74436, $0);
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = HEAP32[18608];
       if ($0) {
        continue
       }
      }
      break;
     }
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function __pthread_mutex_lock($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   $4 = HEAP32[$2 + 12 >> 2];
   $5 = HEAP32[$2 + 16 >> 2];
   $6 = HEAP32[$2 + 20 >> 2];
   $7 = HEAP32[$2 + 24 >> 2];
   $8 = HEAP32[$2 + 28 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   block : {
    if (HEAPU8[$0 | 0] & 15) {
     break block
    }
    if (Atomics.compareExchange(HEAP32, $0 + 4 >> 2, 0, 10) | 0) {
     break block
    }
    return 0;
   }
   $3 = HEAP32[$0 >> 2];
   $4 = !($3 & 15);
  }
  block5 : {
   block1 : {
    if (!global$9) {
     if ($4) {
      if (!a_cas($0 + 4 | 0, 0, 10)) {
       break block1
      }
      $3 = HEAP32[$0 >> 2];
     }
     $1 = __pthread_mutex_trylock($0);
     if (($1 | 0) != 10) {
      break block1
     }
     $5 = $0 + 8 | 0;
     $4 = $0 + 4 | 0;
     $1 = 100;
     while (1) {
      if (!(!$1 | !HEAP32[$4 >> 2])) {
       $1 = $1 - 1 | 0;
       if (!HEAP32[$5 >> 2]) {
        continue
       }
      }
      break;
     };
     $1 = __pthread_mutex_trylock($0);
     if (($1 | 0) != 10) {
      break block1
     }
     $7 = !($3 & 4);
     $1 = $3 & 3;
     $8 = ($1 | 0) != 2;
    }
    while (1) {
     if (!global$9) {
      $1 = HEAP32[$4 >> 2];
      $3 = $1 & 1073741823;
      $6 = !($3 | ($1 | 0) != 0 & $7);
     }
     block3 : {
      if (!global$9) {
       if ($6) {
        break block3
       }
       block4 : {
        if ($8) {
         break block4
        }
        $6 = HEAP32[thread_ptr + 24 >> 2];
        if (($6 | 0) != ($3 | 0)) {
         break block4
        }
        $1 = 16;
        break block1;
       }
       a_inc($5);
       $3 = $1 | -2147483648;
       $1 = a_cas($4, $1, $3);
      }
      if (!global$9 | !$9) {
       $2 = __timedwait($4, $3);
       if ((global$9 | 0) == 1) {
        break block5
       }
       $1 = $2;
      }
      if (!global$9) {
       a_dec($5);
       if (($1 | 0) == 27) {
        break block3
       }
       if ($1) {
        break block1
       }
      }
     }
     if (!global$9) {
      $1 = __pthread_mutex_trylock($0);
      $3 = ($1 | 0) == 10;
      if ($3) {
       continue
      }
     }
     break;
    };
   }
   if (!global$9) {
    return $1
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $5;
  HEAP32[$2 + 20 >> 2] = $6;
  HEAP32[$2 + 24 >> 2] = $7;
  HEAP32[$2 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function __pthread_mutex_trylock($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $7 = global$9;
  if (!(HEAPU8[$0 | 0] & 15)) {
   $0 = a_cas($0 + 4 | 0, 0, 10);
   if ((global$9 | 0) != ($7 | 0)) {
    wasm2js_trap()
   }
   return $0 & 10;
  }
  $6 = HEAP32[$0 >> 2];
  block4 : {
   block2 : {
    block : {
     $3 = thread_ptr;
     $2 = HEAP32[$3 + 24 >> 2];
     $1 = HEAP32[$0 + 4 >> 2];
     $4 = $1 & 1073741823;
     if (($2 | 0) != ($4 | 0)) {
      break block
     }
     if (!(!($6 & 8) | HEAP32[$0 + 20 >> 2] >= 0)) {
      HEAP32[$0 + 20 >> 2] = 0;
      $1 = $1 & 1073741824;
      break block2;
     }
     if (($6 & 3) != 1) {
      break block
     }
     $5 = 6;
     $1 = HEAP32[$0 + 20 >> 2];
     if ($1 >>> 0 > 2147483646) {
      break block4
     }
     HEAP32[$0 + 20 >> 2] = $1 + 1;
     $5 = 0;
     break block4;
    }
    $5 = 56;
    if (($4 | 0) == 1073741823) {
     break block4
    }
    block5 : {
     if (($6 & 4 ? 0 : $1) | $4) {
      break block5
     }
     $8 = $0 + 4 | 0;
     if ($6 & 128) {
      if (!HEAP32[$3 + 80 >> 2]) {
       HEAP32[$3 + 80 >> 2] = -12
      }
      $4 = HEAP32[$0 + 8 >> 2];
      HEAP32[$3 + 84 >> 2] = $0 + 16;
      $2 = $4 ? $2 | -2147483648 : $2;
     }
     $2 = a_cas($8, $1, $1 & 1073741824 | $2);
     if ((global$9 | 0) != ($7 | 0)) {
      wasm2js_trap()
     }
     if (($1 | 0) == ($2 | 0)) {
      break block2
     }
     HEAP32[$3 + 84 >> 2] = 0;
     if (($6 & 12) != 12) {
      break block5
     }
     if (HEAP32[$0 + 8 >> 2]) {
      break block4
     }
    }
    $5 = 10;
    break block4;
   }
   $4 = HEAP32[$3 + 76 >> 2];
   $2 = $3 + 76 | 0;
   HEAP32[$0 + 12 >> 2] = $2;
   HEAP32[$0 + 16 >> 2] = $4;
   $5 = $0 + 16 | 0;
   if (($2 | 0) != ($4 | 0)) {
    HEAP32[$4 - 4 >> 2] = $5
   }
   HEAP32[$3 + 76 >> 2] = $5;
   $5 = 0;
   HEAP32[$3 + 84 >> 2] = 0;
   if (!$1) {
    break block4
   }
   HEAP32[$0 + 20 >> 2] = 0;
   $5 = 62;
  }
  return $5;
 }
 
 function __pthread_mutex_unlock($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$9;
  $7 = HEAP32[$0 + 8 >> 2];
  $1 = HEAP32[$0 >> 2];
  block1 : {
   block : {
    if (!($1 & 15)) {
     $1 = $0 + 4 | 0;
     $0 = a_swap_603($1, 0);
     if ((global$9 | 0) != ($4 | 0)) {
      wasm2js_trap()
     }
     break block;
    }
    $2 = 63;
    $5 = thread_ptr;
    $3 = HEAP32[$0 + 4 >> 2];
    if (HEAP32[$5 + 24 >> 2] != ($3 & 1073741823)) {
     break block1
    }
    block2 : {
     if (($1 & 3) != 1) {
      break block2
     }
     $2 = HEAP32[$0 + 20 >> 2];
     if (!$2) {
      break block2
     }
     HEAP32[$0 + 20 >> 2] = $2 - 1;
     return 0;
    }
    $2 = ($3 << 1 & $1 << 29) >> 31;
    $3 = $1 & 128;
    if ($3) {
     HEAP32[$5 + 84 >> 2] = $0 + 16;
     Atomics.add(HEAP32, 0 + 74432 >> 2, 1);
    }
    $1 = $0 + 4 | 0;
    $2 = $2 & 2147483647;
    $6 = HEAP32[$0 + 12 >> 2];
    $0 = HEAP32[$0 + 16 >> 2];
    HEAP32[$6 >> 2] = $0;
    if (($0 | 0) != ($5 + 76 | 0)) {
     HEAP32[$0 - 4 >> 2] = $6
    }
    $0 = a_swap_603($1, $2);
    if ((global$9 | 0) != ($4 | 0)) {
     wasm2js_trap()
    }
    if (!$3) {
     break block
    }
    HEAP32[$5 + 84 >> 2] = 0;
    if (!((Atomics.add(HEAP32, 0 + 74432 >> 2, -1) | 0) != 1 | !HEAP32[18609])) {
     emscripten_futex_wake(74432, 2147483647);
     if ((global$9 | 0) != ($4 | 0)) {
      wasm2js_trap()
     }
    }
   }
   $2 = 0;
   if (!$7 & ($0 | 0) >= 0) {
    break block1
   }
   __wake($1);
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
  }
  return $2;
 }
 
 function a_swap_603($0, $1) {
  return Atomics.exchange(HEAP32, $0 >> 2, $1);
 }
 
 function undo($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = a_swap_603($0, 0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  if (($2 | 0) == 3) {
   __wake_563($0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function __pthread_rwlock_timedrdlock() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block3 : {
   block : {
    if (!global$9) {
     if ((__pthread_rwlock_tryrdlock() | 0) != 10) {
      break block
     }
     $0 = 100;
     while (1) {
      block1 : {
       $1 = !$0;
       if ($1) {
        break block1
       }
       $1 = !HEAP32[18468];
       if ($1) {
        break block1
       }
       $0 = $0 - 1 | 0;
       $1 = !HEAP32[18469];
       if ($1) {
        continue
       }
      }
      break;
     };
     $0 = (__pthread_rwlock_tryrdlock() | 0) != 10;
     if ($0) {
      break block
     }
    }
    while (1) {
     if (!global$9) {
      $0 = HEAP32[18468];
      $1 = ($0 & 2147483647) != 2147483647;
     }
     block2 : {
      if (!global$9) {
       if ($1) {
        break block2
       }
       a_inc(73876);
       a_cas_617($0, -1);
       $0 = HEAP32[18470];
      }
      if (!global$9 | !$3) {
       $2 = __timedwait(73872, -1);
       if ((global$9 | 0) == 1) {
        break block3
       }
       $0 = $2;
      }
      if (!global$9) {
       a_dec(73876);
       $1 = !$0;
       if ($1) {
        break block2
       }
       if (($0 | 0) != 27) {
        break block
       }
      }
     }
     if (!global$9) {
      $0 = (__pthread_rwlock_tryrdlock() | 0) == 10;
      if ($0) {
       continue
      }
     }
     break;
    };
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function a_cas_617($0, $1) {
  Atomics.compareExchange(HEAP32, 18468, $0, $1) | 0;
 }
 
 function __pthread_rwlock_tryrdlock() {
  var $0 = 0, $1 = 0, $2 = 0;
  $2 = global$9;
  block : {
   block1 : {
    while (1) {
     $0 = 6;
     block2 : {
      $1 = HEAP32[18468];
      switch (($1 & 2147483647) - 2147483646 | 0) {
      case 0:
       break block;
      case 1:
       break block1;
      default:
       break block2;
      };
     }
     $0 = a_cas(73872, $1, $1 + 1 | 0);
     if ((global$9 | 0) != ($2 | 0)) {
      wasm2js_trap()
     }
     if (($0 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
    return 0;
   }
   $0 = 10;
  }
  return $0;
 }
 
 function __pthread_rwlock_unlock() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = global$9;
  if (HEAP32[18471] == HEAP32[thread_ptr + 24 >> 2]) {
   HEAP32[18471] = 0
  }
  while (1) {
   $4 = HEAP32[18469];
   $0 = HEAP32[18468];
   $1 = $0 & 2147483647;
   $3 = ($1 | 0) != 2147483647 ? (($1 | 0) != 1 ? $0 - 1 | 0 : 0) : 0;
   $5 = a_cas(73872, $0, $3);
   if ((global$9 | 0) != ($2 | 0)) {
    wasm2js_trap()
   }
   if (($0 | 0) != ($5 | 0)) {
    continue
   }
   break;
  };
  if (!(!$4 & ($0 | 0) >= 0 | $3)) {
   emscripten_futex_wake(73872, $1);
   if ((global$9 | 0) != ($2 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function __pthread_rwlock_trywrlock() {
  var $0 = 0;
  if (Atomics.compareExchange(HEAP32, 18468, 0, 2147483647) | 0) {
   $0 = 10
  } else {
   HEAP32[18471] = HEAP32[thread_ptr + 24 >> 2];
   $0 = 0;
  }
  return $0;
 }
 
 function __pthread_self_internal() {
  return thread_ptr | 0;
 }
 
 function __pthread_setcancelstate($0, $1) {
  var $2 = 0;
  if ($0 >>> 0 <= 2) {
   $2 = thread_ptr;
   if ($1) {
    HEAP32[$1 >> 2] = HEAPU8[$2 + 40 | 0]
   }
   HEAP8[$2 + 40 | 0] = $0;
  }
 }
 
 function pthread_setspecific($0, $1) {
  var $2 = 0;
  $2 = thread_ptr;
  $0 = HEAP32[$2 + 72 >> 2] + ($0 << 2) | 0;
  if (HEAP32[$0 >> 2] != ($1 | 0)) {
   HEAP32[$0 >> 2] = $1;
   HEAP8[$2 + 42 | 0] = HEAPU8[$2 + 42 | 0] | 1;
  }
 }
 
 function roundf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0;
  $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $3 = $2 >>> 23 & 255;
  if ($3 >>> 0 <= 149) {
   if ($3 >>> 0 <= 125) {
    return Math_fround($0 * Math_fround(0.0))
   }
   $0 = Math_fround(Math_abs($0));
   $1 = Math_fround(Math_fround(Math_fround($0 + Math_fround(8388608.0)) + Math_fround(-8388608.0)) - $0);
   block : {
    if ($1 > Math_fround(.5)) {
     $0 = Math_fround(Math_fround($0 + $1) + Math_fround(-1.0));
     break block;
    }
    $0 = Math_fround($0 + $1);
    if (!($1 <= Math_fround(-.5))) {
     break block
    }
    $0 = Math_fround($0 + Math_fround(1.0));
   }
   $0 = ($2 | 0) < 0 ? Math_fround(-$0) : $0;
  }
  return $0;
 }
 
 function scalbn($0, $1) {
  block : {
   if (($1 | 0) >= 1024) {
    $0 = $0 * 8988465674311579538646525.0e283;
    if ($1 >>> 0 < 2047) {
     $1 = $1 - 1023 | 0;
     break block;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = ($1 >>> 0 >= 3069 ? 3069 : $1) - 2046 | 0;
    break block;
   }
   if (($1 | 0) > -1023) {
    break block
   }
   $0 = $0 * 2.004168360008973e-292;
   if ($1 >>> 0 > 4294965304) {
    $1 = $1 + 969 | 0;
    break block;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = ($1 >>> 0 <= 4294964336 ? -2960 : $1) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
  return $0 * +wasm2js_scratch_load_f64();
 }
 
 function sinf($0) {
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0;
  $1 = global$9;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $3 = $4 & 2147483647;
  block : {
   if ($3 >>> 0 <= 1061752794) {
    if ($3 >>> 0 < 964689920) {
     break block
    }
    $0 = __sindf(+$0);
    if ((global$9 | 0) != ($1 | 0)) {
     wasm2js_trap()
    }
    break block;
   }
   if ($3 >>> 0 <= 1081824209) {
    $2 = +$0;
    if ($3 >>> 0 <= 1075235811) {
     if (($4 | 0) < 0) {
      $0 = __cosdf($2 + 1.5707963267948966);
      if ((global$9 | 0) != ($1 | 0)) {
       wasm2js_trap()
      }
      $0 = Math_fround(-$0);
      break block;
     }
     $0 = __cosdf($2 + -1.5707963267948966);
     if ((global$9 | 0) != ($1 | 0)) {
      wasm2js_trap()
     }
     break block;
    }
    $0 = __sindf(-((($4 | 0) >= 0 ? -3.141592653589793 : 3.141592653589793) + $2));
    if ((global$9 | 0) != ($1 | 0)) {
     wasm2js_trap()
    }
    break block;
   }
   if ($3 >>> 0 <= 1088565717) {
    if ($3 >>> 0 <= 1085271519) {
     $2 = +$0;
     if (($4 | 0) < 0) {
      $0 = __cosdf($2 + 4.71238898038469);
      if ((global$9 | 0) != ($1 | 0)) {
       wasm2js_trap()
      }
      break block;
     }
     $0 = __cosdf($2 + -4.71238898038469);
     if ((global$9 | 0) != ($1 | 0)) {
      wasm2js_trap()
     }
     $0 = Math_fround(-$0);
     break block;
    }
    $0 = __sindf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
    if ((global$9 | 0) != ($1 | 0)) {
     wasm2js_trap()
    }
    break block;
   }
   if ($3 >>> 0 >= 2139095040) {
    $0 = Math_fround($0 - $0);
    break block;
   }
   $3 = __rem_pio2f($0, $5 + 8 | 0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
   $2 = HEAPF64[$5 + 8 >> 3];
   block3 : {
    switch (($3 & 3) - 1 | 0) {
    default:
     $0 = __sindf($2);
     if ((global$9 | 0) != ($1 | 0)) {
      wasm2js_trap()
     }
     break block;
    case 0:
     $0 = __cosdf($2);
     if ((global$9 | 0) != ($1 | 0)) {
      wasm2js_trap()
     }
     break block;
    case 1:
     $0 = __sindf(-$2);
     if ((global$9 | 0) != ($1 | 0)) {
      wasm2js_trap()
     }
     break block;
    case 2:
     break block3;
    };
   }
   $0 = __cosdf($2);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
   $0 = Math_fround(-$0);
  }
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function snprintf($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 12 >> 2] = $2;
  }
  block : {
   if (!global$9 | !$4) {
    $4 = vsnprintf($0, 100, $1, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $4;
   }
   if (!global$9) {
    __stack_pointer = $3 + 16 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function sscanf($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   HEAP32[$2 + 12 >> 2] = $1;
  }
  block : {
   if (!global$9 | !$3) {
    $3 = vsscanf($0, 7264, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   if (!global$9) {
    __stack_pointer = $2 + 16 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function strchr($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $0 = __strchrnul($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return HEAPU8[$0 | 0] == ($1 & 255) ? $0 : 0;
 }
 
 function __strchrnul($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$9;
  block : {
   block2 : {
    block1 : {
     $2 = $1 & 255;
     $4 = $2;
     if ($2) {
      if ($0 & 3) {
       $3 = $2;
       while (1) {
        $2 = HEAPU8[$0 | 0];
        if (!$2 | ($2 | 0) == ($3 | 0)) {
         break block
        }
        $0 = $0 + 1 | 0;
        if ($0 & 3) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$0 >> 2];
      if ((($2 | 16843008 - $2) & -2139062144) != -2139062144) {
       break block1
      }
      $4 = Math_imul($4, 16843009);
      while (1) {
       $3 = $2 ^ $4;
       if (((16843008 - $3 | $3) & -2139062144) != -2139062144) {
        break block1
       }
       $2 = HEAP32[$0 + 4 >> 2];
       $3 = $0 + 4 | 0;
       $0 = $3;
       if (((16843008 - $2 | $2) & -2139062144) == -2139062144) {
        continue
       }
       break;
      };
      break block2;
     }
     $1 = strlen($0);
     if ((global$9 | 0) != ($3 | 0)) {
      wasm2js_trap()
     }
     return $0 + $1 | 0;
    }
    $3 = $0;
   }
   while (1) {
    $0 = $3;
    $2 = HEAPU8[$0 | 0];
    if (!$2) {
     break block
    }
    $3 = $0 + 1 | 0;
    if (($2 | 0) != ($1 & 255)) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function strcmp($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAPU8[$0 | 0];
  $3 = HEAPU8[$1 | 0];
  block : {
   if (!$2 | ($2 | 0) != ($3 | 0)) {
    break block
   }
   while (1) {
    $3 = HEAPU8[$1 + 1 | 0];
    $2 = HEAPU8[$0 + 1 | 0];
    if (!$2) {
     break block
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($2 | 0) == ($3 | 0)) {
     continue
    }
    break;
   };
  }
  return $2 - $3 | 0;
 }
 
 function strcpy($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = $0;
  block1 : {
   block : {
    if (($3 ^ $1) & 3) {
     $2 = HEAPU8[$1 | 0];
     break block;
    }
    if ($1 & 3) {
     while (1) {
      $2 = HEAPU8[$1 | 0];
      HEAP8[$3 | 0] = $2;
      if (!$2) {
       break block1
      }
      $3 = $3 + 1 | 0;
      $1 = $1 + 1 | 0;
      if ($1 & 3) {
       continue
      }
      break;
     }
    }
    $2 = HEAP32[$1 >> 2];
    if ((($2 | 16843008 - $2) & -2139062144) != -2139062144) {
     break block
    }
    while (1) {
     HEAP32[$3 >> 2] = $2;
     $3 = $3 + 4 | 0;
     $2 = HEAP32[$1 + 4 >> 2];
     $1 = $1 + 4 | 0;
     if (((16843008 - $2 | $2) & -2139062144) == -2139062144) {
      continue
     }
     break;
    };
   }
   HEAP8[$3 | 0] = $2;
   if (!($2 & 255)) {
    break block1
   }
   while (1) {
    $2 = HEAPU8[$1 + 1 | 0];
    HEAP8[$3 + 1 | 0] = $2;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function strlen($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  block1 : {
   block : {
    $1 = $0;
    if (!($1 & 3)) {
     break block
    }
    if (!HEAPU8[$1 | 0]) {
     return 0
    }
    while (1) {
     $1 = $1 + 1 | 0;
     if (!($1 & 3)) {
      break block
     }
     if (HEAPU8[$1 | 0]) {
      continue
     }
     break;
    };
    break block1;
   }
   while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2];
    if ((($3 | 16843008 - $3) & -2139062144) == -2139062144) {
     continue
    }
    break;
   };
   while (1) {
    $1 = $2;
    $2 = $1 + 1 | 0;
    if (HEAPU8[$1 | 0]) {
     continue
    }
    break;
   };
  }
  return $1 - $0 | 0;
 }
 
 function strncpy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $5 = global$9;
  $4 = $0;
  block2 : {
   block3 : {
    block4 : {
     block : {
      if (($4 ^ $1) & 3) {
       break block
      }
      $3 = ($2 | 0) != 0;
      block1 : {
       if (!($1 & 3) | !$2) {
        break block1
       }
       while (1) {
        $3 = HEAPU8[$1 | 0];
        HEAP8[$4 | 0] = $3;
        if (!$3) {
         break block2
        }
        $4 = $4 + 1 | 0;
        $2 = $2 - 1 | 0;
        $3 = ($2 | 0) != 0;
        $1 = $1 + 1 | 0;
        if (!($1 & 3)) {
         break block1
        }
        if ($2) {
         continue
        }
        break;
       };
      }
      if (!$3) {
       break block3
      }
      if (!HEAPU8[$1 | 0]) {
       break block2
      }
      if ($2 >>> 0 < 4) {
       break block
      }
      while (1) {
       $3 = HEAP32[$1 >> 2];
       if (((16843008 - $3 | $3) & -2139062144) != -2139062144) {
        break block4
       }
       HEAP32[$4 >> 2] = $3;
       $4 = $4 + 4 | 0;
       $1 = $1 + 4 | 0;
       $2 = $2 - 4 | 0;
       if ($2 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2) {
      break block3
     }
    }
    while (1) {
     $3 = HEAPU8[$1 | 0];
     HEAP8[$4 | 0] = $3;
     if (!$3) {
      break block2
     }
     $4 = $4 + 1 | 0;
     $1 = $1 + 1 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break;
    };
   }
   $2 = 0;
  }
  __memset($4, 0, $2);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function strstr($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $13 = global$9;
  $2 = HEAP8[$1 | 0];
  if (!$2) {
   return $0
  }
  $0 = strchr($0, $2);
  if ((global$9 | 0) != ($13 | 0)) {
   wasm2js_trap()
  }
  block : {
   if (!$0) {
    break block
   }
   if (!HEAPU8[$1 + 1 | 0]) {
    return $0
   }
   if (!HEAPU8[$0 + 1 | 0]) {
    break block
   }
   if (!HEAPU8[$1 + 2 | 0]) {
    $2 = HEAPU8[$0 + 1 | 0];
    $4 = ($2 | 0) != 0;
    block1 : {
     if (!$2) {
      break block1
     }
     $3 = $2 | HEAPU8[$0 | 0] << 8;
     $5 = HEAPU8[$1 + 1 | 0] | HEAPU8[$1 | 0] << 8;
     if (($3 | 0) == ($5 | 0)) {
      break block1
     }
     $1 = $0 + 1 | 0;
     while (1) {
      $0 = $1;
      $2 = HEAPU8[$0 + 1 | 0];
      $4 = ($2 | 0) != 0;
      if (!$2) {
       break block1
      }
      $1 = $0 + 1 | 0;
      $3 = $2 | $3 << 8 & 65280;
      if (($5 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    return $4 ? $0 : 0;
   }
   if (!HEAPU8[$0 + 2 | 0]) {
    break block
   }
   if (!HEAPU8[$1 + 3 | 0]) {
    $2 = $0 + 2 | 0;
    $3 = HEAPU8[$0 + 2 | 0];
    $4 = ($3 | 0) != 0;
    block3 : {
     block2 : {
      if (!$3) {
       break block2
      }
      $3 = HEAPU8[$0 + 1 | 0] << 16 | HEAPU8[$0 | 0] << 24 | $3 << 8;
      $5 = HEAPU8[$1 + 1 | 0] << 16 | HEAPU8[$1 | 0] << 24 | HEAPU8[$1 + 2 | 0] << 8;
      if (($3 | 0) == ($5 | 0)) {
       break block2
      }
      while (1) {
       $1 = $2 + 1 | 0;
       $0 = HEAPU8[$2 + 1 | 0];
       $4 = ($0 | 0) != 0;
       if (!$0) {
        break block3
       }
       $2 = $1;
       $3 = ($0 | $3) << 8;
       if (($5 | 0) != ($3 | 0)) {
        continue
       }
       break;
      };
      break block3;
     }
     $1 = $2;
    }
    return $4 ? $1 - 2 | 0 : 0;
   }
   if (!HEAPU8[$0 + 3 | 0]) {
    break block
   }
   if (!HEAPU8[$1 + 4 | 0]) {
    $3 = $0 + 3 | 0;
    $2 = HEAPU8[$0 + 3 | 0];
    $4 = ($2 | 0) != 0;
    block5 : {
     block4 : {
      if (!$2) {
       break block4
      }
      $5 = $2 | (HEAPU8[$0 + 1 | 0] << 16 | HEAPU8[$0 | 0] << 24 | HEAPU8[$0 + 2 | 0] << 8);
      $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      $1 = $0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24);
      if (($5 | 0) == ($1 | 0)) {
       break block4
      }
      while (1) {
       $2 = $3 + 1 | 0;
       $0 = HEAPU8[$3 + 1 | 0];
       $4 = ($0 | 0) != 0;
       if (!$0) {
        break block5
       }
       $3 = $2;
       $5 = $0 | $5 << 8;
       if (($1 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
      break block5;
     }
     $2 = $3;
    }
    return $4 ? $2 - 3 | 0 : 0;
   }
   $5 = $0;
   $2 = 0;
   $9 = __stack_pointer - 1056 | 0;
   __stack_pointer = $9;
   $0 = $9 + 1048 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $0 = $9 + 1040 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$9 + 1032 >> 2] = 0;
   HEAP32[$9 + 1036 >> 2] = 0;
   HEAP32[$9 + 1024 >> 2] = 0;
   HEAP32[$9 + 1028 >> 2] = 0;
   $4 = $1;
   block10 : {
    block9 : {
     block8 : {
      block7 : {
       $1 = HEAPU8[$1 | 0];
       block6 : {
        if (!$1) {
         $6 = -1;
         $0 = 1;
         break block6;
        }
        while (1) {
         if (!HEAPU8[$7 + $5 | 0]) {
          break block7
         }
         $7 = $7 + 1 | 0;
         HEAP32[(($1 & 255) << 2) + $9 >> 2] = $7;
         $0 = ($9 + 1024 | 0) + ($1 >>> 3 & 28) | 0;
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 1 << $1;
         $1 = HEAPU8[$4 + $7 | 0];
         if ($1) {
          continue
         }
         break;
        };
        $0 = 1;
        $6 = -1;
        if ($7 >>> 0 > 1) {
         break block8
        }
       }
       $3 = -1;
       $8 = 1;
       break block9;
      }
      $0 = 0;
      break block10;
     }
     $10 = 1;
     $1 = 1;
     while (1) {
      $3 = HEAPU8[($4 + $6 | 0) + $1 | 0];
      $8 = HEAPU8[$0 + $4 | 0];
      block11 : {
       if (($3 | 0) == ($8 | 0)) {
        if (($1 | 0) == ($10 | 0)) {
         $2 = $2 + $10 | 0;
         $1 = 1;
         break block11;
        }
        $1 = $1 + 1 | 0;
        break block11;
       }
       if ($3 >>> 0 > $8 >>> 0) {
        $10 = $0 - $6 | 0;
        $2 = $0;
        $1 = 1;
        break block11;
       }
       $6 = $2;
       $2 = $2 + 1 | 0;
       $10 = 1;
       $1 = 1;
      }
      $0 = $1 + $2 | 0;
      if ($7 >>> 0 > $0 >>> 0) {
       continue
      }
      break;
     };
     $3 = -1;
     $0 = 0;
     $2 = 1;
     $8 = 1;
     $1 = 1;
     while (1) {
      $12 = HEAPU8[($3 + $4 | 0) + $1 | 0];
      $11 = HEAPU8[$2 + $4 | 0];
      block12 : {
       if (($12 | 0) == ($11 | 0)) {
        if (($1 | 0) == ($8 | 0)) {
         $0 = $0 + $8 | 0;
         $1 = 1;
         break block12;
        }
        $1 = $1 + 1 | 0;
        break block12;
       }
       if ($11 >>> 0 > $12 >>> 0) {
        $8 = $2 - $3 | 0;
        $0 = $2;
        $1 = 1;
        break block12;
       }
       $3 = $0;
       $0 = $0 + 1 | 0;
       $8 = 1;
       $1 = 1;
      }
      $2 = $0 + $1 | 0;
      if ($7 >>> 0 > $2 >>> 0) {
       continue
      }
      break;
     };
     $0 = $10;
    }
    $1 = $0;
    $0 = $3 + 1 >>> 0 > $6 + 1 >>> 0;
    $10 = $0 ? $8 : $1;
    $11 = $0 ? $3 : $6;
    $12 = $11 + 1 | 0;
    $0 = memcmp($4, $10 + $4 | 0, $12);
    if ((global$9 | 0) != ($13 | 0)) {
     wasm2js_trap()
    }
    block13 : {
     if ($0) {
      $0 = ($11 ^ -1) + $7 | 0;
      $10 = ($0 >>> 0 < $11 >>> 0 ? $11 : $0) + 1 | 0;
      $2 = 0;
      break block13;
     }
     $2 = $7 - $10 | 0;
    }
    $14 = $7 | 63;
    $1 = 0;
    $0 = $5;
    while (1) {
     $8 = $1;
     $3 = $0;
     block14 : {
      if ($5 - $0 >>> 0 >= $7 >>> 0) {
       break block14
      }
      $0 = 0;
      $1 = memchr($5, 0, $14);
      if ((global$9 | 0) != ($13 | 0)) {
       wasm2js_trap()
      }
      $5 = $1 ? $1 : $5 + $14 | 0;
      if (!$1) {
       break block14
      }
      if ($1 - $3 >>> 0 < $7 >>> 0) {
       break block10
      }
     }
     $1 = 0;
     $0 = $3 + $7 | 0;
     $6 = HEAPU8[$0 - 1 | 0];
     if (!(HEAP32[($9 + 1024 | 0) + ($6 >>> 3 & 28) >> 2] >>> $6 & 1)) {
      continue
     }
     $0 = HEAP32[($6 << 2) + $9 >> 2];
     if (($0 | 0) != ($7 | 0)) {
      $0 = $7 - $0 | 0;
      $0 = $3 + ($0 >>> 0 > $8 >>> 0 ? $0 : $8) | 0;
      continue;
     }
     block15 : {
      $1 = $12;
      $0 = $1 >>> 0 > $8 >>> 0 ? $1 : $8;
      $6 = HEAPU8[$4 + $0 | 0];
      if ($6) {
       while (1) {
        if (HEAPU8[$0 + $3 | 0] != ($6 & 255)) {
         break block15
        }
        $0 = $0 + 1 | 0;
        $6 = HEAPU8[$4 + $0 | 0];
        if ($6) {
         continue
        }
        break;
       }
      }
      while (1) {
       if ($1 >>> 0 <= $8 >>> 0) {
        $0 = $3;
        break block10;
       }
       $1 = $1 - 1 | 0;
       if (HEAPU8[$4 + $1 | 0] == HEAPU8[$1 + $3 | 0]) {
        continue
       }
       break;
      };
      $0 = $3 + $10 | 0;
      $1 = $2;
      continue;
     }
     $0 = $3 + ($0 - $11 | 0) | 0;
     $1 = 0;
     continue;
    };
   }
   __stack_pointer = $9 + 1056 | 0;
   $3 = $0;
  }
  return $3;
 }
 
 function __syscall_ret($0) {
  if ($0 >>> 0 >= 4294963201) {
   HEAP32[__tls_base >> 2] = 0 - $0;
   $0 = -1;
  }
  return $0;
 }
 
 function _emscripten_check_mailbox() {
  var $0 = 0, $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = thread_ptr;
   if (!$0) {
    __assert_fail(12928, 9497, 80, 2109);
    wasm2js_trap();
   }
   $0 = HEAP32[$0 + 120 >> 2];
   Atomics.store(HEAP32, $0 >> 2, 1);
  }
  block : {
   if (!global$9 | !$1) {
    em_task_queue_execute($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    Atomics.compareExchange(HEAP32, $0 >> 2, 1, 0) | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function emscripten_conditional_set_current_thread_status($0, $1) {
  var $2 = 0;
  $2 = global$9;
  set_status_conditional($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
 }
 
 function set_status_conditional($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0;
  $5 = global$9;
  block : {
   if (!HEAPU8[75480]) {
    break block
   }
   $2 = thread_ptr;
   if (!$2) {
    break block
   }
   $3 = Atomics.load(HEAP32, Atomics.load(HEAP32, $2 + 112 >> 2) >> 2);
   if (($3 | 0) == ($1 | 0) | ($0 | 0) != -1 & ($0 | 0) != ($3 | 0)) {
    break block
   }
   $4 = +emscripten_get_now();
   if ((global$9 | 0) != ($5 | 0)) {
    wasm2js_trap()
   }
   $6 = HEAPF64[Atomics.load(HEAP32, $2 + 112 >> 2) + 8 >> 3];
   $0 = (Atomics.load(HEAP32, $2 + 112 >> 2) + ($3 << 3) | 0) + 16 | 0;
   HEAPF64[$0 >> 3] = $4 - $6 + HEAPF64[$0 >> 3];
   Atomics.store(HEAP32, Atomics.load(HEAP32, $2 + 112 >> 2) >> 2, $1);
   HEAPF64[Atomics.load(HEAP32, $2 + 112 >> 2) + 8 >> 3] = $4;
  }
 }
 
 function ungetc($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   $2 = HEAP32[$2 + 16 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = -1;
   $4 = ($0 | 0) == -1;
  }
  block1 : {
   block : {
    if (!global$9) {
     if ($4) {
      break block
     }
     $4 = HEAP32[$1 + 76 >> 2] < 0;
    }
    $5 = (global$9 | 0) == 2;
    $3 = global$9 ? 0 : $4;
    $4 = (global$9 ? 0 : $5 | $3) ? 1 : $4;
    if ($5 | !$3) {
     if (!global$9 | !$7) {
      $3 = __lockfile($1);
      $5 = 0;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $4 = $3;
     }
     $4 = global$9 ? $4 : !$4;
    }
    if (global$9) {
     $3 = $2
    } else {
     $2 = HEAP32[$1 + 4 >> 2];
     $3 = !$2;
    }
    block3 : {
     block2 : {
      if ($3 | (global$9 | 0) == 2) {
       if (!global$9 | ($7 | 0) == 1) {
        $3 = __toread($1);
        $5 = 1;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $2 = $3;
       }
       if (!global$9) {
        $2 = HEAP32[$1 + 4 >> 2];
        if (!$2) {
         break block2
        }
       }
      }
      if (!global$9 & HEAP32[$1 + 44 >> 2] - 8 >>> 0 < $2 >>> 0) {
       break block3
      }
     }
     if (!global$9) {
      if ($4) {
       break block
      }
      __unlockfile($1);
      return -1;
     }
    }
    if (!global$9) {
     $2 = $2 - 1 | 0;
     HEAP32[$1 + 4 >> 2] = $2;
     HEAP8[$2 | 0] = $0;
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
     if (!$4) {
      __unlockfile($1)
     }
     $6 = $0 & 255;
    }
   }
   if (!global$9) {
    return $6
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 12 >> 2] = $6;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function printf_core($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 108;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $6 = HEAP32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $12 = HEAP32[$1 + 40 >> 2];
   $13 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $10 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $16 = HEAP32[$1 + 64 >> 2];
   $22 = HEAP32[$1 + 68 >> 2];
   $20 = HEAP32[$1 + 72 >> 2];
   $19 = HEAP32[$1 + 76 >> 2];
   $23 = HEAP32[$1 + 80 >> 2];
   $24 = HEAP32[$1 + 84 >> 2];
   $25 = HEAP32[$1 + 88 >> 2];
   $26 = HEAP32[$1 + 92 >> 2];
   $27 = HEAP32[$1 + 96 >> 2];
   $9 = HEAP32[$1 + 104 >> 2];
   $14 = HEAP32[$1 + 100 >> 2];
   wasm2js_scratch_store_i32(0, $14 | 0);
   wasm2js_scratch_store_i32(1, $9 | 0);
   $28 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $21 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer;
   $8 = $5 + -64 | 0;
   __stack_pointer = $8;
   HEAP32[$8 + 60 >> 2] = $1;
   $27 = $8 + 39 | 0;
   $23 = $8 + 40 | 0;
  }
  block3 : {
   block48 : {
    block18 : {
     block15 : {
      block : {
       label4 : while (1) {
        $5 = global$9 ? $5 : 0;
        label1 : while (1) {
         block17 : {
          if (!global$9) {
           $6 = $1;
           $7 = ($15 ^ 2147483647) < ($5 | 0);
           if ($7) {
            break block
           }
           $15 = $5 + $15 | 0;
           $5 = $1;
           $12 = HEAPU8[$1 | 0];
          }
          block20 : {
           block43 : {
            block9 : {
             if ((global$9 | 0) == 2 | $12) {
              while (1) {
               if (!global$9) {
                $12 = $12 & 255;
                $1 = !$12;
               }
               block2 : {
                if (!global$9) {
                 block1 : {
                  if ($1) {
                   $1 = $5;
                   break block1;
                  }
                  $1 = ($12 | 0) != 37;
                  if ($1) {
                   break block2
                  }
                  $12 = $5;
                  while (1) {
                   if (HEAPU8[$12 + 1 | 0] != 37) {
                    $1 = $12;
                    break block1;
                   }
                   $5 = $5 + 1 | 0;
                   $7 = HEAPU8[$12 + 2 | 0];
                   $1 = $12 + 2 | 0;
                   $12 = $1;
                   if (($7 | 0) == 37) {
                    continue
                   }
                   break;
                  };
                 }
                 $5 = $5 - $6 | 0;
                 $12 = $15 ^ 2147483647;
                 $7 = ($5 | 0) > ($12 | 0);
                 if ($7) {
                  break block
                 }
                }
                if (!global$9 | !$21 ? (global$9 | 0) == 2 | $0 : 0) {
                 out($0, $6, $5);
                 $14 = 0;
                 if ((global$9 | 0) == 1) {
                  break block3
                 }
                }
                if (!global$9) {
                 if ($5) {
                  continue label1
                 }
                 HEAP32[$8 + 60 >> 2] = $1;
                 $5 = $1 + 1 | 0;
                 $18 = -1;
                 $7 = HEAP8[$1 + 1 | 0] - 48 | 0;
                 $10 = $7 >>> 0 > 9;
                 block4 : {
                  if ($10) {
                   break block4
                  }
                  $10 = HEAPU8[$1 + 2 | 0] != 36;
                  if ($10) {
                   break block4
                  }
                  $5 = $1 + 3 | 0;
                  $24 = 1;
                  $18 = $7;
                 }
                 HEAP32[$8 + 60 >> 2] = $5;
                 $13 = 0;
                 $19 = HEAP8[$5 | 0];
                 $1 = $19 - 32 | 0;
                 block5 : {
                  if ($1 >>> 0 > 31) {
                   $7 = $5;
                   break block5;
                  }
                  $7 = $5;
                  $1 = 1 << $1;
                  $10 = !($1 & 75913);
                  if ($10) {
                   break block5
                  }
                  while (1) {
                   $7 = $5 + 1 | 0;
                   HEAP32[$8 + 60 >> 2] = $7;
                   $13 = $1 | $13;
                   $19 = HEAP8[$5 + 1 | 0];
                   $1 = $19 - 32 | 0;
                   if ($1 >>> 0 >= 32) {
                    break block5
                   }
                   $5 = $7;
                   $1 = 1 << $1;
                   $10 = $1 & 75913;
                   if ($10) {
                    continue
                   }
                   break;
                  };
                 }
                 block10 : {
                  if (($19 | 0) == 42) {
                   block8 : {
                    block6 : {
                     $5 = HEAP8[$7 + 1 | 0] - 48 | 0;
                     $1 = $5 >>> 0 > 9;
                     if ($1) {
                      break block6
                     }
                     $1 = HEAPU8[$7 + 2 | 0] != 36;
                     if ($1) {
                      break block6
                     }
                     $1 = $7 + 3 | 0;
                     $24 = 1;
                     block7 : {
                      if (!$0) {
                       HEAP32[($5 << 2) + $4 >> 2] = 10;
                       $5 = 0;
                       break block7;
                      }
                      $5 = HEAP32[($5 << 3) + $3 >> 2];
                     }
                     break block8;
                    }
                    if ($24) {
                     break block9
                    }
                    $1 = $7 + 1 | 0;
                    if (!$0) {
                     HEAP32[$8 + 60 >> 2] = $1;
                     $24 = 0;
                     $17 = 0;
                     break block10;
                    }
                    $5 = HEAP32[$2 >> 2];
                    HEAP32[$2 >> 2] = $5 + 4;
                    $24 = 0;
                    $5 = HEAP32[$5 >> 2];
                   }
                   $17 = $5;
                   HEAP32[$8 + 60 >> 2] = $1;
                   if (($17 | 0) >= 0) {
                    break block10
                   }
                   $17 = 0 - $17 | 0;
                   $13 = $13 | 8192;
                   break block10;
                  }
                  $17 = getint($8 + 60 | 0);
                  if (($17 | 0) < 0) {
                   break block
                  }
                  $1 = HEAP32[$8 + 60 >> 2];
                 }
                 $5 = 0;
                 $11 = -1;
                 $25 = 0;
                 block11 : {
                  if (HEAPU8[$1 | 0] != 46) {
                   break block11
                  }
                  if (HEAPU8[$1 + 1 | 0] == 42) {
                   block14 : {
                    block12 : {
                     $7 = HEAP8[$1 + 2 | 0] - 48 | 0;
                     $10 = $7 >>> 0 > 9;
                     if ($10) {
                      break block12
                     }
                     $10 = HEAPU8[$1 + 3 | 0] != 36;
                     if ($10) {
                      break block12
                     }
                     $1 = $1 + 4 | 0;
                     block13 : {
                      if (!$0) {
                       HEAP32[($7 << 2) + $4 >> 2] = 10;
                       $11 = 0;
                       break block13;
                      }
                      $11 = HEAP32[($7 << 3) + $3 >> 2];
                     }
                     break block14;
                    }
                    if ($24) {
                     break block9
                    }
                    $1 = $1 + 2 | 0;
                    $11 = 0;
                    if (!$0) {
                     break block14
                    }
                    $7 = HEAP32[$2 >> 2];
                    HEAP32[$2 >> 2] = $7 + 4;
                    $11 = HEAP32[$7 >> 2];
                   }
                   HEAP32[$8 + 60 >> 2] = $1;
                   $25 = ($11 | 0) >= 0;
                   break block11;
                  }
                  HEAP32[$8 + 60 >> 2] = $1 + 1;
                  $11 = getint($8 + 60 | 0);
                  $1 = HEAP32[$8 + 60 >> 2];
                  $25 = 1;
                 }
                 while (1) {
                  $7 = $5;
                  $20 = 28;
                  $19 = $1;
                  $10 = HEAP8[$1 | 0];
                  if ($10 - 123 >>> 0 < 4294967238) {
                   break block15
                  }
                  $1 = $1 + 1 | 0;
                  $5 = HEAPU8[($10 + Math_imul($5, 58) | 0) + 27583 | 0];
                  if (($5 - 1 & 255) >>> 0 < 8) {
                   continue
                  }
                  break;
                 };
                 HEAP32[$8 + 60 >> 2] = $1;
                 block16 : {
                  if (($5 | 0) != 27) {
                   if (!$5) {
                    break block15
                   }
                   if (($18 | 0) >= 0) {
                    $10 = !$0;
                    if ($10) {
                     $6 = ($18 << 2) + $4 | 0;
                     HEAP32[$6 >> 2] = $5;
                     continue label4;
                    }
                    $5 = ($18 << 3) + $3 | 0;
                    $10 = HEAP32[$5 + 4 >> 2];
                    HEAP32[$8 + 48 >> 2] = HEAP32[$5 >> 2];
                    HEAP32[$8 + 52 >> 2] = $10;
                    break block16;
                   }
                   if (!$0) {
                    break block17
                   }
                   pop_arg($8 + 48 | 0, $5, $2);
                   break block16;
                  }
                  if (($18 | 0) >= 0) {
                   break block15
                  }
                  $5 = 0;
                  $10 = !$0;
                  if ($10) {
                   continue label1
                  }
                 }
                 if (HEAPU8[$0 | 0] & 32) {
                  break block18
                 }
                 $18 = 0;
                 $26 = 2189;
                 $20 = $23;
                 $10 = HEAPU8[$19 | 0];
                 $5 = $10 << 24 >> 24;
                 $5 = $7 ? (($10 & 15) == 3 ? $5 & -45 : $5) : $5;
                 $19 = $5 - 88 | 0;
                 $10 = $13 & -65537;
                 $13 = $13 & 8192 ? $10 : $13;
                }
                block21 : {
                 block46 : {
                  block45 : {
                   block44 : {
                    if (!global$9) {
                     block32 : {
                      block30 : {
                       block27 : {
                        block22 : {
                         block41 : {
                          block33 : {
                           block23 : {
                            switch ($19 | 0) {
                            default:
                             block31 : {
                              $7 = $5 - 65 | 0;
                              switch ($7 | 0) {
                              case 1:
                              case 3:
                               break block20;
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break block21;
                              case 2:
                               break block30;
                              default:
                               break block31;
                              };
                             }
                             $5 = ($5 | 0) == 83;
                             if ($5) {
                              break block32
                             }
                             break block20;
                            case 29:
                             $16 = HEAP32[$8 + 48 >> 2];
                             $22 = HEAP32[$8 + 52 >> 2];
                             $26 = 2189;
                             break block33;
                            case 22:
                             $5 = 0;
                             block40 : {
                              switch ($7 | 0) {
                              case 0:
                               $6 = HEAP32[$8 + 48 >> 2];
                               HEAP32[$6 >> 2] = $15;
                               continue label1;
                              case 1:
                               $6 = HEAP32[$8 + 48 >> 2];
                               HEAP32[$6 >> 2] = $15;
                               continue label1;
                              case 2:
                               $6 = HEAP32[$8 + 48 >> 2];
                               HEAP32[$6 >> 2] = $15;
                               HEAP32[$6 + 4 >> 2] = $15 >> 31;
                               continue label1;
                              case 3:
                               $6 = HEAP32[$8 + 48 >> 2];
                               HEAP16[$6 >> 1] = $15;
                               continue label1;
                              case 4:
                               $6 = HEAP32[$8 + 48 >> 2];
                               HEAP8[$6 | 0] = $15;
                               continue label1;
                              case 6:
                               $6 = HEAP32[$8 + 48 >> 2];
                               HEAP32[$6 >> 2] = $15;
                               continue label1;
                              case 7:
                               break block40;
                              default:
                               continue label1;
                              };
                             }
                             $6 = HEAP32[$8 + 48 >> 2];
                             HEAP32[$6 >> 2] = $15;
                             HEAP32[$6 + 4 >> 2] = $15 >> 31;
                             continue label1;
                            case 24:
                             $11 = $11 >>> 0 <= 8 ? 8 : $11;
                             $13 = $13 | 8;
                             $5 = 120;
                            case 0:
                            case 32:
                             $1 = $23;
                             $9 = $5 & 32;
                             $6 = HEAP32[$8 + 52 >> 2];
                             $22 = $6;
                             $16 = HEAP32[$8 + 48 >> 2];
                             $14 = $16;
                             $7 = ($6 | $16) != 0;
                             if ($7) {
                              while (1) {
                               $1 = $1 - 1 | 0;
                               HEAP8[$1 | 0] = $9 | HEAPU8[($14 & 15) + 28112 | 0];
                               $7 = !$6 & $14 >>> 0 > 15 | ($6 | 0) != 0;
                               $14 = ($6 & 15) << 28 | $14 >>> 4;
                               $6 = $6 >>> 4 | 0;
                               if ($7) {
                                continue
                               }
                               break;
                              }
                             }
                             $6 = $1;
                             if (!($16 | $22) | !($13 & 8)) {
                              break block41
                             }
                             $26 = ($5 >>> 4 | 0) + 2189 | 0;
                             $18 = 2;
                             break block41;
                            case 23:
                             $1 = $23;
                             $6 = HEAP32[$8 + 52 >> 2];
                             $22 = $6;
                             $16 = HEAP32[$8 + 48 >> 2];
                             $14 = $16;
                             if ($6 | $16) {
                              while (1) {
                               $1 = $1 - 1 | 0;
                               HEAP8[$1 | 0] = $14 & 7 | 48;
                               $9 = !$6 & $14 >>> 0 > 7 | ($6 | 0) != 0;
                               $14 = ($6 & 7) << 29 | $14 >>> 3;
                               $6 = $6 >>> 3 | 0;
                               if ($9) {
                                continue
                               }
                               break;
                              }
                             }
                             $6 = $1;
                             $5 = !($13 & 8);
                             if ($5) {
                              break block41
                             }
                             $5 = $23 - $1 | 0;
                             $7 = $5 + 1 | 0;
                             $11 = ($5 | 0) < ($11 | 0) ? $11 : $7;
                             break block41;
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 10:
                            case 16:
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                            case 25:
                            case 26:
                            case 28:
                            case 30:
                            case 31:
                             break block20;
                            case 9:
                            case 13:
                            case 14:
                            case 15:
                             break block21;
                            case 11:
                             break block22;
                            case 12:
                            case 17:
                             break block23;
                            case 27:
                             break block27;
                            };
                           }
                           $16 = HEAP32[$8 + 48 >> 2];
                           $1 = HEAP32[$8 + 52 >> 2];
                           $22 = $1;
                           if (($1 | 0) < 0) {
                            $6 = 0 - ($1 + (($16 | 0) != 0) | 0) | 0;
                            $22 = $6;
                            $16 = 0 - $16 | 0;
                            HEAP32[$8 + 48 >> 2] = $16;
                            HEAP32[$8 + 52 >> 2] = $6;
                            $18 = 1;
                            $26 = 2189;
                            break block33;
                           }
                           if ($13 & 2048) {
                            $18 = 1;
                            $26 = 2190;
                            break block33;
                           }
                           $18 = $13 & 1;
                           $26 = $18 ? 2191 : 2189;
                          }
                          $6 = fmt_u($16, $22, $23);
                         }
                         if (($11 | 0) < 0 & $25) {
                          break block
                         }
                         $13 = $25 ? $13 & -65537 : $13;
                         $1 = ($16 | $22) != 0;
                         if (!($11 | $1)) {
                          $6 = $23;
                          $11 = 0;
                          break block20;
                         }
                         $5 = !($16 | $22) + ($23 - $6 | 0) | 0;
                         $1 = ($11 | 0) > ($5 | 0);
                         $11 = $1 ? $11 : $5;
                         break block20;
                        }
                        $5 = HEAPU8[$8 + 48 | 0];
                        break block43;
                       }
                       $1 = HEAP32[$8 + 48 >> 2];
                       $6 = $1 ? $1 : 12205;
                       $1 = $6;
                       $5 = $11 >>> 0 >= 2147483647 ? 2147483647 : $11;
                       $7 = memchr($1, 0, $5);
                       $5 = $7 ? $7 - $1 | 0 : $5;
                       $20 = $5 + $1 | 0;
                       $1 = ($11 | 0) >= 0;
                       if ($1) {
                        $13 = $10;
                        $11 = $5;
                        break block20;
                       }
                       $13 = $10;
                       $11 = $5;
                       $1 = HEAPU8[$20 | 0];
                       if ($1) {
                        break block
                       }
                       break block20;
                      }
                      $5 = HEAP32[$8 + 52 >> 2];
                      $22 = $5;
                      $16 = HEAP32[$8 + 48 >> 2];
                      $5 = ($5 | $16) != 0;
                      if ($5) {
                       break block44
                      }
                      $5 = 0;
                      break block43;
                     }
                     if ($11) {
                      $12 = HEAP32[$8 + 48 >> 2];
                      break block45;
                     }
                     $5 = 0;
                    }
                    if (!global$9 | ($21 | 0) == 1) {
                     pad($0, 32, $17, 0, $13);
                     $14 = 1;
                     if ((global$9 | 0) == 1) {
                      break block3
                     }
                    }
                    if (!global$9) {
                     break block46
                    }
                   }
                   if (!global$9) {
                    HEAP32[$8 + 12 >> 2] = 0;
                    HEAP32[$8 + 8 >> 2] = $16;
                    $12 = $8 + 8 | 0;
                    $5 = $12;
                    HEAP32[$8 + 48 >> 2] = $5;
                    $11 = -1;
                   }
                  }
                  if (!global$9) {
                   $5 = 0;
                   while (1) {
                    block47 : {
                     $7 = HEAP32[$12 >> 2];
                     if (!$7) {
                      break block47
                     }
                     $7 = wctomb($8 + 4 | 0, $7);
                     if (($7 | 0) < 0) {
                      break block18
                     }
                     if ($11 - $5 >>> 0 < $7 >>> 0) {
                      break block47
                     }
                     $12 = $12 + 4 | 0;
                     $5 = $5 + $7 | 0;
                     if ($11 >>> 0 > $5 >>> 0) {
                      continue
                     }
                    }
                    break;
                   };
                   $20 = 61;
                   $6 = ($5 | 0) < 0;
                   if ($6) {
                    break block15
                   }
                  }
                  if (!global$9 | ($21 | 0) == 2) {
                   pad($0, 32, $17, $5, $13);
                   $14 = 2;
                   if ((global$9 | 0) == 1) {
                    break block3
                   }
                  }
                  if (!global$9) {
                   $6 = !$5;
                   if ($6) {
                    $5 = 0;
                    break block46;
                   }
                   $12 = HEAP32[$8 + 48 >> 2];
                   $7 = 0;
                  }
                  while (1) {
                   if (!global$9) {
                    $6 = HEAP32[$12 >> 2];
                    $10 = !$6;
                    if ($10) {
                     break block46
                    }
                    $9 = $8 + 4 | 0;
                    $6 = wctomb($9, $6);
                    $7 = $6 + $7 | 0;
                    $10 = $7 >>> 0 > $5 >>> 0;
                    if ($10) {
                     break block46
                    }
                    $10 = $9;
                   }
                   if (!global$9 | ($21 | 0) == 3) {
                    out($0, $10, $6);
                    $14 = 3;
                    if ((global$9 | 0) == 1) {
                     break block3
                    }
                   }
                   if (!global$9) {
                    $12 = $12 + 4 | 0;
                    $6 = $5 >>> 0 > $7 >>> 0;
                    if ($6) {
                     continue
                    }
                   }
                   break;
                  };
                 }
                 $6 = global$9 ? $6 : $13 ^ 8192;
                 if (!global$9 | ($21 | 0) == 4) {
                  pad($0, 32, $17, $5, $6);
                  $14 = 4;
                  if ((global$9 | 0) == 1) {
                   break block3
                  }
                 }
                 if (!global$9) {
                  $6 = ($5 | 0) < ($17 | 0);
                  $5 = $6 ? $17 : $5;
                  continue label1;
                 }
                }
                if (!global$9) {
                 $6 = ($11 | 0) < 0 & $25;
                 if ($6) {
                  break block
                 }
                 $28 = HEAPF64[$8 + 48 >> 3];
                 $20 = 61;
                }
                if (!global$9 | ($21 | 0) == 5) {
                 $9 = fmt_fp($0, $28, $17, $11, $13, $5);
                 $14 = 5;
                 if ((global$9 | 0) == 1) {
                  break block3
                 }
                 $5 = $9;
                }
                if (!global$9) {
                 $6 = ($5 | 0) >= 0;
                 if ($6) {
                  continue label1
                 }
                 break block15;
                }
               }
               if (!global$9) {
                $12 = HEAPU8[$5 + 1 | 0];
                $5 = $5 + 1 | 0;
                continue;
               }
               break;
              }
             }
             if (!global$9) {
              if ($0) {
               break block48
              }
              if (!$24) {
               break block17
              }
              $5 = 1;
              while (1) {
               $12 = HEAP32[($5 << 2) + $4 >> 2];
               if ($12) {
                pop_arg(($5 << 3) + $3 | 0, $12, $2);
                $15 = 1;
                $5 = $5 + 1 | 0;
                if (($5 | 0) != 10) {
                 continue
                }
                break block48;
               }
               break;
              };
              if ($5 >>> 0 >= 10) {
               $15 = 1;
               break block48;
              }
              while (1) {
               $0 = HEAP32[($5 << 2) + $4 >> 2];
               if ($0) {
                break block9
               }
               $15 = 1;
               $5 = $5 + 1 | 0;
               if (($5 | 0) != 10) {
                continue
               }
               break;
              };
              break block48;
             }
            }
            if (!global$9) {
             $20 = 28;
             break block15;
            }
           }
           if (!global$9) {
            HEAP8[$8 + 39 | 0] = $5;
            $11 = 1;
            $13 = $10;
            $6 = $27;
           }
          }
          if (!global$9) {
           $1 = $20 - $6 | 0;
           $19 = ($1 | 0) < ($11 | 0) ? $11 : $1;
           if (($19 | 0) > ($18 ^ 2147483647)) {
            break block
           }
           $20 = 61;
           $7 = $18 + $19 | 0;
           $5 = ($7 | 0) < ($17 | 0) ? $17 : $7;
           $12 = ($12 | 0) < ($5 | 0);
           if ($12) {
            break block15
           }
          }
          if (!global$9 | ($21 | 0) == 6) {
           pad($0, 32, $5, $7, $13);
           $14 = 6;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          if (!global$9 | ($21 | 0) == 7) {
           out($0, $26, $18);
           $14 = 7;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          $12 = global$9 ? $12 : $13 ^ 65536;
          if (!global$9 | ($21 | 0) == 8) {
           pad($0, 48, $5, $7, $12);
           $14 = 8;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          if (!global$9 | ($21 | 0) == 9) {
           pad($0, 48, $19, $1, 0);
           $14 = 9;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          if (!global$9 | ($21 | 0) == 10) {
           out($0, $6, $1);
           $14 = 10;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          $1 = global$9 ? $1 : $13 ^ 8192;
          if (!global$9 | ($21 | 0) == 11) {
           pad($0, 32, $5, $7, $1);
           $14 = 11;
           if ((global$9 | 0) == 1) {
            break block3
           }
          }
          if (!global$9) {
           $1 = HEAP32[$8 + 60 >> 2];
           continue;
          }
         }
         break;
        };
        break;
       };
       if (!global$9) {
        $15 = 0;
        break block48;
       }
      }
      $20 = global$9 ? $20 : 61;
     }
     if (!global$9) {
      HEAP32[__tls_base >> 2] = $20
     }
    }
    $15 = global$9 ? $15 : -1;
   }
   if (!global$9) {
    __stack_pointer = $8 - -64 | 0;
    return $15;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $14;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $9 = HEAP32[global$10 >> 2];
  HEAP32[$9 >> 2] = $0;
  HEAP32[$9 + 4 >> 2] = $1;
  HEAP32[$9 + 8 >> 2] = $2;
  HEAP32[$9 + 12 >> 2] = $3;
  HEAP32[$9 + 16 >> 2] = $4;
  HEAP32[$9 + 20 >> 2] = $5;
  HEAP32[$9 + 24 >> 2] = $8;
  HEAP32[$9 + 28 >> 2] = $7;
  HEAP32[$9 + 32 >> 2] = $6;
  HEAP32[$9 + 36 >> 2] = $11;
  HEAP32[$9 + 40 >> 2] = $12;
  HEAP32[$9 + 44 >> 2] = $13;
  HEAP32[$9 + 48 >> 2] = $15;
  HEAP32[$9 + 52 >> 2] = $10;
  HEAP32[$9 + 56 >> 2] = $17;
  HEAP32[$9 + 60 >> 2] = $18;
  HEAP32[$9 + 64 >> 2] = $16;
  HEAP32[$9 + 68 >> 2] = $22;
  HEAP32[$9 + 72 >> 2] = $20;
  HEAP32[$9 + 76 >> 2] = $19;
  HEAP32[$9 + 80 >> 2] = $23;
  HEAP32[$9 + 84 >> 2] = $24;
  HEAP32[$9 + 88 >> 2] = $25;
  HEAP32[$9 + 92 >> 2] = $26;
  HEAP32[$9 + 96 >> 2] = $27;
  wasm2js_scratch_store_f64(+$28);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $9, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 100 >> 2] = wasm2js_i32$1;
  HEAP32[$9 + 104 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 108;
  return 0;
 }
 
 function out($0, $1, $2) {
  var $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if ((!(global$9 ? 1 : HEAPU8[$0 | 0] & 32) | (global$9 | 0) == 2) & (!global$9 | !$3)) {
    __fwritex($1, $2, $0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function getint($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$0 >> 2];
  $1 = HEAP8[$3 | 0] - 48 | 0;
  if ($1 >>> 0 > 9) {
   return 0
  }
  while (1) {
   $4 = -1;
   if ($2 >>> 0 <= 214748364) {
    $2 = Math_imul($2, 10);
    $4 = ($2 ^ 2147483647) >>> 0 < $1 >>> 0 ? -1 : $2 + $1 | 0;
   }
   $1 = $3 + 1 | 0;
   HEAP32[$0 >> 2] = $1;
   $5 = HEAP8[$3 + 1 | 0];
   $2 = $4;
   $3 = $1;
   $1 = $5 - 48 | 0;
   if ($1 >>> 0 < 10) {
    continue
   }
   break;
  };
  return $2;
 }
 
 function pop_arg($0, $1, $2) {
  var $3 = 0;
  $3 = global$9;
  folding_inner2 : {
   folding_inner1 : {
    folding_inner0 : {
     block18 : {
      block17 : {
       block16 : {
        block9 : {
         block8 : {
          block7 : {
           block6 : {
            block : {
             switch ($1 - 9 | 0) {
             case 0:
              break block;
             case 16:
              break block16;
             case 17:
              break block17;
             case 6:
              break block6;
             case 7:
              break block7;
             case 8:
              break block8;
             case 9:
              break block9;
             case 1:
             case 4:
             case 14:
              break folding_inner0;
             case 2:
             case 5:
             case 11:
             case 15:
              break folding_inner1;
             case 3:
             case 10:
             case 12:
             case 13:
              break folding_inner2;
             default:
              break block18;
             };
            }
            $1 = HEAP32[$2 >> 2];
            HEAP32[$2 >> 2] = $1 + 4;
            HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
            return;
           }
           $1 = HEAP32[$2 >> 2];
           HEAP32[$2 >> 2] = $1 + 4;
           $1 = HEAP16[$1 >> 1];
           HEAP32[$0 >> 2] = $1;
           HEAP32[$0 + 4 >> 2] = $1 >> 31;
           return;
          }
          $1 = HEAP32[$2 >> 2];
          HEAP32[$2 >> 2] = $1 + 4;
          HEAP32[$0 >> 2] = HEAPU16[$1 >> 1];
          HEAP32[$0 + 4 >> 2] = 0;
          return;
         }
         $1 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $1 + 4;
         $1 = HEAP8[$1 | 0];
         HEAP32[$0 >> 2] = $1;
         HEAP32[$0 + 4 >> 2] = $1 >> 31;
         return;
        }
        $1 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $1 + 4;
        HEAP32[$0 >> 2] = HEAPU8[$1 | 0];
        HEAP32[$0 + 4 >> 2] = 0;
        return;
       }
       $1 = HEAP32[$2 >> 2] + 7 & -8;
       HEAP32[$2 >> 2] = $1 + 8;
       HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
       return;
      }
      pop_arg_long_double($0, $2);
      if ((global$9 | 0) != ($3 | 0)) {
       wasm2js_trap()
      }
     }
     return;
    }
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $1 = HEAP32[$1 >> 2];
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = $1 >> 31;
    return;
   }
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = 0;
   return;
  }
  $1 = HEAP32[$2 >> 2] + 7 & -8;
  HEAP32[$2 >> 2] = $1 + 8;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function fmt_u($0, $1, $2) {
  var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  block : {
   if (!$1) {
    $3 = $1;
    break block;
   }
   while (1) {
    $2 = $2 - 1 | 0;
    $4 = $0;
    $0 = __wasm_i64_udiv($0, $1, 10);
    $3 = i64toi32_i32$HIGH_BITS;
    (wasm2js_i32$0 = $2, wasm2js_i32$1 = $4 - __wasm_i64_mul($0, $3, 10, 0) | 48), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    $4 = $1 >>> 0 > 9;
    $1 = $3;
    if ($4) {
     continue
    }
    break;
   };
  }
  if ($0 | $3) {
   while (1) {
    $2 = $2 - 1 | 0;
    $1 = ($0 >>> 0) / 10 | 0;
    HEAP8[$2 | 0] = $0 - Math_imul($1, 10) | 48;
    $3 = $0 >>> 0 > 9;
    $0 = $1;
    if ($3) {
     continue
    }
    break;
   }
  }
  return $2;
 }
 
 function pad($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $3 = HEAP32[$5 + 4 >> 2];
   $5 = HEAP32[$5 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 256 | 0;
   __stack_pointer = $5;
   $7 = ($2 | 0) <= ($3 | 0);
  }
  block1 : {
   block : {
    if (!global$9) {
     if ($4 & 73728 | $7) {
      break block
     }
     $3 = $2 - $3 | 0;
     $2 = $3 >>> 0 < 256;
     __memset($5, $1, $2 ? $3 : 256);
     $1 = !$2;
    }
    if ($1 | (global$9 | 0) == 2) {
     while (1) {
      if (!global$9 | !$6) {
       out($0, $5, 256);
       $1 = 0;
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $3 = $3 - 256 | 0;
       if ($3 >>> 0 > 255) {
        continue
       }
      }
      break;
     }
    }
    if (!global$9 | ($6 | 0) == 1) {
     out($0, $5, $3);
     $1 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $5 + 256 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$1 + 8 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function vfprintf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $8 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $10 = HEAP32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 208 | 0;
   __stack_pointer = $4;
   HEAP32[$4 + 204 >> 2] = $2;
   $6 = $4 + 160 | 0;
   wasm2js_memory_fill($6, 0, 40);
   HEAP32[$4 + 200 >> 2] = HEAP32[$4 + 204 >> 2];
   $5 = $4 + 80 | 0;
   $2 = $4 + 200 | 0;
  }
  block : {
   if (!global$9 | !$9) {
    $3 = printf_core(0, $1, $2, $5, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $3;
   }
   $2 = global$9 ? $2 : ($2 | 0) < 0;
   block1 : {
    if (!global$9) {
     if ($2) {
      $1 = -1;
      break block1;
     }
     $2 = HEAP32[$0 + 76 >> 2] < 0;
    }
    $7 = global$9 ? $7 : $2;
    $3 = (global$9 | 0) == 2;
    $2 = (global$9 ? 0 : $7 | $3) ? 0 : $2;
    if (!global$9 | ($9 | 0) == 1 ? $3 | !$7 : 0) {
     $3 = __lockfile($0);
     $12 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $3;
    }
    if (!global$9) {
     $6 = !$2;
     $5 = HEAP32[$0 >> 2];
     HEAP32[$0 >> 2] = $5 & -33;
     $2 = !HEAP32[$0 + 48 >> 2];
    }
    block4 : {
     if (!global$9) {
      block3 : {
       block2 : {
        if ($2) {
         HEAP32[$0 + 48 >> 2] = 80;
         HEAP32[$0 + 28 >> 2] = 0;
         HEAP32[$0 + 16 >> 2] = 0;
         HEAP32[$0 + 20 >> 2] = 0;
         $8 = HEAP32[$0 + 44 >> 2];
         HEAP32[$0 + 44 >> 2] = $4;
         break block2;
        }
        if (HEAP32[$0 + 16 >> 2]) {
         break block3
        }
       }
       $2 = -1;
       if (__towrite($0)) {
        break block4
       }
      }
      $10 = $4 + 80 | 0;
      $11 = $4 + 160 | 0;
      $2 = $4 + 200 | 0;
     }
     if (!global$9 | ($9 | 0) == 2) {
      $3 = printf_core($0, $1, $2, $10, $11);
      $12 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $3;
     }
    }
    $1 = global$9 ? $1 : $5 & 32;
    if ((global$9 | 0) == 2 | $8) {
     $5 = global$9 ? $5 : HEAP32[$0 + 36 >> 2];
     if (!global$9 | ($9 | 0) == 3) {
      FUNCTION_TABLE[$5 | 0]($0, 0, 0) | 0;
      $12 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      HEAP32[$0 + 48 >> 2] = 0;
      HEAP32[$0 + 44 >> 2] = $8;
      HEAP32[$0 + 28 >> 2] = 0;
      $3 = HEAP32[$0 + 20 >> 2];
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      $2 = $3 ? $2 : -1;
     }
    }
    if (!global$9) {
     $3 = $1;
     $1 = HEAP32[$0 >> 2];
     HEAP32[$0 >> 2] = $3 | $1;
     $1 = $1 & 32 ? -1 : $2;
     if ($6) {
      break block1
     }
     __unlockfile($0);
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 208 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $8;
  HEAP32[$3 + 24 >> 2] = $6;
  HEAP32[$3 + 28 >> 2] = $7;
  HEAP32[$3 + 32 >> 2] = $10;
  HEAP32[$3 + 36 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 96;
   $7 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$7 >> 2];
   $2 = HEAP32[$7 + 12 >> 2];
   $3 = HEAP32[$7 + 16 >> 2];
   $4 = HEAP32[$7 + 20 >> 2];
   $5 = HEAP32[$7 + 24 >> 2];
   $6 = HEAP32[$7 + 28 >> 2];
   $8 = HEAP32[$7 + 32 >> 2];
   $9 = HEAP32[$7 + 36 >> 2];
   $10 = HEAP32[$7 + 40 >> 2];
   $14 = HEAP32[$7 + 44 >> 2];
   $11 = HEAP32[$7 + 48 >> 2];
   $13 = HEAP32[$7 + 52 >> 2];
   $12 = HEAP32[$7 + 56 >> 2];
   $22 = HEAP32[$7 + 60 >> 2];
   $18 = HEAP32[$7 + 64 >> 2];
   $19 = HEAP32[$7 + 68 >> 2];
   $16 = HEAP32[$7 + 72 >> 2];
   $20 = HEAP32[$7 + 76 >> 2];
   $23 = HEAP32[$7 + 80 >> 2];
   $24 = HEAP32[$7 + 84 >> 2];
   $17 = HEAP32[$7 + 88 >> 2];
   $27 = HEAP32[$7 + 92 >> 2];
   $26 = HEAP32[$7 + 8 >> 2];
   $7 = HEAP32[$7 + 4 >> 2];
   wasm2js_scratch_store_i32(0, $7 | 0);
   wasm2js_scratch_store_i32(1, $26 | 0);
   $1 = +wasm2js_scratch_load_f64();
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $15 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $13 = __stack_pointer - 560 | 0;
   __stack_pointer = $13;
   HEAP32[$13 + 44 >> 2] = 0;
   wasm2js_scratch_store_f64(+$1);
   $8 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   block : {
    if (($8 | 0) < 0) {
     $20 = 1;
     $24 = 2199;
     $1 = -$1;
     wasm2js_scratch_store_f64(+$1);
     $8 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     break block;
    }
    if ($4 & 2048) {
     $20 = 1;
     $24 = 2202;
     break block;
    }
    $20 = $4 & 1;
    $24 = $20 ? 2205 : 2200;
    $27 = !$20;
   }
   $8 = ($8 & 2146435072) == 2146435072;
  }
  block1 : {
   block2 : {
    if ((global$9 | 0) == 2 | $8) {
     if (!global$9) {
      $6 = $20 + 3 | 0;
      $3 = $4 & -65537;
     }
     if (!global$9 | !$15) {
      pad($0, 32, $2, $6, $3);
      $7 = 0;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9 | ($15 | 0) == 1) {
      out($0, $24, $20);
      $7 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $8 = $5 & 32;
      $10 = $8 ? 5118 : 10630;
      $5 = $8 ? 7168 : 10831;
      $3 = $1 != $1 ? $10 : $5;
     }
     if (!global$9 | ($15 | 0) == 2) {
      out($0, $3, 3);
      $7 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     $3 = global$9 ? $3 : $4 ^ 8192;
     if (!global$9 | ($15 | 0) == 3) {
      pad($0, 32, $2, $6, $3);
      $7 = 3;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $14 = ($2 | 0) > ($6 | 0) ? $2 : $6;
      break block2;
     }
    }
    if (!global$9) {
     $23 = $13 + 16 | 0;
     $1 = frexp($1, $13 + 44 | 0);
     $1 = $1 + $1;
     $8 = $1 != 0.0;
    }
    block4 : {
     if (!global$9) {
      block5 : {
       block3 : {
        if ($8) {
         $6 = HEAP32[$13 + 44 >> 2];
         HEAP32[$13 + 44 >> 2] = $6 - 1;
         $25 = $5 | 32;
         $8 = ($25 | 0) != 97;
         if ($8) {
          break block3
         }
         break block4;
        }
        $25 = $5 | 32;
        $8 = ($25 | 0) == 97;
        if ($8) {
         break block4
        }
        $12 = HEAP32[$13 + 44 >> 2];
        break block5;
       }
       $12 = $6 - 29 | 0;
       HEAP32[$13 + 44 >> 2] = $12;
       $1 = $1 * 268435456.0;
      }
      $11 = ($3 | 0) < 0 ? 6 : $3;
      $18 = ($13 + 48 | 0) + (($12 | 0) >= 0 ? 288 : 0) | 0;
      $8 = $18;
      while (1) {
       $3 = $1 < 4294967295.0 & $1 >= 0.0 ? ~~$1 >>> 0 : 0;
       HEAP32[$8 >> 2] = $3;
       $8 = $8 + 4 | 0;
       $1 = ($1 - +($3 >>> 0)) * 1.0e9;
       if ($1 != 0.0) {
        continue
       }
       break;
      };
      block6 : {
       if (($12 | 0) <= 0) {
        $9 = $12;
        $6 = $8;
        $10 = $18;
        break block6;
       }
       $10 = $18;
       $9 = $12;
       while (1) {
        $9 = $9 >>> 0 >= 29 ? 29 : $9;
        $6 = $8 - 4 | 0;
        block7 : {
         if ($10 >>> 0 > $6 >>> 0) {
          break block7
         }
         $7 = 0;
         while (1) {
          $26 = 0;
          $3 = HEAP32[$6 >> 2];
          $17 = $9 & 31;
          $14 = $7;
          if (($9 & 63) >>> 0 >= 32) {
           $7 = $3 << $17;
           $3 = 0;
          } else {
           $7 = (1 << $17) - 1 & $3 >>> 32 - $17;
           $3 = $3 << $17;
          }
          $16 = $14 + $3 | 0;
          $17 = $7 + $26 | 0;
          $17 = $3 >>> 0 > $16 >>> 0 ? $17 + 1 | 0 : $17;
          $7 = __wasm_i64_udiv($16, $17, 1e9);
          (wasm2js_i32$0 = $6, wasm2js_i32$1 = $16 - __wasm_i64_mul($7, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          $6 = $6 - 4 | 0;
          if ($10 >>> 0 <= $6 >>> 0) {
           continue
          }
          break;
         };
         if (!$17 & $16 >>> 0 < 1e9) {
          break block7
         }
         $10 = $10 - 4 | 0;
         HEAP32[$10 >> 2] = $7;
        }
        while (1) {
         $6 = $8;
         if ($10 >>> 0 < $6 >>> 0) {
          $8 = $6 - 4 | 0;
          if (!HEAP32[$8 >> 2]) {
           continue
          }
         }
         break;
        };
        $9 = HEAP32[$13 + 44 >> 2] - $9 | 0;
        HEAP32[$13 + 44 >> 2] = $9;
        $8 = $6;
        if (($9 | 0) > 0) {
         continue
        }
        break;
       };
      }
      if (($9 | 0) < 0) {
       $19 = (($11 + 25 >>> 0) / 9 | 0) + 1 | 0;
       $17 = ($25 | 0) == 102;
       while (1) {
        $3 = 0 - $9 | 0;
        $16 = $3 >>> 0 >= 9 ? 9 : $3;
        block8 : {
         if ($6 >>> 0 <= $10 >>> 0) {
          $8 = !HEAP32[$10 >> 2] << 2;
          break block8;
         }
         $26 = 1e9 >>> $16 | 0;
         $7 = -1 << $16 ^ -1;
         $9 = 0;
         $8 = $10;
         while (1) {
          $3 = HEAP32[$8 >> 2];
          HEAP32[$8 >> 2] = ($3 >>> $16 | 0) + $9;
          $9 = Math_imul($26, $3 & $7);
          $8 = $8 + 4 | 0;
          if ($8 >>> 0 < $6 >>> 0) {
           continue
          }
          break;
         };
         $8 = !HEAP32[$10 >> 2] << 2;
         if (!$9) {
          break block8
         }
         HEAP32[$6 >> 2] = $9;
         $6 = $6 + 4 | 0;
        }
        $9 = $16 + HEAP32[$13 + 44 >> 2] | 0;
        HEAP32[$13 + 44 >> 2] = $9;
        $10 = $8 + $10 | 0;
        $3 = $17 ? $18 : $10;
        $6 = $6 - $3 >> 2 > ($19 | 0) ? $3 + ($19 << 2) | 0 : $6;
        if (($9 | 0) < 0) {
         continue
        }
        break;
       };
      }
      $9 = 0;
      block9 : {
       if ($6 >>> 0 <= $10 >>> 0) {
        break block9
       }
       $9 = Math_imul($18 - $10 >> 2, 9);
       $8 = 10;
       $3 = HEAP32[$10 >> 2];
       if ($3 >>> 0 < 10) {
        break block9
       }
       while (1) {
        $9 = $9 + 1 | 0;
        $8 = Math_imul($8, 10);
        if ($3 >>> 0 >= $8 >>> 0) {
         continue
        }
        break;
       };
      }
      $3 = ($11 - (($25 | 0) != 102 ? $9 : 0) | 0) - (($25 | 0) == 103 & ($11 | 0) != 0) | 0;
      if (($3 | 0) < (Math_imul($6 - $18 >> 2, 9) - 9 | 0)) {
       $8 = ($13 + 48 | 0) + (($12 | 0) < 0 ? -4092 : -3804) | 0;
       $12 = $3 + 9216 | 0;
       $3 = ($12 | 0) / 9 | 0;
       $14 = $8 + ($3 << 2) | 0;
       $8 = 10;
       $3 = $12 - Math_imul($3, 9) | 0;
       if (($3 | 0) <= 7) {
        while (1) {
         $8 = Math_imul($8, 10);
         $3 = $3 + 1 | 0;
         if (($3 | 0) != 8) {
          continue
         }
         break;
        }
       }
       $12 = HEAP32[$14 >> 2];
       $19 = ($12 >>> 0) / ($8 >>> 0) | 0;
       $7 = $12 - Math_imul($8, $19) | 0;
       $3 = $14 + 4 | 0;
       block10 : {
        if (!$7 & ($3 | 0) == ($6 | 0)) {
         break block10
        }
        block11 : {
         if (!($19 & 1)) {
          $1 = 9007199254740992.0;
          if (!(HEAP8[$14 - 4 | 0] & 1) | (($8 | 0) != 1e9 | $10 >>> 0 >= $14 >>> 0)) {
           break block11
          }
         }
         $1 = 9007199254740994.0;
        }
        $21 = ($3 | 0) == ($6 | 0) ? 1.0 : 1.5;
        $3 = $8 >>> 1 | 0;
        $21 = $3 >>> 0 > $7 >>> 0 ? .5 : ($3 | 0) == ($7 | 0) ? $21 : 1.5;
        if (!(HEAPU8[$24 | 0] != 45 | $27)) {
         $21 = -$21;
         $1 = -$1;
        }
        $3 = $12 - $7 | 0;
        HEAP32[$14 >> 2] = $3;
        if ($1 + $21 == $1) {
         break block10
        }
        $3 = $3 + $8 | 0;
        HEAP32[$14 >> 2] = $3;
        if ($3 >>> 0 >= 1e9) {
         while (1) {
          HEAP32[$14 >> 2] = 0;
          $14 = $14 - 4 | 0;
          if ($14 >>> 0 < $10 >>> 0) {
           $10 = $10 - 4 | 0;
           HEAP32[$10 >> 2] = 0;
          }
          $3 = HEAP32[$14 >> 2] + 1 | 0;
          HEAP32[$14 >> 2] = $3;
          if ($3 >>> 0 > 999999999) {
           continue
          }
          break;
         }
        }
        $9 = Math_imul($18 - $10 >> 2, 9);
        $8 = 10;
        $3 = HEAP32[$10 >> 2];
        if ($3 >>> 0 < 10) {
         break block10
        }
        while (1) {
         $9 = $9 + 1 | 0;
         $8 = Math_imul($8, 10);
         if ($3 >>> 0 >= $8 >>> 0) {
          continue
         }
         break;
        };
       }
       $3 = $14 + 4 | 0;
       $6 = $3 >>> 0 < $6 >>> 0 ? $3 : $6;
      }
      while (1) {
       $8 = $6;
       $7 = $6 >>> 0 <= $10 >>> 0;
       $12 = !$7;
       if ($12) {
        $6 = $6 - 4 | 0;
        $12 = !HEAP32[$6 >> 2];
        if ($12) {
         continue
        }
       }
       break;
      };
      block13 : {
       if (($25 | 0) != 103) {
        $22 = $4 & 8;
        break block13;
       }
       $6 = $11 ? $11 : 1;
       $12 = ($6 | 0) > ($9 | 0);
       $3 = $12 & ($9 | 0) > -5;
       $11 = ($3 ? $9 ^ -1 : -1) + $6 | 0;
       $5 = ($3 ? -1 : -2) + $5 | 0;
       $22 = $4 & 8;
       if ($22) {
        break block13
       }
       $6 = -9;
       block14 : {
        if ($7) {
         break block14
        }
        $7 = HEAP32[$8 - 4 >> 2];
        if (!$7) {
         break block14
        }
        $3 = 10;
        $6 = 0;
        if (($7 >>> 0) % 10 | 0) {
         break block14
        }
        while (1) {
         $12 = $6;
         $6 = $6 + 1 | 0;
         $3 = Math_imul($3, 10);
         if (!(($7 >>> 0) % ($3 >>> 0) | 0)) {
          continue
         }
         break;
        };
        $6 = $12 ^ -1;
       }
       $3 = Math_imul($8 - $18 >> 2, 9);
       $12 = ($5 & -33) == 70;
       if ($12) {
        $22 = 0;
        $3 = ($3 + $6 | 0) - 9 | 0;
        $3 = ($3 | 0) > 0 ? $3 : 0;
        $11 = ($3 | 0) > ($11 | 0) ? $11 : $3;
        break block13;
       }
       $22 = 0;
       $3 = (($3 + $9 | 0) + $6 | 0) - 9 | 0;
       $3 = ($3 | 0) > 0 ? $3 : 0;
       $11 = ($3 | 0) > ($11 | 0) ? $11 : $3;
      }
      $14 = -1;
      $16 = $11 | $22;
      if ((($16 ? 2147483645 : 2147483646) | 0) < ($11 | 0)) {
       break block2
      }
      $7 = ((($16 | 0) != 0) + $11 | 0) + 1 | 0;
      $17 = $5 & -33;
      block15 : {
       if (($17 | 0) == 70) {
        if (($7 ^ 2147483647) < ($9 | 0)) {
         break block2
        }
        $6 = ($9 | 0) > 0 ? $9 : 0;
        break block15;
       }
       $3 = $9 >> 31;
       $6 = fmt_u(($3 ^ $9) - $3 | 0, 0, $23);
       $12 = ($23 - $6 | 0) <= 1;
       if ($12) {
        while (1) {
         $6 = $6 - 1 | 0;
         HEAP8[$6 | 0] = 48;
         $12 = ($23 - $6 | 0) < 2;
         if ($12) {
          continue
         }
         break;
        }
       }
       $19 = $6 - 2 | 0;
       HEAP8[$19 | 0] = $5;
       HEAP8[$6 - 1 | 0] = ($9 | 0) < 0 ? 45 : 43;
       $6 = $23 - $19 | 0;
       if (($6 | 0) > ($7 ^ 2147483647)) {
        break block2
       }
      }
      $6 = $6 + $7 | 0;
      $3 = ($6 | 0) > ($20 ^ 2147483647);
      if ($3) {
       break block2
      }
      $5 = $6 + $20 | 0;
     }
     if (!global$9 | ($15 | 0) == 4) {
      pad($0, 32, $2, $5, $4);
      $7 = 4;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9 | ($15 | 0) == 5) {
      out($0, $24, $20);
      $7 = 5;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     $3 = global$9 ? $3 : $4 ^ 65536;
     if (!global$9 | ($15 | 0) == 6) {
      pad($0, 48, $2, $5, $3);
      $7 = 6;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     $3 = global$9 ? $3 : ($17 | 0) == 70;
     block21 : {
      block18 : {
       block17 : {
        if ($3 | (global$9 | 0) == 2) {
         if (!global$9) {
          $9 = $13 + 16 | 9;
          $3 = $10 >>> 0 > $18 >>> 0 ? $18 : $10;
          $10 = $3;
         }
         while (1) {
          if (!global$9) {
           $6 = fmt_u(HEAP32[$10 >> 2], 0, $9);
           block16 : {
            if (($3 | 0) != ($10 | 0)) {
             if ($13 + 16 >>> 0 >= $6 >>> 0) {
              break block16
             }
             while (1) {
              $6 = $6 - 1 | 0;
              HEAP8[$6 | 0] = 48;
              if ($13 + 16 >>> 0 < $6 >>> 0) {
               continue
              }
              break;
             };
             break block16;
            }
            if (($6 | 0) != ($9 | 0)) {
             break block16
            }
            $6 = $6 - 1 | 0;
            HEAP8[$6 | 0] = 48;
           }
           $12 = $9 - $6 | 0;
          }
          if (!global$9 | ($15 | 0) == 7) {
           out($0, $6, $12);
           $7 = 7;
           if ((global$9 | 0) == 1) {
            break block1
           }
          }
          if (!global$9) {
           $10 = $10 + 4 | 0;
           $6 = $18 >>> 0 >= $10 >>> 0;
           if ($6) {
            continue
           }
          }
          break;
         };
         if (!global$9 | ($15 | 0) == 8 ? (global$9 | 0) == 2 | $16 : 0) {
          out($0, 11921, 1);
          $7 = 8;
          if ((global$9 | 0) == 1) {
           break block1
          }
         }
         if (!global$9) {
          $3 = $8 >>> 0 <= $10 >>> 0;
          if ($3) {
           break block17
          }
          $3 = ($11 | 0) <= 0;
          if ($3) {
           break block17
          }
         }
         while (1) {
          if (!global$9) {
           $6 = fmt_u(HEAP32[$10 >> 2], 0, $9);
           if ($6 >>> 0 > $13 + 16 >>> 0) {
            while (1) {
             $6 = $6 - 1 | 0;
             HEAP8[$6 | 0] = 48;
             if ($13 + 16 >>> 0 < $6 >>> 0) {
              continue
             }
             break;
            }
           }
           $3 = ($11 | 0) >= 9 ? 9 : $11;
          }
          if (!global$9 | ($15 | 0) == 9) {
           out($0, $6, $3);
           $7 = 9;
           if ((global$9 | 0) == 1) {
            break block1
           }
          }
          if (!global$9) {
           $6 = $11 - 9 | 0;
           $10 = $10 + 4 | 0;
           $3 = $10 >>> 0 >= $8 >>> 0;
           if ($3) {
            break block18
           }
           $3 = ($11 | 0) > 9;
           $11 = $6;
           if ($3) {
            continue
           }
          }
          break;
         };
         if (!global$9) {
          break block18
         }
        }
        $3 = global$9 ? $3 : ($11 | 0) < 0;
        block19 : {
         if (!global$9) {
          if ($3) {
           break block19
          }
          $6 = $10 + 4 | 0;
          $14 = $8 >>> 0 > $10 >>> 0 ? $8 : $6;
          $3 = $13 + 16 | 0;
          $9 = $3 | 9;
          $8 = $10;
         }
         while (1) {
          if (!global$9) {
           $6 = fmt_u(HEAP32[$8 >> 2], 0, $9);
           if (($9 | 0) == ($6 | 0)) {
            $6 = $6 - 1 | 0;
            HEAP8[$6 | 0] = 48;
           }
           $3 = ($8 | 0) != ($10 | 0);
          }
          block20 : {
           if (!($3 ? global$9 : 1)) {
            $3 = $13 + 16 >>> 0 >= $6 >>> 0;
            if ($3) {
             break block20
            }
            while (1) {
             $6 = $6 - 1 | 0;
             HEAP8[$6 | 0] = 48;
             $3 = $13 + 16 >>> 0 < $6 >>> 0;
             if ($3) {
              continue
             }
             break;
            };
            break block20;
           }
           if (!global$9 | ($15 | 0) == 10) {
            out($0, $6, 1);
            $7 = 10;
            if ((global$9 | 0) == 1) {
             break block1
            }
           }
           if (!global$9) {
            $6 = $6 + 1 | 0;
            $3 = !($11 | $22);
            if ($3) {
             break block20
            }
           }
           if (!global$9 | ($15 | 0) == 11) {
            out($0, 11921, 1);
            $7 = 11;
            if ((global$9 | 0) == 1) {
             break block1
            }
           }
          }
          if (!global$9) {
           $3 = $9 - $6 | 0;
           $18 = ($3 | 0) < ($11 | 0) ? $3 : $11;
          }
          if (!global$9 | ($15 | 0) == 12) {
           out($0, $6, $18);
           $7 = 12;
           if ((global$9 | 0) == 1) {
            break block1
           }
          }
          if (!global$9) {
           $11 = $11 - $3 | 0;
           $8 = $8 + 4 | 0;
           $3 = $14 >>> 0 <= $8 >>> 0;
           if ($3) {
            break block19
           }
           $3 = ($11 | 0) >= 0;
           if ($3) {
            continue
           }
          }
          break;
         };
        }
        $3 = global$9 ? $3 : $11 + 18 | 0;
        if (!global$9 | ($15 | 0) == 13) {
         pad($0, 48, $3, 18, 0);
         $7 = 13;
         if ((global$9 | 0) == 1) {
          break block1
         }
        }
        $3 = global$9 ? $3 : $23 - $19 | 0;
        if (!global$9 | ($15 | 0) == 14) {
         out($0, $19, $3);
         $7 = 14;
         if ((global$9 | 0) == 1) {
          break block1
         }
        }
        if (!global$9) {
         break block21
        }
       }
       $6 = global$9 ? $6 : $11;
      }
      $3 = global$9 ? $3 : $6 + 9 | 0;
      if (!global$9 | ($15 | 0) == 15) {
       pad($0, 48, $3, 9, 0);
       $7 = 15;
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
     }
     $3 = global$9 ? $3 : $4 ^ 8192;
     if (!global$9 | ($15 | 0) == 16) {
      pad($0, 32, $2, $5, $3);
      $7 = 16;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $14 = ($2 | 0) > ($5 | 0) ? $2 : $5;
      break block2;
     }
    }
    if (!global$9) {
     $19 = ($5 << 26 >> 31 & 9) + $24 | 0;
     block22 : {
      if ($3 >>> 0 > 11) {
       break block22
      }
      $6 = 12 - $3 | 0;
      $21 = 16.0;
      while (1) {
       $21 = $21 * 16.0;
       $6 = $6 - 1 | 0;
       if ($6) {
        continue
       }
       break;
      };
      if (HEAPU8[$19 | 0] == 45) {
       $1 = -($21 + (-$1 - $21));
       break block22;
      }
      $1 = $1 + $21 - $21;
     }
     $8 = HEAP32[$13 + 44 >> 2];
     $6 = $8 >> 31;
     $6 = fmt_u(($6 ^ $8) - $6 | 0, 0, $23);
     if (($23 | 0) == ($6 | 0)) {
      $6 = $6 - 1 | 0;
      HEAP8[$6 | 0] = 48;
      $8 = HEAP32[$13 + 44 >> 2];
     }
     $22 = $20 | 2;
     $10 = $5 & 32;
     $16 = $6 - 2 | 0;
     HEAP8[$16 | 0] = $5 + 15;
     HEAP8[$6 - 1 | 0] = ($8 | 0) < 0 ? 45 : 43;
     $9 = !($4 & 8) & ($3 | 0) <= 0;
     $8 = $13 + 16 | 0;
     while (1) {
      $6 = $8;
      $7 = Math_abs($1) < 2147483647.0 ? ~~$1 : -2147483648;
      HEAP8[$6 | 0] = HEAPU8[$7 + 28112 | 0] | $10;
      $1 = ($1 - +($7 | 0)) * 16.0;
      $8 = $6 + 1 | 0;
      if (!($9 & $1 == 0.0 | ($8 - ($13 + 16 | 0) | 0) != 1)) {
       HEAP8[$6 + 1 | 0] = 46;
       $8 = $6 + 2 | 0;
      }
      if ($1 != 0.0) {
       continue
      }
      break;
     };
     $14 = -1;
     $10 = $23 - $16 | 0;
     $9 = $22 + $10 | 0;
     if ((2147483645 - $9 | 0) < ($3 | 0)) {
      break block2
     }
     $6 = $8 - ($13 + 16 | 0) | 0;
     $5 = ($6 - 2 | 0) < ($3 | 0) ? $3 + 2 | 0 : $6;
     $3 = $3 ? $5 : $6;
     $8 = $9 + $3 | 0;
    }
    if (!global$9 | ($15 | 0) == 17) {
     pad($0, 32, $2, $8, $4);
     $7 = 17;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($15 | 0) == 18) {
     out($0, $19, $22);
     $7 = 18;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    $5 = global$9 ? $5 : $4 ^ 65536;
    if (!global$9 | ($15 | 0) == 19) {
     pad($0, 48, $2, $8, $5);
     $7 = 19;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    $5 = global$9 ? $5 : $13 + 16 | 0;
    if (!global$9 | ($15 | 0) == 20) {
     out($0, $5, $6);
     $7 = 20;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    $3 = global$9 ? $3 : $3 - $6 | 0;
    if (!global$9 | ($15 | 0) == 21) {
     pad($0, 48, $3, 0, 0);
     $7 = 21;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($15 | 0) == 22) {
     out($0, $16, $10);
     $7 = 22;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    $3 = global$9 ? $3 : $4 ^ 8192;
    if (!global$9 | ($15 | 0) == 23) {
     pad($0, 32, $2, $8, $3);
     $7 = 23;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    $14 = global$9 ? $14 : ($2 | 0) > ($8 | 0) ? $2 : $8;
   }
   if (!global$9) {
    __stack_pointer = $13 + 560 | 0;
    return $14 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  wasm2js_scratch_store_f64(+$1);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $7, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  HEAP32[$7 + 8 >> 2] = $0;
  HEAP32[$7 + 12 >> 2] = $2;
  HEAP32[$7 + 16 >> 2] = $3;
  HEAP32[$7 + 20 >> 2] = $4;
  HEAP32[$7 + 24 >> 2] = $5;
  HEAP32[$7 + 28 >> 2] = $6;
  HEAP32[$7 + 32 >> 2] = $8;
  HEAP32[$7 + 36 >> 2] = $9;
  HEAP32[$7 + 40 >> 2] = $10;
  HEAP32[$7 + 44 >> 2] = $14;
  HEAP32[$7 + 48 >> 2] = $11;
  HEAP32[$7 + 52 >> 2] = $13;
  HEAP32[$7 + 56 >> 2] = $12;
  HEAP32[$7 + 60 >> 2] = $22;
  HEAP32[$7 + 64 >> 2] = $18;
  HEAP32[$7 + 68 >> 2] = $19;
  HEAP32[$7 + 72 >> 2] = $16;
  HEAP32[$7 + 76 >> 2] = $20;
  HEAP32[$7 + 80 >> 2] = $23;
  HEAP32[$7 + 84 >> 2] = $24;
  HEAP32[$7 + 88 >> 2] = $17;
  HEAP32[$7 + 92 >> 2] = $27;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 96;
  return 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = global$9;
  $3 = $1;
  $1 = HEAP32[$1 >> 2] + 7 & -8;
  HEAP32[$3 >> 2] = $1 + 16;
  $4 = __trunctfdf2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  HEAPF64[$0 >> 3] = $4;
 }
 
 function vsnprintf($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $4 = HEAP32[global$10 >> 2];
   $1 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $4 = HEAP32[$4 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 160 | 0;
   __stack_pointer = $4;
   $0 = $1 ? $0 : $4 + 158 | 0;
   HEAP32[$4 + 148 >> 2] = $0;
   $5 = $1 - 1 | 0;
   HEAP32[$4 + 152 >> 2] = $1 >>> 0 >= $5 >>> 0 ? $5 : 0;
   wasm2js_memory_fill($4, 0, 144);
   HEAP32[$4 + 76 >> 2] = -1;
   HEAP32[$4 + 36 >> 2] = 209;
   HEAP32[$4 + 80 >> 2] = -1;
   HEAP32[$4 + 44 >> 2] = $4 + 159;
   $1 = $4 + 148 | 0;
   HEAP32[$4 + 84 >> 2] = $1;
   HEAP8[$0 | 0] = 0;
  }
  block : {
   if (!global$9 | !$6) {
    $0 = vfprintf($4, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $0;
   }
   if (!global$9) {
    __stack_pointer = $4 + 160 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $0 = HEAP32[global$10 >> 2];
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $7 = global$9;
  $4 = HEAP32[$0 + 84 >> 2];
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $8 = HEAP32[$0 + 28 >> 2];
  $6 = HEAP32[$0 + 20 >> 2] - $8 | 0;
  $6 = $3 >>> 0 < $6 >>> 0 ? $3 : $6;
  if ($6) {
   __memcpy($5, $8, $6);
   if ((global$9 | 0) != ($7 | 0)) {
    wasm2js_trap()
   }
   $5 = $6 + HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $5;
   $3 = HEAP32[$4 + 4 >> 2] - $6 | 0;
   HEAP32[$4 + 4 >> 2] = $3;
  }
  $3 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
  if ($3) {
   __memcpy($5, $1, $3);
   if ((global$9 | 0) != ($7 | 0)) {
    wasm2js_trap()
   }
   $5 = $3 + HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] - $3;
  }
  HEAP8[$5 | 0] = 0;
  $1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = $1;
  return $2 | 0;
 }
 
 function __shlim($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 + 112 >> 2] = $1;
  HEAP32[$0 + 116 >> 2] = $2;
  $5 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$0 + 44 >> 2] - $5 | 0;
  HEAP32[$0 + 120 >> 2] = $3;
  HEAP32[$0 + 124 >> 2] = $3 >> 31;
  $3 = HEAP32[$0 + 8 >> 2];
  block : {
   if (!($1 | $2)) {
    break block
   }
   $4 = $3 - $5 | 0;
   $6 = $1 >>> 0 >= $4 >>> 0;
   $4 = $4 >> 31;
   if ($6 & ($4 | 0) <= ($2 | 0) | ($2 | 0) > ($4 | 0)) {
    break block
   }
   $3 = $1 + $5 | 0;
  }
  HEAP32[$0 + 104 >> 2] = $3;
 }
 
 function __shgetc($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $6 = HEAP32[$2 + 4 >> 2];
   $3 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 16 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (global$9) {
    $5 = 0
   } else {
    $2 = HEAP32[$0 + 116 >> 2];
    $7 = $2;
    $4 = HEAP32[$0 + 112 >> 2];
    $8 = ($2 | $4) != 0;
    $6 = HEAP32[$0 + 4 >> 2];
    $2 = HEAP32[$0 + 44 >> 2];
    $1 = $6 - $2 | 0;
    $5 = $1;
    $3 = $1 + HEAP32[$0 + 120 >> 2] | 0;
    $1 = HEAP32[$0 + 124 >> 2] + ($1 >> 31) | 0;
    $1 = $3 >>> 0 < $5 >>> 0 ? $1 + 1 | 0 : $1;
    $5 = !((($7 | 0) <= ($1 | 0) & $3 >>> 0 >= $4 >>> 0 | ($1 | 0) > ($7 | 0)) & $8);
   }
   block1 : {
    if ($5 | (global$9 | 0) == 2) {
     if (!global$9 | !$10) {
      $4 = __uflow($0);
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $4;
     }
     if (!global$9) {
      if (($2 | 0) >= 0) {
       break block1
      }
      $6 = HEAP32[$0 + 4 >> 2];
      $2 = HEAP32[$0 + 44 >> 2];
     }
    }
    if (!global$9) {
     HEAP32[$0 + 112 >> 2] = -1;
     HEAP32[$0 + 116 >> 2] = -1;
     HEAP32[$0 + 104 >> 2] = $6;
     $2 = $2 - $6 | 0;
     $3 = $2 + $3 | 0;
     $1 = ($2 >> 31) + $1 | 0;
     HEAP32[$0 + 120 >> 2] = $3;
     HEAP32[$0 + 124 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
     return -1;
    }
   }
   if (!global$9) {
    $3 = $3 + 1 | 0;
    $4 = $3 ? $1 : $1 + 1 | 0;
    $9 = HEAP32[$0 + 4 >> 2];
    $6 = HEAP32[$0 + 8 >> 2];
    $1 = HEAP32[$0 + 116 >> 2];
    $8 = $1;
    $7 = HEAP32[$0 + 112 >> 2];
    block2 : {
     if (!($1 | $7)) {
      break block2
     }
     $5 = $6 - $9 | 0;
     $10 = $5;
     $1 = $7 - $3 | 0;
     $8 = $8 - ($4 + ($3 >>> 0 > $7 >>> 0) | 0) | 0;
     $5 = $5 >> 31;
     if ($10 >>> 0 <= $1 >>> 0 & ($8 | 0) >= ($5 | 0) | ($5 | 0) < ($8 | 0)) {
      break block2
     }
     $6 = $1 + $9 | 0;
    }
    HEAP32[$0 + 104 >> 2] = $6;
    $5 = $3;
    $3 = HEAP32[$0 + 44 >> 2];
    $1 = $3 - $9 | 0;
    $5 = $5 + $1 | 0;
    $4 = ($1 >> 31) + $4 | 0;
    HEAP32[$0 + 120 >> 2] = $5;
    HEAP32[$0 + 124 >> 2] = $1 >>> 0 > $5 >>> 0 ? $4 + 1 | 0 : $4;
    if ($3 >>> 0 >= $9 >>> 0) {
     HEAP8[$9 - 1 | 0] = $2
    }
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $6;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function copysignl($0, $1, $2, $3, $4, $5) {
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4 & 65535 | ($5 >>> 16 & 32768 | ($4 & 2147418112) >>> 16) << 16;
 }
 
 function scalbnl($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $7 = global$9;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  block : {
   if (($5 | 0) >= 16384) {
    __multf3($6 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
    if ((global$9 | 0) != ($7 | 0)) {
     wasm2js_trap()
    }
    $3 = HEAP32[$6 + 40 >> 2];
    $4 = HEAP32[$6 + 44 >> 2];
    $1 = HEAP32[$6 + 32 >> 2];
    $2 = HEAP32[$6 + 36 >> 2];
    if ($5 >>> 0 < 32767) {
     $5 = $5 - 16383 | 0;
     break block;
    }
    __multf3($6 + 16 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
    if ((global$9 | 0) != ($7 | 0)) {
     wasm2js_trap()
    }
    $5 = ($5 >>> 0 >= 49149 ? 49149 : $5) - 32766 | 0;
    $3 = HEAP32[$6 + 24 >> 2];
    $4 = HEAP32[$6 + 28 >> 2];
    $1 = HEAP32[$6 + 16 >> 2];
    $2 = HEAP32[$6 + 20 >> 2];
    break block;
   }
   if (($5 | 0) > -16383) {
    break block
   }
   __multf3($6 - -64 | 0, $1, $2, $3, $4, 0, 0, 0, 7471104);
   if ((global$9 | 0) != ($7 | 0)) {
    wasm2js_trap()
   }
   $3 = HEAP32[$6 + 72 >> 2];
   $4 = HEAP32[$6 + 76 >> 2];
   $1 = HEAP32[$6 + 64 >> 2];
   $2 = HEAP32[$6 + 68 >> 2];
   if ($5 >>> 0 > 4294934644) {
    $5 = $5 + 16269 | 0;
    break block;
   }
   __multf3($6 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 7471104);
   if ((global$9 | 0) != ($7 | 0)) {
    wasm2js_trap()
   }
   $5 = ($5 >>> 0 <= 4294918376 ? -48920 : $5) + 32538 | 0;
   $3 = HEAP32[$6 + 56 >> 2];
   $4 = HEAP32[$6 + 60 >> 2];
   $1 = HEAP32[$6 + 48 >> 2];
   $2 = HEAP32[$6 + 52 >> 2];
  }
  __multf3($6, $1, $2, $3, $4, 0, 0, 0, $5 + 16383 << 16);
  if ((global$9 | 0) != ($7 | 0)) {
   wasm2js_trap()
  }
  $1 = HEAP32[$6 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  $1 = HEAP32[$6 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  __stack_pointer = $6 + 80 | 0;
 }
 
 function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  $16 = global$9;
  $9 = __stack_pointer - 128 | 0;
  __stack_pointer = $9;
  $12 = __letf2($5, $6, $7, $8, 0, 0, 0, 0);
  if ((global$9 | 0) != ($16 | 0)) {
   wasm2js_trap()
  }
  block4 : {
   block3 : {
    block : {
     if (!$12) {
      break block
     }
     $11 = $8 & 65535;
     $13 = $8 >>> 16 & 32767;
     block2 : {
      block1 : {
       if (($13 | 0) != 32767) {
        $10 = 4;
        if ($13) {
         break block1
        }
        $10 = $5 | $7 | ($6 | $11) ? 3 : 2;
        break block2;
       }
       $10 = !($5 | $7 | ($6 | $11));
      }
     }
     if (!$10) {
      break block
     }
     $19 = $4 >>> 16 | 0;
     $14 = $19 & 32767;
     if (($14 | 0) != 32767) {
      break block3
     }
    }
    __multf3($9 + 16 | 0, $1, $2, $3, $4, $5, $6, $7, $8);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    $1 = HEAP32[$9 + 16 >> 2];
    $3 = HEAP32[$9 + 20 >> 2];
    $4 = HEAP32[$9 + 24 >> 2];
    $2 = HEAP32[$9 + 28 >> 2];
    __divtf3($9, $1, $3, $4, $2, $1, $3, $4, $2);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    $3 = HEAP32[$9 + 8 >> 2];
    $4 = HEAP32[$9 + 12 >> 2];
    $7 = HEAP32[$9 >> 2];
    $8 = HEAP32[$9 + 4 >> 2];
    break block4;
   }
   $12 = $3;
   $15 = $4 & 2147483647;
   $13 = $7;
   $10 = $8 & 2147483647;
   $7 = __letf2($1, $2, $12, $15, $5, $6, $7, $10);
   if ((global$9 | 0) != ($16 | 0)) {
    wasm2js_trap()
   }
   if (($7 | 0) <= 0) {
    $5 = __letf2($1, $2, $12, $15, $5, $6, $13, $10);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    if ($5) {
     $7 = $1;
     $8 = $2;
     break block4;
    }
    __multf3($9 + 112 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    $3 = HEAP32[$9 + 120 >> 2];
    $4 = HEAP32[$9 + 124 >> 2];
    $7 = HEAP32[$9 + 112 >> 2];
    $8 = HEAP32[$9 + 116 >> 2];
    break block4;
   }
   $17 = $8 >>> 16 & 32767;
   if ($14) {
    $8 = $2;
    $7 = $1;
   } else {
    __multf3($9 + 96 | 0, $1, $2, $12, $15, 0, 0, 0, 1081540608);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    $12 = HEAP32[$9 + 104 >> 2];
    $7 = HEAP32[$9 + 108 >> 2];
    $15 = $7;
    $14 = ($7 >>> 16 | 0) - 120 | 0;
    $8 = HEAP32[$9 + 100 >> 2];
    $7 = HEAP32[$9 + 96 >> 2];
   }
   if (!$17) {
    __multf3($9 + 80 | 0, $5, $6, $13, $10, 0, 0, 0, 1081540608);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    $13 = HEAP32[$9 + 88 >> 2];
    $5 = HEAP32[$9 + 92 >> 2];
    $10 = $5;
    $17 = ($5 >>> 16 | 0) - 120 | 0;
    $6 = HEAP32[$9 + 84 >> 2];
    $5 = HEAP32[$9 + 80 >> 2];
   }
   $18 = $13;
   $20 = $10 & 65535 | 65536;
   $15 = $15 & 65535 | 65536;
   if (($14 | 0) > ($17 | 0)) {
    while (1) {
     $10 = $12 - $18 | 0;
     $11 = ($6 | 0) == ($8 | 0) & $5 >>> 0 > $7 >>> 0 | $6 >>> 0 > $8 >>> 0;
     $13 = $10 - $11 | 0;
     $11 = ($15 - (($12 >>> 0 < $18 >>> 0) + $20 | 0) | 0) - ($11 >>> 0 > $10 >>> 0) | 0;
     block5 : {
      if (($11 | 0) >= 0 | ($11 | 0) > 0) {
       $12 = $7;
       $7 = $7 - $5 | 0;
       $8 = $8 - (($5 >>> 0 > $12 >>> 0) + $6 | 0) | 0;
       if (!($7 | $13 | ($8 | $11))) {
        __multf3($9 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
        if ((global$9 | 0) != ($16 | 0)) {
         wasm2js_trap()
        }
        $3 = HEAP32[$9 + 40 >> 2];
        $4 = HEAP32[$9 + 44 >> 2];
        $7 = HEAP32[$9 + 32 >> 2];
        $8 = HEAP32[$9 + 36 >> 2];
        break block4;
       }
       $11 = $11 << 1 | $13 >>> 31;
       $12 = $13 << 1 | $8 >>> 31;
       break block5;
      }
      $11 = $15 << 1 | $12 >>> 31;
      $12 = $12 << 1 | $8 >>> 31;
     }
     $15 = $11;
     $11 = $8 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $8 = $11;
     $14 = $14 - 1 | 0;
     if (($17 | 0) < ($14 | 0)) {
      continue
     }
     break;
    };
    $14 = $17;
   }
   $10 = $12 - $18 | 0;
   $11 = ($6 | 0) == ($8 | 0) & $5 >>> 0 > $7 >>> 0 | $6 >>> 0 > $8 >>> 0;
   $13 = $10 - $11 | 0;
   $11 = ($15 - (($12 >>> 0 < $18 >>> 0) + $20 | 0) | 0) - ($11 >>> 0 > $10 >>> 0) | 0;
   $10 = $11;
   block6 : {
    if (($10 | 0) < 0) {
     $13 = $12;
     $10 = $15;
     break block6;
    }
    $12 = $7;
    $7 = $7 - $5 | 0;
    $8 = $8 - (($5 >>> 0 > $12 >>> 0) + $6 | 0) | 0;
    if ($7 | $13 | ($8 | $10)) {
     break block6
    }
    __multf3($9 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    $3 = HEAP32[$9 + 56 >> 2];
    $4 = HEAP32[$9 + 60 >> 2];
    $7 = HEAP32[$9 + 48 >> 2];
    $8 = HEAP32[$9 + 52 >> 2];
    break block4;
   }
   if (($10 | 0) == 65535 | $10 >>> 0 < 65535) {
    while (1) {
     $1 = $8 >>> 31 | 0;
     $14 = $14 - 1 | 0;
     $15 = $8 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $8 = $15;
     $2 = $1;
     $1 = $10 << 1 | $13 >>> 31;
     $13 = $2 | $13 << 1;
     $10 = $1;
     if ($1 >>> 0 < 65536) {
      continue
     }
     break;
    }
   }
   $1 = $19 & 32768;
   if (($14 | 0) <= 0) {
    __multf3($9 - -64 | 0, $7, $8, $13, $10 & 65535 | ($1 | $14 + 120) << 16, 0, 0, 0, 1065811968);
    if ((global$9 | 0) != ($16 | 0)) {
     wasm2js_trap()
    }
    $3 = HEAP32[$9 + 72 >> 2];
    $4 = HEAP32[$9 + 76 >> 2];
    $7 = HEAP32[$9 + 64 >> 2];
    $8 = HEAP32[$9 + 68 >> 2];
    break block4;
   }
   $3 = $13;
   $4 = $10 & 65535 | ($1 | $14) << 16;
  }
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
  __stack_pointer = $9 + 128 | 0;
 }
 
 function __floatscan($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 148;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $9 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $6 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $11 = HEAP32[$1 + 44 >> 2];
   $13 = HEAP32[$1 + 48 >> 2];
   $14 = HEAP32[$1 + 52 >> 2];
   $16 = HEAP32[$1 + 56 >> 2];
   $17 = HEAP32[$1 + 60 >> 2];
   $15 = HEAP32[$1 + 64 >> 2];
   $18 = HEAP32[$1 + 68 >> 2];
   $19 = HEAP32[$1 + 72 >> 2];
   $28 = HEAP32[$1 + 76 >> 2];
   $30 = HEAP32[$1 + 80 >> 2];
   $20 = HEAP32[$1 + 84 >> 2];
   $21 = HEAP32[$1 + 88 >> 2];
   $22 = HEAP32[$1 + 92 >> 2];
   $25 = HEAP32[$1 + 96 >> 2];
   $32 = HEAP32[$1 + 100 >> 2];
   $23 = HEAP32[$1 + 104 >> 2];
   $27 = HEAP32[$1 + 108 >> 2];
   $36 = HEAP32[$1 + 112 >> 2];
   $31 = HEAP32[$1 + 116 >> 2];
   $29 = HEAP32[$1 + 120 >> 2];
   $33 = HEAP32[$1 + 124 >> 2];
   $34 = HEAP32[$1 + 128 >> 2];
   $37 = HEAP32[$1 + 132 >> 2];
   $38 = HEAP32[$1 + 136 >> 2];
   $39 = HEAP32[$1 + 140 >> 2];
   $35 = HEAP32[$1 + 144 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $24 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $25 = __stack_pointer - 48 | 0;
   __stack_pointer = $25;
   $12 = $2 >>> 0 > 2;
  }
  block2 : {
   block9 : {
    block : {
     if (!global$9) {
      if ($12) {
       break block
      }
      $2 = $2 << 2;
      $12 = $2 + 28188 | 0;
      $32 = HEAP32[$12 >> 2];
      $2 = $2 + 28176 | 0;
      $13 = HEAP32[$2 >> 2];
     }
     while (1) {
      if (!global$9) {
       $2 = HEAP32[$1 + 4 >> 2];
       $12 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
      }
      block1 : {
       if (!($12 ? global$9 : 1)) {
        $12 = $2 + 1 | 0;
        HEAP32[$1 + 4 >> 2] = $12;
        $2 = HEAPU8[$2 | 0];
        break block1;
       }
       if (!global$9 | !$24) {
        $7 = __shgetc($1);
        if ((global$9 | 0) == 1) {
         break block2
        }
        $2 = $7;
       }
      }
      if (!global$9) {
       $12 = __isspace($2);
       if ($12) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      $5 = $2 - 43 | 0;
      $12 = 1;
     }
     block4 : {
      if (!global$9) {
       block3 : {
        switch ($5 | 0) {
        case 0:
        case 2:
         break block3;
        default:
         break block4;
        };
       }
       $12 = ($2 | 0) == 45 ? -1 : 1;
       $2 = HEAP32[$1 + 4 >> 2];
       $5 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
       if ($5) {
        $5 = $2 + 1 | 0;
        HEAP32[$1 + 4 >> 2] = $5;
        $2 = HEAPU8[$2 | 0];
        break block4;
       }
      }
      if (!global$9 | ($24 | 0) == 1) {
       $7 = __shgetc($1);
       $26 = 1;
       if ((global$9 | 0) == 1) {
        break block2
       }
       $2 = $7;
      }
     }
     $5 = global$9 ? $5 : ($2 & -33) == 73;
     block7 : {
      block5 : {
       if ($5 | (global$9 | 0) == 2) {
        while (1) {
         if (!global$9) {
          $2 = ($9 | 0) == 7;
          if ($2) {
           break block5
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $5 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
         }
         block6 : {
          if (!($5 ? global$9 : 1)) {
           $5 = $2 + 1 | 0;
           HEAP32[$1 + 4 >> 2] = $5;
           $2 = HEAPU8[$2 | 0];
           break block6;
          }
          if (!global$9 | ($24 | 0) == 2) {
           $7 = __shgetc($1);
           $26 = 2;
           if ((global$9 | 0) == 1) {
            break block2
           }
           $2 = $7;
          }
         }
         if (!global$9) {
          $7 = $9 + 1050 | 0;
          $9 = $9 + 1 | 0;
          $29 = $2 | 32;
          $5 = ($29 | 0) == HEAP8[$7 | 0];
          if ($5) {
           continue
          }
         }
         break;
        }
       }
       if (!global$9) {
        $5 = ($9 | 0) != 3;
        if ($5) {
         $7 = ($9 | 0) == 8;
         $5 = $7;
         if ($5) {
          break block5
         }
         $5 = !$3;
         if ($5) {
          break block7
         }
         $5 = $9 >>> 0 < 4;
         if ($5) {
          break block7
         }
         $2 = $7;
         if ($2) {
          break block5
         }
        }
        $8 = HEAP32[$1 + 112 >> 2];
        $2 = HEAP32[$1 + 116 >> 2];
        $6 = $2;
        if (($2 | 0) > 0 | ($2 | 0) >= 0) {
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
        }
        $2 = !$3;
        if ($2) {
         break block5
        }
        $2 = $9 >>> 0 < 4;
        if ($2) {
         break block5
        }
        $2 = ($6 | 0) < 0;
        while (1) {
         if (!$2) {
          HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
         }
         $9 = $9 - 1 | 0;
         $3 = $9 >>> 0 > 3;
         if ($3) {
          continue
         }
         break;
        };
       }
      }
      if (!global$9) {
       $8 = 0;
       $6 = 0;
       $3 = __stack_pointer - 16 | 0;
       __stack_pointer = $3;
       $14 = (wasm2js_scratch_store_f32(Math_fround(Math_fround($12 | 0) * Math_fround(Infinity))), wasm2js_scratch_load_i32(2));
       $1 = $14 & 8388607;
       $2 = $14 >>> 23 | 0;
       $15 = $2 & 255;
       block8 : {
        if ($15) {
         if (($15 | 0) != 255) {
          $8 = $1 << 25;
          $6 = $1 >>> 7 | 0;
          $2 = ($2 & 255) + 16256 | 0;
          break block8;
         }
         $8 = $1 << 25;
         $6 = $1 >>> 7 | 0;
         $2 = 32767;
         break block8;
        }
        $2 = 0;
        if (!$1) {
         break block8
        }
        $2 = $1;
        $1 = Math_clz32($1);
        __ashlti3($3, $2, 0, 0, 0, $1 + 81 | 0);
        $8 = HEAP32[$3 + 8 >> 2];
        $6 = HEAP32[$3 + 12 >> 2] ^ 65536;
        $10 = HEAP32[$3 >> 2];
        $11 = HEAP32[$3 + 4 >> 2];
        $2 = 16265 - $1 | 0;
       }
       HEAP32[$25 >> 2] = $10;
       HEAP32[$25 + 4 >> 2] = $11;
       $1 = $25;
       HEAP32[$1 + 8 >> 2] = $8;
       HEAP32[$1 + 12 >> 2] = $6 | ($14 & -2147483648 | $2 << 16);
       __stack_pointer = $3 + 16 | 0;
       $10 = HEAP32[$1 + 8 >> 2];
       $11 = HEAP32[$1 + 12 >> 2];
       $8 = HEAP32[$1 >> 2];
       $6 = HEAP32[$1 + 4 >> 2];
       break block9;
      }
     }
     block21 : {
      block13 : {
       block22 : {
        block14 : {
         block11 : {
          block10 : {
           if (!global$9) {
            if ($9) {
             break block10
            }
            $9 = 0;
            $5 = ($2 & -33) != 78;
            if ($5) {
             break block10
            }
           }
           while (1) {
            if (!global$9) {
             $2 = ($9 | 0) == 2;
             if ($2) {
              break block11
             }
             $2 = HEAP32[$1 + 4 >> 2];
             $5 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
            }
            block12 : {
             if (!($5 ? global$9 : 1)) {
              $5 = $2 + 1 | 0;
              HEAP32[$1 + 4 >> 2] = $5;
              $2 = HEAPU8[$2 | 0];
              break block12;
             }
             if (!global$9 | ($24 | 0) == 3) {
              $7 = __shgetc($1);
              $26 = 3;
              if ((global$9 | 0) == 1) {
               break block2
              }
              $2 = $7;
             }
            }
            if (!global$9) {
             $7 = $9 + 5119 | 0;
             $9 = $9 + 1 | 0;
             $29 = $2 | 32;
             $5 = ($29 | 0) == HEAP8[$7 | 0];
             if ($5) {
              continue
             }
            }
            break;
           };
          }
          if (!global$9) {
           switch ($9 | 0) {
           case 3:
            break block11;
           case 0:
            break block13;
           default:
            break block14;
           }
          }
         }
         if (!global$9) {
          $2 = HEAP32[$1 + 4 >> 2];
          $12 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
         }
         block15 : {
          if (!($12 ? global$9 : 1)) {
           $12 = $2 + 1 | 0;
           HEAP32[$1 + 4 >> 2] = $12;
           $2 = HEAPU8[$2 | 0];
           break block15;
          }
          if (!global$9 | ($24 | 0) == 4) {
           $7 = __shgetc($1);
           $26 = 4;
           if ((global$9 | 0) == 1) {
            break block2
           }
           $2 = $7;
          }
         }
         if (!global$9) {
          block16 : {
           $2 = ($2 | 0) == 40;
           if ($2) {
            $9 = 1;
            break block16;
           }
           $10 = 0;
           $11 = 2147450880;
           if (HEAP32[$1 + 116 >> 2] < 0) {
            break block9
           }
           HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
           break block9;
          }
         }
         while (1) {
          if (!global$9) {
           $2 = HEAP32[$1 + 4 >> 2];
           $12 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
          }
          block17 : {
           if (!($12 ? global$9 : 1)) {
            $12 = $2 + 1 | 0;
            HEAP32[$1 + 4 >> 2] = $12;
            $2 = HEAPU8[$2 | 0];
            break block17;
           }
           if (!global$9 | ($24 | 0) == 5) {
            $7 = __shgetc($1);
            $26 = 5;
            if ((global$9 | 0) == 1) {
             break block2
            }
            $2 = $7;
           }
          }
          if (!global$9) {
           $5 = $2 - 65 | 0;
           block19 : {
            $12 = $2 - 48 >>> 0 < 10;
            block18 : {
             if ($12) {
              break block18
             }
             $12 = $5 >>> 0 < 26;
             if ($12) {
              break block18
             }
             $5 = $2 - 97 | 0;
             $12 = ($2 | 0) == 95;
             if ($12) {
              break block18
             }
             $12 = $5 >>> 0 >= 26;
             if ($12) {
              break block19
             }
            }
            $9 = $9 + 1 | 0;
            continue;
           }
          }
          break;
         };
         if (!global$9) {
          $10 = 0;
          $11 = 2147450880;
          if (($2 | 0) == 41) {
           break block9
          }
          $8 = HEAP32[$1 + 112 >> 2];
          $2 = HEAP32[$1 + 116 >> 2];
          $6 = $2;
          if (($2 | 0) > 0 | ($2 | 0) >= 0) {
           HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
          }
          block20 : {
           if ($3) {
            if ($9) {
             break block20
            }
            break block21;
           }
           $2 = __tls_base;
           HEAP32[$2 >> 2] = 28;
           $8 = 0;
           $6 = 0;
           break block22;
          }
          while (1) {
           if (($6 | 0) > 0 | ($6 | 0) >= 0) {
            HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
           }
           $9 = $9 - 1 | 0;
           if ($9) {
            continue
           }
           break;
          };
          break block21;
         }
        }
        if (!global$9) {
         $10 = HEAP32[$1 + 112 >> 2];
         $2 = HEAP32[$1 + 116 >> 2];
         $11 = $2;
         if (($2 | 0) > 0 | ($2 | 0) >= 0) {
          HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
         }
         $2 = __tls_base;
         HEAP32[$2 >> 2] = 28;
        }
       }
       if (!global$9) {
        __shlim($1, 0, 0);
        break block;
       }
      }
      $5 = global$9 ? $5 : ($2 | 0) != 48;
      block23 : {
       if (!global$9) {
        if ($5) {
         break block23
        }
        $9 = HEAP32[$1 + 4 >> 2];
        $5 = ($9 | 0) != HEAP32[$1 + 104 >> 2];
       }
       block24 : {
        if (!($5 ? global$9 : 1)) {
         HEAP32[$1 + 4 >> 2] = $9 + 1;
         $7 = HEAPU8[$9 | 0];
         break block24;
        }
        if (!global$9 | ($24 | 0) == 6) {
         $7 = __shgetc($1);
         $26 = 6;
         if ((global$9 | 0) == 1) {
          break block2
         }
        } else {
         $7 = $5
        }
       }
       $5 = global$9 ? $7 : ($7 & -33) == 88;
       if ($5 | (global$9 | 0) == 2) {
        if (!global$9) {
         $4 = $25 + 16 | 0;
         $9 = $13;
         $5 = __stack_pointer - 432 | 0;
         __stack_pointer = $5;
         $2 = HEAP32[$1 + 4 >> 2];
         $13 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
        }
        block25 : {
         if (!($13 ? global$9 : 1)) {
          $13 = $2 + 1 | 0;
          HEAP32[$1 + 4 >> 2] = $13;
          $2 = HEAPU8[$2 | 0];
          break block25;
         }
         if (!global$9 | ($24 | 0) == 7) {
          $7 = __shgetc($1);
          $26 = 7;
          if ((global$9 | 0) == 1) {
           break block2
          }
          $2 = $7;
         }
        }
        block26 : {
         block28 : {
          while (1) {
           block27 : {
            if (!global$9) {
             if (($2 | 0) != 48) {
              $13 = ($2 | 0) != 46;
              if ($13) {
               break block26
              }
              $2 = HEAP32[$1 + 4 >> 2];
              $13 = ($2 | 0) == HEAP32[$1 + 104 >> 2];
              if ($13) {
               break block27
              }
              $13 = $2 + 1 | 0;
              HEAP32[$1 + 4 >> 2] = $13;
              $2 = HEAPU8[$2 | 0];
              break block28;
             }
             $2 = HEAP32[$1 + 4 >> 2];
             $13 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
            }
            $33 = global$9 ? $33 : $13;
            if (global$9 ? 0 : $33 | (global$9 | 0) == 2) {
             $31 = 1;
             $13 = $2 + 1 | 0;
             HEAP32[$1 + 4 >> 2] = $13;
             $2 = HEAPU8[$2 | 0];
             continue;
            }
            if (!$33 | (global$9 | 0) == 2) {
             $31 = global$9 ? $31 : 1;
             if (!global$9 | ($24 | 0) == 8) {
              $7 = __shgetc($1);
              $26 = 8;
              if ((global$9 | 0) == 1) {
               break block2
              }
              $2 = $7;
             }
             if (!global$9) {
              continue
             }
            }
           }
           break;
          };
          if (!global$9 | ($24 | 0) == 9) {
           $7 = __shgetc($1);
           $26 = 9;
           if ((global$9 | 0) == 1) {
            break block2
           }
           $2 = $7;
          }
         }
         if (!global$9) {
          $13 = ($2 | 0) != 48;
          if ($13) {
           $30 = 1;
           break block26;
          }
         }
         while (1) {
          if (!global$9) {
           $2 = $15;
           $15 = $2 - 1 | 0;
           $18 = $18 - !$2 | 0;
           $2 = HEAP32[$1 + 4 >> 2];
           $13 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
          }
          block29 : {
           if (!($13 ? global$9 : 1)) {
            $13 = $2 + 1 | 0;
            HEAP32[$1 + 4 >> 2] = $13;
            $2 = HEAPU8[$2 | 0];
            break block29;
           }
           if (!global$9 | ($24 | 0) == 10) {
            $7 = __shgetc($1);
            $26 = 10;
            if ((global$9 | 0) == 1) {
             break block2
            }
            $2 = $7;
           }
          }
          if (!global$9) {
           $13 = ($2 | 0) == 48;
           if ($13) {
            continue
           }
          }
          break;
         };
         if (!global$9) {
          $31 = 1;
          $30 = 1;
         }
        }
        $7 = global$9;
        $10 = $7 ? $10 : 0;
        $11 = $7 ? $11 : 1073676288;
        while (1) {
         block31 : {
          if (!global$9) {
           $13 = $2;
           block32 : {
            block30 : {
             $20 = $2 - 48 | 0;
             $28 = $20 >>> 0 < 10;
             if ($28) {
              break block30
             }
             $13 = $2 | 32;
             $29 = $13 - 97 >>> 0 > 5;
             $7 = ($2 | 0) != 46;
             $28 = $29 & $7;
             if ($28) {
              break block31
             }
             $28 = $7;
             if ($7) {
              break block30
             }
             if ($30) {
              break block31
             }
             $30 = 1;
             $15 = $8;
             $18 = $6;
             break block32;
            }
            $2 = ($2 | 0) > 57 ? $13 - 87 | 0 : $20;
            block33 : {
             if (($6 | 0) <= 0 & $8 >>> 0 <= 7 | ($6 | 0) < 0) {
              $19 = $2 + ($19 << 4) | 0;
              break block33;
             }
             if (!$6 & $8 >>> 0 <= 28) {
              __floatsitf($5 + 48 | 0, $2);
              __multf3($5 + 32 | 0, $23, $27, $10, $11, 0, 0, 0, 1073414144);
              $23 = HEAP32[$5 + 32 >> 2];
              $27 = HEAP32[$5 + 36 >> 2];
              $10 = HEAP32[$5 + 40 >> 2];
              $11 = HEAP32[$5 + 44 >> 2];
              __multf3($5 + 16 | 0, HEAP32[$5 + 48 >> 2], HEAP32[$5 + 52 >> 2], HEAP32[$5 + 56 >> 2], HEAP32[$5 + 60 >> 2], $23, $27, $10, $11);
              __addtf3($5, HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 28 >> 2], $14, $16, $21, $22);
              $21 = HEAP32[$5 + 8 >> 2];
              $22 = HEAP32[$5 + 12 >> 2];
              $14 = HEAP32[$5 >> 2];
              $16 = HEAP32[$5 + 4 >> 2];
              break block33;
             }
             if ($17 | !$2) {
              break block33
             }
             __multf3($5 + 80 | 0, $23, $27, $10, $11, 0, 0, 0, 1073610752);
             __addtf3($5 - -64 | 0, HEAP32[$5 + 80 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 92 >> 2], $14, $16, $21, $22);
             $17 = 1;
             $21 = HEAP32[$5 + 72 >> 2];
             $22 = HEAP32[$5 + 76 >> 2];
             $14 = HEAP32[$5 + 64 >> 2];
             $16 = HEAP32[$5 + 68 >> 2];
            }
            $8 = $8 + 1 | 0;
            $6 = $8 ? $6 : $6 + 1 | 0;
            $31 = 1;
           }
           $2 = HEAP32[$1 + 4 >> 2];
           $13 = ($2 | 0) != HEAP32[$1 + 104 >> 2];
          }
          $34 = global$9 ? $34 : $13;
          if (global$9 ? 0 : $34 | (global$9 | 0) == 2) {
           $13 = $2 + 1 | 0;
           HEAP32[$1 + 4 >> 2] = $13;
           $2 = HEAPU8[$2 | 0];
           continue;
          }
          if (!$34 | (global$9 | 0) == 2) {
           if (!global$9 | ($24 | 0) == 11) {
            $7 = __shgetc($1);
            $26 = 11;
            if ((global$9 | 0) == 1) {
             break block2
            }
            $2 = $7;
           }
           if (!global$9) {
            continue
           }
          }
         }
         break;
        };
        $13 = global$9 ? $13 : !$31;
        block36 : {
         if (!global$9) {
          if ($13) {
           $2 = HEAP32[$1 + 116 >> 2];
           if (($2 | 0) > 0) {
            $2 = 1
           } else {
            $2 = ($2 | 0) >= 0
           }
           block35 : {
            block34 : {
             if ($2) {
              $2 = HEAP32[$1 + 4 >> 2];
              $32 = $2 - 1 | 0;
              HEAP32[$1 + 4 >> 2] = $32;
              $3 = !$3;
              if ($3) {
               break block34
              }
              HEAP32[$1 + 4 >> 2] = $2 - 2;
              $3 = !$30;
              if ($3) {
               break block35
              }
              $2 = $2 - 3 | 0;
              HEAP32[$1 + 4 >> 2] = $2;
              break block35;
             }
             if ($3) {
              break block35
             }
            }
            __shlim($1, 0, 0);
           }
           wasm2js_scratch_store_f64(0.0);
           $8 = wasm2js_scratch_load_i32(1) | 0;
           $1 = wasm2js_scratch_load_i32(0) | 0;
           wasm2js_scratch_store_f64(+($12 | 0));
           $6 = wasm2js_scratch_load_i32(1) | 0;
           wasm2js_scratch_load_i32(0) | 0;
           wasm2js_scratch_store_i32(0, $1 | 0);
           wasm2js_scratch_store_i32(1, $8 & 2147483647 | $6 & -2147483648);
           $1 = $5 + 96 | 0;
           __extenddftf2($1, +wasm2js_scratch_load_f64());
           $14 = HEAP32[$5 + 96 >> 2];
           $16 = HEAP32[$5 + 100 >> 2];
           $8 = HEAP32[$5 + 104 >> 2];
           $6 = HEAP32[$5 + 108 >> 2];
           break block36;
          }
          $13 = ($6 | 0) <= 0 & $8 >>> 0 <= 7 | ($6 | 0) < 0;
          if ($13) {
           $10 = $8;
           $11 = $6;
           while (1) {
            $19 = $19 << 4;
            $7 = $11;
            $10 = $10 + 1 | 0;
            $7 = $10 ? $7 : $7 + 1 | 0;
            $11 = $7;
            $13 = ($10 | 0) != 8 | ($7 | 0) != 0;
            if ($13) {
             continue
            }
            break;
           };
          }
          $2 = ($2 & -33) == 80;
         }
         block37 : {
          block39 : {
           block38 : {
            if ((global$9 | 0) == 2 | $2) {
             if (!global$9 | ($24 | 0) == 12) {
              $7 = scanexp($1, $3);
              $40 = i64toi32_i32$HIGH_BITS;
              $26 = 12;
              if ((global$9 | 0) == 1) {
               break block2
              }
              $11 = $40;
              $10 = $7;
             }
             if (!global$9) {
              $2 = ($10 | 0) != 0 | ($11 | 0) != -2147483648;
              if ($2) {
               break block37
              }
              if ($3) {
               $10 = HEAP32[$1 + 112 >> 2];
               $2 = HEAP32[$1 + 116 >> 2];
               $11 = $2;
               $2 = ($2 | 0) > 0 | ($2 | 0) >= 0;
               if ($2) {
                break block38
               }
               break block39;
              }
              $14 = 0;
              $16 = 0;
              __shlim($1, 0, 0);
              $8 = 0;
              $6 = 0;
              break block36;
             }
            }
            if (!global$9) {
             $10 = 0;
             $11 = 0;
             $23 = HEAP32[$1 + 112 >> 2];
             $2 = HEAP32[$1 + 116 >> 2];
             $27 = $2;
             $2 = ($2 | 0) < 0;
             if ($2) {
              break block37
             }
            }
           }
           if (!global$9) {
            $2 = HEAP32[$1 + 4 >> 2] - 1 | 0;
            HEAP32[$1 + 4 >> 2] = $2;
           }
          }
          $7 = global$9;
          $10 = $7 ? $10 : 0;
          $11 = $7 ? $11 : 0;
         }
         if (!global$9) {
          if (!$19) {
           wasm2js_scratch_store_f64(0.0);
           $8 = wasm2js_scratch_load_i32(1) | 0;
           $1 = wasm2js_scratch_load_i32(0) | 0;
           wasm2js_scratch_store_f64(+($12 | 0));
           $6 = wasm2js_scratch_load_i32(1) | 0;
           wasm2js_scratch_load_i32(0) | 0;
           wasm2js_scratch_store_i32(0, $1 | 0);
           wasm2js_scratch_store_i32(1, $8 & 2147483647 | $6 & -2147483648);
           $1 = $5 + 112 | 0;
           __extenddftf2($1, +wasm2js_scratch_load_f64());
           $14 = HEAP32[$5 + 112 >> 2];
           $16 = HEAP32[$5 + 116 >> 2];
           $8 = HEAP32[$5 + 120 >> 2];
           $6 = HEAP32[$5 + 124 >> 2];
           break block36;
          }
          $1 = $30 ? $15 : $8;
          $6 = ($30 ? $18 : $6) << 2 | $1 >>> 30;
          $1 = $1 << 2;
          $7 = $1 + $10 | 0;
          $10 = $6 + $11 | 0;
          $10 = $1 >>> 0 > $7 >>> 0 ? $10 + 1 | 0 : $10;
          $8 = $7 - 32 | 0;
          $1 = 0 - $32 | 0;
          $6 = $10 - ($7 >>> 0 < 32) | 0;
          $10 = $6;
          if (($6 | 0) > 0) {
           $1 = 1
          } else {
           $1 = $1 >>> 0 < $8 >>> 0 & ($10 | 0) >= 0
          }
          if ($1) {
           HEAP32[__tls_base >> 2] = 68;
           __floatsitf($5 + 160 | 0, $12);
           __multf3($5 + 144 | 0, HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2], HEAP32[$5 + 168 >> 2], HEAP32[$5 + 172 >> 2], -1, -1, -1, 2147418111);
           $1 = $5 + 128 | 0;
           $10 = HEAP32[$5 + 152 >> 2];
           $11 = HEAP32[$5 + 156 >> 2];
           __multf3($1, HEAP32[$5 + 144 >> 2], HEAP32[$5 + 148 >> 2], $10, $11, -1, -1, -1, 2147418111);
           $14 = HEAP32[$5 + 128 >> 2];
           $16 = HEAP32[$5 + 132 >> 2];
           $8 = HEAP32[$5 + 136 >> 2];
           $6 = HEAP32[$5 + 140 >> 2];
           break block36;
          }
          $1 = $32 - 226 | 0;
          $10 = $1 >> 31;
          if (($6 | 0) >= ($10 | 0) & $1 >>> 0 <= $8 >>> 0 | ($6 | 0) > ($10 | 0)) {
           if (($19 | 0) >= 0) {
            while (1) {
             __addtf3($5 + 416 | 0, $14, $16, $21, $22, 0, 0, 0, -1073807360);
             $1 = __getf2($14, $16, $21, $22, 1073610752);
             $1 = ($1 | 0) >= 0;
             __addtf3($5 + 400 | 0, $14, $16, $21, $22, $1 ? HEAP32[$5 + 416 >> 2] : $14, $1 ? HEAP32[$5 + 420 >> 2] : $16, $1 ? HEAP32[$5 + 424 >> 2] : $21, $1 ? HEAP32[$5 + 428 >> 2] : $22);
             $2 = $19 << 1;
             $19 = $2 | $1;
             $1 = $8;
             $8 = $1 - 1 | 0;
             $6 = $6 - !$1 | 0;
             $21 = HEAP32[$5 + 408 >> 2];
             $22 = HEAP32[$5 + 412 >> 2];
             $14 = HEAP32[$5 + 400 >> 2];
             $16 = HEAP32[$5 + 404 >> 2];
             if (($2 | 0) >= 0) {
              continue
             }
             break;
            }
           }
           $1 = $8 + (32 - $32 | 0) | 0;
           $6 = $1 >>> 0 < $8 >>> 0 ? $6 + 1 | 0 : $6;
           $1 = $1 >>> 0 < $9 >>> 0 & ($6 | 0) <= 0 | ($6 | 0) < 0 ? (($1 | 0) > 0 ? $1 : 0) : $9;
           block40 : {
            if ($1 >>> 0 >= 113) {
             __floatsitf($5 + 384 | 0, $12);
             $10 = HEAP32[$5 + 392 >> 2];
             $11 = HEAP32[$5 + 396 >> 2];
             $23 = HEAP32[$5 + 384 >> 2];
             $27 = HEAP32[$5 + 388 >> 2];
             $18 = 0;
             $15 = 0;
             break block40;
            }
            __extenddftf2($5 + 352 | 0, scalbn(1.0, 144 - $1 | 0));
            __floatsitf($5 + 336 | 0, $12);
            $23 = HEAP32[$5 + 336 >> 2];
            $27 = HEAP32[$5 + 340 >> 2];
            $10 = HEAP32[$5 + 344 >> 2];
            $11 = HEAP32[$5 + 348 >> 2];
            copysignl($5 + 368 | 0, HEAP32[$5 + 352 >> 2], HEAP32[$5 + 356 >> 2], HEAP32[$5 + 360 >> 2], HEAP32[$5 + 364 >> 2], $11);
            $37 = HEAP32[$5 + 376 >> 2];
            $38 = HEAP32[$5 + 380 >> 2];
            $18 = HEAP32[$5 + 372 >> 2];
            $15 = HEAP32[$5 + 368 >> 2];
           }
           $12 = (__letf2($14, $16, $21, $22, 0, 0, 0, 0) | 0) != 0;
           $1 = !($19 & 1) & ($12 & $1 >>> 0 < 32);
           $3 = $1 | $19;
           __floatunsitf($5 + 320 | 0, $3);
           __multf3($5 + 304 | 0, $23, $27, $10, $11, HEAP32[$5 + 320 >> 2], HEAP32[$5 + 324 >> 2], HEAP32[$5 + 328 >> 2], HEAP32[$5 + 332 >> 2]);
           __addtf3($5 + 272 | 0, HEAP32[$5 + 304 >> 2], HEAP32[$5 + 308 >> 2], HEAP32[$5 + 312 >> 2], HEAP32[$5 + 316 >> 2], $15, $18, $37, $38);
           __multf3($5 + 288 | 0, $23, $27, $10, $11, $1 ? 0 : $14, $1 ? 0 : $16, $1 ? 0 : $21, $1 ? 0 : $22);
           $23 = HEAP32[$5 + 280 >> 2];
           $27 = HEAP32[$5 + 284 >> 2];
           __addtf3($5 + 256 | 0, HEAP32[$5 + 288 >> 2], HEAP32[$5 + 292 >> 2], HEAP32[$5 + 296 >> 2], HEAP32[$5 + 300 >> 2], HEAP32[$5 + 272 >> 2], HEAP32[$5 + 276 >> 2], $23, $27);
           $10 = HEAP32[$5 + 256 >> 2];
           $11 = HEAP32[$5 + 260 >> 2];
           __subtf3($5 + 240 | 0, $10, $11, HEAP32[$5 + 264 >> 2], HEAP32[$5 + 268 >> 2], $15, $18, $37, $38);
           $2 = HEAP32[$5 + 240 >> 2];
           $6 = HEAP32[$5 + 244 >> 2];
           $21 = HEAP32[$5 + 248 >> 2];
           $22 = HEAP32[$5 + 252 >> 2];
           if (!__letf2($2, $6, $21, $22, 0, 0, 0, 0)) {
            HEAP32[__tls_base >> 2] = 68
           }
           $1 = $5 + 224 | 0;
           $7 = $2;
           $2 = $8;
           scalbnl($1, $7, $6, $21, $22, $2);
           $14 = HEAP32[$5 + 224 >> 2];
           $16 = HEAP32[$5 + 228 >> 2];
           $8 = HEAP32[$5 + 232 >> 2];
           $6 = HEAP32[$5 + 236 >> 2];
           break block36;
          }
          HEAP32[__tls_base >> 2] = 68;
          __floatsitf($5 + 208 | 0, $12);
          __multf3($5 + 192 | 0, HEAP32[$5 + 208 >> 2], HEAP32[$5 + 212 >> 2], HEAP32[$5 + 216 >> 2], HEAP32[$5 + 220 >> 2], 0, 0, 0, 65536);
          $1 = $5 + 176 | 0;
          $10 = HEAP32[$5 + 200 >> 2];
          $11 = HEAP32[$5 + 204 >> 2];
          __multf3($1, HEAP32[$5 + 192 >> 2], HEAP32[$5 + 196 >> 2], $10, $11, 0, 0, 0, 65536);
          $14 = HEAP32[$5 + 176 >> 2];
          $16 = HEAP32[$5 + 180 >> 2];
          $8 = HEAP32[$5 + 184 >> 2];
          $6 = HEAP32[$5 + 188 >> 2];
         }
        }
        if (!global$9) {
         HEAP32[$4 >> 2] = $14;
         HEAP32[$4 + 4 >> 2] = $16;
         HEAP32[$4 + 8 >> 2] = $8;
         HEAP32[$4 + 12 >> 2] = $6;
         __stack_pointer = $5 + 432 | 0;
         $10 = HEAP32[$25 + 24 >> 2];
         $11 = HEAP32[$25 + 28 >> 2];
         $8 = HEAP32[$25 + 16 >> 2];
         $6 = HEAP32[$25 + 20 >> 2];
         break block9;
        }
       }
       if (!global$9) {
        $15 = HEAP32[$1 + 112 >> 2];
        $7 = HEAP32[$1 + 116 >> 2];
        $18 = $7;
        $5 = ($7 | 0) < 0;
        if ($5) {
         break block23
        }
        $5 = HEAP32[$1 + 4 >> 2] - 1 | 0;
        HEAP32[$1 + 4 >> 2] = $5;
       }
      }
      if (!global$9) {
       $29 = $25 + 32 | 0;
       $9 = $1;
       $19 = $12;
       $30 = $3;
       $5 = 0;
       $1 = __stack_pointer;
       $4 = $1 - 8976 | 0;
       __stack_pointer = $4;
       $31 = $32;
       $36 = 0 - $32 | 0;
       $39 = $36 - $13 | 0;
       $12 = 0;
      }
      block41 : {
       block43 : {
        while (1) {
         block42 : {
          if (!global$9) {
           if (($2 | 0) != 48) {
            $1 = ($2 | 0) != 46;
            if ($1) {
             break block41
            }
            $2 = HEAP32[$9 + 4 >> 2];
            $1 = ($2 | 0) == HEAP32[$9 + 104 >> 2];
            if ($1) {
             break block42
            }
            $1 = $2 + 1 | 0;
            HEAP32[$9 + 4 >> 2] = $1;
            $2 = HEAPU8[$2 | 0];
            break block43;
           }
           $2 = HEAP32[$9 + 4 >> 2];
           $1 = ($2 | 0) != HEAP32[$9 + 104 >> 2];
          }
          $35 = global$9 ? $35 : $1;
          if (global$9 ? 0 : $35 | (global$9 | 0) == 2) {
           $12 = 1;
           $1 = $2 + 1 | 0;
           HEAP32[$9 + 4 >> 2] = $1;
           $2 = HEAPU8[$2 | 0];
           continue;
          }
          if (!$35 | (global$9 | 0) == 2) {
           $12 = global$9 ? $12 : 1;
           if (!global$9 | ($24 | 0) == 13) {
            $7 = __shgetc($9);
            $26 = 13;
            if ((global$9 | 0) == 1) {
             break block2
            }
            $2 = $7;
           }
           if (!global$9) {
            continue
           }
          }
         }
         break;
        };
        if (!global$9 | ($24 | 0) == 14) {
         $7 = __shgetc($9);
         $26 = 14;
         if ((global$9 | 0) == 1) {
          break block2
         }
         $2 = $7;
        }
       }
       $1 = global$9 ? $1 : ($2 | 0) == 48;
       if ($1 | (global$9 | 0) == 2) {
        while (1) {
         if (!global$9) {
          $1 = $8;
          $8 = $1 - 1 | 0;
          $6 = $6 - !$1 | 0;
          $2 = HEAP32[$9 + 4 >> 2];
          $1 = ($2 | 0) != HEAP32[$9 + 104 >> 2];
         }
         block44 : {
          if (!($1 ? global$9 : 1)) {
           $1 = $2 + 1 | 0;
           HEAP32[$9 + 4 >> 2] = $1;
           $2 = HEAPU8[$2 | 0];
           break block44;
          }
          if (!global$9 | ($24 | 0) == 15) {
           $7 = __shgetc($9);
           $26 = 15;
           if ((global$9 | 0) == 1) {
            break block2
           }
           $2 = $7;
          }
         }
         if (!global$9) {
          $1 = ($2 | 0) == 48;
          if ($1) {
           continue
          }
         }
         break;
        };
        $12 = global$9 ? $12 : 1;
       }
       $28 = global$9 ? $28 : 1;
      }
      if (!global$9) {
       HEAP32[$4 + 784 >> 2] = 0;
       $3 = $2 - 48 | 0;
       $1 = ($2 | 0) == 46;
      }
      block55 : {
       block53 : {
        block52 : {
         block54 : {
          block48 : {
           if (global$9 | ($3 >>> 0 <= 9 | $1)) {
            while (1) {
             if (!global$9) {
              block47 : {
               if ($1 & 1) {
                if (!$28) {
                 $8 = $10;
                 $6 = $11;
                 $28 = 1;
                 break block47;
                }
                $1 = !$12;
                break block48;
               }
               $7 = $11;
               $10 = $10 + 1 | 0;
               $11 = $10 ? $7 : $7 + 1 | 0;
               if (($5 | 0) <= 2044) {
                $20 = ($2 | 0) == 48 ? $20 : $10;
                $1 = ($4 + 784 | 0) + ($5 << 2) | 0;
                HEAP32[$1 >> 2] = $17 ? (Math_imul(HEAP32[$1 >> 2], 10) + $2 | 0) - 48 | 0 : $3;
                $12 = 1;
                $2 = $17 + 1 | 0;
                $1 = ($2 | 0) == 9;
                $17 = $1 ? 0 : $2;
                $5 = $1 + $5 | 0;
                break block47;
               }
               if (($2 | 0) == 48) {
                break block47
               }
               HEAP32[$4 + 8960 >> 2] = HEAP32[$4 + 8960 >> 2] | 1;
               $20 = 18396;
              }
              $2 = HEAP32[$9 + 4 >> 2];
              $1 = ($2 | 0) != HEAP32[$9 + 104 >> 2];
             }
             block49 : {
              if (!($1 ? global$9 : 1)) {
               $1 = $2 + 1 | 0;
               HEAP32[$9 + 4 >> 2] = $1;
               $2 = HEAPU8[$2 | 0];
               break block49;
              }
              if (!global$9 | ($24 | 0) == 16) {
               $7 = __shgetc($9);
               $26 = 16;
               if ((global$9 | 0) == 1) {
                break block2
               }
               $2 = $7;
              }
             }
             if (!global$9) {
              $1 = ($2 | 0) == 46;
              $3 = $2 - 48 | 0;
              if ($1 | $3 >>> 0 < 10) {
               continue
              }
             }
             break;
            }
           }
           if (!global$9) {
            $8 = $28 ? $8 : $10;
            $6 = $28 ? $6 : $11;
            $1 = !$12;
           }
           block50 : {
            if (!global$9) {
             if ($1) {
              break block50
             }
             $1 = ($2 & -33) != 69;
             if ($1) {
              break block50
             }
            }
            if (!global$9 | ($24 | 0) == 17) {
             $7 = scanexp($9, $30);
             $40 = i64toi32_i32$HIGH_BITS;
             $26 = 17;
             if ((global$9 | 0) == 1) {
              break block2
             }
             $18 = $40;
             $15 = $7;
            }
            if (!global$9) {
             block51 : {
              if ($15 | ($18 | 0) != -2147483648) {
               break block51
              }
              if (!$30) {
               break block52
              }
              $15 = 0;
              $18 = 0;
              if (HEAP32[$9 + 116 >> 2] < 0) {
               break block51
              }
              HEAP32[$9 + 4 >> 2] = HEAP32[$9 + 4 >> 2] - 1;
             }
             $6 = $6 + $18 | 0;
             $8 = $8 + $15 | 0;
             $6 = $8 >>> 0 < $15 >>> 0 ? $6 + 1 | 0 : $6;
             break block53;
            }
           }
           if (!global$9) {
            $1 = !$12;
            if (($2 | 0) < 0) {
             break block54
            }
           }
          }
          if (!global$9) {
           if (HEAP32[$9 + 116 >> 2] < 0) {
            break block54
           }
           HEAP32[$9 + 4 >> 2] = HEAP32[$9 + 4 >> 2] - 1;
          }
         }
         if (!global$9) {
          if (!$1) {
           break block53
          }
          HEAP32[__tls_base >> 2] = 28;
         }
        }
        if (!global$9) {
         $10 = 0;
         $11 = 0;
         __shlim($9, 0, 0);
         $8 = 0;
         $6 = 0;
         break block55;
        }
       }
       if (!global$9) {
        $1 = HEAP32[$4 + 784 >> 2];
        if (!$1) {
         wasm2js_scratch_store_f64(0.0);
         $1 = wasm2js_scratch_load_i32(1) | 0;
         $3 = wasm2js_scratch_load_i32(0) | 0;
         wasm2js_scratch_store_f64(+($19 | 0));
         $2 = wasm2js_scratch_load_i32(1) | 0;
         wasm2js_scratch_load_i32(0) | 0;
         wasm2js_scratch_store_i32(0, $3 | 0);
         wasm2js_scratch_store_i32(1, $1 & 2147483647 | $2 & -2147483648);
         __extenddftf2($4, +wasm2js_scratch_load_f64());
         $10 = HEAP32[$4 >> 2];
         $11 = HEAP32[$4 + 4 >> 2];
         $8 = HEAP32[$4 + 8 >> 2];
         $6 = HEAP32[$4 + 12 >> 2];
         break block55;
        }
        if (!($10 >>> 0 > 9 & ($11 | 0) >= 0 | ($11 | 0) > 0 | (($8 | 0) != ($10 | 0) | ($6 | 0) != ($11 | 0)) | ($1 >>> $13 | 0 ? $13 >>> 0 <= 30 : 0))) {
         __floatsitf($4 + 48 | 0, $19);
         __floatunsitf($4 + 32 | 0, $1);
         __multf3($4 + 16 | 0, HEAP32[$4 + 48 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2]);
         $10 = HEAP32[$4 + 16 >> 2];
         $11 = HEAP32[$4 + 20 >> 2];
         $8 = HEAP32[$4 + 24 >> 2];
         $6 = HEAP32[$4 + 28 >> 2];
         break block55;
        }
        $1 = $36 >>> 1 | 0;
        if ($1 >>> 0 < $8 >>> 0 & ($6 | 0) >= 0 | ($6 | 0) > 0) {
         HEAP32[__tls_base >> 2] = 68;
         __floatsitf($4 + 96 | 0, $19);
         __multf3($4 + 80 | 0, HEAP32[$4 + 96 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 104 >> 2], HEAP32[$4 + 108 >> 2], -1, -1, -1, 2147418111);
         __multf3($4 - -64 | 0, HEAP32[$4 + 80 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 92 >> 2], -1, -1, -1, 2147418111);
         $10 = HEAP32[$4 + 64 >> 2];
         $11 = HEAP32[$4 + 68 >> 2];
         $8 = HEAP32[$4 + 72 >> 2];
         $6 = HEAP32[$4 + 76 >> 2];
         break block55;
        }
        $1 = $31 - 226 | 0;
        $2 = $8 >>> 0 < $1 >>> 0;
        $1 = $1 >> 31;
        if ($2 & ($6 | 0) <= ($1 | 0) | ($1 | 0) > ($6 | 0)) {
         HEAP32[__tls_base >> 2] = 68;
         __floatsitf($4 + 144 | 0, $19);
         __multf3($4 + 128 | 0, HEAP32[$4 + 144 >> 2], HEAP32[$4 + 148 >> 2], HEAP32[$4 + 152 >> 2], HEAP32[$4 + 156 >> 2], 0, 0, 0, 65536);
         __multf3($4 + 112 | 0, HEAP32[$4 + 128 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 136 >> 2], HEAP32[$4 + 140 >> 2], 0, 0, 0, 65536);
         $10 = HEAP32[$4 + 112 >> 2];
         $11 = HEAP32[$4 + 116 >> 2];
         $8 = HEAP32[$4 + 120 >> 2];
         $6 = HEAP32[$4 + 124 >> 2];
         break block55;
        }
        if ($17) {
         if (($17 | 0) <= 8) {
          $1 = ($4 + 784 | 0) + ($5 << 2) | 0;
          $9 = HEAP32[$1 >> 2];
          while (1) {
           $9 = Math_imul($9, 10);
           $17 = $17 + 1 | 0;
           if (($17 | 0) != 9) {
            continue
           }
           break;
          };
          HEAP32[$1 >> 2] = $9;
         }
         $5 = $5 + 1 | 0;
        }
        $17 = $8;
        block57 : {
         if ($8 >>> 0 > 17 & ($6 | 0) >= 0 | ($6 | 0) > 0 | ($20 | 0) >= 9 | ($8 | 0) < ($20 | 0)) {
          break block57
         }
         if (!$6 & ($8 | 0) == 9) {
          __floatsitf($4 + 192 | 0, $19);
          __floatunsitf($4 + 176 | 0, HEAP32[$4 + 784 >> 2]);
          __multf3($4 + 160 | 0, HEAP32[$4 + 192 >> 2], HEAP32[$4 + 196 >> 2], HEAP32[$4 + 200 >> 2], HEAP32[$4 + 204 >> 2], HEAP32[$4 + 176 >> 2], HEAP32[$4 + 180 >> 2], HEAP32[$4 + 184 >> 2], HEAP32[$4 + 188 >> 2]);
          $10 = HEAP32[$4 + 160 >> 2];
          $11 = HEAP32[$4 + 164 >> 2];
          $8 = HEAP32[$4 + 168 >> 2];
          $6 = HEAP32[$4 + 172 >> 2];
          break block55;
         }
         if (($6 | 0) <= 0 & $8 >>> 0 <= 8 | ($6 | 0) < 0) {
          __floatsitf($4 + 272 | 0, $19);
          __floatunsitf($4 + 256 | 0, HEAP32[$4 + 784 >> 2]);
          __multf3($4 + 240 | 0, HEAP32[$4 + 272 >> 2], HEAP32[$4 + 276 >> 2], HEAP32[$4 + 280 >> 2], HEAP32[$4 + 284 >> 2], HEAP32[$4 + 256 >> 2], HEAP32[$4 + 260 >> 2], HEAP32[$4 + 264 >> 2], HEAP32[$4 + 268 >> 2]);
          __floatsitf($4 + 224 | 0, HEAP32[(0 - $17 << 2) + 28176 >> 2]);
          __divtf3($4 + 208 | 0, HEAP32[$4 + 240 >> 2], HEAP32[$4 + 244 >> 2], HEAP32[$4 + 248 >> 2], HEAP32[$4 + 252 >> 2], HEAP32[$4 + 224 >> 2], HEAP32[$4 + 228 >> 2], HEAP32[$4 + 232 >> 2], HEAP32[$4 + 236 >> 2]);
          $10 = HEAP32[$4 + 208 >> 2];
          $11 = HEAP32[$4 + 212 >> 2];
          $8 = HEAP32[$4 + 216 >> 2];
          $6 = HEAP32[$4 + 220 >> 2];
          break block55;
         }
         $1 = (Math_imul($17, -3) + $13 | 0) + 27 | 0;
         $2 = HEAP32[$4 + 784 >> 2];
         if ($2 >>> $1 | 0 ? ($1 | 0) <= 30 : 0) {
          break block57
         }
         __floatsitf($4 + 352 | 0, $19);
         __floatunsitf($4 + 336 | 0, $2);
         __multf3($4 + 320 | 0, HEAP32[$4 + 352 >> 2], HEAP32[$4 + 356 >> 2], HEAP32[$4 + 360 >> 2], HEAP32[$4 + 364 >> 2], HEAP32[$4 + 336 >> 2], HEAP32[$4 + 340 >> 2], HEAP32[$4 + 344 >> 2], HEAP32[$4 + 348 >> 2]);
         __floatsitf($4 + 304 | 0, HEAP32[($17 << 2) + 28104 >> 2]);
         __multf3($4 + 288 | 0, HEAP32[$4 + 320 >> 2], HEAP32[$4 + 324 >> 2], HEAP32[$4 + 328 >> 2], HEAP32[$4 + 332 >> 2], HEAP32[$4 + 304 >> 2], HEAP32[$4 + 308 >> 2], HEAP32[$4 + 312 >> 2], HEAP32[$4 + 316 >> 2]);
         $10 = HEAP32[$4 + 288 >> 2];
         $11 = HEAP32[$4 + 292 >> 2];
         $8 = HEAP32[$4 + 296 >> 2];
         $6 = HEAP32[$4 + 300 >> 2];
         break block55;
        }
        while (1) {
         $1 = $5;
         $5 = $1 - 1 | 0;
         if (!HEAP32[($4 + 784 | 0) + ($5 << 2) >> 2]) {
          continue
         }
         break;
        };
        $20 = 0;
        $2 = ($17 | 0) % 9 | 0;
        block58 : {
         if (!$2) {
          $3 = 0;
          break block58;
         }
         $8 = ($6 | 0) < 0 ? $2 + 9 | 0 : $2;
         block59 : {
          if (!$1) {
           $3 = 0;
           $1 = 0;
           break block59;
          }
          $10 = HEAP32[(0 - $8 << 2) + 28176 >> 2];
          $6 = 1e9 / ($10 | 0) | 0;
          $2 = 0;
          $9 = 0;
          $3 = 0;
          while (1) {
           $12 = $4 + 784 | 0;
           $15 = $12 + ($9 << 2) | 0;
           $11 = HEAP32[$15 >> 2];
           $7 = ($11 >>> 0) / ($10 >>> 0) | 0;
           $2 = $7 + $2 | 0;
           HEAP32[$15 >> 2] = $2;
           $2 = !$2 & ($3 | 0) == ($9 | 0);
           $3 = $2 ? $3 + 1 & 2047 : $3;
           $17 = $2 ? $17 - 9 | 0 : $17;
           $2 = Math_imul($6, $11 - Math_imul($7, $10) | 0);
           $9 = $9 + 1 | 0;
           if (($9 | 0) != ($1 | 0)) {
            continue
           }
           break;
          };
          if (!$2) {
           break block59
          }
          HEAP32[($1 << 2) + $12 >> 2] = $2;
          $1 = $1 + 1 | 0;
         }
         $17 = ($17 - $8 | 0) + 9 | 0;
        }
        while (1) {
         $15 = ($4 + 784 | 0) + ($3 << 2) | 0;
         $11 = ($17 | 0) < 36;
         block60 : {
          while (1) {
           if (!$11 & (($17 | 0) != 36 | HEAPU32[$15 >> 2] >= 10384593)) {
            break block60
           }
           $5 = $1 + 2047 | 0;
           $12 = 0;
           while (1) {
            $2 = $1;
            $10 = $5 & 2047;
            $9 = ($4 + 784 | 0) + ($10 << 2) | 0;
            $1 = HEAP32[$9 >> 2];
            $7 = $1 >>> 3 | 0;
            $1 = $1 << 29;
            $8 = $1 + $12 | 0;
            $6 = $1 >>> 0 > $8 >>> 0 ? $7 + 1 | 0 : $7;
            if (!$6 & $8 >>> 0 < 1000000001) {
             $12 = 0
            } else {
             $1 = $8;
             $12 = __wasm_i64_udiv($1, $6, 1e9);
             $7 = __wasm_i64_mul($12, i64toi32_i32$HIGH_BITS, 1e9, 0);
             $8 = $1 - $7 | 0;
             $6 = $6 - (i64toi32_i32$HIGH_BITS + ($1 >>> 0 < $7 >>> 0) | 0) | 0;
            }
            HEAP32[$9 >> 2] = $8;
            $1 = ($3 | 0) == ($10 | 0) ? $2 : $6 | $8 ? $2 : $10;
            $8 = $2 - 1 & 2047;
            $1 = ($8 | 0) != ($10 | 0) ? $2 : $1;
            $5 = $10 - 1 | 0;
            if (($3 | 0) != ($10 | 0)) {
             continue
            }
            break;
           };
           $20 = $20 - 29 | 0;
           $1 = $2;
           if (!$12) {
            continue
           }
           break;
          };
          $3 = $3 - 1 & 2047;
          if (($1 | 0) == ($3 | 0)) {
           $2 = $4 + 784 | 0;
           $1 = $2 + (($1 + 2046 & 2047) << 2) | 0;
           HEAP32[$1 >> 2] = HEAP32[($8 << 2) + $2 >> 2] | HEAP32[$1 >> 2];
           $1 = $8;
          }
          $17 = $17 + 9 | 0;
          HEAP32[($4 + 784 | 0) + ($3 << 2) >> 2] = $12;
          continue;
         }
         break;
        };
        block64 : {
         label25 : while (1) {
          $2 = $1 + 1 & 2047;
          $10 = ($4 + 784 | 0) + (($1 - 1 & 2047) << 2) | 0;
          while (1) {
           $8 = ($17 | 0) > 45 ? 9 : 1;
           block63 : {
            while (1) {
             $12 = $3;
             $9 = 0;
             block62 : {
              while (1) {
               block61 : {
                $3 = $9 + $12 & 2047;
                if (($3 | 0) == ($1 | 0)) {
                 break block61
                }
                $3 = HEAP32[($4 + 784 | 0) + ($3 << 2) >> 2];
                $6 = HEAP32[($9 << 2) + 28128 >> 2];
                if ($3 >>> 0 < $6 >>> 0) {
                 break block61
                }
                if ($3 >>> 0 > $6 >>> 0) {
                 break block62
                }
                $9 = $9 + 1 | 0;
                if (($9 | 0) != 4) {
                 continue
                }
               }
               break;
              };
              if (($17 | 0) != 36) {
               break block62
              }
              $8 = 0;
              $6 = 0;
              $9 = 0;
              $10 = 0;
              $11 = 0;
              while (1) {
               $2 = $9 + $12 & 2047;
               if (($2 | 0) == ($1 | 0)) {
                $1 = $1 + 1 & 2047;
                HEAP32[(($1 << 2) + $4 | 0) + 780 >> 2] = 0;
               }
               __floatunsitf($4 + 768 | 0, HEAP32[($4 + 784 | 0) + ($2 << 2) >> 2]);
               __multf3($4 + 752 | 0, $8, $6, $10, $11, 0, 0, 1342177280, 1075633366);
               __addtf3($4 + 736 | 0, HEAP32[$4 + 752 >> 2], HEAP32[$4 + 756 >> 2], HEAP32[$4 + 760 >> 2], HEAP32[$4 + 764 >> 2], HEAP32[$4 + 768 >> 2], HEAP32[$4 + 772 >> 2], HEAP32[$4 + 776 >> 2], HEAP32[$4 + 780 >> 2]);
               $10 = HEAP32[$4 + 744 >> 2];
               $11 = HEAP32[$4 + 748 >> 2];
               $8 = HEAP32[$4 + 736 >> 2];
               $6 = HEAP32[$4 + 740 >> 2];
               $9 = $9 + 1 | 0;
               if (($9 | 0) != 4) {
                continue
               }
               break;
              };
              __floatsitf($4 + 720 | 0, $19);
              __multf3($4 + 704 | 0, $8, $6, $10, $11, HEAP32[$4 + 720 >> 2], HEAP32[$4 + 724 >> 2], HEAP32[$4 + 728 >> 2], HEAP32[$4 + 732 >> 2]);
              $8 = 0;
              $6 = 0;
              $10 = HEAP32[$4 + 712 >> 2];
              $11 = HEAP32[$4 + 716 >> 2];
              $15 = HEAP32[$4 + 704 >> 2];
              $18 = HEAP32[$4 + 708 >> 2];
              $5 = $20 + 113 | 0;
              $3 = $5 - $31 | 0;
              $7 = ($3 | 0) < ($13 | 0);
              $2 = $7 ? (($3 | 0) > 0 ? $3 : 0) : $13;
              if ($2 >>> 0 <= 112) {
               break block63
              }
              break block64;
             }
             $20 = $8 + $20 | 0;
             $3 = $1;
             if (($1 | 0) == ($12 | 0)) {
              continue
             }
             break;
            };
            $15 = 1e9 >>> $8 | 0;
            $11 = -1 << $8 ^ -1;
            $9 = 0;
            $3 = $12;
            while (1) {
             $6 = $9;
             $5 = $4 + 784 | 0;
             $7 = $5 + ($12 << 2) | 0;
             $9 = HEAP32[$7 >> 2];
             $6 = $6 + ($9 >>> $8 | 0) | 0;
             HEAP32[$7 >> 2] = $6;
             $6 = !$6 & ($3 | 0) == ($12 | 0);
             $3 = $6 ? $3 + 1 & 2047 : $3;
             $17 = $6 ? $17 - 9 | 0 : $17;
             $9 = Math_imul($15, $9 & $11);
             $12 = $12 + 1 & 2047;
             if (($12 | 0) != ($1 | 0)) {
              continue
             }
             break;
            };
            if (!$9) {
             continue
            }
            if (($2 | 0) != ($3 | 0)) {
             HEAP32[($1 << 2) + $5 >> 2] = $9;
             $1 = $2;
             continue label25;
            }
            HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | 1;
            continue;
           }
           break;
          };
          break;
         };
         __extenddftf2($4 + 656 | 0, scalbn(1.0, 225 - $2 | 0));
         copysignl($4 + 688 | 0, HEAP32[$4 + 656 >> 2], HEAP32[$4 + 660 >> 2], HEAP32[$4 + 664 >> 2], HEAP32[$4 + 668 >> 2], $11);
         $23 = HEAP32[$4 + 696 >> 2];
         $27 = HEAP32[$4 + 700 >> 2];
         $21 = HEAP32[$4 + 688 >> 2];
         $22 = HEAP32[$4 + 692 >> 2];
         __extenddftf2($4 + 640 | 0, scalbn(1.0, 113 - $2 | 0));
         fmodl($4 + 672 | 0, $15, $18, $10, $11, HEAP32[$4 + 640 >> 2], HEAP32[$4 + 644 >> 2], HEAP32[$4 + 648 >> 2], HEAP32[$4 + 652 >> 2]);
         $8 = HEAP32[$4 + 672 >> 2];
         $6 = HEAP32[$4 + 676 >> 2];
         $14 = HEAP32[$4 + 680 >> 2];
         $16 = HEAP32[$4 + 684 >> 2];
         __subtf3($4 + 624 | 0, $15, $18, $10, $11, $8, $6, $14, $16);
         __addtf3($4 + 608 | 0, $21, $22, $23, $27, HEAP32[$4 + 624 >> 2], HEAP32[$4 + 628 >> 2], HEAP32[$4 + 632 >> 2], HEAP32[$4 + 636 >> 2]);
         $10 = HEAP32[$4 + 616 >> 2];
         $11 = HEAP32[$4 + 620 >> 2];
         $15 = HEAP32[$4 + 608 >> 2];
         $18 = HEAP32[$4 + 612 >> 2];
        }
        $9 = $12 + 4 & 2047;
        block65 : {
         if (($9 | 0) == ($1 | 0)) {
          break block65
         }
         $9 = HEAP32[($4 + 784 | 0) + ($9 << 2) >> 2];
         block66 : {
          if ($9 >>> 0 <= 499999999) {
           if (!$9 & ($12 + 5 & 2047) == ($1 | 0)) {
            break block66
           }
           __extenddftf2($4 + 496 | 0, +($19 | 0) * .25);
           __addtf3($4 + 480 | 0, $8, $6, $14, $16, HEAP32[$4 + 496 >> 2], HEAP32[$4 + 500 >> 2], HEAP32[$4 + 504 >> 2], HEAP32[$4 + 508 >> 2]);
           $14 = HEAP32[$4 + 488 >> 2];
           $16 = HEAP32[$4 + 492 >> 2];
           $8 = HEAP32[$4 + 480 >> 2];
           $6 = HEAP32[$4 + 484 >> 2];
           break block66;
          }
          if (($9 | 0) != 5e8) {
           __extenddftf2($4 + 592 | 0, +($19 | 0) * .75);
           __addtf3($4 + 576 | 0, $8, $6, $14, $16, HEAP32[$4 + 592 >> 2], HEAP32[$4 + 596 >> 2], HEAP32[$4 + 600 >> 2], HEAP32[$4 + 604 >> 2]);
           $14 = HEAP32[$4 + 584 >> 2];
           $16 = HEAP32[$4 + 588 >> 2];
           $8 = HEAP32[$4 + 576 >> 2];
           $6 = HEAP32[$4 + 580 >> 2];
           break block66;
          }
          $41 = +($19 | 0);
          if (($12 + 5 & 2047) == ($1 | 0)) {
           __extenddftf2($4 + 528 | 0, $41 * .5);
           __addtf3($4 + 512 | 0, $8, $6, $14, $16, HEAP32[$4 + 528 >> 2], HEAP32[$4 + 532 >> 2], HEAP32[$4 + 536 >> 2], HEAP32[$4 + 540 >> 2]);
           $14 = HEAP32[$4 + 520 >> 2];
           $16 = HEAP32[$4 + 524 >> 2];
           $8 = HEAP32[$4 + 512 >> 2];
           $6 = HEAP32[$4 + 516 >> 2];
           break block66;
          }
          __extenddftf2($4 + 560 | 0, $41 * .75);
          __addtf3($4 + 544 | 0, $8, $6, $14, $16, HEAP32[$4 + 560 >> 2], HEAP32[$4 + 564 >> 2], HEAP32[$4 + 568 >> 2], HEAP32[$4 + 572 >> 2]);
          $14 = HEAP32[$4 + 552 >> 2];
          $16 = HEAP32[$4 + 556 >> 2];
          $8 = HEAP32[$4 + 544 >> 2];
          $6 = HEAP32[$4 + 548 >> 2];
         }
         if ($2 >>> 0 > 111) {
          break block65
         }
         fmodl($4 + 464 | 0, $8, $6, $14, $16, 0, 0, 0, 1073676288);
         if (__letf2(HEAP32[$4 + 464 >> 2], HEAP32[$4 + 468 >> 2], HEAP32[$4 + 472 >> 2], HEAP32[$4 + 476 >> 2], 0, 0, 0, 0)) {
          break block65
         }
         __addtf3($4 + 448 | 0, $8, $6, $14, $16, 0, 0, 0, 1073676288);
         $14 = HEAP32[$4 + 456 >> 2];
         $16 = HEAP32[$4 + 460 >> 2];
         $8 = HEAP32[$4 + 448 >> 2];
         $6 = HEAP32[$4 + 452 >> 2];
        }
        __addtf3($4 + 432 | 0, $15, $18, $10, $11, $8, $6, $14, $16);
        __subtf3($4 + 416 | 0, HEAP32[$4 + 432 >> 2], HEAP32[$4 + 436 >> 2], HEAP32[$4 + 440 >> 2], HEAP32[$4 + 444 >> 2], $21, $22, $23, $27);
        $10 = HEAP32[$4 + 424 >> 2];
        $11 = HEAP32[$4 + 428 >> 2];
        $15 = HEAP32[$4 + 416 >> 2];
        $18 = HEAP32[$4 + 420 >> 2];
        block67 : {
         if (($39 - 2 | 0) >= ($5 & 2147483647)) {
          break block67
         }
         $1 = $4 + 400 | 0;
         HEAP32[$1 + 8 >> 2] = $10;
         HEAP32[$1 + 12 >> 2] = $11 & 2147483647;
         HEAP32[$1 >> 2] = $15;
         HEAP32[$1 + 4 >> 2] = $18;
         __multf3($4 + 384 | 0, $15, $18, $10, $11, 0, 0, 0, 1073610752);
         $23 = __getf2(HEAP32[$4 + 400 >> 2], HEAP32[$4 + 404 >> 2], HEAP32[$4 + 408 >> 2], HEAP32[$4 + 412 >> 2], 1081081856);
         $1 = ($23 | 0) >= 0;
         $10 = $1 ? HEAP32[$4 + 392 >> 2] : $10;
         $11 = $1 ? HEAP32[$4 + 396 >> 2] : $11;
         $15 = $1 ? HEAP32[$4 + 384 >> 2] : $15;
         $18 = $1 ? HEAP32[$4 + 388 >> 2] : $18;
         $8 = __letf2($8, $6, $14, $16, 0, 0, 0, 0);
         $20 = $1 + $20 | 0;
         if (($20 + 110 | 0) <= ($39 | 0)) {
          if (!($7 & (($2 | 0) != ($3 | 0) | ($23 | 0) < 0) & ($8 | 0) != 0)) {
           break block67
          }
         }
         HEAP32[__tls_base >> 2] = 68;
        }
        scalbnl($4 + 368 | 0, $15, $18, $10, $11, $20);
        $10 = HEAP32[$4 + 368 >> 2];
        $11 = HEAP32[$4 + 372 >> 2];
        $8 = HEAP32[$4 + 376 >> 2];
        $6 = HEAP32[$4 + 380 >> 2];
       }
      }
      if (!global$9) {
       HEAP32[$29 + 8 >> 2] = $8;
       HEAP32[$29 + 12 >> 2] = $6;
       HEAP32[$29 >> 2] = $10;
       HEAP32[$29 + 4 >> 2] = $11;
       __stack_pointer = $4 + 8976 | 0;
       $10 = HEAP32[$25 + 40 >> 2];
       $11 = HEAP32[$25 + 44 >> 2];
       $8 = HEAP32[$25 + 32 >> 2];
       $6 = HEAP32[$25 + 36 >> 2];
       break block9;
      }
     }
     if (!global$9) {
      $8 = 0;
      $6 = 0;
      break block9;
     }
    }
    $1 = global$9;
    $10 = $1 ? $10 : 0;
    $11 = $1 ? $11 : 0;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $8;
    HEAP32[$0 + 4 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = $10;
    HEAP32[$0 + 12 >> 2] = $11;
    __stack_pointer = $25 + 48 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $26;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $9;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[$7 + 32 >> 2] = $6;
  HEAP32[$7 + 36 >> 2] = $12;
  HEAP32[$7 + 40 >> 2] = $10;
  HEAP32[$7 + 44 >> 2] = $11;
  HEAP32[$7 + 48 >> 2] = $13;
  HEAP32[$7 + 52 >> 2] = $14;
  HEAP32[$7 + 56 >> 2] = $16;
  HEAP32[$7 + 60 >> 2] = $17;
  HEAP32[$7 + 64 >> 2] = $15;
  HEAP32[$7 + 68 >> 2] = $18;
  HEAP32[$7 + 72 >> 2] = $19;
  HEAP32[$7 + 76 >> 2] = $28;
  HEAP32[$7 + 80 >> 2] = $30;
  HEAP32[$7 + 84 >> 2] = $20;
  HEAP32[$7 + 88 >> 2] = $21;
  HEAP32[$7 + 92 >> 2] = $22;
  HEAP32[$7 + 96 >> 2] = $25;
  HEAP32[$7 + 100 >> 2] = $32;
  HEAP32[$7 + 104 >> 2] = $23;
  HEAP32[$7 + 108 >> 2] = $27;
  HEAP32[$7 + 112 >> 2] = $36;
  HEAP32[$7 + 116 >> 2] = $31;
  HEAP32[$7 + 120 >> 2] = $29;
  HEAP32[$7 + 124 >> 2] = $33;
  HEAP32[$7 + 128 >> 2] = $34;
  HEAP32[$7 + 132 >> 2] = $37;
  HEAP32[$7 + 136 >> 2] = $38;
  HEAP32[$7 + 140 >> 2] = $39;
  HEAP32[$7 + 144 >> 2] = $35;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 148;
 }
 
 function __isspace($0) {
  return ($0 | 0) == 32 | $0 - 9 >>> 0 < 5;
 }
 
 function scanexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = ($2 | 0) != HEAP32[$0 + 104 >> 2];
  }
  block1 : {
   block : {
    if (!($3 ? global$9 : 1)) {
     HEAP32[$0 + 4 >> 2] = $2 + 1;
     $3 = HEAPU8[$2 | 0];
     break block;
    }
    if (!global$9 | !$8) {
     $4 = __shgetc($0);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $3 = $4;
    }
   }
   $2 = global$9 ? $2 : $3 - 43 | 0;
   block11 : {
    block6 : {
     block5 : {
      block3 : {
       if (!global$9) {
        block2 : {
         switch ($2 | 0) {
         case 0:
         case 2:
          break block2;
         default:
          break block3;
         };
        }
        $9 = ($3 | 0) == 45;
        $2 = HEAP32[$0 + 4 >> 2];
        $3 = ($2 | 0) != HEAP32[$0 + 104 >> 2];
       }
       block4 : {
        if (!($3 ? global$9 : 1)) {
         $3 = $2 + 1 | 0;
         HEAP32[$0 + 4 >> 2] = $3;
         $2 = HEAPU8[$2 | 0];
         break block4;
        }
        if (!global$9 | ($8 | 0) == 1) {
         $4 = __shgetc($0);
         $10 = 1;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $2 = $4;
        }
       }
       if (!global$9) {
        $7 = $2 - 58 | 0;
        $1 = !$1;
        if ($1) {
         break block5
        }
        $1 = $7 >>> 0 > 4294967285;
        if ($1) {
         break block5
        }
        $6 = HEAP32[$0 + 112 >> 2];
        $1 = HEAP32[$0 + 116 >> 2];
        $5 = $1;
        if (($1 | 0) < 0) {
         break block6
        }
        HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
        break block6;
       }
      }
      if (!global$9) {
       $7 = $3 - 58 | 0;
       $2 = $3;
      }
     }
     if (!global$9) {
      if ($7 >>> 0 < 4294967286) {
       break block6
      }
      $1 = $2 - 48 >>> 0 >= 10;
     }
     block7 : {
      if (!global$9) {
       if ($1) {
        break block7
       }
       $3 = 0;
      }
      while (1) {
       if (!global$9) {
        $3 = (Math_imul($3, 10) + $2 | 0) - 48 | 0;
        $1 = ($3 | 0) < 214748364;
        $2 = HEAP32[$0 + 4 >> 2];
        $7 = ($2 | 0) != HEAP32[$0 + 104 >> 2];
       }
       block8 : {
        if (!($7 ? global$9 : 1)) {
         $7 = $2 + 1 | 0;
         HEAP32[$0 + 4 >> 2] = $7;
         $2 = HEAPU8[$2 | 0];
         break block8;
        }
        if (!global$9 | ($8 | 0) == 2) {
         $4 = __shgetc($0);
         $10 = 2;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $2 = $4;
        }
       }
       if (!global$9) {
        $7 = $2 - 48 | 0;
        $1 = $7 >>> 0 <= 9 & $1;
        if ($1) {
         continue
        }
       }
       break;
      };
      if (!global$9) {
       $6 = $3;
       $5 = $3 >> 31;
       $1 = $7 >>> 0 >= 10;
       if ($1) {
        break block7
       }
      }
      while (1) {
       if (!global$9) {
        $1 = __wasm_i64_mul($6, $5, 10, 0);
        $6 = $1 + $2 | 0;
        $5 = i64toi32_i32$HIGH_BITS;
        $5 = $1 >>> 0 > $6 >>> 0 ? $5 + 1 | 0 : $5;
        $2 = HEAP32[$0 + 4 >> 2];
        $1 = ($2 | 0) != HEAP32[$0 + 104 >> 2];
       }
       block9 : {
        if (!($1 ? global$9 : 1)) {
         $1 = $2 + 1 | 0;
         HEAP32[$0 + 4 >> 2] = $1;
         $2 = HEAPU8[$2 | 0];
         break block9;
        }
        if (!global$9 | ($8 | 0) == 3) {
         $4 = __shgetc($0);
         $10 = 3;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $2 = $4;
        }
       }
       if (!global$9) {
        $1 = $6;
        $6 = $1 - 48 | 0;
        $1 = $5 - ($1 >>> 0 < 48) | 0;
        $5 = $1;
        $3 = $2 - 48 | 0;
        $1 = ($6 >>> 0 < 2061584302 & ($1 | 0) <= 21474836 | ($1 | 0) < 21474836) & $3 >>> 0 <= 9;
        if ($1) {
         continue
        }
       }
       break;
      };
      if (!global$9) {
       $1 = $3 >>> 0 >= 10;
       if ($1) {
        break block7
       }
      }
      while (1) {
       if (!global$9) {
        $2 = HEAP32[$0 + 4 >> 2];
        $1 = ($2 | 0) != HEAP32[$0 + 104 >> 2];
       }
       block10 : {
        if (!($1 ? global$9 : 1)) {
         HEAP32[$0 + 4 >> 2] = $2 + 1;
         $1 = HEAPU8[$2 | 0];
         break block10;
        }
        if (!global$9 | ($8 | 0) == 4) {
         $4 = __shgetc($0);
         $10 = 4;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $1 = $4;
        }
       }
       if (!global$9) {
        $1 = $1 - 48 >>> 0 < 10;
        if ($1) {
         continue
        }
       }
       break;
      };
     }
     if (!global$9) {
      $1 = HEAP32[$0 + 116 >> 2];
      if (($1 | 0) > 0) {
       $1 = 1
      } else {
       $1 = ($1 | 0) >= 0
      }
      if ($1) {
       HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1
      }
      $0 = $6;
      $6 = $9 ? 0 - $0 | 0 : $0;
      $5 = $9 ? 0 - ((($0 | 0) != 0) + $5 | 0) | 0 : $5;
      break block11;
     }
    }
    if (!global$9) {
     $6 = 0;
     $5 = -2147483648;
     if (HEAP32[$0 + 116 >> 2] < 0) {
      break block11
     }
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
     i64toi32_i32$HIGH_BITS = -2147483648;
     return 0;
    }
   }
   if (!global$9) {
    i64toi32_i32$HIGH_BITS = $5;
    return $6;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $6;
  HEAP32[$4 + 20 >> 2] = $5;
  HEAP32[$4 + 24 >> 2] = $7;
  HEAP32[$4 + 28 >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function mbrtowc($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = $3 ? $3 : 75484;
  $3 = HEAP32[$6 >> 2];
  block3 : {
   block1 : {
    block : {
     if (!$1) {
      if ($3) {
       break block
      }
      return 0;
     }
     $4 = -2;
     if (!$2) {
      break block1
     }
     block2 : {
      if ($3) {
       $4 = $2;
       break block2;
      }
      $3 = HEAPU8[$1 | 0];
      $5 = $3 << 24 >> 24;
      if (($5 | 0) >= 0) {
       if ($0) {
        HEAP32[$0 >> 2] = $3
       }
       return ($5 | 0) != 0;
      }
      if (!HEAP32[HEAP32[thread_ptr + 96 >> 2] >> 2]) {
       $4 = 1;
       if (!$0) {
        break block1
       }
       HEAP32[$0 >> 2] = $5 & 57343;
       return 1;
      }
      $3 = $3 - 194 | 0;
      if ($3 >>> 0 > 50) {
       break block
      }
      $3 = HEAP32[($3 << 2) + 28480 >> 2];
      $4 = $2 - 1 | 0;
      if (!$4) {
       break block3
      }
      $1 = $1 + 1 | 0;
     }
     $5 = HEAPU8[$1 | 0];
     $7 = $5 >>> 3 | 0;
     if (($7 - 16 | ($3 >> 26) + $7) >>> 0 > 7) {
      break block
     }
     while (1) {
      $4 = $4 - 1 | 0;
      $3 = ($5 & 255) - 128 | $3 << 6;
      if (($3 | 0) >= 0) {
       HEAP32[$6 >> 2] = 0;
       if ($0) {
        HEAP32[$0 >> 2] = $3
       }
       return $2 - $4 | 0;
      }
      if (!$4) {
       break block3
      }
      $1 = $1 + 1 | 0;
      $5 = HEAP8[$1 | 0];
      if (($5 | 0) < -64) {
       continue
      }
      break;
     };
    }
    HEAP32[$6 >> 2] = 0;
    HEAP32[__tls_base >> 2] = 25;
    $4 = -1;
   }
   return $4;
  }
  HEAP32[$6 >> 2] = $3;
  return -2;
 }
 
 function store_int($0, $1, $2, $3) {
  block : {
   if (!$0) {
    break block
   }
   block4 : {
    switch ($1 + 2 | 0) {
    case 0:
     HEAP8[$0 | 0] = $2;
     return;
    case 1:
     HEAP16[$0 >> 1] = $2;
     return;
    case 2:
    case 3:
     HEAP32[$0 >> 2] = $2;
     return;
    case 5:
     break block4;
    default:
     break block;
    };
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $3;
  }
 }
 
 function vsscanf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0.0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 120;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $7 = HEAP32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $15 = HEAP32[$1 + 44 >> 2];
   $16 = HEAP32[$1 + 48 >> 2];
   $9 = HEAP32[$1 + 52 >> 2];
   $14 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $21 = HEAP32[$1 + 64 >> 2];
   $22 = HEAP32[$1 + 68 >> 2];
   $24 = HEAP32[$1 + 72 >> 2];
   $23 = HEAP32[$1 + 76 >> 2];
   $19 = HEAP32[$1 + 80 >> 2];
   $20 = HEAP32[$1 + 84 >> 2];
   $25 = HEAP32[$1 + 88 >> 2];
   $27 = HEAP32[$1 + 92 >> 2];
   $28 = HEAP32[$1 + 96 >> 2];
   $26 = HEAP32[$1 + 100 >> 2];
   $30 = HEAP32[$1 + 104 >> 2];
   $29 = HEAP32[$1 + 108 >> 2];
   $31 = HEAP32[$1 + 112 >> 2];
   $32 = HEAP32[$1 + 116 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $17 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer;
   $3 = $6 - 144 | 0;
   __stack_pointer = $3;
   wasm2js_memory_fill($3, 0, 144);
   HEAP32[$3 + 76 >> 2] = -1;
   HEAP32[$3 + 44 >> 2] = $0;
   HEAP32[$3 + 32 >> 2] = 210;
   HEAP32[$3 + 84 >> 2] = $0;
   $5 = $1;
   $30 = $2;
   $10 = __stack_pointer - 304 | 0;
   __stack_pointer = $10;
   $0 = HEAP32[$3 + 76 >> 2] < 0;
  }
  $4 = global$9 ? 0 : $0;
  $12 = (global$9 | 0) == 2;
  $0 = (global$9 ? 0 : $4 | $12) ? 0 : $0;
  block : {
   if (($12 | !$4) & (!global$9 | !$17)) {
    $4 = __lockfile($3);
    $12 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    $32 = !$0;
    $0 = !HEAP32[$3 + 4 >> 2];
   }
   block2 : {
    block1 : {
     if ((global$9 | 0) == 2 | $0) {
      if (!global$9 | ($17 | 0) == 1) {
       $4 = __toread($3);
       $12 = 1;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $4;
      }
      if (!global$9) {
       $0 = !HEAP32[$3 + 4 >> 2];
       if ($0) {
        break block1
       }
      }
     }
     if (!global$9) {
      $1 = HEAPU8[$5 | 0];
      $0 = !$1;
      if ($0) {
       break block2
      }
     }
     block30 : {
      block12 : {
       while (1) {
        block61 : {
         if (!global$9) {
          $1 = $1 & 255;
          $0 = __isspace($1);
         }
         block4 : {
          if ((global$9 | 0) == 2 | $0) {
           if (!global$9) {
            while (1) {
             $1 = $5;
             $5 = $5 + 1 | 0;
             $0 = __isspace(HEAPU8[$1 + 1 | 0]);
             if ($0) {
              continue
             }
             break;
            };
            __shlim($3, 0, 0);
           }
           while (1) {
            if (!global$9) {
             $5 = HEAP32[$3 + 4 >> 2];
             $0 = ($5 | 0) != HEAP32[$3 + 104 >> 2];
            }
            block3 : {
             if (!($0 ? global$9 : 1)) {
              HEAP32[$3 + 4 >> 2] = $5 + 1;
              $0 = HEAPU8[$5 | 0];
              break block3;
             }
             if (!global$9 | ($17 | 0) == 2) {
              $4 = __shgetc($3);
              $12 = 2;
              if ((global$9 | 0) == 1) {
               break block
              }
              $0 = $4;
             }
            }
            if (!global$9) {
             $0 = __isspace($0);
             if ($0) {
              continue
             }
            }
            break;
           };
           if (!global$9) {
            $5 = HEAP32[$3 + 4 >> 2];
            $0 = HEAP32[$3 + 116 >> 2];
            if (($0 | 0) > 0) {
             $0 = 1
            } else {
             $0 = ($0 | 0) >= 0
            }
            if ($0) {
             $5 = $5 - 1 | 0;
             HEAP32[$3 + 4 >> 2] = $5;
            }
            $0 = HEAP32[$3 + 120 >> 2];
            $9 = $0 + $23 | 0;
            $19 = HEAP32[$3 + 124 >> 2] + $19 | 0;
            $14 = $0 >>> 0 > $9 >>> 0 ? $19 + 1 | 0 : $19;
            $0 = $5 - HEAP32[$3 + 44 >> 2] | 0;
            $11 = $0;
            $13 = $0 >> 31;
            $4 = $14 + $13 | 0;
            $23 = $0 + $9 | 0;
            $19 = $23 >>> 0 < $0 >>> 0 ? $4 + 1 | 0 : $4;
            break block4;
           }
          }
          $0 = global$9 ? $0 : ($1 | 0) == 37;
          block9 : {
           block6 : {
            block5 : {
             if (!global$9) {
              if ($0) {
               $1 = HEAPU8[$5 + 1 | 0];
               $0 = ($1 | 0) == 42;
               if ($0) {
                break block5
               }
               $0 = ($1 | 0) != 37;
               if ($0) {
                break block6
               }
              }
              __shlim($3, 0, 0);
              $0 = HEAPU8[$5 | 0] == 37;
             }
             block8 : {
              if ((global$9 | 0) == 2 | $0) {
               while (1) {
                if (!global$9) {
                 $1 = HEAP32[$3 + 4 >> 2];
                 $0 = ($1 | 0) != HEAP32[$3 + 104 >> 2];
                }
                block7 : {
                 if (!($0 ? global$9 : 1)) {
                  $0 = $1 + 1 | 0;
                  HEAP32[$3 + 4 >> 2] = $0;
                  $1 = HEAPU8[$1 | 0];
                  break block7;
                 }
                 if (!global$9 | ($17 | 0) == 3) {
                  $4 = __shgetc($3);
                  $12 = 3;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                  $1 = $4;
                 }
                }
                if (!global$9) {
                 $0 = __isspace($1);
                 if ($0) {
                  continue
                 }
                }
                break;
               };
               if (!global$9) {
                $5 = $5 + 1 | 0;
                break block8;
               }
              }
              if (!global$9) {
               $1 = HEAP32[$3 + 4 >> 2];
               $0 = ($1 | 0) != HEAP32[$3 + 104 >> 2];
               if ($0) {
                $0 = $1 + 1 | 0;
                HEAP32[$3 + 4 >> 2] = $0;
                $1 = HEAPU8[$1 | 0];
                break block8;
               }
              }
              if (!global$9 | ($17 | 0) == 4) {
               $4 = __shgetc($3);
               $12 = 4;
               if ((global$9 | 0) == 1) {
                break block
               }
               $1 = $4;
              }
             }
             if (!global$9) {
              if (HEAPU8[$5 | 0] != ($1 | 0)) {
               $0 = HEAP32[$3 + 116 >> 2];
               if (($0 | 0) > 0) {
                $0 = 1
               } else {
                $0 = ($0 | 0) >= 0
               }
               if ($0) {
                HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
               }
               if ($27 | ($1 | 0) >= 0) {
                break block2
               }
               break block1;
              }
              $0 = HEAP32[$3 + 120 >> 2];
              $9 = $0 + $23 | 0;
              $4 = HEAP32[$3 + 124 >> 2] + $19 | 0;
              $4 = $0 >>> 0 > $9 >>> 0 ? $4 + 1 | 0 : $4;
              $0 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
              $11 = $0;
              $14 = $4;
              $13 = $0 >> 31;
              $4 = $4 + $13 | 0;
              $23 = $0 + $9 | 0;
              $19 = $23 >>> 0 < $0 >>> 0 ? $4 + 1 | 0 : $4;
              $1 = $5;
              break block4;
             }
            }
            if (!global$9) {
             $21 = 0;
             $1 = $5 + 2 | 0;
             break block9;
            }
           }
           if (!global$9) {
            block10 : {
             $2 = $1 - 48 | 0;
             $0 = $2 >>> 0 > 9;
             if ($0) {
              break block10
             }
             $0 = HEAPU8[$5 + 2 | 0] != 36;
             if ($0) {
              break block10
             }
             $0 = __stack_pointer - 16 | 0;
             HEAP32[$0 + 12 >> 2] = $30;
             $1 = $0;
             $0 = $2 >>> 0 > 1 ? (($2 << 2) + $30 | 0) - 4 | 0 : $30;
             $2 = $0 + 4 | 0;
             HEAP32[$1 + 8 >> 2] = $2;
             $21 = HEAP32[$0 >> 2];
             $1 = $5 + 3 | 0;
             break block9;
            }
            $21 = HEAP32[$30 >> 2];
            $30 = $30 + 4 | 0;
            $1 = $5 + 1 | 0;
           }
          }
          if (!global$9) {
           $28 = 0;
           $2 = 0;
           $5 = HEAPU8[$1 | 0];
           if (($5 - 48 & 255) >>> 0 <= 9) {
            while (1) {
             $2 = (Math_imul($2, 10) + ($5 & 255) | 0) - 48 | 0;
             $5 = HEAPU8[$1 + 1 | 0];
             $1 = $1 + 1 | 0;
             if (($5 - 48 & 255) >>> 0 < 10) {
              continue
             }
             break;
            }
           }
           if (($5 & 255) == 109) {
            $22 = 0;
            $28 = ($21 | 0) != 0;
            $5 = HEAPU8[$1 + 1 | 0];
            $24 = 0;
            $1 = $1 + 1 | 0;
           }
           $8 = $1;
           $1 = $1 + 1 | 0;
           $0 = 3;
           block15 : {
            block11 : {
             switch (($5 & 255) - 65 | 0) {
             case 39:
              $0 = HEAPU8[$8 + 1 | 0] == 104;
              $1 = $0 ? $8 + 2 | 0 : $1;
              $0 = $0 ? -2 : -1;
              break block15;
             case 43:
              $0 = HEAPU8[$8 + 1 | 0] == 108;
              $1 = $0 ? $8 + 2 | 0 : $1;
              $0 = $0 ? 3 : 1;
              break block15;
             case 51:
             case 57:
              $0 = 1;
              break block15;
             case 11:
              $0 = 2;
              break block15;
             case 0:
             case 2:
             case 4:
             case 5:
             case 6:
             case 18:
             case 23:
             case 26:
             case 32:
             case 34:
             case 35:
             case 36:
             case 37:
             case 38:
             case 40:
             case 45:
             case 46:
             case 47:
             case 50:
             case 52:
             case 55:
              break block11;
             case 41:
              break block15;
             default:
              break block12;
             };
            }
            $0 = 0;
            $1 = $8;
           }
           $5 = HEAPU8[$1 | 0];
           $6 = $5 & 47;
           $8 = ($6 | 0) == 3;
           $31 = $8 ? 1 : $0;
           $26 = $8 ? $5 | 32 : $5;
           $0 = ($26 | 0) == 91;
          }
          block18 : {
           if (!global$9) {
            if ($0) {
             break block18
            }
            block19 : {
             $0 = ($26 | 0) != 110;
             if ($0) {
              $0 = ($26 | 0) != 99;
              if ($0) {
               break block19
              }
              $0 = ($2 | 0) <= 1;
              $2 = $0 ? 1 : $2;
              break block18;
             }
             store_int($21, $31, $23, $19);
             break block4;
            }
            __shlim($3, 0, 0);
           }
           while (1) {
            if (!global$9) {
             $5 = HEAP32[$3 + 4 >> 2];
             $0 = ($5 | 0) != HEAP32[$3 + 104 >> 2];
            }
            block20 : {
             if (!($0 ? global$9 : 1)) {
              HEAP32[$3 + 4 >> 2] = $5 + 1;
              $0 = HEAPU8[$5 | 0];
              break block20;
             }
             if (!global$9 | ($17 | 0) == 5) {
              $4 = __shgetc($3);
              $12 = 5;
              if ((global$9 | 0) == 1) {
               break block
              }
              $0 = $4;
             }
            }
            if (!global$9) {
             $0 = __isspace($0);
             if ($0) {
              continue
             }
            }
            break;
           };
           if (!global$9) {
            $5 = HEAP32[$3 + 4 >> 2];
            $0 = HEAP32[$3 + 116 >> 2];
            if (($0 | 0) > 0) {
             $0 = 1
            } else {
             $0 = ($0 | 0) >= 0
            }
            if ($0) {
             $5 = $5 - 1 | 0;
             HEAP32[$3 + 4 >> 2] = $5;
            }
            $0 = HEAP32[$3 + 120 >> 2];
            $9 = $0 + $23 | 0;
            $19 = HEAP32[$3 + 124 >> 2] + $19 | 0;
            $19 = $0 >>> 0 > $9 >>> 0 ? $19 + 1 | 0 : $19;
            $0 = $5 - HEAP32[$3 + 44 >> 2] | 0;
            $11 = $0;
            $14 = $19;
            $13 = $0 >> 31;
            $19 = $19 + $13 | 0;
            $23 = $0 + $9 | 0;
            $19 = $23 >>> 0 < $0 >>> 0 ? $19 + 1 | 0 : $19;
           }
          }
          if (!global$9) {
           $11 = $2;
           $0 = $2 >> 31;
           $13 = $0;
           __shlim($3, $2, $0);
           $5 = HEAP32[$3 + 4 >> 2];
           $0 = ($5 | 0) != HEAP32[$3 + 104 >> 2];
          }
          block21 : {
           if (!($0 ? global$9 : 1)) {
            $0 = $5 + 1 | 0;
            HEAP32[$3 + 4 >> 2] = $0;
            break block21;
           }
           if (!global$9 | ($17 | 0) == 6) {
            $4 = __shgetc($3);
            $12 = 6;
            if ((global$9 | 0) == 1) {
             break block
            }
            $0 = $4;
           }
           if (!global$9) {
            $0 = ($0 | 0) < 0;
            if ($0) {
             break block12
            }
           }
          }
          if (!global$9) {
           $9 = HEAP32[$3 + 112 >> 2];
           $0 = HEAP32[$3 + 116 >> 2];
           $14 = $0;
           if (($0 | 0) > 0 | ($0 | 0) >= 0) {
            HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
           }
           $5 = 16;
           $0 = $26 - 88 | 0;
          }
          block23 : {
           block34 : {
            block33 : {
             block32 : {
              block31 : {
               block22 : {
                block27 : {
                 block26 : {
                  block28 : {
                   block24 : {
                    if (!global$9) {
                     block25 : {
                      switch ($0 | 0) {
                      default:
                       $5 = $26 - 65 | 0;
                       $0 = $5 >>> 0 > 6;
                       if ($0) {
                        break block23
                       }
                       $0 = !(1 << $5 & 113);
                       if ($0) {
                        break block23
                       }
                       break;
                      case 0:
                      case 24:
                      case 32:
                       break block22;
                      case 1:
                      case 2:
                      case 4:
                      case 5:
                      case 6:
                      case 7:
                      case 8:
                      case 10:
                      case 16:
                      case 18:
                      case 19:
                      case 20:
                      case 21:
                      case 22:
                      case 25:
                      case 26:
                      case 28:
                      case 30:
                      case 31:
                       break block23;
                      case 3:
                      case 11:
                      case 27:
                       break block24;
                      case 9:
                      case 13:
                      case 14:
                      case 15:
                       break block25;
                      case 12:
                      case 29:
                       break block26;
                      case 17:
                       break block27;
                      case 23:
                       break block28;
                      };
                     }
                     $0 = $10 + 8 | 0;
                    }
                    if (!global$9 | ($17 | 0) == 7) {
                     __floatscan($0, $3, $31, 0);
                     $12 = 7;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                    }
                    if (!global$9) {
                     $2 = HEAP32[$3 + 44 >> 2];
                     $14 = HEAP32[$3 + 4 >> 2] - $2 | 0;
                     $9 = 0 - $14 | 0;
                     $11 = HEAP32[$3 + 120 >> 2];
                     $14 = 0 - (($14 >> 31) + (($14 | 0) != 0) | 0) | 0;
                     $13 = HEAP32[$3 + 124 >> 2];
                     if (($9 | 0) == ($11 | 0) & ($14 | 0) == ($13 | 0)) {
                      break block30
                     }
                     $0 = !$21;
                     if ($0) {
                      break block23
                     }
                     $11 = HEAP32[$10 + 16 >> 2];
                     $13 = HEAP32[$10 + 20 >> 2];
                     $20 = HEAP32[$10 + 8 >> 2];
                     $25 = HEAP32[$10 + 12 >> 2];
                     switch ($31 | 0) {
                     case 0:
                      break block31;
                     case 1:
                      break block32;
                     case 2:
                      break block33;
                     default:
                      break block23;
                     };
                    }
                   }
                   if (!global$9) {
                    if (($26 | 16) == 115) {
                     __memset($10 + 32 | 0, -1, 257);
                     HEAP8[$10 + 32 | 0] = 0;
                     $0 = ($26 | 0) != 115;
                     if ($0) {
                      break block34
                     }
                     HEAP8[$10 + 65 | 0] = 0;
                     HEAP8[$10 + 46 | 0] = 0;
                     HEAP16[$10 + 42 >> 1] = 0;
                     HEAP16[$10 + 44 >> 1] = 0;
                     break block34;
                    }
                    $4 = HEAPU8[$1 + 1 | 0];
                    $0 = ($4 | 0) == 94;
                    __memset($10 + 32 | 0, $0, 257);
                    HEAP8[$10 + 32 | 0] = 0;
                    $7 = $0 ? $1 + 2 | 0 : $1 + 1 | 0;
                    block36 : {
                     block37 : {
                      block35 : {
                       $5 = HEAPU8[($0 ? 2 : 1) + $1 | 0];
                       if (($5 | 0) != 45) {
                        if (($5 | 0) == 93) {
                         break block35
                        }
                        $8 = ($4 | 0) != 94;
                        $1 = $7;
                        break block36;
                       }
                       $8 = ($4 | 0) != 94;
                       HEAP8[$10 + 78 | 0] = $8;
                       break block37;
                      }
                      $8 = ($4 | 0) != 94;
                      HEAP8[$10 + 126 | 0] = $8;
                     }
                     $1 = $7 + 1 | 0;
                    }
                    while (1) {
                     $0 = HEAPU8[$1 | 0];
                     block38 : {
                      if (($0 | 0) != 45) {
                       if (!$0) {
                        break block12
                       }
                       $6 = ($0 | 0) == 93;
                       if ($6) {
                        break block34
                       }
                       break block38;
                      }
                      $0 = 45;
                      $18 = HEAPU8[$1 + 1 | 0];
                      if (!$18 | ($18 | 0) == 93) {
                       break block38
                      }
                      $7 = $1 + 1 | 0;
                      $5 = HEAPU8[$1 - 1 | 0];
                      block39 : {
                       if ($18 >>> 0 <= $5 >>> 0) {
                        $0 = $18;
                        break block39;
                       }
                       while (1) {
                        $5 = $5 + 1 | 0;
                        HEAP8[$5 + ($10 + 32 | 0) | 0] = $8;
                        $0 = HEAPU8[$7 | 0];
                        if ($5 >>> 0 < $0 >>> 0) {
                         continue
                        }
                        break;
                       };
                      }
                      $1 = $7;
                     }
                     HEAP8[(($10 + 32 | 0) + $0 | 0) + 1 | 0] = $8;
                     $1 = $1 + 1 | 0;
                     continue;
                    };
                   }
                  }
                  if (!global$9) {
                   $5 = 8;
                   break block22;
                  }
                 }
                 if (!global$9) {
                  $5 = 10;
                  break block22;
                 }
                }
                $5 = global$9 ? $5 : 0;
               }
               if (!global$9) {
                $15 = 0;
                $16 = 0;
                $7 = 0;
                $9 = 0;
                $14 = 0;
                $18 = 0;
                $8 = 0;
                $0 = __stack_pointer - 16 | 0;
                __stack_pointer = $0;
                $6 = $5 >>> 0 <= 36;
                $2 = !($6 & ($5 | 0) != 1);
               }
               block40 : {
                if (!($2 ? global$9 : 1)) {
                 $2 = __tls_base;
                 HEAP32[$2 >> 2] = 28;
                 break block40;
                }
                while (1) {
                 if (!global$9) {
                  $6 = HEAP32[$3 + 4 >> 2];
                  $2 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                 }
                 block41 : {
                  if (!($2 ? global$9 : 1)) {
                   $2 = $6 + 1 | 0;
                   HEAP32[$3 + 4 >> 2] = $2;
                   $6 = HEAPU8[$6 | 0];
                   break block41;
                  }
                  if (!global$9 | ($17 | 0) == 8) {
                   $4 = __shgetc($3);
                   $12 = 8;
                   if ((global$9 | 0) == 1) {
                    break block
                   }
                   $6 = $4;
                  }
                 }
                 if (!global$9) {
                  $2 = __isspace($6);
                  if ($2) {
                   continue
                  }
                 }
                 break;
                };
                $2 = global$9 ? $2 : $6 - 43 | 0;
                block43 : {
                 if (!global$9) {
                  block42 : {
                   switch ($2 | 0) {
                   case 0:
                   case 2:
                    break block42;
                   default:
                    break block43;
                   };
                  }
                  $8 = ($6 | 0) == 45 ? -1 : 0;
                  $6 = HEAP32[$3 + 4 >> 2];
                  $2 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                  if ($2) {
                   $2 = $6 + 1 | 0;
                   HEAP32[$3 + 4 >> 2] = $2;
                   $6 = HEAPU8[$6 | 0];
                   break block43;
                  }
                 }
                 if (!global$9 | ($17 | 0) == 9) {
                  $4 = __shgetc($3);
                  $12 = 9;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                  $6 = $4;
                 }
                }
                if (!global$9) {
                 $29 = ($5 | 0) != 16;
                 $2 = $29 & ($5 | 0) != 0;
                }
                block50 : {
                 block53 : {
                  block47 : {
                   block48 : {
                    block44 : {
                     if (!global$9) {
                      if ($2) {
                       break block44
                      }
                      $2 = ($6 | 0) != 48;
                      if ($2) {
                       break block44
                      }
                      $6 = HEAP32[$3 + 4 >> 2];
                      $2 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                     }
                     block45 : {
                      if (!($2 ? global$9 : 1)) {
                       $2 = $6 + 1 | 0;
                       HEAP32[$3 + 4 >> 2] = $2;
                       $6 = HEAPU8[$6 | 0];
                       break block45;
                      }
                      if (!global$9 | ($17 | 0) == 10) {
                       $4 = __shgetc($3);
                       $12 = 10;
                       if ((global$9 | 0) == 1) {
                        break block
                       }
                       $6 = $4;
                      }
                     }
                     $2 = global$9 ? $2 : ($6 & -33) == 88;
                     if ($2 | (global$9 | 0) == 2) {
                      if (!global$9) {
                       $5 = 16;
                       $6 = HEAP32[$3 + 4 >> 2];
                       $2 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                      }
                      block46 : {
                       if (!($2 ? global$9 : 1)) {
                        $2 = $6 + 1 | 0;
                        HEAP32[$3 + 4 >> 2] = $2;
                        $6 = HEAPU8[$6 | 0];
                        break block46;
                       }
                       if (!global$9 | ($17 | 0) == 11) {
                        $4 = __shgetc($3);
                        $12 = 11;
                        if ((global$9 | 0) == 1) {
                         break block
                        }
                        $6 = $4;
                       }
                      }
                      if (!global$9) {
                       $2 = HEAPU8[$6 + 28209 | 0] < 16;
                       if ($2) {
                        break block47
                       }
                       $11 = HEAP32[$3 + 112 >> 2];
                       $2 = HEAP32[$3 + 116 >> 2];
                       $13 = $2;
                       $2 = ($2 | 0) > 0 | ($2 | 0) >= 0;
                       if ($2) {
                        $2 = HEAP32[$3 + 4 >> 2] - 1 | 0;
                        HEAP32[$3 + 4 >> 2] = $2;
                       }
                       __shlim($3, 0, 0);
                       break block40;
                      }
                     }
                     if (!global$9) {
                      if ($5) {
                       break block48
                      }
                      $5 = 8;
                      break block47;
                     }
                    }
                    if (!global$9) {
                     $5 = $5 ? $5 : 10;
                     $2 = $5 >>> 0 > HEAPU8[$6 + 28209 | 0];
                     if ($2) {
                      break block48
                     }
                     $11 = HEAP32[$3 + 112 >> 2];
                     $2 = HEAP32[$3 + 116 >> 2];
                     $13 = $2;
                     if (($2 | 0) > 0 | ($2 | 0) >= 0) {
                      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
                     }
                     __shlim($3, 0, 0);
                     $2 = __tls_base;
                     HEAP32[$2 >> 2] = 28;
                     break block40;
                    }
                   }
                   if (!global$9) {
                    $2 = ($5 | 0) != 10;
                    if ($2) {
                     break block47
                    }
                    $7 = $6 - 48 | 0;
                    $2 = $7 >>> 0 <= 9;
                   }
                   if ((global$9 | 0) == 2 | $2) {
                    $6 = global$9 ? $6 : 0;
                    while (1) {
                     if (!global$9) {
                      $6 = Math_imul($6, 10) + $7 | 0;
                      $18 = $6 >>> 0 < 429496729;
                      $5 = HEAP32[$3 + 4 >> 2];
                      $2 = ($5 | 0) != HEAP32[$3 + 104 >> 2];
                     }
                     block49 : {
                      if (!($2 ? global$9 : 1)) {
                       HEAP32[$3 + 4 >> 2] = $5 + 1;
                       $2 = HEAPU8[$5 | 0];
                       break block49;
                      }
                      if (!global$9 | ($17 | 0) == 12) {
                       $4 = __shgetc($3);
                       $12 = 12;
                       if ((global$9 | 0) == 1) {
                        break block
                       }
                       $2 = $4;
                      }
                     }
                     if (!global$9) {
                      $7 = $2 - 48 | 0;
                      $2 = $7 >>> 0 <= 9 & $18;
                      if ($2) {
                       continue
                      }
                     }
                     break;
                    };
                    $4 = global$9;
                    $15 = $4 ? $15 : $6;
                    $16 = $4 ? $16 : 0;
                   }
                   if (!global$9) {
                    $2 = $7 >>> 0 > 9;
                    if ($2) {
                     break block50
                    }
                    $14 = 0;
                    $11 = __wasm_i64_mul($15, $16, 10, 0);
                    $13 = i64toi32_i32$HIGH_BITS;
                    $9 = $7;
                   }
                   while (1) {
                    block52 : {
                     if (!global$9) {
                      $6 = HEAP32[$3 + 4 >> 2];
                      $2 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                     }
                     block51 : {
                      if (!($2 ? global$9 : 1)) {
                       $2 = $6 + 1 | 0;
                       HEAP32[$3 + 4 >> 2] = $2;
                       $6 = HEAPU8[$6 | 0];
                       break block51;
                      }
                      if (!global$9 | ($17 | 0) == 13) {
                       $4 = __shgetc($3);
                       $12 = 13;
                       if ((global$9 | 0) == 1) {
                        break block
                       }
                       $6 = $4;
                      }
                     }
                     if (!global$9) {
                      $4 = $13 + $14 | 0;
                      $15 = $9 + $11 | 0;
                      $16 = $15 >>> 0 < $9 >>> 0 ? $4 + 1 | 0 : $4;
                      $7 = ($16 | 0) == 429496729 & $15 >>> 0 < 2576980378 | $16 >>> 0 < 429496729;
                      $5 = $6 - 48 | 0;
                      if (!($7 & $5 >>> 0 <= 9)) {
                       $2 = $5 >>> 0 <= 9;
                       if ($2) {
                        break block52
                       }
                       break block50;
                      }
                      $11 = __wasm_i64_mul($15, $16, 10, 0);
                      $9 = $5;
                      $14 = 0;
                      $25 = -1;
                      $13 = i64toi32_i32$HIGH_BITS;
                      $2 = $13;
                      $20 = $5 ^ -1;
                      $2 = ($2 | 0) == -1 & $20 >>> 0 >= $11 >>> 0 | ($2 | 0) != -1;
                      if ($2) {
                       continue
                      }
                     }
                    }
                    break;
                   };
                   if (!global$9) {
                    $5 = 10;
                    break block53;
                   }
                  }
                  $2 = global$9 ? $2 : $5 - 1 & $5;
                  if ($2 | (global$9 | 0) == 2) {
                   if (!global$9) {
                    $18 = HEAPU8[$6 + 28209 | 0];
                    $2 = $18 >>> 0 < $5 >>> 0;
                   }
                   if ((global$9 | 0) == 2 | $2) {
                    while (1) {
                     if (!global$9) {
                      $7 = Math_imul($5, $7) + $18 | 0;
                      $2 = $7 >>> 0 < 119304647;
                      $6 = HEAP32[$3 + 4 >> 2];
                      $18 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                     }
                     block54 : {
                      if (!($18 ? global$9 : 1)) {
                       $18 = $6 + 1 | 0;
                       HEAP32[$3 + 4 >> 2] = $18;
                       $6 = HEAPU8[$6 | 0];
                       break block54;
                      }
                      if (!global$9 | ($17 | 0) == 14) {
                       $4 = __shgetc($3);
                       $12 = 14;
                       if ((global$9 | 0) == 1) {
                        break block
                       }
                       $6 = $4;
                      }
                     }
                     if (!global$9) {
                      $18 = HEAPU8[$6 + 28209 | 0];
                      $29 = $18 >>> 0 < $5 >>> 0;
                      $2 = $29 & $2;
                      if ($2) {
                       continue
                      }
                     }
                     break;
                    };
                    $4 = global$9;
                    $15 = $4 ? $15 : $7;
                    $16 = $4 ? $16 : 0;
                   }
                   if (!global$9) {
                    $2 = $5 >>> 0 <= $18 >>> 0;
                    if ($2) {
                     break block53
                    }
                    $13 = 0;
                    $11 = $5;
                   }
                   while (1) {
                    if (!global$9) {
                     $9 = __wasm_i64_mul($11, $13, $15, $16);
                     $25 = 0;
                     $14 = i64toi32_i32$HIGH_BITS;
                     $4 = $14;
                     $20 = $18 & 255;
                     $2 = ($4 | 0) == -1 & ($20 ^ -1) >>> 0 < $9 >>> 0;
                     if ($2) {
                      break block53
                     }
                     $15 = $9 + $20 | 0;
                     $16 = $15 >>> 0 < $20 >>> 0 ? $4 + 1 | 0 : $4;
                     $6 = HEAP32[$3 + 4 >> 2];
                     $2 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                    }
                    block55 : {
                     if (!($2 ? global$9 : 1)) {
                      $2 = $6 + 1 | 0;
                      HEAP32[$3 + 4 >> 2] = $2;
                      $6 = HEAPU8[$6 | 0];
                      break block55;
                     }
                     if (!global$9 | ($17 | 0) == 15) {
                      $4 = __shgetc($3);
                      $12 = 15;
                      if ((global$9 | 0) == 1) {
                       break block
                      }
                      $6 = $4;
                     }
                    }
                    if (!global$9) {
                     $18 = HEAPU8[$6 + 28209 | 0];
                     $2 = $18 >>> 0 >= $5 >>> 0;
                     if ($2) {
                      break block53
                     }
                     __multi3($0, $11, $13, 0, 0, $15, $16, 0, 0);
                     $2 = HEAP32[$0 + 12 >> 2];
                     $14 = $2;
                     $9 = HEAP32[$0 + 8 >> 2];
                     $2 = !($2 | $9);
                     if ($2) {
                      continue
                     }
                    }
                    break;
                   };
                   if (!global$9) {
                    break block53
                   }
                  }
                  if (!global$9) {
                   $7 = HEAPU8[$6 + 28209 | 0];
                   $29 = $7 >>> 0 < $5 >>> 0;
                   $2 = HEAP8[(Math_imul($5, 23) >>> 5 & 7) + 28465 | 0];
                  }
                  if ((global$9 | 0) == 2 | $29) {
                   while (1) {
                    if (!global$9) {
                     $6 = $18 << $2;
                     $18 = $6 | $7;
                     $29 = $6 >>> 0 < 134217728;
                     $6 = HEAP32[$3 + 4 >> 2];
                     $7 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                    }
                    block56 : {
                     if (!($7 ? global$9 : 1)) {
                      $7 = $6 + 1 | 0;
                      HEAP32[$3 + 4 >> 2] = $7;
                      $6 = HEAPU8[$6 | 0];
                      break block56;
                     }
                     if (!global$9 | ($17 | 0) == 16) {
                      $4 = __shgetc($3);
                      $12 = 16;
                      if ((global$9 | 0) == 1) {
                       break block
                      }
                      $6 = $4;
                     }
                    }
                    if (!global$9) {
                     $7 = HEAPU8[$6 + 28209 | 0];
                     $29 = $7 >>> 0 < $5 >>> 0 & $29;
                     if ($29) {
                      continue
                     }
                    }
                    break;
                   };
                   $4 = global$9;
                   $15 = $4 ? $15 : $18;
                   $16 = $4 ? $16 : 0;
                  }
                  if (!global$9) {
                   $18 = $5 >>> 0 <= $7 >>> 0;
                   if ($18) {
                    break block53
                   }
                   $9 = $2;
                   $14 = 0;
                   $20 = $2 & 31;
                   if (($2 & 63) >>> 0 >= 32) {
                    $4 = 0;
                    $20 = -1 >>> $20 | 0;
                   } else {
                    $2 = -1 >>> $20 | 0;
                    $4 = $2;
                    $20 = $2 | (1 << $20) - 1 << 32 - $20;
                   }
                   $2 = $20;
                   $25 = $4;
                   $2 = ($16 | 0) == ($4 | 0) & $2 >>> 0 < $15 >>> 0 | $4 >>> 0 < $16 >>> 0;
                   if ($2) {
                    break block53
                   }
                  }
                  while (1) {
                   if (!global$9) {
                    $13 = 0;
                    $2 = $15;
                    $6 = $9 & 31;
                    if (($9 & 63) >>> 0 >= 32) {
                     $4 = $2 << $6;
                     $2 = 0;
                    } else {
                     $4 = (1 << $6) - 1 & $2 >>> 32 - $6 | $16 << $6;
                     $2 = $2 << $6;
                    }
                    $11 = $7 & 255;
                    $15 = $2 | $11;
                    $16 = $4;
                    $6 = HEAP32[$3 + 4 >> 2];
                    $2 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                   }
                   block57 : {
                    if (!($2 ? global$9 : 1)) {
                     $2 = $6 + 1 | 0;
                     HEAP32[$3 + 4 >> 2] = $2;
                     $6 = HEAPU8[$6 | 0];
                     break block57;
                    }
                    if (!global$9 | ($17 | 0) == 17) {
                     $4 = __shgetc($3);
                     $12 = 17;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $6 = $4;
                    }
                   }
                   if (!global$9) {
                    $7 = HEAPU8[$6 + 28209 | 0];
                    $2 = $7 >>> 0 >= $5 >>> 0;
                    if ($2) {
                     break block53
                    }
                    $2 = ($16 | 0) == ($25 | 0) & $15 >>> 0 <= $20 >>> 0 | $16 >>> 0 < $25 >>> 0;
                    if ($2) {
                     continue
                    }
                   }
                   break;
                  };
                 }
                 if (!global$9) {
                  $2 = HEAPU8[$6 + 28209 | 0] >= $5 >>> 0;
                  if ($2) {
                   break block50
                  }
                 }
                 while (1) {
                  if (!global$9) {
                   $6 = HEAP32[$3 + 4 >> 2];
                   $2 = ($6 | 0) != HEAP32[$3 + 104 >> 2];
                  }
                  block58 : {
                   if (!($2 ? global$9 : 1)) {
                    HEAP32[$3 + 4 >> 2] = $6 + 1;
                    $2 = HEAPU8[$6 | 0];
                    break block58;
                   }
                   if (!global$9 | ($17 | 0) == 18) {
                    $4 = __shgetc($3);
                    $12 = 18;
                    if ((global$9 | 0) == 1) {
                     break block
                    }
                    $2 = $4;
                   }
                  }
                  if (!global$9) {
                   $2 = HEAPU8[$2 + 28209 | 0] < $5 >>> 0;
                   if ($2) {
                    continue
                   }
                  }
                  break;
                 };
                 if (!global$9) {
                  $2 = __tls_base;
                  HEAP32[$2 >> 2] = 68;
                  $16 = -1;
                  $8 = 0;
                  $15 = -1;
                 }
                }
                if (!global$9) {
                 $2 = HEAP32[$3 + 116 >> 2];
                 if (($2 | 0) > 0) {
                  $2 = 1
                 } else {
                  $2 = ($2 | 0) >= 0
                 }
                 if ($2) {
                  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
                 }
                 $2 = ($16 & $15) != -1;
                 block59 : {
                  if ($2) {
                   break block59
                  }
                 }
                 $11 = $8 ^ $15;
                 $9 = $11 - $8 | 0;
                 $14 = $8 >> 31;
                 $13 = $14 ^ $16;
                 $14 = $13 - (($8 >>> 0 > $11 >>> 0) + $14 | 0) | 0;
                }
               }
               if (!global$9) {
                __stack_pointer = $0 + 16 | 0;
                $11 = $9;
                $13 = $14;
                $2 = HEAP32[$3 + 44 >> 2];
                $4 = HEAP32[$3 + 4 >> 2] - $2 | 0;
                $15 = 0 - $4 | 0;
                $9 = HEAP32[$3 + 120 >> 2];
                $14 = HEAP32[$3 + 124 >> 2];
                $16 = 0 - (($4 >> 31) + (($4 | 0) != 0) | 0) | 0;
                if (($15 | 0) == ($9 | 0) & ($14 | 0) == ($16 | 0)) {
                 break block30
                }
                block60 : {
                 $0 = ($26 | 0) != 112;
                 if ($0) {
                  break block60
                 }
                 $0 = !$21;
                 if ($0) {
                  break block60
                 }
                 HEAP32[$21 >> 2] = $11;
                 break block23;
                }
                store_int($21, $31, $11, $13);
                break block23;
               }
              }
              if (!global$9) {
               (wasm2js_i32$0 = $21, wasm2js_f32$0 = __trunctfsf2($20, $25, $11, $13)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
               break block23;
              }
             }
             if (!global$9) {
              (wasm2js_i32$0 = $21, wasm2js_f64$0 = __trunctfdf2($20, $25, $11, $13)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
              break block23;
             }
            }
            if (!global$9) {
             HEAP32[$21 >> 2] = $20;
             HEAP32[$21 + 4 >> 2] = $25;
             HEAP32[$21 + 8 >> 2] = $11;
             HEAP32[$21 + 12 >> 2] = $13;
             break block23;
            }
           }
           if (!global$9) {
            $7 = ($26 | 0) != 99;
            $8 = $7 ? 31 : $2 + 1 | 0;
            $0 = ($31 | 0) == 1;
           }
           $4 = (global$9 | 0) == 2;
           block65 : {
            if ($4 | $0) {
             $2 = global$9 ? $2 : $21;
             if ($4 | $28) {
              $0 = global$9 ? $0 : $8 << 2;
              if (!global$9 | ($17 | 0) == 19) {
               $4 = emscripten_builtin_malloc($0);
               $12 = 19;
               if ((global$9 | 0) == 1) {
                break block
               }
               $2 = $4;
              }
              if (!global$9) {
               $0 = !$2;
               if ($0) {
                break block61
               }
              }
             }
             if (!global$9) {
              HEAP32[$10 + 296 >> 2] = 0;
              HEAP32[$10 + 300 >> 2] = 0;
              $5 = 0;
             }
             block64 : {
              block63 : {
               while (1) {
                $0 = global$9 ? $0 : $2;
                while (1) {
                 if (!global$9) {
                  $2 = HEAP32[$3 + 4 >> 2];
                  $6 = ($2 | 0) != HEAP32[$3 + 104 >> 2];
                 }
                 block62 : {
                  if (!($6 ? global$9 : 1)) {
                   $6 = $2 + 1 | 0;
                   HEAP32[$3 + 4 >> 2] = $6;
                   $2 = HEAPU8[$2 | 0];
                   break block62;
                  }
                  if (!global$9 | ($17 | 0) == 20) {
                   $4 = __shgetc($3);
                   $12 = 20;
                   if ((global$9 | 0) == 1) {
                    break block
                   }
                   $2 = $4;
                  }
                 }
                 if (!global$9) {
                  $6 = !HEAPU8[($2 + $10 | 0) + 33 | 0];
                  if ($6) {
                   break block63
                  }
                  HEAP8[$10 + 27 | 0] = $2;
                  $22 = $10 + 296 | 0;
                  $2 = mbrtowc($10 + 28 | 0, $10 + 27 | 0, 1, $22);
                  $6 = ($2 | 0) == -2;
                  if ($6) {
                   continue
                  }
                  $2 = ($2 | 0) == -1;
                  if ($2) {
                   $22 = 0;
                   break block64;
                  }
                  if ($0) {
                   $6 = HEAP32[$10 + 28 >> 2];
                   HEAP32[($5 << 2) + $0 >> 2] = $6;
                   $5 = $5 + 1 | 0;
                  }
                  $2 = !$28;
                  if ($2) {
                   continue
                  }
                  $2 = ($5 | 0) != ($8 | 0);
                  if ($2) {
                   continue
                  }
                 }
                 break;
                };
                if (!global$9) {
                 $8 = $8 << 1 | 1;
                 $2 = $8 << 2;
                }
                if (!global$9 | ($17 | 0) == 21) {
                 $4 = emscripten_builtin_realloc($0, $2);
                 $12 = 21;
                 if ((global$9 | 0) == 1) {
                  break block
                 }
                 $2 = $4;
                }
                if (!($2 ? global$9 : 1)) {
                 continue
                }
                break;
               };
               if (!global$9) {
                $22 = 0;
                $24 = $0;
                $28 = 1;
                break block12;
               }
              }
              if (!global$9) {
               $22 = 0;
               $24 = $0;
               $2 = $10 + 296 | 0;
               if ($2) {
                $2 = HEAP32[$2 >> 2]
               } else {
                $2 = 0
               }
               $2 = !$2;
               if ($2) {
                break block65
               }
              }
             }
             if (!global$9) {
              $24 = $0;
              break block12;
             }
            }
            if ((global$9 | 0) == 2 | $28) {
             $5 = global$9 ? $5 : 0;
             if (!global$9 | ($17 | 0) == 22) {
              $4 = emscripten_builtin_malloc($8);
              $12 = 22;
              if ((global$9 | 0) == 1) {
               break block
              }
              $2 = $4;
             }
             if (!global$9) {
              $0 = !$2;
              if ($0) {
               break block61
              }
             }
             while (1) {
              $0 = global$9 ? $0 : $2;
              while (1) {
               if (!global$9) {
                $2 = HEAP32[$3 + 4 >> 2];
                $6 = ($2 | 0) != HEAP32[$3 + 104 >> 2];
               }
               block66 : {
                if (!($6 ? global$9 : 1)) {
                 $6 = $2 + 1 | 0;
                 HEAP32[$3 + 4 >> 2] = $6;
                 $2 = HEAPU8[$2 | 0];
                 break block66;
                }
                if (!global$9 | ($17 | 0) == 23) {
                 $4 = __shgetc($3);
                 $12 = 23;
                 if ((global$9 | 0) == 1) {
                  break block
                 }
                 $2 = $4;
                }
               }
               if (!global$9) {
                $6 = !HEAPU8[($2 + $10 | 0) + 33 | 0];
                if ($6) {
                 $22 = $0;
                 $24 = 0;
                 break block65;
                }
                $6 = $0 + $5 | 0;
                HEAP8[$6 | 0] = $2;
                $5 = $5 + 1 | 0;
                $2 = ($8 | 0) != ($5 | 0);
                if ($2) {
                 continue
                }
               }
               break;
              };
              if (!global$9) {
               $2 = $8 << 1;
               $8 = $2 | 1;
              }
              if (!global$9 | ($17 | 0) == 24) {
               $4 = emscripten_builtin_realloc($0, $8);
               $12 = 24;
               if ((global$9 | 0) == 1) {
                break block
               }
               $2 = $4;
              }
              if (!($2 ? global$9 : 1)) {
               continue
              }
              break;
             };
             if (!global$9) {
              $24 = 0;
              $22 = $0;
              $28 = 1;
              break block12;
             }
            }
            $5 = global$9 ? $5 : 0;
            if ((global$9 | 0) == 2 | $21) {
             while (1) {
              if (!global$9) {
               $2 = HEAP32[$3 + 4 >> 2];
               $0 = ($2 | 0) != HEAP32[$3 + 104 >> 2];
              }
              block67 : {
               if (!($0 ? global$9 : 1)) {
                $0 = $2 + 1 | 0;
                HEAP32[$3 + 4 >> 2] = $0;
                $2 = HEAPU8[$2 | 0];
                break block67;
               }
               if (!global$9 | ($17 | 0) == 25) {
                $4 = __shgetc($3);
                $12 = 25;
                if ((global$9 | 0) == 1) {
                 break block
                }
                $2 = $4;
               }
              }
              if (!global$9) {
               if (HEAPU8[($2 + $10 | 0) + 33 | 0]) {
                $0 = $5 + $21 | 0;
                HEAP8[$0 | 0] = $2;
                $5 = $5 + 1 | 0;
                continue;
               } else {
                $0 = $21;
                $22 = $0;
                $24 = 0;
                break block65;
               }
              }
              break;
             }
            }
            while (1) {
             if (!global$9) {
              $5 = HEAP32[$3 + 4 >> 2];
              $0 = ($5 | 0) != HEAP32[$3 + 104 >> 2];
             }
             block68 : {
              if (!($0 ? global$9 : 1)) {
               HEAP32[$3 + 4 >> 2] = $5 + 1;
               $0 = HEAPU8[$5 | 0];
               break block68;
              }
              if (!global$9 | ($17 | 0) == 26) {
               $4 = __shgetc($3);
               $12 = 26;
               if ((global$9 | 0) == 1) {
                break block
               }
               $0 = $4;
              }
             }
             if (!global$9) {
              $0 = HEAPU8[($0 + $10 | 0) + 33 | 0];
              if ($0) {
               continue
              }
             }
             break;
            };
            if (!global$9) {
             $22 = 0;
             $5 = 0;
             $24 = 0;
             $0 = 0;
            }
           }
           if (!global$9) {
            $2 = HEAP32[$3 + 4 >> 2];
            $6 = HEAP32[$3 + 116 >> 2];
            if (($6 | 0) > 0) {
             $4 = 1
            } else {
             $4 = ($6 | 0) >= 0
            }
            if ($4) {
             $2 = $2 - 1 | 0;
             HEAP32[$3 + 4 >> 2] = $2;
            }
            $9 = HEAP32[$3 + 120 >> 2];
            $6 = HEAP32[$3 + 44 >> 2];
            $15 = $2 - $6 | 0;
            $20 = $9 + $15 | 0;
            $14 = HEAP32[$3 + 124 >> 2];
            $16 = $15 >> 31;
            $4 = $14 + $16 | 0;
            $25 = $15 >>> 0 > $20 >>> 0 ? $4 + 1 | 0 : $4;
            if (!($25 | $20)) {
             break block30
            }
            $2 = !(($11 | 0) == ($20 | 0) & ($13 | 0) == ($25 | 0) | $7);
            if ($2) {
             break block30
            }
            if ($28) {
             HEAP32[$21 >> 2] = $0
            }
            $0 = ($26 | 0) == 99;
            if ($0) {
             break block23
            }
            if ($24) {
             HEAP32[($5 << 2) + $24 >> 2] = 0
            }
            $0 = !$22;
            if ($0) {
             $22 = 0;
             break block23;
            }
            $0 = $5 + $22 | 0;
            HEAP8[$0 | 0] = 0;
           }
          }
          if (!global$9) {
           $4 = HEAP32[$3 + 124 >> 2] + $19 | 0;
           $0 = HEAP32[$3 + 120 >> 2];
           $9 = $0 + $23 | 0;
           $2 = HEAP32[$3 + 44 >> 2];
           $11 = HEAP32[$3 + 4 >> 2] - $2 | 0;
           $23 = $9 + $11 | 0;
           $14 = $0 >>> 0 > $9 >>> 0 ? $4 + 1 | 0 : $4;
           $13 = $11 >> 31;
           $19 = $14 + $13 | 0;
           $0 = ($21 | 0) != 0;
           $27 = $27 + $0 | 0;
           $19 = $11 >>> 0 > $23 >>> 0 ? $19 + 1 | 0 : $19;
          }
         }
         if (!global$9) {
          $5 = $1 + 1 | 0;
          $1 = HEAPU8[$1 + 1 | 0];
          if ($1) {
           continue
          }
          break block2;
         }
        }
        break;
       };
       if (!global$9) {
        $28 = 1;
        $22 = 0;
        $24 = 0;
       }
      }
      $27 = global$9 ? $27 : $27 ? $27 : -1;
     }
     if (!(global$9 | $28)) {
      break block2
     }
     if (!global$9 | ($17 | 0) == 27) {
      emscripten_builtin_free($22);
      $12 = 27;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9 | ($17 | 0) == 28) {
      emscripten_builtin_free($24);
      $12 = 28;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block2
     }
    }
    $27 = global$9 ? $27 : -1;
   }
   if (!global$9) {
    if (!$32) {
     __unlockfile($3)
    }
    __stack_pointer = $10 + 304 | 0;
    __stack_pointer = $3 + 144 | 0;
    return $27;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $8;
  HEAP32[$4 + 28 >> 2] = $10;
  HEAP32[$4 + 32 >> 2] = $7;
  HEAP32[$4 + 36 >> 2] = $11;
  HEAP32[$4 + 40 >> 2] = $13;
  HEAP32[$4 + 44 >> 2] = $15;
  HEAP32[$4 + 48 >> 2] = $16;
  HEAP32[$4 + 52 >> 2] = $9;
  HEAP32[$4 + 56 >> 2] = $14;
  HEAP32[$4 + 60 >> 2] = $18;
  HEAP32[$4 + 64 >> 2] = $21;
  HEAP32[$4 + 68 >> 2] = $22;
  HEAP32[$4 + 72 >> 2] = $24;
  HEAP32[$4 + 76 >> 2] = $23;
  HEAP32[$4 + 80 >> 2] = $19;
  HEAP32[$4 + 84 >> 2] = $20;
  HEAP32[$4 + 88 >> 2] = $25;
  HEAP32[$4 + 92 >> 2] = $27;
  HEAP32[$4 + 96 >> 2] = $28;
  HEAP32[$4 + 100 >> 2] = $26;
  HEAP32[$4 + 104 >> 2] = $30;
  HEAP32[$4 + 108 >> 2] = $29;
  HEAP32[$4 + 112 >> 2] = $31;
  HEAP32[$4 + 116 >> 2] = $32;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 120;
  return 0;
 }
 
 function string_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$9;
  $3 = HEAP32[$0 + 84 >> 2];
  $5 = $2 + 256 | 0;
  $6 = memchr($3, 0, $5);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  $7 = $1;
  $1 = $6 ? $6 - $3 | 0 : $5;
  $2 = $1 >>> 0 < $2 >>> 0 ? $1 : $2;
  __memcpy($7, $3, $2);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  $1 = $1 + $3 | 0;
  HEAP32[$0 + 84 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2 + $3;
  return $2 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  if (!$0) {
   return 0
  }
  HEAP32[__tls_base >> 2] = $0;
  return -1;
 }
 
 function wcrtomb($0, $1) {
  block : {
   if ($0) {
    if ($1 >>> 0 <= 127) {
     break block
    }
    block1 : {
     if (!HEAP32[HEAP32[thread_ptr + 96 >> 2] >> 2]) {
      if (($1 & -128) == 57216) {
       break block
      }
      break block1;
     }
     if ($1 >>> 0 <= 2047) {
      HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 6 | 192;
      return 2;
     }
     if (!(($1 & -8192) != 57344 & $1 >>> 0 >= 55296)) {
      HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 12 | 224;
      HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
      return 3;
     }
     if ($1 - 65536 >>> 0 <= 1048575) {
      HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 18 | 240;
      HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
      HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
      return 4;
     }
    }
    HEAP32[__tls_base >> 2] = 25;
    $0 = -1;
   } else {
    $0 = 1
   }
   return $0;
  }
  HEAP8[$0 | 0] = $1;
  return 1;
 }
 
 function wctomb($0, $1) {
  var $2 = 0;
  $2 = global$9;
  if (!$0) {
   return 0
  }
  $0 = wcrtomb($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function abort() {
  var $0 = 0;
  $0 = global$9;
  _abort_js();
  if ((global$9 | 0) != ($0 | 0)) {
   wasm2js_trap()
  }
  wasm2js_trap();
 }
 
 function emscripten_builtin_malloc($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $1 = global$9 ? $1 : !HEAP32[18874];
   if (!global$9 | !$11 ? $1 | (global$9 | 0) == 2 : 0) {
    init_mparams();
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $1 = global$9 ? $1 : HEAPU8[75964] & 2;
   block1 : {
    if ($1 | (global$9 | 0) == 2) {
     if (!global$9 | ($11 | 0) == 1) {
      $6 = __pthread_mutex_lock(75968);
      $9 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $6;
     }
     if (!($1 ? global$9 : 1)) {
      break block1
     }
    }
    $1 = global$9 ? $1 : $0 >>> 0 <= 244;
    block4 : {
     block43 : {
      block3 : {
       if (!global$9) {
        block5 : {
         if ($1) {
          $3 = HEAP32[18880];
          $5 = $0 >>> 0 < 11 ? 16 : $0 + 11 & 504;
          $6 = $5 >>> 3 | 0;
          $4 = $3 >>> $6 | 0;
          if ($4 & 3) {
           $1 = $6 + (($4 ^ -1) & 1) | 0;
           $0 = $1 << 3;
           $5 = $0 + 75560 | 0;
           $0 = HEAP32[$0 + 75568 >> 2];
           $4 = HEAP32[$0 + 8 >> 2];
           block2 : {
            if (($5 | 0) == ($4 | 0)) {
             (wasm2js_i32$0 = 75520, wasm2js_i32$1 = __wasm_rotl_i32(-2, $1) & $3), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
             break block2;
            }
            $2 = HEAPU32[18884] > $4 >>> 0;
            if ($2) {
             break block3
            }
            $2 = HEAP32[$4 + 12 >> 2] != ($0 | 0);
            if ($2) {
             break block3
            }
            HEAP32[$4 + 12 >> 2] = $5;
            HEAP32[$5 + 8 >> 2] = $4;
           }
           $4 = $0 + 8 | 0;
           $1 = $1 << 3;
           HEAP32[$0 + 4 >> 2] = $1 | 3;
           $0 = $0 + $1 | 0;
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
           break block4;
          }
          $1 = HEAP32[18882];
          $2 = $5 >>> 0 <= $1 >>> 0;
          if ($2) {
           break block5
          }
          if ($4) {
           $0 = 2 << $6;
           $2 = __wasm_ctz_i32(($0 | 0 - $0) & $4 << $6);
           $0 = $2 << 3;
           $6 = $0 + 75560 | 0;
           $0 = HEAP32[$0 + 75568 >> 2];
           $4 = HEAP32[$0 + 8 >> 2];
           block6 : {
            if (($6 | 0) == ($4 | 0)) {
             $3 = __wasm_rotl_i32(-2, $2) & $3;
             HEAP32[18880] = $3;
             break block6;
            }
            $7 = HEAPU32[18884] > $4 >>> 0;
            if ($7) {
             break block3
            }
            $7 = HEAP32[$4 + 12 >> 2] != ($0 | 0);
            if ($7) {
             break block3
            }
            HEAP32[$4 + 12 >> 2] = $6;
            HEAP32[$6 + 8 >> 2] = $4;
           }
           HEAP32[$0 + 4 >> 2] = $5 | 3;
           $6 = $0 + $5 | 0;
           $2 = $2 << 3;
           $5 = $2 - $5 | 0;
           HEAP32[$6 + 4 >> 2] = $5 | 1;
           HEAP32[$0 + $2 >> 2] = $5;
           if ($1) {
            $2 = ($1 & -8) + 75560 | 0;
            $4 = HEAP32[18885];
            $1 = 1 << ($1 >>> 3);
            $7 = !($1 & $3);
            block7 : {
             if ($7) {
              HEAP32[18880] = $1 | $3;
              $1 = $2;
              break block7;
             }
             $1 = HEAP32[$2 + 8 >> 2];
             $3 = $1 >>> 0 < HEAPU32[18884];
             if ($3) {
              break block3
             }
            }
            HEAP32[$2 + 8 >> 2] = $4;
            HEAP32[$1 + 12 >> 2] = $4;
            HEAP32[$4 + 12 >> 2] = $2;
            HEAP32[$4 + 8 >> 2] = $1;
           }
           $4 = $0 + 8 | 0;
           HEAP32[18885] = $6;
           HEAP32[18882] = $5;
           break block4;
          }
          if (!HEAP32[18881]) {
           break block5
          }
          $7 = HEAP32[18881];
          $4 = HEAP32[(__wasm_ctz_i32($7) << 2) + 75824 >> 2];
          $8 = (HEAP32[$4 + 4 >> 2] & -8) - $5 | 0;
          $0 = $4;
          while (1) {
           block8 : {
            $1 = HEAP32[$0 + 16 >> 2];
            if (!$1) {
             $1 = HEAP32[$0 + 20 >> 2];
             if (!$1) {
              break block8
             }
            }
            $0 = (HEAP32[$1 + 4 >> 2] & -8) - $5 | 0;
            $2 = $0 >>> 0 < $8 >>> 0;
            $8 = $2 ? $0 : $8;
            $4 = $2 ? $1 : $4;
            $0 = $1;
            continue;
           }
           break;
          };
          block17 : {
           block9 : {
            $9 = HEAP32[18884];
            if ($9 >>> 0 > $4 >>> 0) {
             break block9
            }
            $6 = HEAP32[$4 + 24 >> 2];
            $1 = HEAP32[$4 + 12 >> 2];
            block10 : {
             if (($4 | 0) != ($1 | 0)) {
              $0 = HEAP32[$4 + 8 >> 2];
              if ($0 >>> 0 < $9 >>> 0 | HEAP32[$0 + 12 >> 2] != ($4 | 0) | HEAP32[$1 + 8 >> 2] != ($4 | 0)) {
               break block9
              }
              HEAP32[$0 + 12 >> 2] = $1;
              HEAP32[$1 + 8 >> 2] = $0;
              break block10;
             }
             block11 : {
              $0 = HEAP32[$4 + 20 >> 2];
              if ($0) {
               $2 = $4 + 20 | 0
              } else {
               $0 = HEAP32[$4 + 16 >> 2];
               if (!$0) {
                break block11
               }
               $2 = $4 + 16 | 0;
              }
              while (1) {
               $3 = $2;
               $1 = $0;
               $2 = $0 + 20 | 0;
               $0 = HEAP32[$0 + 20 >> 2];
               if ($0) {
                continue
               }
               $2 = $1 + 16 | 0;
               $0 = HEAP32[$1 + 16 >> 2];
               if ($0) {
                continue
               }
               break;
              };
              if ($3 >>> 0 < $9 >>> 0) {
               break block9
              }
              HEAP32[$3 >> 2] = 0;
              break block10;
             }
             $1 = 0;
            }
            block12 : {
             if (!$6) {
              break block12
             }
             $2 = HEAP32[$4 + 28 >> 2];
             $0 = ($2 << 2) + 75824 | 0;
             block13 : {
              if (HEAP32[$0 >> 2] == ($4 | 0)) {
               HEAP32[$0 >> 2] = $1;
               if ($1) {
                break block13
               }
               (wasm2js_i32$0 = 75524, wasm2js_i32$1 = __wasm_rotl_i32(-2, $2) & $7), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break block12;
              }
              if ($6 >>> 0 < $9 >>> 0) {
               break block9
              }
              block14 : {
               if (HEAP32[$6 + 16 >> 2] == ($4 | 0)) {
                HEAP32[$6 + 16 >> 2] = $1;
                break block14;
               }
               HEAP32[$6 + 20 >> 2] = $1;
              }
              if (!$1) {
               break block12
              }
             }
             if ($1 >>> 0 < $9 >>> 0) {
              break block9
             }
             HEAP32[$1 + 24 >> 2] = $6;
             $0 = HEAP32[$4 + 16 >> 2];
             if ($0) {
              if ($0 >>> 0 < $9 >>> 0) {
               break block9
              }
              HEAP32[$1 + 16 >> 2] = $0;
              HEAP32[$0 + 24 >> 2] = $1;
             }
             $0 = HEAP32[$4 + 20 >> 2];
             if (!$0) {
              break block12
             }
             if ($0 >>> 0 < $9 >>> 0) {
              break block9
             }
             HEAP32[$1 + 20 >> 2] = $0;
             HEAP32[$0 + 24 >> 2] = $1;
            }
            block15 : {
             if ($8 >>> 0 <= 15) {
              $0 = $5 + $8 | 0;
              HEAP32[$4 + 4 >> 2] = $0 | 3;
              $0 = $0 + $4 | 0;
              HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
              break block15;
             }
             HEAP32[$4 + 4 >> 2] = $5 | 3;
             $3 = $4 + $5 | 0;
             HEAP32[$3 + 4 >> 2] = $8 | 1;
             HEAP32[$3 + $8 >> 2] = $8;
             $1 = HEAP32[18882];
             if ($1) {
              $0 = ($1 & -8) + 75560 | 0;
              $7 = HEAP32[18885];
              $2 = 1 << ($1 >>> 3);
              $1 = HEAP32[18880];
              block16 : {
               if (!($2 & $1)) {
                HEAP32[18880] = $1 | $2;
                $2 = $0;
                break block16;
               }
               $2 = HEAP32[$0 + 8 >> 2];
               if ($9 >>> 0 > $2 >>> 0) {
                break block9
               }
              }
              HEAP32[$0 + 8 >> 2] = $7;
              HEAP32[$2 + 12 >> 2] = $7;
              HEAP32[$7 + 12 >> 2] = $0;
              HEAP32[$7 + 8 >> 2] = $2;
             }
             HEAP32[18885] = $3;
             HEAP32[18882] = $8;
            }
            $4 = $4 + 8 | 0;
            break block17;
           }
           abort();
           wasm2js_trap();
          }
          break block4;
         }
         $5 = -1;
         if ($0 >>> 0 > 4294967231) {
          break block5
         }
         $4 = $0 + 11 | 0;
         $5 = $4 & -8;
         $9 = HEAP32[18881];
         if (!$9) {
          break block5
         }
         $8 = 31;
         if ($0 >>> 0 <= 16777204) {
          $0 = Math_clz32($4 >>> 8 | 0);
          $8 = (($5 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
         }
         $4 = 0 - $5 | 0;
         $1 = HEAP32[($8 << 2) + 75824 >> 2];
         block21 : {
          block20 : {
           block18 : {
            if (!$1) {
             $0 = 0;
             break block18;
            }
            $0 = 0;
            $3 = $5 << (($8 | 0) != 31 ? 25 - ($8 >>> 1 | 0) | 0 : 0);
            while (1) {
             block19 : {
              $6 = (HEAP32[$1 + 4 >> 2] & -8) - $5 | 0;
              $7 = $6 >>> 0 >= $4 >>> 0;
              if ($7) {
               break block19
              }
              $2 = $1;
              $4 = $6;
              if ($4) {
               break block19
              }
              $4 = 0;
              $0 = $1;
              break block20;
             }
             $10 = HEAP32[$1 + 20 >> 2];
             $7 = HEAP32[(($3 >>> 29 & 4) + $1 | 0) + 16 >> 2];
             $0 = $10 ? (($10 | 0) == ($7 | 0) ? $0 : $10) : $0;
             $3 = $3 << 1;
             $1 = $7;
             if ($1) {
              continue
             }
             break;
            };
           }
           if (!($0 | $2)) {
            $2 = 0;
            $0 = 2 << $8;
            $1 = 0 - $0 | 0;
            $0 = ($1 | $0) & $9;
            if (!$0) {
             break block5
            }
            $0 = HEAP32[(__wasm_ctz_i32($0) << 2) + 75824 >> 2];
           }
           if (!$0) {
            break block21
           }
          }
          while (1) {
           $10 = (HEAP32[$0 + 4 >> 2] & -8) - $5 | 0;
           $3 = $10 >>> 0 < $4 >>> 0;
           $4 = $3 ? $10 : $4;
           $2 = $3 ? $0 : $2;
           $1 = HEAP32[$0 + 16 >> 2];
           if ($1) {
            $0 = $1
           } else {
            $0 = HEAP32[$0 + 20 >> 2]
           }
           if ($0) {
            continue
           }
           break;
          };
         }
         if (!$2 | HEAP32[18882] - $5 >>> 0 <= $4 >>> 0) {
          break block5
         }
         $7 = HEAP32[18884];
         $0 = $7 >>> 0 > $2 >>> 0;
         if ($0) {
          break block3
         }
         $11 = HEAP32[$2 + 24 >> 2];
         $0 = HEAP32[$2 + 12 >> 2];
         block22 : {
          if (($2 | 0) != ($0 | 0)) {
           $1 = HEAP32[$2 + 8 >> 2];
           $3 = $1 >>> 0 < $7 >>> 0;
           if ($3) {
            break block3
           }
           $3 = HEAP32[$1 + 12 >> 2] != ($2 | 0);
           if ($3) {
            break block3
           }
           $3 = HEAP32[$0 + 8 >> 2] != ($2 | 0);
           if ($3) {
            break block3
           }
           HEAP32[$1 + 12 >> 2] = $0;
           HEAP32[$0 + 8 >> 2] = $1;
           break block22;
          }
          block23 : {
           $1 = HEAP32[$2 + 20 >> 2];
           if ($1) {
            $3 = $2 + 20 | 0
           } else {
            $1 = HEAP32[$2 + 16 >> 2];
            if (!$1) {
             break block23
            }
            $3 = $2 + 16 | 0;
           }
           while (1) {
            $6 = $3;
            $0 = $1;
            $3 = $0 + 20 | 0;
            $1 = HEAP32[$0 + 20 >> 2];
            if ($1) {
             continue
            }
            $3 = $0 + 16 | 0;
            $1 = HEAP32[$0 + 16 >> 2];
            if ($1) {
             continue
            }
            break;
           };
           if ($6 >>> 0 < $7 >>> 0) {
            break block3
           }
           HEAP32[$6 >> 2] = 0;
           break block22;
          }
          $0 = 0;
         }
         block24 : {
          if (!$11) {
           break block24
          }
          $3 = HEAP32[$2 + 28 >> 2];
          $1 = ($3 << 2) + 75824 | 0;
          block25 : {
           if (HEAP32[$1 >> 2] == ($2 | 0)) {
            HEAP32[$1 >> 2] = $0;
            if ($0) {
             break block25
            }
            $9 = __wasm_rotl_i32(-2, $3) & $9;
            HEAP32[18881] = $9;
            break block24;
           }
           if ($7 >>> 0 > $11 >>> 0) {
            break block3
           }
           block26 : {
            if (HEAP32[$11 + 16 >> 2] == ($2 | 0)) {
             HEAP32[$11 + 16 >> 2] = $0;
             break block26;
            }
            HEAP32[$11 + 20 >> 2] = $0;
           }
           if (!$0) {
            break block24
           }
          }
          if ($0 >>> 0 < $7 >>> 0) {
           break block3
          }
          HEAP32[$0 + 24 >> 2] = $11;
          $1 = HEAP32[$2 + 16 >> 2];
          if ($1) {
           $3 = $1 >>> 0 < $7 >>> 0;
           if ($3) {
            break block3
           }
           HEAP32[$0 + 16 >> 2] = $1;
           HEAP32[$1 + 24 >> 2] = $0;
          }
          $1 = HEAP32[$2 + 20 >> 2];
          if (!$1) {
           break block24
          }
          $3 = $1 >>> 0 < $7 >>> 0;
          if ($3) {
           break block3
          }
          HEAP32[$0 + 20 >> 2] = $1;
          HEAP32[$1 + 24 >> 2] = $0;
         }
         block27 : {
          if ($4 >>> 0 <= 15) {
           $0 = $4 + $5 | 0;
           HEAP32[$2 + 4 >> 2] = $0 | 3;
           $0 = $0 + $2 | 0;
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
           break block27;
          }
          HEAP32[$2 + 4 >> 2] = $5 | 3;
          $3 = $2 + $5 | 0;
          HEAP32[$3 + 4 >> 2] = $4 | 1;
          HEAP32[$3 + $4 >> 2] = $4;
          if ($4 >>> 0 <= 255) {
           $0 = ($4 & -8) + 75560 | 0;
           $6 = HEAP32[18880];
           $1 = 1 << ($4 >>> 3);
           $5 = !($6 & $1);
           block28 : {
            if ($5) {
             HEAP32[18880] = $1 | $6;
             $4 = $0;
             break block28;
            }
            $4 = HEAP32[$0 + 8 >> 2];
            if ($7 >>> 0 > $4 >>> 0) {
             break block3
            }
           }
           HEAP32[$0 + 8 >> 2] = $3;
           HEAP32[$4 + 12 >> 2] = $3;
           HEAP32[$3 + 12 >> 2] = $0;
           HEAP32[$3 + 8 >> 2] = $4;
           break block27;
          }
          $0 = 31;
          if ($4 >>> 0 <= 16777215) {
           $0 = Math_clz32($4 >>> 8 | 0);
           $0 = (($4 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
          }
          HEAP32[$3 + 28 >> 2] = $0;
          HEAP32[$3 + 16 >> 2] = 0;
          HEAP32[$3 + 20 >> 2] = 0;
          $5 = ($0 << 2) + 75824 | 0;
          block30 : {
           $1 = 1 << $0;
           block29 : {
            if (!($1 & $9)) {
             HEAP32[18881] = $1 | $9;
             HEAP32[$5 >> 2] = $3;
             HEAP32[$3 + 24 >> 2] = $5;
             break block29;
            }
            $0 = $4 << (($0 | 0) != 31 ? 25 - ($0 >>> 1 | 0) | 0 : 0);
            $5 = HEAP32[$5 >> 2];
            while (1) {
             $1 = $5;
             $5 = (HEAP32[$1 + 4 >> 2] & -8) == ($4 | 0);
             if ($5) {
              break block30
             }
             $5 = $0 >>> 29 | 0;
             $0 = $0 << 1;
             $6 = $1 + ($5 & 4) | 0;
             $5 = HEAP32[$6 + 16 >> 2];
             if ($5) {
              continue
             }
             break;
            };
            $0 = $6 + 16 | 0;
            $4 = $7 >>> 0 > $0 >>> 0;
            if ($4) {
             break block3
            }
            HEAP32[$0 >> 2] = $3;
            HEAP32[$3 + 24 >> 2] = $1;
           }
           HEAP32[$3 + 12 >> 2] = $3;
           HEAP32[$3 + 8 >> 2] = $3;
           break block27;
          }
          $0 = $1 >>> 0 < $7 >>> 0;
          if ($0) {
           break block3
          }
          $0 = HEAP32[$1 + 8 >> 2];
          $4 = $7 >>> 0 > $0 >>> 0;
          if ($4) {
           break block3
          }
          HEAP32[$0 + 12 >> 2] = $3;
          HEAP32[$1 + 8 >> 2] = $3;
          HEAP32[$3 + 24 >> 2] = 0;
          HEAP32[$3 + 12 >> 2] = $1;
          HEAP32[$3 + 8 >> 2] = $0;
         }
         $4 = $2 + 8 | 0;
         break block4;
        }
        $0 = HEAP32[18882];
        if ($0 >>> 0 >= $5 >>> 0) {
         $2 = HEAP32[18885];
         $1 = $0 - $5 | 0;
         block31 : {
          if ($1 >>> 0 >= 16) {
           $3 = $2 + $5 | 0;
           HEAP32[$3 + 4 >> 2] = $1 | 1;
           HEAP32[$0 + $2 >> 2] = $1;
           HEAP32[$2 + 4 >> 2] = $5 | 3;
           break block31;
          }
          HEAP32[$2 + 4 >> 2] = $0 | 3;
          $0 = $0 + $2 | 0;
          HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
          $3 = 0;
          $1 = 0;
         }
         HEAP32[18882] = $1;
         HEAP32[18885] = $3;
         $4 = $2 + 8 | 0;
         break block4;
        }
        $0 = HEAP32[18883];
        if ($0 >>> 0 > $5 >>> 0) {
         $1 = $0 - $5 | 0;
         HEAP32[18883] = $1;
         $2 = HEAP32[18886];
         $0 = $2 + $5 | 0;
         HEAP32[18886] = $0;
         HEAP32[$0 + 4 >> 2] = $1 | 1;
         HEAP32[$2 + 4 >> 2] = $5 | 3;
         $4 = $2 + 8 | 0;
         break block4;
        }
        $4 = 0;
        $0 = !HEAP32[18874];
       }
       if (!global$9 | ($11 | 0) == 2 ? (global$9 | 0) == 2 | $0 : 0) {
        init_mparams();
        $9 = 2;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $10 = $5 + 47 | 0;
        $0 = HEAP32[18876];
        $1 = $10 + $0 | 0;
        $2 = $1 & 0 - $0;
        if ($5 >>> 0 >= $2 >>> 0) {
         break block4
        }
        $0 = HEAP32[18990];
        if ($0) {
         $1 = HEAP32[18988];
         $3 = $2 + $1 | 0;
         if ($0 >>> 0 < $3 >>> 0 | $1 >>> 0 >= $3 >>> 0) {
          break block4
         }
        }
        $0 = !(HEAPU8[75964] & 4);
       }
       block37 : {
        block38 : {
         block35 : {
          if ((global$9 | 0) == 2 | $0) {
           $4 = global$9 ? $4 : HEAP32[18886];
           block33 : {
            block36 : {
             block34 : {
              block32 : {
               if (!($4 ? global$9 : 1)) {
                $0 = 75992;
                while (1) {
                 $1 = HEAP32[$0 >> 2];
                 $3 = $4 >>> 0 >= $1 >>> 0;
                 if ($3) {
                  $3 = HEAP32[$0 + 4 >> 2];
                  if ($3 + $1 >>> 0 > $4 >>> 0) {
                   break block32
                  }
                 }
                 $0 = HEAP32[$0 + 8 >> 2];
                 if ($0) {
                  continue
                 }
                 break;
                };
               }
               if (!global$9 | ($11 | 0) == 3) {
                $6 = __pthread_mutex_lock(76016);
                $9 = 3;
                if ((global$9 | 0) == 1) {
                 break block
                }
                $0 = $6;
               }
               if (!global$9) {
                $3 = sbrk(0);
                $0 = ($3 | 0) == -1;
                if ($0) {
                 break block33
                }
                $7 = $2;
                $0 = HEAP32[18875];
                $4 = $0 - 1 | 0;
                if ($3 & $4) {
                 $7 = ($2 - $3 | 0) + ($3 + $4 & 0 - $0) | 0
                }
                $0 = $5 >>> 0 >= $7 >>> 0;
                if ($0) {
                 break block33
                }
                $0 = HEAP32[18990];
                if ($0) {
                 $4 = HEAP32[18988];
                 $1 = $4 + $7 | 0;
                 $4 = $1 >>> 0 <= $4 >>> 0;
                 if ($4) {
                  break block33
                 }
                 $0 = $0 >>> 0 < $1 >>> 0;
                 if ($0) {
                  break block33
                 }
                }
                $0 = sbrk($7);
                if (($3 | 0) != ($0 | 0)) {
                 break block34
                }
                break block35;
               }
              }
              if (!global$9 | ($11 | 0) == 4) {
               __pthread_mutex_lock(76016);
               $9 = 4;
               if ((global$9 | 0) == 1) {
                break block
               }
              }
              if (!global$9) {
               $4 = HEAP32[18876];
               $7 = 0 - $4 & ($10 - HEAP32[18883] | 0) + $4;
               $3 = sbrk($7);
               $0 = ($3 | 0) == (HEAP32[$0 + 4 >> 2] + HEAP32[$0 >> 2] | 0);
               if ($0) {
                break block36
               }
               $0 = $3;
              }
             }
             if (!global$9) {
              if (($0 | 0) == -1) {
               break block33
              }
              if ($5 + 48 >>> 0 > $7 >>> 0) {
               $4 = HEAP32[18876];
               $3 = $4 + ($10 - $7 | 0) | 0;
               $4 = $3 & 0 - $4;
               if ((sbrk($4) | 0) == -1) {
                break block33
               }
               $7 = $4 + $7 | 0;
              }
              $3 = $0;
              break block35;
             }
            }
            if (!global$9) {
             $0 = ($3 | 0) != -1;
             if ($0) {
              break block35
             }
            }
           }
           if (!global$9) {
            HEAP32[18991] = HEAP32[18991] | 4;
            $0 = __pthread_mutex_unlock(76016);
           }
          }
          if (!global$9 | ($11 | 0) == 5) {
           $6 = __pthread_mutex_lock(76016);
           $9 = 5;
           if ((global$9 | 0) == 1) {
            break block
           }
           $0 = $6;
          }
          if (!global$9) {
           $3 = sbrk($2);
           $0 = sbrk(0);
           __pthread_mutex_unlock(76016);
           if (($3 | 0) == -1 | ($0 | 0) == -1 | $0 >>> 0 <= $3 >>> 0) {
            break block37
           }
           $7 = $0 - $3 | 0;
           $0 = $7 >>> 0 <= $5 + 40 >>> 0;
           if ($0) {
            break block37
           }
           break block38;
          }
         }
         if (!global$9) {
          $0 = __pthread_mutex_unlock(76016)
         }
        }
        if (!global$9) {
         $0 = HEAP32[18988] + $7 | 0;
         HEAP32[18988] = $0;
         if ($0 >>> 0 > HEAPU32[18989]) {
          HEAP32[18989] = $0
         }
         block41 : {
          block40 : {
           block39 : {
            $4 = HEAP32[18886];
            if ($4) {
             $0 = 75992;
             while (1) {
              $2 = HEAP32[$0 >> 2];
              $1 = HEAP32[$0 + 4 >> 2];
              if (($2 + $1 | 0) == ($3 | 0)) {
               break block39
              }
              $0 = HEAP32[$0 + 8 >> 2];
              if ($0) {
               continue
              }
              break;
             };
             break block40;
            }
            $0 = HEAP32[18884];
            if (!($0 >>> 0 <= $3 >>> 0 ? $0 : 0)) {
             HEAP32[18884] = $3
            }
            $0 = 0;
            HEAP32[18999] = $7;
            HEAP32[18998] = $3;
            HEAP32[18888] = -1;
            HEAP32[18889] = HEAP32[18874];
            HEAP32[19001] = 0;
            while (1) {
             $2 = $0 << 3;
             $1 = $2 + 75560 | 0;
             HEAP32[$2 + 75568 >> 2] = $1;
             $2 = $2 + 75572 | 0;
             HEAP32[$2 >> 2] = $1;
             $0 = $0 + 1 | 0;
             if (($0 | 0) != 32) {
              continue
             }
             break;
            };
            $6 = $7 - 40 | 0;
            $1 = -8 - $3 & 7;
            $0 = $6 - $1 | 0;
            HEAP32[18883] = $0;
            $4 = $1 + $3 | 0;
            HEAP32[18886] = $4;
            HEAP32[$4 + 4 >> 2] = $0 | 1;
            HEAP32[($3 + $6 | 0) + 4 >> 2] = 40;
            HEAP32[18887] = HEAP32[18878];
            break block41;
           }
           if (HEAP32[$0 + 12 >> 2] & 8 | ($4 >>> 0 < $2 >>> 0 | $3 >>> 0 <= $4 >>> 0)) {
            break block40
           }
           HEAP32[$0 + 4 >> 2] = $1 + $7;
           $0 = -8 - $4 & 7;
           $1 = $0 + $4 | 0;
           HEAP32[18886] = $1;
           $2 = HEAP32[18883];
           $3 = $7 + $2 | 0;
           $0 = $3 - $0 | 0;
           HEAP32[18883] = $0;
           HEAP32[$1 + 4 >> 2] = $0 | 1;
           HEAP32[($3 + $4 | 0) + 4 >> 2] = 40;
           HEAP32[18887] = HEAP32[18878];
           break block41;
          }
          if (HEAPU32[18884] > $3 >>> 0) {
           HEAP32[18884] = $3
          }
          $1 = $3 + $7 | 0;
          $0 = 75992;
          block42 : {
           while (1) {
            $2 = HEAP32[$0 >> 2];
            if (($1 | 0) != ($2 | 0)) {
             $0 = HEAP32[$0 + 8 >> 2];
             if ($0) {
              continue
             }
             break block42;
            }
            break;
           };
           if (!(HEAPU8[$0 + 12 | 0] & 8)) {
            break block43
           }
          }
          $0 = 75992;
          while (1) {
           block44 : {
            $1 = HEAP32[$0 >> 2];
            if ($1 >>> 0 <= $4 >>> 0) {
             $6 = $1 + HEAP32[$0 + 4 >> 2] | 0;
             if ($6 >>> 0 > $4 >>> 0) {
              break block44
             }
            }
            $0 = HEAP32[$0 + 8 >> 2];
            continue;
           }
           break;
          };
          $2 = $7 - 40 | 0;
          $0 = -8 - $3 & 7;
          $1 = $2 - $0 | 0;
          HEAP32[18883] = $1;
          $0 = $0 + $3 | 0;
          HEAP32[18886] = $0;
          HEAP32[$0 + 4 >> 2] = $1 | 1;
          HEAP32[($3 + $2 | 0) + 4 >> 2] = 40;
          HEAP32[18887] = HEAP32[18878];
          $0 = ($6 + (39 - $6 & 7) | 0) - 47 | 0;
          $2 = $0 >>> 0 < $4 + 16 >>> 0 ? $4 : $0;
          HEAP32[$2 + 4 >> 2] = 27;
          $0 = HEAP32[19001];
          HEAP32[$2 + 16 >> 2] = HEAP32[19e3];
          HEAP32[$2 + 20 >> 2] = $0;
          $0 = HEAP32[18999];
          HEAP32[$2 + 8 >> 2] = HEAP32[18998];
          HEAP32[$2 + 12 >> 2] = $0;
          HEAP32[19e3] = $2 + 8;
          HEAP32[18999] = $7;
          HEAP32[18998] = $3;
          HEAP32[19001] = 0;
          $0 = $2 + 24 | 0;
          while (1) {
           HEAP32[$0 + 4 >> 2] = 7;
           $1 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           $3 = $1 >>> 0 < $6 >>> 0;
           if ($3) {
            continue
           }
           break;
          };
          if (($4 | 0) == ($2 | 0)) {
           break block41
          }
          HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
          $3 = $2 - $4 | 0;
          HEAP32[$4 + 4 >> 2] = $3 | 1;
          HEAP32[$2 >> 2] = $3;
          block46 : {
           if ($3 >>> 0 <= 255) {
            $0 = ($3 & -8) + 75560 | 0;
            $3 = 1 << ($3 >>> 3);
            $1 = HEAP32[18880];
            block45 : {
             if (!($3 & $1)) {
              HEAP32[18880] = $1 | $3;
              $1 = $0;
              break block45;
             }
             $1 = HEAP32[$0 + 8 >> 2];
             $2 = $1 >>> 0 < HEAPU32[18884];
             if ($2) {
              break block3
             }
            }
            HEAP32[$0 + 8 >> 2] = $4;
            HEAP32[$1 + 12 >> 2] = $4;
            $3 = 12;
            $2 = 8;
            break block46;
           }
           $0 = 31;
           if ($3 >>> 0 <= 16777215) {
            $0 = Math_clz32($3 >>> 8 | 0);
            $0 = (($3 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
           }
           HEAP32[$4 + 28 >> 2] = $0;
           HEAP32[$4 + 16 >> 2] = 0;
           HEAP32[$4 + 20 >> 2] = 0;
           $6 = ($0 << 2) + 75824 | 0;
           block48 : {
            $2 = HEAP32[18881];
            $1 = 1 << $0;
            $7 = !($2 & $1);
            block47 : {
             if ($7) {
              HEAP32[18881] = $1 | $2;
              HEAP32[$6 >> 2] = $4;
              HEAP32[$4 + 24 >> 2] = $6;
              break block47;
             }
             $0 = $3 << (($0 | 0) != 31 ? 25 - ($0 >>> 1 | 0) | 0 : 0);
             $2 = HEAP32[$6 >> 2];
             while (1) {
              $1 = $2;
              $2 = (HEAP32[$1 + 4 >> 2] & -8) == ($3 | 0);
              if ($2) {
               break block48
              }
              $2 = $0 >>> 29 | 0;
              $0 = $0 << 1;
              $6 = ($2 & 4) + $1 | 0;
              $2 = HEAP32[$6 + 16 >> 2];
              if ($2) {
               continue
              }
              break;
             };
             $0 = $6 + 16 | 0;
             $2 = $0 >>> 0 < HEAPU32[18884];
             if ($2) {
              break block3
             }
             HEAP32[$0 >> 2] = $4;
             HEAP32[$4 + 24 >> 2] = $1;
            }
            $3 = 8;
            $1 = $4;
            $0 = $1;
            $2 = 12;
            break block46;
           }
           $3 = HEAP32[18884];
           $0 = $3 >>> 0 > $1 >>> 0;
           if ($0) {
            break block3
           }
           $0 = HEAP32[$1 + 8 >> 2];
           $2 = $3 >>> 0 > $0 >>> 0;
           if ($2) {
            break block3
           }
           HEAP32[$0 + 12 >> 2] = $4;
           HEAP32[$1 + 8 >> 2] = $4;
           HEAP32[$4 + 8 >> 2] = $0;
           $0 = 0;
           $3 = 24;
           $2 = 12;
          }
          $2 = $2 + $4 | 0;
          HEAP32[$2 >> 2] = $1;
          HEAP32[$3 + $4 >> 2] = $0;
         }
         $0 = HEAP32[18883];
         if ($5 >>> 0 >= $0 >>> 0) {
          break block37
         }
         $1 = $0 - $5 | 0;
         HEAP32[18883] = $1;
         $2 = HEAP32[18886];
         $0 = $2 + $5 | 0;
         HEAP32[18886] = $0;
         HEAP32[$0 + 4 >> 2] = $1 | 1;
         HEAP32[$2 + 4 >> 2] = $5 | 3;
         $4 = $2 + 8 | 0;
         break block4;
        }
       }
       if (!global$9) {
        HEAP32[__tls_base >> 2] = 48;
        $4 = 0;
        break block4;
       }
      }
      if (!global$9) {
       abort();
       wasm2js_trap();
      }
     }
     if (!global$9) {
      HEAP32[$0 >> 2] = $3;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $7;
      $4 = (-8 - $3 & 7) + $3 | 0;
      HEAP32[$4 + 4 >> 2] = $5 | 3;
      $8 = (-8 - $2 & 7) + $2 | 0;
      $6 = $4 + $5 | 0;
      $3 = $8 - $6 | 0;
      block59 : {
       block50 : {
        block49 : {
         if (HEAP32[18886] == ($8 | 0)) {
          HEAP32[18886] = $6;
          $0 = HEAP32[18883] + $3 | 0;
          HEAP32[18883] = $0;
          HEAP32[$6 + 4 >> 2] = $0 | 1;
          break block49;
         }
         if (HEAP32[18885] == ($8 | 0)) {
          HEAP32[18885] = $6;
          $0 = HEAP32[18882] + $3 | 0;
          HEAP32[18882] = $0;
          HEAP32[$6 + 4 >> 2] = $0 | 1;
          HEAP32[$0 + $6 >> 2] = $0;
          break block49;
         }
         $10 = HEAP32[$8 + 4 >> 2];
         if (($10 & 3) == 1) {
          $5 = HEAP32[$8 + 12 >> 2];
          block51 : {
           if ($10 >>> 0 <= 255) {
            $1 = $10 >>> 3 | 0;
            $0 = ($1 << 3) + 75560 | 0;
            $2 = HEAP32[$8 + 8 >> 2];
            if (($0 | 0) != ($2 | 0) & (HEAP32[$2 + 12 >> 2] != ($8 | 0) | $2 >>> 0 < HEAPU32[18884])) {
             break block50
            }
            if (($2 | 0) == ($5 | 0)) {
             (wasm2js_i32$0 = 75520, wasm2js_i32$1 = HEAP32[18880] & __wasm_rotl_i32(-2, $1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
             break block51;
            }
            if ((HEAP32[$5 + 8 >> 2] != ($8 | 0) | HEAPU32[18884] > $5 >>> 0) & ($0 | 0) != ($5 | 0)) {
             break block50
            }
            HEAP32[$2 + 12 >> 2] = $5;
            HEAP32[$5 + 8 >> 2] = $2;
            break block51;
           }
           $7 = HEAP32[$8 + 24 >> 2];
           block52 : {
            if (($5 | 0) != ($8 | 0)) {
             $0 = HEAP32[$8 + 8 >> 2];
             if ($0 >>> 0 < HEAPU32[18884] | HEAP32[$0 + 12 >> 2] != ($8 | 0) | HEAP32[$5 + 8 >> 2] != ($8 | 0)) {
              break block50
             }
             HEAP32[$0 + 12 >> 2] = $5;
             HEAP32[$5 + 8 >> 2] = $0;
             break block52;
            }
            block53 : {
             $2 = HEAP32[$8 + 20 >> 2];
             if ($2) {
              $0 = $8 + 20 | 0
             } else {
              $2 = HEAP32[$8 + 16 >> 2];
              if (!$2) {
               break block53
              }
              $0 = $8 + 16 | 0;
             }
             while (1) {
              $1 = $0;
              $5 = $2;
              $0 = $2 + 20 | 0;
              $2 = HEAP32[$2 + 20 >> 2];
              if ($2) {
               continue
              }
              $0 = $5 + 16 | 0;
              $2 = HEAP32[$5 + 16 >> 2];
              if ($2) {
               continue
              }
              break;
             };
             if ($1 >>> 0 < HEAPU32[18884]) {
              break block50
             }
             HEAP32[$1 >> 2] = 0;
             break block52;
            }
            $5 = 0;
           }
           if (!$7) {
            break block51
           }
           $1 = HEAP32[$8 + 28 >> 2];
           $0 = ($1 << 2) + 75824 | 0;
           block54 : {
            if (HEAP32[$0 >> 2] == ($8 | 0)) {
             HEAP32[$0 >> 2] = $5;
             if ($5) {
              break block54
             }
             (wasm2js_i32$0 = 75524, wasm2js_i32$1 = HEAP32[18881] & __wasm_rotl_i32(-2, $1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
             break block51;
            }
            if ($7 >>> 0 < HEAPU32[18884]) {
             break block50
            }
            block55 : {
             if (HEAP32[$7 + 16 >> 2] == ($8 | 0)) {
              HEAP32[$7 + 16 >> 2] = $5;
              break block55;
             }
             HEAP32[$7 + 20 >> 2] = $5;
            }
            if (!$5) {
             break block51
            }
           }
           $0 = HEAP32[18884];
           if ($0 >>> 0 > $5 >>> 0) {
            break block50
           }
           HEAP32[$5 + 24 >> 2] = $7;
           $1 = HEAP32[$8 + 16 >> 2];
           if ($1) {
            if ($0 >>> 0 > $1 >>> 0) {
             break block50
            }
            HEAP32[$5 + 16 >> 2] = $1;
            HEAP32[$1 + 24 >> 2] = $5;
           }
           $1 = HEAP32[$8 + 20 >> 2];
           if (!$1) {
            break block51
           }
           if ($0 >>> 0 > $1 >>> 0) {
            break block50
           }
           HEAP32[$5 + 20 >> 2] = $1;
           HEAP32[$1 + 24 >> 2] = $5;
          }
          $0 = $10 & -8;
          $3 = $0 + $3 | 0;
          $8 = $0 + $8 | 0;
          $10 = HEAP32[$8 + 4 >> 2];
         }
         HEAP32[$8 + 4 >> 2] = $10 & -2;
         HEAP32[$6 + 4 >> 2] = $3 | 1;
         HEAP32[$3 + $6 >> 2] = $3;
         if ($3 >>> 0 <= 255) {
          $0 = ($3 & -8) + 75560 | 0;
          $2 = HEAP32[18880];
          $1 = 1 << ($3 >>> 3);
          block56 : {
           if (!($2 & $1)) {
            HEAP32[18880] = $1 | $2;
            $3 = $0;
            break block56;
           }
           $3 = HEAP32[$0 + 8 >> 2];
           if ($3 >>> 0 < HEAPU32[18884]) {
            break block50
           }
          }
          HEAP32[$0 + 8 >> 2] = $6;
          HEAP32[$3 + 12 >> 2] = $6;
          HEAP32[$6 + 12 >> 2] = $0;
          HEAP32[$6 + 8 >> 2] = $3;
          break block49;
         }
         $5 = 31;
         if ($3 >>> 0 <= 16777215) {
          $0 = Math_clz32($3 >>> 8 | 0);
          $5 = (($3 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
         }
         HEAP32[$6 + 28 >> 2] = $5;
         HEAP32[$6 + 16 >> 2] = 0;
         HEAP32[$6 + 20 >> 2] = 0;
         $2 = ($5 << 2) + 75824 | 0;
         block58 : {
          $1 = HEAP32[18881];
          $0 = 1 << $5;
          block57 : {
           if (!($1 & $0)) {
            HEAP32[18881] = $0 | $1;
            HEAP32[$2 >> 2] = $6;
            HEAP32[$6 + 24 >> 2] = $2;
            break block57;
           }
           $5 = $3 << (($5 | 0) != 31 ? 25 - ($5 >>> 1 | 0) | 0 : 0);
           $0 = HEAP32[$2 >> 2];
           while (1) {
            $1 = $0;
            if ((HEAP32[$0 + 4 >> 2] & -8) == ($3 | 0)) {
             break block58
            }
            $2 = $5 >>> 29 | 0;
            $5 = $5 << 1;
            $2 = $0 + ($2 & 4) | 0;
            $0 = HEAP32[$2 + 16 >> 2];
            if ($0) {
             continue
            }
            break;
           };
           $0 = $2 + 16 | 0;
           if ($0 >>> 0 < HEAPU32[18884]) {
            break block50
           }
           HEAP32[$0 >> 2] = $6;
           HEAP32[$6 + 24 >> 2] = $1;
          }
          HEAP32[$6 + 12 >> 2] = $6;
          HEAP32[$6 + 8 >> 2] = $6;
          break block49;
         }
         $0 = HEAP32[18884];
         if ($0 >>> 0 > $1 >>> 0) {
          break block50
         }
         $2 = $0;
         $0 = HEAP32[$1 + 8 >> 2];
         if ($2 >>> 0 > $0 >>> 0) {
          break block50
         }
         HEAP32[$0 + 12 >> 2] = $6;
         HEAP32[$1 + 8 >> 2] = $6;
         HEAP32[$6 + 24 >> 2] = 0;
         HEAP32[$6 + 12 >> 2] = $1;
         HEAP32[$6 + 8 >> 2] = $0;
        }
        $4 = $4 + 8 | 0;
        break block59;
       }
       abort();
       wasm2js_trap();
      }
     }
    }
    if (!global$9) {
     if (!(HEAPU8[75964] & 2)) {
      break block1
     }
     __pthread_mutex_unlock(75968);
    }
   }
   if (!global$9) {
    return $4 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $4;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $2;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function init_mparams() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
  }
  block : {
   if (!global$9 | !$0) {
    __pthread_mutex_lock(76016);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    if (!HEAP32[18874]) {
     HEAP32[18879] = 2;
     HEAP32[18877] = -1;
     HEAP32[18878] = -1;
     HEAP32[18875] = 4096;
     HEAP32[18876] = 4096;
     HEAP32[18991] = 2;
     $4 = $1 + 12 | 0;
     HEAP32[$4 >> 2] = 0;
     $0 = __stack_pointer - 32 | 0;
     $2 = $0 + 24 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     $3 = $0 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     HEAP32[$0 + 12 >> 2] = 0;
     $5 = HEAP32[$0 + 12 >> 2];
     HEAP32[18992] = HEAP32[$0 + 8 >> 2];
     HEAP32[18993] = $5;
     $0 = HEAP32[$2 + 4 >> 2];
     HEAP32[18996] = HEAP32[$2 >> 2];
     HEAP32[18997] = $0;
     $0 = HEAP32[$3 + 4 >> 2];
     HEAP32[18994] = HEAP32[$3 >> 2];
     HEAP32[18995] = $0;
     $0 = $4;
     if ($0) {
      HEAP32[18992] = HEAP32[$0 >> 2]
     }
     HEAP32[18874] = $1 + 8 & -16 ^ 1431655768;
    }
    __pthread_mutex_unlock(76016);
    __stack_pointer = $1 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function emscripten_builtin_free($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : !$0;
  block1 : {
   block2 : {
    block : {
     if (!global$9) {
      if ($1) {
       break block
      }
      $1 = HEAPU8[75964] & 2;
     }
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9 | !$4) {
       $4 = __pthread_mutex_lock(75968);
       if ((global$9 | 0) == 1) {
        break block1
       }
       $1 = $4;
      }
      if (!($1 ? global$9 : 1)) {
       break block
      }
     }
     if (!global$9) {
      $3 = $0 - 8 | 0;
      $6 = HEAP32[18884];
      if ($3 >>> 0 < $6 >>> 0) {
       break block2
      }
      $1 = HEAP32[$0 - 4 >> 2];
      if (($1 & 3) == 1) {
       break block2
      }
      $0 = $1 & -8;
      $5 = $3 + $0 | 0;
      block4 : {
       block3 : {
        if ($1 & 1) {
         break block3
        }
        if (!($1 & 2)) {
         break block4
        }
        $1 = HEAP32[$3 >> 2];
        $3 = $3 - $1 | 0;
        if ($6 >>> 0 > $3 >>> 0) {
         break block2
        }
        $0 = $0 + $1 | 0;
        if (HEAP32[18885] != ($3 | 0)) {
         $2 = HEAP32[$3 + 12 >> 2];
         if ($1 >>> 0 <= 255) {
          $4 = $1 >>> 3 | 0;
          $7 = ($4 << 3) + 75560 | 0;
          $1 = HEAP32[$3 + 8 >> 2];
          if (($7 | 0) != ($1 | 0) & (HEAP32[$1 + 12 >> 2] != ($3 | 0) | $1 >>> 0 < $6 >>> 0)) {
           break block2
          }
          if (($1 | 0) == ($2 | 0)) {
           (wasm2js_i32$0 = 75520, wasm2js_i32$1 = HEAP32[18880] & __wasm_rotl_i32(-2, $4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           break block3;
          }
          if ((HEAP32[$2 + 8 >> 2] != ($3 | 0) | $2 >>> 0 < $6 >>> 0) & ($2 | 0) != ($7 | 0)) {
           break block2
          }
          HEAP32[$1 + 12 >> 2] = $2;
          HEAP32[$2 + 8 >> 2] = $1;
          break block3;
         }
         $8 = HEAP32[$3 + 24 >> 2];
         block5 : {
          if (($2 | 0) != ($3 | 0)) {
           $1 = HEAP32[$3 + 8 >> 2];
           if ($1 >>> 0 < $6 >>> 0 | HEAP32[$1 + 12 >> 2] != ($3 | 0) | HEAP32[$2 + 8 >> 2] != ($3 | 0)) {
            break block2
           }
           HEAP32[$1 + 12 >> 2] = $2;
           HEAP32[$2 + 8 >> 2] = $1;
           break block5;
          }
          block6 : {
           $1 = HEAP32[$3 + 20 >> 2];
           if ($1) {
            $4 = $3 + 20 | 0
           } else {
            $1 = HEAP32[$3 + 16 >> 2];
            if (!$1) {
             break block6
            }
            $4 = $3 + 16 | 0;
           }
           while (1) {
            $7 = $4;
            $2 = $1;
            $4 = $1 + 20 | 0;
            $1 = HEAP32[$1 + 20 >> 2];
            if ($1) {
             continue
            }
            $4 = $2 + 16 | 0;
            $1 = HEAP32[$2 + 16 >> 2];
            if ($1) {
             continue
            }
            break;
           };
           if ($6 >>> 0 > $7 >>> 0) {
            break block2
           }
           HEAP32[$7 >> 2] = 0;
           break block5;
          }
          $2 = 0;
         }
         if (!$8) {
          break block3
         }
         $1 = HEAP32[$3 + 28 >> 2];
         $4 = ($1 << 2) + 75824 | 0;
         block7 : {
          if (HEAP32[$4 >> 2] == ($3 | 0)) {
           HEAP32[$4 >> 2] = $2;
           if ($2) {
            break block7
           }
           (wasm2js_i32$0 = 75524, wasm2js_i32$1 = HEAP32[18881] & __wasm_rotl_i32(-2, $1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           break block3;
          }
          if ($6 >>> 0 > $8 >>> 0) {
           break block2
          }
          block8 : {
           if (HEAP32[$8 + 16 >> 2] == ($3 | 0)) {
            HEAP32[$8 + 16 >> 2] = $2;
            break block8;
           }
           HEAP32[$8 + 20 >> 2] = $2;
          }
          if (!$2) {
           break block3
          }
         }
         if ($2 >>> 0 < $6 >>> 0) {
          break block2
         }
         HEAP32[$2 + 24 >> 2] = $8;
         $1 = HEAP32[$3 + 16 >> 2];
         if ($1) {
          if ($1 >>> 0 < $6 >>> 0) {
           break block2
          }
          HEAP32[$2 + 16 >> 2] = $1;
          HEAP32[$1 + 24 >> 2] = $2;
         }
         $1 = HEAP32[$3 + 20 >> 2];
         if (!$1) {
          break block3
         }
         if ($1 >>> 0 < $6 >>> 0) {
          break block2
         }
         HEAP32[$2 + 20 >> 2] = $1;
         HEAP32[$1 + 24 >> 2] = $2;
         break block3;
        }
        $1 = HEAP32[$5 + 4 >> 2];
        if (($1 & 3) != 3) {
         break block3
        }
        HEAP32[18882] = $0;
        HEAP32[$5 + 4 >> 2] = $1 & -2;
        HEAP32[$3 + 4 >> 2] = $0 | 1;
        HEAP32[$5 >> 2] = $0;
        break block4;
       }
       if ($3 >>> 0 >= $5 >>> 0) {
        break block2
       }
       $9 = HEAP32[$5 + 4 >> 2];
       if (!($9 & 1)) {
        break block2
       }
       block14 : {
        if (!($9 & 2)) {
         if (($5 | 0) == HEAP32[18886]) {
          HEAP32[18886] = $3;
          $0 = HEAP32[18883] + $0 | 0;
          HEAP32[18883] = $0;
          HEAP32[$3 + 4 >> 2] = $0 | 1;
          if (HEAP32[18885] != ($3 | 0)) {
           break block4
          }
          HEAP32[18882] = 0;
          HEAP32[18885] = 0;
          break block4;
         }
         $10 = HEAP32[18885];
         if (($5 | 0) == ($10 | 0)) {
          HEAP32[18885] = $3;
          $0 = HEAP32[18882] + $0 | 0;
          HEAP32[18882] = $0;
          HEAP32[$3 + 4 >> 2] = $0 | 1;
          HEAP32[$0 + $3 >> 2] = $0;
          break block4;
         }
         $2 = HEAP32[$5 + 12 >> 2];
         block9 : {
          if ($9 >>> 0 <= 255) {
           $1 = HEAP32[$5 + 8 >> 2];
           $4 = $9 >>> 3 | 0;
           $7 = ($4 << 3) + 75560 | 0;
           if (($1 | 0) != ($7 | 0) & (($5 | 0) != HEAP32[$1 + 12 >> 2] | $1 >>> 0 < $6 >>> 0)) {
            break block2
           }
           if (($1 | 0) == ($2 | 0)) {
            (wasm2js_i32$0 = 75520, wasm2js_i32$1 = HEAP32[18880] & __wasm_rotl_i32(-2, $4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
            break block9;
           }
           if ((($5 | 0) != HEAP32[$2 + 8 >> 2] | $2 >>> 0 < $6 >>> 0) & ($2 | 0) != ($7 | 0)) {
            break block2
           }
           HEAP32[$1 + 12 >> 2] = $2;
           HEAP32[$2 + 8 >> 2] = $1;
           break block9;
          }
          $8 = HEAP32[$5 + 24 >> 2];
          block10 : {
           if (($2 | 0) != ($5 | 0)) {
            $1 = HEAP32[$5 + 8 >> 2];
            if ($1 >>> 0 < $6 >>> 0 | ($5 | 0) != HEAP32[$1 + 12 >> 2] | ($5 | 0) != HEAP32[$2 + 8 >> 2]) {
             break block2
            }
            HEAP32[$1 + 12 >> 2] = $2;
            HEAP32[$2 + 8 >> 2] = $1;
            break block10;
           }
           block11 : {
            $1 = HEAP32[$5 + 20 >> 2];
            if ($1) {
             $4 = $5 + 20 | 0
            } else {
             $1 = HEAP32[$5 + 16 >> 2];
             if (!$1) {
              break block11
             }
             $4 = $5 + 16 | 0;
            }
            while (1) {
             $7 = $4;
             $2 = $1;
             $4 = $1 + 20 | 0;
             $1 = HEAP32[$1 + 20 >> 2];
             if ($1) {
              continue
             }
             $4 = $2 + 16 | 0;
             $1 = HEAP32[$2 + 16 >> 2];
             if ($1) {
              continue
             }
             break;
            };
            if ($6 >>> 0 > $7 >>> 0) {
             break block2
            }
            HEAP32[$7 >> 2] = 0;
            break block10;
           }
           $2 = 0;
          }
          if (!$8) {
           break block9
          }
          $1 = HEAP32[$5 + 28 >> 2];
          $4 = ($1 << 2) + 75824 | 0;
          block12 : {
           if (($5 | 0) == HEAP32[$4 >> 2]) {
            HEAP32[$4 >> 2] = $2;
            if ($2) {
             break block12
            }
            (wasm2js_i32$0 = 75524, wasm2js_i32$1 = HEAP32[18881] & __wasm_rotl_i32(-2, $1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
            break block9;
           }
           if ($6 >>> 0 > $8 >>> 0) {
            break block2
           }
           block13 : {
            if (($5 | 0) == HEAP32[$8 + 16 >> 2]) {
             HEAP32[$8 + 16 >> 2] = $2;
             break block13;
            }
            HEAP32[$8 + 20 >> 2] = $2;
           }
           if (!$2) {
            break block9
           }
          }
          if ($2 >>> 0 < $6 >>> 0) {
           break block2
          }
          HEAP32[$2 + 24 >> 2] = $8;
          $1 = HEAP32[$5 + 16 >> 2];
          if ($1) {
           if ($1 >>> 0 < $6 >>> 0) {
            break block2
           }
           HEAP32[$2 + 16 >> 2] = $1;
           HEAP32[$1 + 24 >> 2] = $2;
          }
          $1 = HEAP32[$5 + 20 >> 2];
          if (!$1) {
           break block9
          }
          if ($1 >>> 0 < $6 >>> 0) {
           break block2
          }
          HEAP32[$2 + 20 >> 2] = $1;
          HEAP32[$1 + 24 >> 2] = $2;
         }
         $0 = ($9 & -8) + $0 | 0;
         HEAP32[$3 + 4 >> 2] = $0 | 1;
         HEAP32[$0 + $3 >> 2] = $0;
         if (($3 | 0) != ($10 | 0)) {
          break block14
         }
         HEAP32[18882] = $0;
         break block4;
        }
        HEAP32[$5 + 4 >> 2] = $9 & -2;
        HEAP32[$3 + 4 >> 2] = $0 | 1;
        HEAP32[$0 + $3 >> 2] = $0;
       }
       if ($0 >>> 0 <= 255) {
        $1 = ($0 & -8) + 75560 | 0;
        $0 = 1 << ($0 >>> 3);
        $4 = HEAP32[18880];
        block15 : {
         if (!($0 & $4)) {
          HEAP32[18880] = $0 | $4;
          $0 = $1;
          break block15;
         }
         $0 = HEAP32[$1 + 8 >> 2];
         if ($6 >>> 0 > $0 >>> 0) {
          break block2
         }
        }
        HEAP32[$1 + 8 >> 2] = $3;
        HEAP32[$0 + 12 >> 2] = $3;
        HEAP32[$3 + 12 >> 2] = $1;
        HEAP32[$3 + 8 >> 2] = $0;
        break block4;
       }
       $2 = 31;
       if ($0 >>> 0 <= 16777215) {
        $1 = Math_clz32($0 >>> 8 | 0);
        $2 = (($0 >>> 38 - $1 & 1) - ($1 << 1) | 0) + 62 | 0;
       }
       HEAP32[$3 + 28 >> 2] = $2;
       HEAP32[$3 + 16 >> 2] = 0;
       HEAP32[$3 + 20 >> 2] = 0;
       $4 = ($2 << 2) + 75824 | 0;
       block18 : {
        block17 : {
         $1 = HEAP32[18881];
         $7 = 1 << $2;
         block16 : {
          if (!($1 & $7)) {
           HEAP32[18881] = $1 | $7;
           HEAP32[$4 >> 2] = $3;
           $2 = 24;
           break block16;
          }
          $2 = $0 << (($2 | 0) != 31 ? 25 - ($2 >>> 1 | 0) | 0 : 0);
          $4 = HEAP32[$4 >> 2];
          while (1) {
           $1 = $4;
           if ((HEAP32[$1 + 4 >> 2] & -8) == ($0 | 0)) {
            break block17
           }
           $4 = $2 >>> 29 | 0;
           $2 = $2 << 1;
           $7 = ($4 & 4) + $1 | 0;
           $4 = HEAP32[$7 + 16 >> 2];
           if ($4) {
            continue
           }
           break;
          };
          $0 = $7 + 16 | 0;
          if ($0 >>> 0 < $6 >>> 0) {
           break block2
          }
          HEAP32[$0 >> 2] = $3;
          $4 = $1;
          $2 = 24;
         }
         $1 = $3;
         $7 = $1;
         $0 = 8;
         break block18;
        }
        if ($1 >>> 0 < $6 >>> 0) {
         break block2
        }
        $4 = HEAP32[$1 + 8 >> 2];
        if ($6 >>> 0 > $4 >>> 0) {
         break block2
        }
        HEAP32[$4 + 12 >> 2] = $3;
        HEAP32[$1 + 8 >> 2] = $3;
        $2 = 8;
        $7 = 0;
        $0 = 24;
       }
       HEAP32[$2 + $3 >> 2] = $4;
       HEAP32[$3 + 12 >> 2] = $1;
       HEAP32[$0 + $3 >> 2] = $7;
       $0 = HEAP32[18888] - 1 | 0;
       HEAP32[18888] = $0 ? $0 : -1;
      }
      if (!(HEAPU8[75964] & 2)) {
       break block
      }
      __pthread_mutex_unlock(75968);
     }
    }
    if (!global$9) {
     return
    }
   }
   if (!global$9) {
    abort();
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function emscripten_builtin_realloc($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $4 = HEAP32[$4 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $4 = global$9 ? $4 : !$0;
   if ($4 | (global$9 | 0) == 2) {
    if (!global$9 | !$13) {
     $3 = emscripten_builtin_malloc($1);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $3;
    }
    if (!global$9) {
     return $0
    }
   }
   if (!global$9) {
    if ($1 >>> 0 >= 4294967232) {
     HEAP32[__tls_base >> 2] = 48;
     return 0;
    }
    $4 = HEAPU8[75964] & 2;
   }
   block1 : {
    if ((global$9 | 0) == 2 | $4) {
     if (!global$9 | ($13 | 0) == 1) {
      $3 = __pthread_mutex_lock(75968);
      $5 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $4 = $3;
     }
     if (!($4 ? global$9 : 1)) {
      break block1
     }
    }
    if (!global$9) {
     $7 = $1 >>> 0 < 11 ? 16 : $1 + 11 & -8;
     block4 : {
      block3 : {
       block2 : {
        $4 = $0 - 8 | 0;
        $9 = HEAP32[18884];
        if ($4 >>> 0 < $9 >>> 0) {
         break block2
        }
        $10 = HEAP32[$4 + 4 >> 2];
        $2 = $10 & 3;
        if (($2 | 0) == 1) {
         break block2
        }
        $3 = $10 & -8;
        if (!$3) {
         break block2
        }
        $6 = $3 + $4 | 0;
        $8 = HEAP32[$6 + 4 >> 2];
        if (!($8 & 1)) {
         break block2
        }
        if (!$2) {
         $2 = 0;
         if ($7 >>> 0 < 256) {
          break block3
         }
         if ($3 >>> 0 >= $7 + 4 >>> 0) {
          $2 = $4;
          if ($3 - $7 >>> 0 <= HEAP32[18876] << 1 >>> 0) {
           break block3
          }
         }
         $2 = 0;
         break block3;
        }
        if ($3 >>> 0 >= $7 >>> 0) {
         $2 = $3 - $7 | 0;
         if ($2 >>> 0 >= 16) {
          HEAP32[$4 + 4 >> 2] = $7 | $10 & 1 | 2;
          $3 = $4 + $7 | 0;
          HEAP32[$3 + 4 >> 2] = $2 | 3;
          HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 1;
          dispose_chunk($3, $2);
         }
         break block4;
        }
        $2 = 0;
        if (HEAP32[18886] == ($6 | 0)) {
         $3 = $3 + HEAP32[18883] | 0;
         if ($3 >>> 0 <= $7 >>> 0) {
          break block3
         }
         HEAP32[$4 + 4 >> 2] = $7 | $10 & 1 | 2;
         $2 = $4 + $7 | 0;
         $3 = $3 - $7 | 0;
         HEAP32[$2 + 4 >> 2] = $3 | 1;
         HEAP32[18883] = $3;
         HEAP32[18886] = $2;
         break block4;
        }
        if (HEAP32[18885] == ($6 | 0)) {
         $3 = $3 + HEAP32[18882] | 0;
         if ($3 >>> 0 < $7 >>> 0) {
          break block3
         }
         $2 = $3 - $7 | 0;
         block5 : {
          if ($2 >>> 0 >= 16) {
           HEAP32[$4 + 4 >> 2] = $7 | $10 & 1 | 2;
           $5 = $4 + $7 | 0;
           HEAP32[$5 + 4 >> 2] = $2 | 1;
           $3 = $3 + $4 | 0;
           HEAP32[$3 >> 2] = $2;
           HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] & -2;
           break block5;
          }
          HEAP32[$4 + 4 >> 2] = $3 | $10 & 1 | 2;
          $2 = $3 + $4 | 0;
          HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
          $2 = 0;
          $5 = 0;
         }
         HEAP32[18885] = $5;
         HEAP32[18882] = $2;
         break block4;
        }
        if ($8 & 2) {
         break block3
        }
        $12 = $3 + ($8 & -8) | 0;
        if ($7 >>> 0 > $12 >>> 0) {
         break block3
        }
        $5 = HEAP32[$6 + 12 >> 2];
        block6 : {
         if ($8 >>> 0 <= 255) {
          $2 = HEAP32[$6 + 8 >> 2];
          $3 = $8 >>> 3 | 0;
          $8 = ($3 << 3) + 75560 | 0;
          if (($2 | 0) != ($8 | 0) & (HEAP32[$2 + 12 >> 2] != ($6 | 0) | $2 >>> 0 < $9 >>> 0)) {
           break block2
          }
          if (($2 | 0) == ($5 | 0)) {
           (wasm2js_i32$0 = 75520, wasm2js_i32$1 = HEAP32[18880] & __wasm_rotl_i32(-2, $3)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           break block6;
          }
          if ((HEAP32[$5 + 8 >> 2] != ($6 | 0) | $5 >>> 0 < $9 >>> 0) & ($5 | 0) != ($8 | 0)) {
           break block2
          }
          HEAP32[$2 + 12 >> 2] = $5;
          HEAP32[$5 + 8 >> 2] = $2;
          break block6;
         }
         $11 = HEAP32[$6 + 24 >> 2];
         block7 : {
          if (($5 | 0) != ($6 | 0)) {
           $2 = HEAP32[$6 + 8 >> 2];
           if ($2 >>> 0 < $9 >>> 0 | HEAP32[$2 + 12 >> 2] != ($6 | 0) | HEAP32[$5 + 8 >> 2] != ($6 | 0)) {
            break block2
           }
           HEAP32[$2 + 12 >> 2] = $5;
           HEAP32[$5 + 8 >> 2] = $2;
           break block7;
          }
          block8 : {
           $2 = HEAP32[$6 + 20 >> 2];
           if ($2) {
            $3 = $6 + 20 | 0
           } else {
            $2 = HEAP32[$6 + 16 >> 2];
            if (!$2) {
             break block8
            }
            $3 = $6 + 16 | 0;
           }
           while (1) {
            $8 = $3;
            $5 = $2;
            $3 = $2 + 20 | 0;
            $2 = HEAP32[$2 + 20 >> 2];
            if ($2) {
             continue
            }
            $3 = $5 + 16 | 0;
            $2 = HEAP32[$5 + 16 >> 2];
            if ($2) {
             continue
            }
            break;
           };
           if ($8 >>> 0 < $9 >>> 0) {
            break block2
           }
           HEAP32[$8 >> 2] = 0;
           break block7;
          }
          $5 = 0;
         }
         if (!$11) {
          break block6
         }
         $2 = HEAP32[$6 + 28 >> 2];
         $3 = ($2 << 2) + 75824 | 0;
         block9 : {
          if (HEAP32[$3 >> 2] == ($6 | 0)) {
           HEAP32[$3 >> 2] = $5;
           if ($5) {
            break block9
           }
           (wasm2js_i32$0 = 75524, wasm2js_i32$1 = HEAP32[18881] & __wasm_rotl_i32(-2, $2)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           break block6;
          }
          if ($9 >>> 0 > $11 >>> 0) {
           break block2
          }
          block10 : {
           if (HEAP32[$11 + 16 >> 2] == ($6 | 0)) {
            HEAP32[$11 + 16 >> 2] = $5;
            break block10;
           }
           HEAP32[$11 + 20 >> 2] = $5;
          }
          if (!$5) {
           break block6
          }
         }
         if ($5 >>> 0 < $9 >>> 0) {
          break block2
         }
         HEAP32[$5 + 24 >> 2] = $11;
         $2 = HEAP32[$6 + 16 >> 2];
         if ($2) {
          if ($2 >>> 0 < $9 >>> 0) {
           break block2
          }
          HEAP32[$5 + 16 >> 2] = $2;
          HEAP32[$2 + 24 >> 2] = $5;
         }
         $2 = HEAP32[$6 + 20 >> 2];
         if (!$2) {
          break block6
         }
         if ($2 >>> 0 < $9 >>> 0) {
          break block2
         }
         HEAP32[$5 + 20 >> 2] = $2;
         HEAP32[$2 + 24 >> 2] = $5;
        }
        $2 = $12 - $7 | 0;
        if ($2 >>> 0 <= 15) {
         HEAP32[$4 + 4 >> 2] = $10 & 1 | $12 | 2;
         $2 = $4 + $12 | 0;
         HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
         break block4;
        }
        HEAP32[$4 + 4 >> 2] = $7 | $10 & 1 | 2;
        $3 = $4 + $7 | 0;
        HEAP32[$3 + 4 >> 2] = $2 | 3;
        $5 = $4 + $12 | 0;
        HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
        dispose_chunk($3, $2);
        break block4;
       }
       abort();
       wasm2js_trap();
      }
      $4 = $2;
     }
     $2 = $4;
     if (HEAPU8[75964] & 2) {
      __pthread_mutex_unlock(75968)
     }
     if ($2) {
      return $2 + 8 | 0
     }
    }
    if (!global$9 | ($13 | 0) == 2) {
     $3 = emscripten_builtin_malloc($1);
     $5 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $3;
    }
    if (!global$9) {
     if (!$2) {
      return 0
     }
     $4 = HEAP32[$0 - 4 >> 2];
     $3 = ($4 & -8) + ($4 & 3 ? -4 : -8) | 0;
     $4 = $3 >>> 0 < $1 >>> 0;
     __memcpy($2, $0, $4 ? $3 : $1);
    }
    if (!global$9 | ($13 | 0) == 3) {
     emscripten_builtin_free($0);
     $5 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    return $2
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function dispose_chunk($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11 = global$9;
  $5 = $0 + $1 | 0;
  block2 : {
   block1 : {
    block : {
     $2 = HEAP32[$0 + 4 >> 2];
     if ($2 & 1) {
      $6 = HEAP32[18884];
      break block;
     }
     if (!($2 & 2)) {
      break block1
     }
     $4 = HEAP32[$0 >> 2];
     $0 = $0 - $4 | 0;
     $6 = HEAP32[18884];
     if ($0 >>> 0 < $6 >>> 0) {
      break block2
     }
     $1 = $1 + $4 | 0;
     if (HEAP32[18885] != ($0 | 0)) {
      $3 = HEAP32[$0 + 12 >> 2];
      if ($4 >>> 0 <= 255) {
       $2 = HEAP32[$0 + 8 >> 2];
       $4 = $4 >>> 3 | 0;
       $7 = ($4 << 3) + 75560 | 0;
       if (($2 | 0) != ($7 | 0) & (HEAP32[$2 + 12 >> 2] != ($0 | 0) | $2 >>> 0 < $6 >>> 0)) {
        break block2
       }
       if (($2 | 0) == ($3 | 0)) {
        (wasm2js_i32$0 = 75520, wasm2js_i32$1 = HEAP32[18880] & __wasm_rotl_i32(-2, $4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break block;
       }
       if ((HEAP32[$3 + 8 >> 2] != ($0 | 0) | $3 >>> 0 < $6 >>> 0) & ($3 | 0) != ($7 | 0)) {
        break block2
       }
       HEAP32[$2 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $2;
       break block;
      }
      $8 = HEAP32[$0 + 24 >> 2];
      block3 : {
       if (($0 | 0) != ($3 | 0)) {
        $2 = HEAP32[$0 + 8 >> 2];
        if ($2 >>> 0 < $6 >>> 0 | HEAP32[$2 + 12 >> 2] != ($0 | 0) | HEAP32[$3 + 8 >> 2] != ($0 | 0)) {
         break block2
        }
        HEAP32[$2 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $2;
        break block3;
       }
       block4 : {
        $4 = HEAP32[$0 + 20 >> 2];
        if ($4) {
         $2 = $0 + 20 | 0
        } else {
         $4 = HEAP32[$0 + 16 >> 2];
         if (!$4) {
          break block4
         }
         $2 = $0 + 16 | 0;
        }
        while (1) {
         $7 = $2;
         $3 = $4;
         $2 = $3 + 20 | 0;
         $4 = HEAP32[$3 + 20 >> 2];
         if ($4) {
          continue
         }
         $2 = $3 + 16 | 0;
         $4 = HEAP32[$3 + 16 >> 2];
         if ($4) {
          continue
         }
         break;
        };
        if ($6 >>> 0 > $7 >>> 0) {
         break block2
        }
        HEAP32[$7 >> 2] = 0;
        break block3;
       }
       $3 = 0;
      }
      if (!$8) {
       break block
      }
      $2 = HEAP32[$0 + 28 >> 2];
      $4 = ($2 << 2) + 75824 | 0;
      block5 : {
       if (HEAP32[$4 >> 2] == ($0 | 0)) {
        HEAP32[$4 >> 2] = $3;
        if ($3) {
         break block5
        }
        (wasm2js_i32$0 = 75524, wasm2js_i32$1 = HEAP32[18881] & __wasm_rotl_i32(-2, $2)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break block;
       }
       if ($6 >>> 0 > $8 >>> 0) {
        break block2
       }
       block6 : {
        if (HEAP32[$8 + 16 >> 2] == ($0 | 0)) {
         HEAP32[$8 + 16 >> 2] = $3;
         break block6;
        }
        HEAP32[$8 + 20 >> 2] = $3;
       }
       if (!$3) {
        break block
       }
      }
      if ($3 >>> 0 < $6 >>> 0) {
       break block2
      }
      HEAP32[$3 + 24 >> 2] = $8;
      $2 = HEAP32[$0 + 16 >> 2];
      if ($2) {
       if ($2 >>> 0 < $6 >>> 0) {
        break block2
       }
       HEAP32[$3 + 16 >> 2] = $2;
       HEAP32[$2 + 24 >> 2] = $3;
      }
      $2 = HEAP32[$0 + 20 >> 2];
      if (!$2) {
       break block
      }
      if ($2 >>> 0 < $6 >>> 0) {
       break block2
      }
      HEAP32[$3 + 20 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = $3;
      break block;
     }
     $2 = HEAP32[$5 + 4 >> 2];
     if (($2 & 3) != 3) {
      break block
     }
     HEAP32[18882] = $1;
     HEAP32[$5 + 4 >> 2] = $2 & -2;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$5 >> 2] = $1;
     return;
    }
    if ($5 >>> 0 < $6 >>> 0) {
     break block2
    }
    $9 = HEAP32[$5 + 4 >> 2];
    block12 : {
     if (!($9 & 2)) {
      if (($5 | 0) == HEAP32[18886]) {
       HEAP32[18886] = $0;
       $1 = HEAP32[18883] + $1 | 0;
       HEAP32[18883] = $1;
       HEAP32[$0 + 4 >> 2] = $1 | 1;
       if (HEAP32[18885] != ($0 | 0)) {
        break block1
       }
       HEAP32[18882] = 0;
       HEAP32[18885] = 0;
       return;
      }
      $10 = HEAP32[18885];
      if (($5 | 0) == ($10 | 0)) {
       HEAP32[18885] = $0;
       $1 = HEAP32[18882] + $1 | 0;
       HEAP32[18882] = $1;
       HEAP32[$0 + 4 >> 2] = $1 | 1;
       HEAP32[$0 + $1 >> 2] = $1;
       return;
      }
      $3 = HEAP32[$5 + 12 >> 2];
      block7 : {
       if ($9 >>> 0 <= 255) {
        $2 = HEAP32[$5 + 8 >> 2];
        $4 = $9 >>> 3 | 0;
        $7 = ($4 << 3) + 75560 | 0;
        if (($2 | 0) != ($7 | 0) & (($5 | 0) != HEAP32[$2 + 12 >> 2] | $2 >>> 0 < $6 >>> 0)) {
         break block2
        }
        if (($2 | 0) == ($3 | 0)) {
         (wasm2js_i32$0 = 75520, wasm2js_i32$1 = HEAP32[18880] & __wasm_rotl_i32(-2, $4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break block7;
        }
        if ((($5 | 0) != HEAP32[$3 + 8 >> 2] | $3 >>> 0 < $6 >>> 0) & ($3 | 0) != ($7 | 0)) {
         break block2
        }
        HEAP32[$2 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $2;
        break block7;
       }
       $8 = HEAP32[$5 + 24 >> 2];
       block8 : {
        if (($3 | 0) != ($5 | 0)) {
         $2 = HEAP32[$5 + 8 >> 2];
         if ($2 >>> 0 < $6 >>> 0 | ($5 | 0) != HEAP32[$2 + 12 >> 2] | ($5 | 0) != HEAP32[$3 + 8 >> 2]) {
          break block2
         }
         HEAP32[$2 + 12 >> 2] = $3;
         HEAP32[$3 + 8 >> 2] = $2;
         break block8;
        }
        block9 : {
         $4 = HEAP32[$5 + 20 >> 2];
         if ($4) {
          $2 = $5 + 20 | 0
         } else {
          $4 = HEAP32[$5 + 16 >> 2];
          if (!$4) {
           break block9
          }
          $2 = $5 + 16 | 0;
         }
         while (1) {
          $7 = $2;
          $3 = $4;
          $2 = $3 + 20 | 0;
          $4 = HEAP32[$3 + 20 >> 2];
          if ($4) {
           continue
          }
          $2 = $3 + 16 | 0;
          $4 = HEAP32[$3 + 16 >> 2];
          if ($4) {
           continue
          }
          break;
         };
         if ($6 >>> 0 > $7 >>> 0) {
          break block2
         }
         HEAP32[$7 >> 2] = 0;
         break block8;
        }
        $3 = 0;
       }
       if (!$8) {
        break block7
       }
       $2 = HEAP32[$5 + 28 >> 2];
       $4 = ($2 << 2) + 75824 | 0;
       block10 : {
        if (($5 | 0) == HEAP32[$4 >> 2]) {
         HEAP32[$4 >> 2] = $3;
         if ($3) {
          break block10
         }
         (wasm2js_i32$0 = 75524, wasm2js_i32$1 = HEAP32[18881] & __wasm_rotl_i32(-2, $2)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break block7;
        }
        if ($6 >>> 0 > $8 >>> 0) {
         break block2
        }
        block11 : {
         if (($5 | 0) == HEAP32[$8 + 16 >> 2]) {
          HEAP32[$8 + 16 >> 2] = $3;
          break block11;
         }
         HEAP32[$8 + 20 >> 2] = $3;
        }
        if (!$3) {
         break block7
        }
       }
       if ($3 >>> 0 < $6 >>> 0) {
        break block2
       }
       HEAP32[$3 + 24 >> 2] = $8;
       $2 = HEAP32[$5 + 16 >> 2];
       if ($2) {
        if ($2 >>> 0 < $6 >>> 0) {
         break block2
        }
        HEAP32[$3 + 16 >> 2] = $2;
        HEAP32[$2 + 24 >> 2] = $3;
       }
       $2 = HEAP32[$5 + 20 >> 2];
       if (!$2) {
        break block7
       }
       if ($2 >>> 0 < $6 >>> 0) {
        break block2
       }
       HEAP32[$3 + 20 >> 2] = $2;
       HEAP32[$2 + 24 >> 2] = $3;
      }
      $1 = ($9 & -8) + $1 | 0;
      HEAP32[$0 + 4 >> 2] = $1 | 1;
      HEAP32[$0 + $1 >> 2] = $1;
      if (($0 | 0) != ($10 | 0)) {
       break block12
      }
      HEAP32[18882] = $1;
      return;
     }
     HEAP32[$5 + 4 >> 2] = $9 & -2;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + $1 >> 2] = $1;
    }
    if ($1 >>> 0 <= 255) {
     $2 = ($1 & -8) + 75560 | 0;
     $3 = HEAP32[18880];
     $1 = 1 << ($1 >>> 3);
     block13 : {
      if (!($3 & $1)) {
       HEAP32[18880] = $1 | $3;
       $1 = $2;
       break block13;
      }
      $1 = HEAP32[$2 + 8 >> 2];
      if ($6 >>> 0 > $1 >>> 0) {
       break block2
      }
     }
     HEAP32[$2 + 8 >> 2] = $0;
     HEAP32[$1 + 12 >> 2] = $0;
     HEAP32[$0 + 12 >> 2] = $2;
     HEAP32[$0 + 8 >> 2] = $1;
     return;
    }
    $3 = 31;
    if ($1 >>> 0 <= 16777215) {
     $2 = Math_clz32($1 >>> 8 | 0);
     $3 = (($1 >>> 38 - $2 & 1) - ($2 << 1) | 0) + 62 | 0;
    }
    HEAP32[$0 + 28 >> 2] = $3;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    $2 = ($3 << 2) + 75824 | 0;
    block15 : {
     $4 = HEAP32[18881];
     $7 = 1 << $3;
     block14 : {
      if (!($4 & $7)) {
       HEAP32[18881] = $4 | $7;
       HEAP32[$2 >> 2] = $0;
       HEAP32[$0 + 24 >> 2] = $2;
       break block14;
      }
      $3 = $1 << (($3 | 0) != 31 ? 25 - ($3 >>> 1 | 0) | 0 : 0);
      $2 = HEAP32[$2 >> 2];
      while (1) {
       $4 = $2;
       if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
        break block15
       }
       $2 = $3 >>> 29 | 0;
       $3 = $3 << 1;
       $7 = $4 + ($2 & 4) | 0;
       $2 = HEAP32[$7 + 16 >> 2];
       if ($2) {
        continue
       }
       break;
      };
      $1 = $7 + 16 | 0;
      if ($1 >>> 0 < $6 >>> 0) {
       break block2
      }
      HEAP32[$1 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $4;
     }
     HEAP32[$0 + 12 >> 2] = $0;
     HEAP32[$0 + 8 >> 2] = $0;
     return;
    }
    if ($4 >>> 0 < $6 >>> 0) {
     break block2
    }
    $1 = HEAP32[$4 + 8 >> 2];
    if ($1 >>> 0 < $6 >>> 0) {
     break block2
    }
    HEAP32[$1 + 12 >> 2] = $0;
    HEAP32[$4 + 8 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = $4;
    HEAP32[$0 + 8 >> 2] = $1;
   }
   return;
  }
  abort();
  if ((global$9 | 0) != ($11 | 0)) {
   wasm2js_trap()
  }
  wasm2js_trap();
 }
 
 function emscripten_builtin_calloc($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = 0;
   block : {
    if (!$0) {
     break block
    }
    $2 = __wasm_i64_mul($1, 0, $0, 0);
    $4 = i64toi32_i32$HIGH_BITS;
    $0 = ($0 | $1) >>> 0 < 65536;
    if ($0) {
     break block
    }
    $0 = $4;
    $2 = $0 ? -1 : $2;
   }
  }
  block1 : {
   if (!global$9 | !$3) {
    $1 = emscripten_builtin_malloc($2);
    if ((global$9 | 0) == 1) {
     break block1
    }
    $0 = $1;
   }
   if (!global$9) {
    if (!(!$0 | !(HEAPU8[$0 - 4 | 0] & 3))) {
     __memset($0, 0, $2)
    }
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function sbrk($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $3 = global$9;
  $2 = $0 + 7 & -8;
  while (1) {
   $0 = Atomics.load(HEAP32, 13057);
   $1 = $2 + $0 | 0;
   block : {
    if (!($0 >>> 0 >= $1 >>> 0 ? $2 : 0)) {
     if ($1 >>> 0 <= __wasm_memory_size() << 16 >>> 0) {
      break block
     }
     $4 = emscripten_resize_heap($1 | 0) | 0;
     if ((global$9 | 0) != ($3 | 0)) {
      wasm2js_trap()
     }
     if ($4) {
      break block
     }
    }
    HEAP32[__tls_base >> 2] = 48;
    return -1;
   }
   if ((Atomics.compareExchange(HEAP32, 0 + 52228 >> 2, $0, $1) | 0) != ($0 | 0)) {
    continue
   }
   break;
  };
  return $0;
 }
 
 function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  $17 = global$9;
  $10 = __stack_pointer - 112 | 0;
  __stack_pointer = $10;
  $9 = $8 & 2147483647;
  block1 : {
   block : {
    $11 = $4 & 2147483647;
    $13 = 2147418112;
    $14 = !($1 | $2);
    if (!($3 | $11 ? $11 - $13 >>> 0 < 2147549184 : $14)) {
     $12 = $9 - $13 | 0;
     if (!$7 & ($12 | 0) == -2147418112 ? $5 | $6 : ($12 | 0) == -2147418112 & ($7 | 0) != 0 | $12 >>> 0 > 2147549184) {
      break block
     }
    }
    if (!(!$3 & ($11 | 0) == 2147418112 ? $14 : $11 >>> 0 < 2147418112)) {
     $7 = $3;
     $8 = $4 | 32768;
     $5 = $1;
     $6 = $2;
     break block1;
    }
    if (!(!$7 & ($9 | 0) == 2147418112 ? !($5 | $6) : $9 >>> 0 < 2147418112)) {
     $8 = $8 | 32768;
     break block1;
    }
    if (!($1 | $3 | ($11 ^ 2147418112 | $2))) {
     $9 = $3;
     $3 = !($1 ^ $5 | $3 ^ $7 | ($2 ^ $6 | $4 ^ $8 ^ -2147483648));
     $7 = $3 ? 0 : $9;
     $8 = $3 ? 2147450880 : $4;
     $5 = $3 ? 0 : $1;
     $6 = $3 ? 0 : $2;
     break block1;
    }
    $13 = $5 | $7;
    if (!($13 | ($9 ^ 2147418112 | $6))) {
     break block1
    }
    if (!($1 | $3 | ($2 | $11))) {
     if ($6 | $9 | $13) {
      break block1
     }
     $5 = $1 & $5;
     $6 = $2 & $6;
     $7 = $3 & $7;
     $8 = $4 & $8;
     break block1;
    }
    if ($5 | $7 | ($6 | $9)) {
     break block
    }
    $5 = $1;
    $6 = $2;
    $7 = $3;
    $8 = $4;
    break block1;
   }
   $13 = ($9 | 0) == ($11 | 0);
   $16 = $13 & ($3 | 0) == ($7 | 0) ? ($2 | 0) == ($6 | 0) & $1 >>> 0 < $5 >>> 0 | $2 >>> 0 < $6 >>> 0 : $13 & $3 >>> 0 < $7 >>> 0 | $9 >>> 0 > $11 >>> 0;
   $12 = $16;
   $11 = $12 ? $5 : $1;
   $18 = $12 ? $6 : $2;
   $14 = $12 ? $8 : $4;
   $19 = $14;
   $12 = $12 ? $7 : $3;
   $14 = $14 & 65535;
   $9 = $16 ? $3 : $7;
   $13 = $16 ? $4 : $8;
   $7 = $13;
   $15 = $7 >>> 16 & 32767;
   $13 = $19 >>> 16 & 32767;
   if (!$13) {
    $13 = $11;
    $11 = !($12 | $14);
    $3 = $11;
    $11 = $3 << 6;
    $20 = Math_clz32($3 ? $13 : $12) + 32 | 0;
    $3 = Math_clz32($3 ? $18 : $14);
    $11 = $11 + (($3 | 0) == 32 ? $20 : $3) | 0;
    __ashlti3($10 + 96 | 0, $13, $18, $12, $14, $11 - 15 | 0);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    $13 = 16 - $11 | 0;
    $18 = HEAP32[$10 + 100 >> 2];
    $12 = HEAP32[$10 + 104 >> 2];
    $14 = HEAP32[$10 + 108 >> 2];
    $11 = HEAP32[$10 + 96 >> 2];
   }
   $5 = $16 ? $1 : $5;
   $6 = $16 ? $2 : $6;
   $1 = $9;
   $2 = $7 & 65535;
   if (!$15) {
    $1 = !($1 | $2);
    $15 = $1;
    $7 = $1 ? $5 : $9;
    $1 = $1 << 6;
    $15 = Math_clz32($15 ? $6 : $2);
    $1 = $1 + (($15 | 0) == 32 ? Math_clz32($7) + 32 | 0 : $15) | 0;
    __ashlti3($10 + 80 | 0, $5, $6, $9, $2, $1 - 15 | 0);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    $15 = 16 - $1 | 0;
    $5 = HEAP32[$10 + 80 >> 2];
    $6 = HEAP32[$10 + 84 >> 2];
    $1 = HEAP32[$10 + 88 >> 2];
    $2 = HEAP32[$10 + 92 >> 2];
   }
   $9 = $2 << 3 | $1 >>> 29;
   $1 = $1 << 3;
   $2 = $9 | 524288;
   $9 = $14 << 3 | $12 >>> 29;
   $16 = $12 << 3 | $18 >>> 29;
   $7 = $9;
   $12 = $5 << 3;
   $14 = $6 << 3 | $5 >>> 29;
   $4 = $4 ^ $8;
   $1 = $6 >>> 29 | $1;
   block2 : {
    if (($13 | 0) == ($15 | 0)) {
     break block2
    }
    $3 = $13 - $15 | 0;
    if ($3 >>> 0 > 127) {
     $2 = 0;
     $12 = 1;
     $14 = 0;
     $1 = 0;
     break block2;
    }
    __ashlti3($10 - -64 | 0, $12, $14, $1, $2, 128 - $3 | 0);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    __lshrti3($10 + 48 | 0, $12, $14, $1, $2, $3);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    $12 = HEAP32[$10 + 48 >> 2] | (HEAP32[$10 + 64 >> 2] | HEAP32[$10 + 72 >> 2] | (HEAP32[$10 + 68 >> 2] | HEAP32[$10 + 76 >> 2])) != 0;
    $14 = HEAP32[$10 + 52 >> 2];
    $2 = HEAP32[$10 + 60 >> 2];
    $1 = HEAP32[$10 + 56 >> 2];
   }
   $15 = $7 | 524288;
   $9 = $18 << 3 | $11 >>> 29;
   $11 = $11 << 3;
   block3 : {
    if (($4 | 0) < 0) {
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = 0;
     if (!($11 ^ $12 | $1 ^ $16 | ($9 ^ $14 | $2 ^ $15))) {
      break block1
     }
     $3 = $11 - $12 | 0;
     $4 = $9 - (($11 >>> 0 < $12 >>> 0) + $14 | 0) | 0;
     $5 = $16 - $1 | 0;
     $6 = ($9 | 0) == ($14 | 0) & $11 >>> 0 < $12 >>> 0 | $9 >>> 0 < $14 >>> 0;
     $7 = $5 - $6 | 0;
     $1 = ($15 - (($1 >>> 0 > $16 >>> 0) + $2 | 0) | 0) - ($5 >>> 0 < $6 >>> 0) | 0;
     $8 = $1;
     if ($1 >>> 0 > 524287) {
      break block3
     }
     $2 = !($1 | $7);
     $6 = $2;
     $8 = $6 ? $3 : $7;
     $2 = $6 << 6;
     $6 = Math_clz32($6 ? $4 : $1);
     $2 = $2 + (($6 | 0) == 32 ? Math_clz32($8) + 32 | 0 : $6) | 0;
     $5 = $1;
     $1 = $2 - 12 | 0;
     __ashlti3($10 + 32 | 0, $3, $4, $7, $5, $1);
     if ((global$9 | 0) != ($17 | 0)) {
      wasm2js_trap()
     }
     $13 = $13 - $1 | 0;
     $7 = HEAP32[$10 + 40 >> 2];
     $8 = HEAP32[$10 + 44 >> 2];
     $3 = HEAP32[$10 + 32 >> 2];
     $4 = HEAP32[$10 + 36 >> 2];
     break block3;
    }
    $9 = $9 + $14 | 0;
    $3 = $11 + $12 | 0;
    $4 = $3 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
    $5 = ($14 | 0) == ($4 | 0) & $3 >>> 0 < $12 >>> 0 | $4 >>> 0 < $14 >>> 0;
    $9 = $2 + $15 | 0;
    $1 = $1 + $16 | 0;
    $9 = $1 >>> 0 < $16 >>> 0 ? $9 + 1 | 0 : $9;
    $7 = $1 + $5 | 0;
    $8 = $7 >>> 0 < $1 >>> 0 ? $9 + 1 | 0 : $9;
    if (!($8 & 1048576)) {
     break block3
    }
    $3 = $12 & 1 | (($4 & 1) << 31 | $3 >>> 1);
    $4 = $7 << 31 | $4 >>> 1;
    $13 = $13 + 1 | 0;
    $7 = ($8 & 1) << 31 | $7 >>> 1;
    $8 = $8 >>> 1 | 0;
   }
   $5 = 0;
   $1 = $19 & -2147483648;
   $12 = $1;
   if (($13 | 0) >= 32767) {
    $7 = $5;
    $8 = $1 | 2147418112;
    $6 = 0;
    break block1;
   }
   $1 = 0;
   block4 : {
    if (($13 | 0) > 0) {
     $1 = $13;
     break block4;
    }
    __ashlti3($10 + 16 | 0, $3, $4, $7, $8, $13 + 127 | 0);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    __lshrti3($10, $3, $4, $7, $8, 1 - $13 | 0);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    $3 = HEAP32[$10 >> 2] | (HEAP32[$10 + 16 >> 2] | HEAP32[$10 + 24 >> 2] | (HEAP32[$10 + 20 >> 2] | HEAP32[$10 + 28 >> 2])) != 0;
    $4 = HEAP32[$10 + 4 >> 2];
    $7 = HEAP32[$10 + 8 >> 2];
    $8 = HEAP32[$10 + 12 >> 2];
   }
   $11 = ($4 & 7) << 29 | $3 >>> 3;
   $4 = $7 << 29 | $4 >>> 3;
   $6 = $1 << 16;
   $1 = $5 | (($8 & 7) << 29 | $7 >>> 3);
   $2 = $12 | ($6 | $8 >>> 3 & 65535);
   block6 : {
    block5 : {
     $3 = $3 & 7;
     if (($3 | 0) != 4) {
      $9 = $4;
      $5 = $3 >>> 0 > 4;
      $6 = $5;
      $5 = $5 + $11 | 0;
      $9 = $6 >>> 0 > $5 >>> 0 ? $9 + 1 | 0 : $9;
      $6 = $9;
      $4 = ($4 | 0) == ($9 | 0) & $5 >>> 0 < $11 >>> 0 | $4 >>> 0 > $9 >>> 0;
      $7 = $1 + $4 | 0;
      $8 = $4 >>> 0 > $7 >>> 0 ? $2 + 1 | 0 : $2;
      break block5;
     }
     $9 = $2;
     $3 = $11 & 1;
     $5 = $3 + $11 | 0;
     $6 = $3 >>> 0 > $5 >>> 0 ? $4 + 1 | 0 : $4;
     $3 = ($4 | 0) == ($6 | 0) & $5 >>> 0 < $11 >>> 0 | $4 >>> 0 > $6 >>> 0;
     $7 = $1 + $3 | 0;
     $8 = $3 >>> 0 > $7 >>> 0 ? $9 + 1 | 0 : $9;
     break block6;
    }
    if (!$3) {
     break block1
    }
   }
  }
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $6;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $8;
  __stack_pointer = $10 + 112 | 0;
 }
 
 function __ashlti3($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  block : {
   if ($5 & 64) {
    $4 = $5 + -64 | 0;
    $5 = $1;
    $3 = $4 & 31;
    if (($4 & 63) >>> 0 >= 32) {
     $4 = $5 << $3;
     $3 = 0;
    } else {
     $4 = (1 << $3) - 1 & $5 >>> 32 - $3 | $2 << $3;
     $3 = $5 << $3;
    }
    $1 = 0;
    $2 = 0;
    break block;
   }
   if (!$5) {
    break block
   }
   $7 = $3;
   $6 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $8 = $3 << $6;
    $7 = 0;
   } else {
    $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $4 << $6;
    $7 = $7 << $6;
   }
   $6 = $1;
   $4 = 64 - $5 | 0;
   $3 = $4 & 31;
   if (($4 & 63) >>> 0 >= 32) {
    $4 = 0;
    $3 = $2 >>> $3 | 0;
   } else {
    $4 = $2 >>> $3 | 0;
    $3 = ((1 << $3) - 1 & $2) << 32 - $3 | $6 >>> $3;
   }
   $3 = $7 | $3;
   $4 = $4 | $8;
   $7 = $1;
   $6 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $8 = $1 << $6;
    $1 = 0;
   } else {
    $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $2 << $6;
    $1 = $7 << $6;
   }
   $2 = $8;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
 }
 
 function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $10 = 1;
  $8 = $3 & 2147483647;
  $9 = $8;
  $11 = ($8 | 0) == 2147418112;
  block : {
   if ($11 & !$2 ? $0 | $1 : $11 & ($2 | 0) != 0 | $8 >>> 0 > 2147418112) {
    break block
   }
   $8 = $7 & 2147483647;
   if (!$6 & ($8 | 0) == 2147418112 ? $4 | $5 : ($8 | 0) == 2147418112 & ($6 | 0) != 0 | $8 >>> 0 > 2147418112) {
    break block
   }
   if (!($0 | $4 | ($2 | $6) | ($1 | $5 | ($8 | $9)))) {
    return 0
   }
   $8 = $3 & $7;
   if (($8 | 0) > 0) {
    $9 = 1
   } else {
    $9 = ($8 | 0) >= 0
   }
   if ($9) {
    if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 < $4 >>> 0 | $1 >>> 0 < $5 >>> 0 : $2 >>> 0 < $6 >>> 0 & ($3 | 0) <= ($7 | 0) | ($3 | 0) < ($7 | 0)) {
     return -1
    }
    return ($0 ^ $4 | $2 ^ $6 | ($1 ^ $5 | $3 ^ $7)) != 0;
   }
   if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 > $4 >>> 0 | $1 >>> 0 > $5 >>> 0 : $2 >>> 0 > $6 >>> 0 & ($3 | 0) >= ($7 | 0) | ($3 | 0) > ($7 | 0)) {
    return -1
   }
   $10 = ($0 ^ $4 | $2 ^ $6 | ($1 ^ $5 | $3 ^ $7)) != 0;
  }
  return $10;
 }
 
 function __getf2($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $7 = -1;
  $6 = $3 & 2147483647;
  $5 = ($6 | 0) == 2147418112;
  block : {
   if ($5 & !$2 ? $0 | $1 : $5 & ($2 | 0) != 0 | $6 >>> 0 > 2147418112) {
    break block
   }
   $5 = $4 & 2147483647;
   if ((($5 | 0) == 2147418112 & 0 | $5 >>> 0 > 2147418112) & ($5 | 0) != 2147418112) {
    break block
   }
   if (!($0 | $2 | ($5 | $6 | $1))) {
    return 0
   }
   $5 = $3 & $4;
   if (($5 | 0) > 0) {
    $5 = 1
   } else {
    $5 = ($5 | 0) >= 0
   }
   if ($5) {
    if ((($2 | 0) != 0 | ($3 | 0) != ($4 | 0)) & ($3 | 0) < ($4 | 0)) {
     break block
    }
    return ($0 | $2 | ($3 ^ $4 | $1)) != 0;
   }
   if (!$2 & ($3 | 0) == ($4 | 0) ? $0 | $1 : ($2 | 0) != 0 & ($3 | 0) >= ($4 | 0) | ($3 | 0) > ($4 | 0)) {
    break block
   }
   $7 = ($0 | $2 | ($3 ^ $4 | $1)) != 0;
  }
  return $7;
 }
 
 function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
  $17 = global$9;
  $10 = __stack_pointer - 336 | 0;
  __stack_pointer = $10;
  $12 = $7;
  $13 = $8 & 65535;
  $14 = $3;
  $15 = $4 & 65535;
  $20 = ($4 ^ $8) & -2147483648;
  $16 = $8 >>> 16 & 32767;
  $21 = $4 >>> 16 & 32767;
  block1 : {
   block : {
    if ($16 - 32767 >>> 0 > 4294934529 & $21 - 32767 >>> 0 >= 4294934530) {
     break block
    }
    $9 = $4 & 2147483647;
    if (!(!$3 & ($9 | 0) == 2147418112 ? !($1 | $2) : $9 >>> 0 < 2147418112)) {
     $18 = $3;
     $20 = $4 | 32768;
     break block1;
    }
    $4 = $8 & 2147483647;
    if (!(!$7 & ($4 | 0) == 2147418112 ? !($5 | $6) : $4 >>> 0 < 2147418112)) {
     $18 = $7;
     $20 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break block1;
    }
    if (!($1 | $3 | ($9 ^ 2147418112 | $2))) {
     if (!($5 | $7 | ($4 ^ 2147418112 | $6))) {
      $1 = 0;
      $2 = 0;
      $20 = 2147450880;
      break block1;
     }
     $20 = $20 | 2147418112;
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($5 | $7 | ($4 ^ 2147418112 | $6))) {
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($1 | $3 | ($2 | $9))) {
     $1 = !($5 | $7 | ($4 | $6));
     $18 = $1 ? 0 : $18;
     $20 = $1 ? 2147450880 : $20;
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($5 | $7 | ($4 | $6))) {
     $20 = $20 | 2147418112;
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (($9 | 0) == 65535 | $9 >>> 0 < 65535) {
     $3 = $1;
     $1 = !($15 | $14);
     $8 = $1;
     $9 = $8 ? $3 : $14;
     $1 = $8 << 6;
     $8 = Math_clz32($8 ? $2 : $15);
     $1 = $1 + (($8 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $8) | 0;
     __ashlti3($10 + 320 | 0, $3, $2, $14, $15, $1 - 15 | 0);
     if ((global$9 | 0) != ($17 | 0)) {
      wasm2js_trap()
     }
     $19 = 16 - $1 | 0;
     $14 = HEAP32[$10 + 328 >> 2];
     $15 = HEAP32[$10 + 332 >> 2];
     $2 = HEAP32[$10 + 324 >> 2];
     $1 = HEAP32[$10 + 320 >> 2];
    }
    if ($4 >>> 0 > 65535) {
     break block
    }
    $3 = !($12 | $13);
    $7 = $3;
    $8 = $3 ? $5 : $12;
    $3 = $3 << 6;
    $7 = Math_clz32($7 ? $6 : $13);
    $3 = $3 + (($7 | 0) == 32 ? Math_clz32($8) + 32 | 0 : $7) | 0;
    __ashlti3($10 + 304 | 0, $5, $6, $12, $13, $3 - 15 | 0);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    $19 = ($3 + $19 | 0) - 16 | 0;
    $12 = HEAP32[$10 + 312 >> 2];
    $13 = HEAP32[$10 + 316 >> 2];
    $5 = HEAP32[$10 + 304 >> 2];
    $6 = HEAP32[$10 + 308 >> 2];
   }
   $4 = $13 | 65536;
   $25 = $4;
   $26 = $12;
   $3 = $12;
   $9 = $4 << 15 | $3 >>> 17;
   $4 = $3 << 15 | $6 >>> 17;
   $3 = 0 - $4 | 0;
   $7 = $9;
   $8 = 1963258675 - ($9 + (($4 | 0) != 0) | 0) | 0;
   __multi3($10 + 288 | 0, $4, $9, 0, 0, $3, $8, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $9 = HEAP32[$10 + 296 >> 2];
   __multi3($10 + 272 | 0, 0 - $9 | 0, 0 - (HEAP32[$10 + 300 >> 2] + (($9 | 0) != 0) | 0) | 0, 0, 0, $3, $8, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $3 = HEAP32[$10 + 280 >> 2];
   $8 = $3 << 1 | HEAP32[$10 + 276 >> 2] >>> 31;
   $3 = HEAP32[$10 + 284 >> 2] << 1 | $3 >>> 31;
   __multi3($10 + 256 | 0, $8, $3, 0, 0, $4, $7, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $9 = HEAP32[$10 + 264 >> 2];
   __multi3($10 + 240 | 0, $8, $3, 0, 0, 0 - $9 | 0, 0 - (HEAP32[$10 + 268 >> 2] + (($9 | 0) != 0) | 0) | 0, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $8 = HEAP32[$10 + 248 >> 2];
   $9 = $8 << 1 | HEAP32[$10 + 244 >> 2] >>> 31;
   $3 = HEAP32[$10 + 252 >> 2] << 1 | $8 >>> 31;
   __multi3($10 + 224 | 0, $9, $3, 0, 0, $4, $7, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $8 = HEAP32[$10 + 232 >> 2];
   __multi3($10 + 208 | 0, $9, $3, 0, 0, 0 - $8 | 0, 0 - (HEAP32[$10 + 236 >> 2] + (($8 | 0) != 0) | 0) | 0, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $3 = HEAP32[$10 + 216 >> 2];
   $8 = $3 << 1 | HEAP32[$10 + 212 >> 2] >>> 31;
   $3 = HEAP32[$10 + 220 >> 2] << 1 | $3 >>> 31;
   __multi3($10 + 192 | 0, $8, $3, 0, 0, $4, $7, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $9 = HEAP32[$10 + 200 >> 2];
   __multi3($10 + 176 | 0, $8, $3, 0, 0, 0 - $9 | 0, 0 - (HEAP32[$10 + 204 >> 2] + (($9 | 0) != 0) | 0) | 0, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $8 = $4;
   $4 = HEAP32[$10 + 184 >> 2];
   $3 = HEAP32[$10 + 188 >> 2] << 1 | $4 >>> 31;
   $12 = $4 << 1 | HEAP32[$10 + 180 >> 2] >>> 31;
   $4 = $12 - 1 | 0;
   $3 = $3 - !$12 | 0;
   __multi3($10 + 160 | 0, $8, $7, 0, 0, $4, $3, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   __multi3($10 + 144 | 0, $5 << 15, $6 << 15 | $5 >>> 17, 0, 0, $4, $3, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $23 = $10 + 112 | 0;
   $7 = HEAP32[$10 + 172 >> 2];
   $12 = HEAP32[$10 + 160 >> 2];
   $8 = HEAP32[$10 + 152 >> 2];
   $11 = $12 + $8 | 0;
   $13 = HEAP32[$10 + 164 >> 2];
   $9 = $13 + HEAP32[$10 + 156 >> 2] | 0;
   $9 = $8 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $9 = ($13 | 0) == ($9 | 0) & $11 >>> 0 < $12 >>> 0 | $9 >>> 0 < $13 >>> 0;
   $13 = $9 + HEAP32[$10 + 168 >> 2] | 0;
   $9 = $9 >>> 0 > $13 >>> 0 ? $7 + 1 | 0 : $7;
   $12 = !$8 & $11 >>> 0 > 1 | ($8 | 0) != 0;
   $7 = $12 + $13 | 0;
   $9 = $12 >>> 0 > $7 >>> 0 ? $9 + 1 | 0 : $9;
   __multi3($23, $4, $3, 0, 0, 0 - $7 | 0, 0 - ((($7 | 0) != 0) + $9 | 0) | 0, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   __multi3($10 + 128 | 0, 1 - $11 | 0, 0 - (($11 >>> 0 > 1) + $8 | 0) | 0, 0, 0, $4, $3, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $35 = ($21 - $16 | 0) + $19 | 0;
   $4 = HEAP32[$10 + 116 >> 2];
   $21 = $4;
   $3 = HEAP32[$10 + 112 >> 2];
   $9 = $4 << 1 | $3 >>> 31;
   $8 = $3 << 1;
   $12 = $9;
   $3 = $9;
   $7 = HEAP32[$10 + 140 >> 2];
   $24 = $7;
   $4 = HEAP32[$10 + 136 >> 2];
   $9 = $7 << 1 | $4 >>> 31;
   $11 = $4 << 1 | HEAP32[$10 + 132 >> 2] >>> 31;
   $7 = $11 + $8 | 0;
   $3 = $3 + $9 | 0;
   $3 = $7 >>> 0 < $11 >>> 0 ? $3 + 1 | 0 : $3;
   $4 = $3;
   $3 = $3 - ($7 >>> 0 < 13927) | 0;
   $22 = $3;
   $23 = $3;
   $11 = 0;
   $9 = $15 | 65536;
   $36 = $9;
   $37 = $14;
   $3 = $14;
   $9 = $9 << 1 | $3 >>> 31;
   $39 = $3 << 1;
   $40 = $9;
   $30 = $9;
   $3 = __wasm_i64_mul($22, $11, $9, 0);
   $9 = i64toi32_i32$HIGH_BITS;
   $27 = $3;
   $28 = $9;
   $32 = $1 << 1;
   $3 = $2 << 1 | $1 >>> 31;
   $19 = $3;
   $9 = 0;
   $16 = $9;
   $13 = $7 - 13927 | 0;
   $22 = ($4 | 0) == ($22 | 0) & $13 >>> 0 < $7 >>> 0 | $4 >>> 0 > $22 >>> 0;
   $4 = ($4 | 0) == ($12 | 0) & $7 >>> 0 < $8 >>> 0 | $4 >>> 0 < $12 >>> 0;
   $3 = HEAP32[$10 + 120 >> 2];
   $7 = HEAP32[$10 + 124 >> 2] << 1 | $3 >>> 31;
   $3 = $3 << 1 | $21 >>> 31;
   $11 = $24 >>> 31 | 0;
   $3 = $11 + $3 | 0;
   $9 = $7;
   $9 = $3 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $7 = $3;
   $3 = $3 + $4 | 0;
   $9 = $7 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $3;
   $3 = $3 + $22 | 0;
   $11 = $4 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $3 - 1 | 0;
   $29 = $11 - !$3 | 0;
   $24 = 0;
   $8 = __wasm_i64_mul($19, $16, $29, $24);
   $3 = $8 + $27 | 0;
   $7 = i64toi32_i32$HIGH_BITS + $28 | 0;
   $7 = $3 >>> 0 < $8 >>> 0 ? $7 + 1 | 0 : $7;
   $8 = $3;
   $21 = ($7 | 0) == ($28 | 0) & $3 >>> 0 < $27 >>> 0 | $7 >>> 0 < $28 >>> 0;
   $9 = 0;
   $27 = $4;
   $38 = $2 >>> 31 | 0;
   $31 = $38 | $14 << 1;
   $22 = 0;
   $4 = __wasm_i64_mul($4, $9, $31, $22);
   $3 = $4 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $7 | 0;
   $14 = $3;
   $11 = 0;
   $9 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
   $12 = $9;
   $3 = ($7 | 0) == ($9 | 0) & $3 >>> 0 < $8 >>> 0 | $7 >>> 0 > $9 >>> 0;
   $4 = $3;
   $3 = $3 + $21 | 0;
   $11 = $4 >>> 0 > $3 >>> 0 ? 1 : $11;
   $4 = __wasm_i64_mul($30, $16, $29, $24);
   $3 = $4 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $11 | 0;
   $15 = $3;
   $3 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = __wasm_i64_mul($30, $16, $27, $22);
   $11 = i64toi32_i32$HIGH_BITS;
   $7 = $4;
   $4 = __wasm_i64_mul($31, $22, $29, $24);
   $8 = $7 + $4 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $11 | 0;
   $9 = $4 >>> 0 > $8 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $9;
   $9 = ($11 | 0) == ($9 | 0) & $7 >>> 0 > $8 >>> 0 | $9 >>> 0 < $11 >>> 0;
   $11 = $15 + $4 | 0;
   $3 = $3 + $9 | 0;
   $3 = $11 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
   $15 = $11;
   $4 = 0;
   $11 = $4 + $14 | 0;
   $9 = $8 + $12 | 0;
   $9 = $4 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $9;
   $7 = ($12 | 0) == ($9 | 0) & $11 >>> 0 < $14 >>> 0 | $9 >>> 0 < $12 >>> 0;
   $9 = $3;
   $3 = $7 + $15 | 0;
   $9 = $3 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
   $21 = $3;
   $14 = $9;
   $28 = $13;
   $3 = __wasm_i64_mul($13, 0, $31, $22);
   $12 = i64toi32_i32$HIGH_BITS;
   $8 = $3;
   $7 = __wasm_i64_mul($23, $18, $19, $18);
   $3 = $3 + $7 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $12 | 0;
   $9 = $3 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
   $7 = $9;
   $12 = ($12 | 0) == ($9 | 0) & $3 >>> 0 < $8 >>> 0 | $9 >>> 0 < $12 >>> 0;
   $33 = $32 & -2;
   $8 = __wasm_i64_mul($27, $22, $33, 0);
   $13 = $8 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $8 >>> 0 > $13 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $3 = ($7 | 0) == ($9 | 0) & $3 >>> 0 > $13 >>> 0 | $7 >>> 0 > $9 >>> 0;
   $7 = 0;
   $9 = $3 + $12 | 0;
   $3 = ($9 >>> 0 < $3 >>> 0 ? 1 : $7) + $4 | 0;
   $15 = $9 + $11 | 0;
   $3 = $15 >>> 0 < $9 >>> 0 ? $3 + 1 | 0 : $3;
   $9 = $14;
   $12 = $3;
   $3 = ($4 | 0) == ($3 | 0) & $11 >>> 0 > $15 >>> 0 | $3 >>> 0 < $4 >>> 0;
   $4 = $3;
   $3 = $3 + $21 | 0;
   $9 = $4 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $41 = $3;
   $21 = $9;
   $3 = __wasm_i64_mul($30, $16, $28, $18);
   $34 = i64toi32_i32$HIGH_BITS;
   $30 = $3;
   $4 = __wasm_i64_mul($29, $24, $33, $18);
   $3 = $3 + $4 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $34 | 0;
   $9 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
   $14 = $3;
   $11 = __wasm_i64_mul($23, $18, $31, $22);
   $4 = $3 + $11 | 0;
   $7 = $9;
   $3 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $3 = $4 >>> 0 < $11 >>> 0 ? $3 + 1 | 0 : $3;
   $16 = $4;
   $9 = __wasm_i64_mul($19, $18, $27, $22);
   $4 = $4 + $9 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $3 | 0;
   $11 = $4 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
   $29 = ($3 | 0) == ($11 | 0) & $4 >>> 0 < $16 >>> 0 | $3 >>> 0 > $11 >>> 0;
   $9 = ($7 | 0) == ($34 | 0) & $14 >>> 0 < $30 >>> 0 | $7 >>> 0 < $34 >>> 0;
   $3 = ($3 | 0) == ($7 | 0) & $14 >>> 0 > $16 >>> 0 | $3 >>> 0 < $7 >>> 0;
   $3 = $3 + $9 | 0;
   $3 = $3 + $29 | 0;
   $7 = $11;
   $16 = $7 + $15 | 0;
   $9 = ($3 | $24) + $12 | 0;
   $9 = $7 >>> 0 > $16 >>> 0 ? $9 + 1 | 0 : $9;
   $14 = $9;
   $3 = ($12 | 0) == ($9 | 0) & $15 >>> 0 > $16 >>> 0 | $9 >>> 0 < $12 >>> 0;
   $9 = $21;
   $7 = $3;
   $3 = $3 + $41 | 0;
   $9 = $7 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $24 = $3;
   $12 = $9;
   $3 = __wasm_i64_mul($23, $18, $33, $18);
   $23 = i64toi32_i32$HIGH_BITS;
   $15 = $3;
   $7 = __wasm_i64_mul($19, $18, $28, $18);
   $3 = $3 + $7 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $23 | 0;
   $9 = $3 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
   $21 = 0;
   $7 = ($9 | 0) == ($23 | 0) & $3 >>> 0 < $15 >>> 0 | $9 >>> 0 < $23 >>> 0;
   $15 = $9;
   $3 = $9 + $13 | 0;
   $9 = ($7 | $21) + $8 | 0;
   $9 = $3 >>> 0 < $15 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = ($8 | 0) == ($9 | 0) & $3 >>> 0 < $13 >>> 0 | $8 >>> 0 > $9 >>> 0;
   $7 = $9;
   $9 = $4;
   $13 = 0;
   $4 = $13 + $3 | 0;
   $11 = $7 + $9 | 0;
   $9 = 0;
   $11 = $4 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
   $3 = ($7 | 0) == ($11 | 0) & $3 >>> 0 > $4 >>> 0 | $7 >>> 0 > $11 >>> 0;
   $4 = $3;
   $3 = $3 + $8 | 0;
   $9 = ($4 >>> 0 > $3 >>> 0 ? 1 : $9) + $14 | 0;
   $11 = $12;
   $4 = $3;
   $3 = $3 + $16 | 0;
   $9 = $4 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $9;
   $7 = ($14 | 0) == ($9 | 0) & $3 >>> 0 < $16 >>> 0 | $9 >>> 0 < $14 >>> 0;
   $8 = $7;
   $7 = $7 + $24 | 0;
   $11 = $8 >>> 0 > $7 >>> 0 ? $11 + 1 | 0 : $11;
   $8 = $11;
   block2 : {
    if (($11 | 0) == 131071 | $11 >>> 0 < 131071) {
     $37 = $39 | $38;
     $36 = $22 | $40;
     __multi3($10 + 80 | 0, $3, $9, $7, $11, $5, $6, $26, $25);
     if ((global$9 | 0) != ($17 | 0)) {
      wasm2js_trap()
     }
     $11 = HEAP32[$10 + 84 >> 2];
     $15 = $11;
     $9 = $1 << 17;
     $14 = 0;
     $13 = HEAP32[$10 + 88 >> 2];
     $1 = $14 - $13 | 0;
     $2 = HEAP32[$10 + 80 >> 2];
     $11 = ($11 | $2) != 0;
     $12 = $1 - $11 | 0;
     $13 = ($9 - (HEAP32[$10 + 92 >> 2] + ($13 >>> 0 > $14 >>> 0) | 0) | 0) - ($1 >>> 0 < $11 >>> 0) | 0;
     $16 = $35 + 16382 | 0;
     $14 = 0 - ((($2 | 0) != 0) + $15 | 0) | 0;
     $15 = 0 - $2 | 0;
     break block2;
    }
    $3 = ($4 & 1) << 31 | $3 >>> 1;
    $4 = $7 << 31 | $4 >>> 1;
    $7 = ($8 & 1) << 31 | $7 >>> 1;
    $8 = $8 >>> 1 | 0;
    __multi3($10 + 96 | 0, $3, $4, $7, $8, $5, $6, $26, $25);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    $12 = HEAP32[$10 + 100 >> 2];
    $21 = $12;
    $15 = 0;
    $19 = HEAP32[$10 + 104 >> 2];
    $14 = $15 - $19 | 0;
    $11 = HEAP32[$10 + 96 >> 2];
    $13 = ($12 | $11) != 0;
    $12 = $14 - $13 | 0;
    $13 = (($1 << 16) - (HEAP32[$10 + 108 >> 2] + ($15 >>> 0 < $19 >>> 0) | 0) | 0) - ($13 >>> 0 > $14 >>> 0) | 0;
    $16 = $35 + 16383 | 0;
    $32 = $1;
    $19 = $2;
    $14 = 0 - ((($11 | 0) != 0) + $21 | 0) | 0;
    $15 = 0 - $11 | 0;
   }
   if (($16 | 0) >= 32767) {
    $20 = $20 | 2147418112;
    $1 = 0;
    $2 = 0;
    break block1;
   }
   block3 : {
    if (($16 | 0) > 0) {
     $1 = $12 << 1 | $14 >>> 31;
     $2 = $13 << 1 | $12 >>> 31;
     $12 = $7;
     $13 = $8 & 65535 | $16 << 16;
     $11 = $14 << 1 | $15 >>> 31;
     $8 = $15 << 1;
     break block3;
    }
    if (($16 | 0) <= -113) {
     $1 = 0;
     $2 = 0;
     break block1;
    }
    __lshrti3($10 - -64 | 0, $3, $4, $7, $8, 1 - $16 | 0);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    __ashlti3($10 + 48 | 0, $32, $19, $37, $36, $16 + 112 | 0);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    $3 = HEAP32[$10 + 64 >> 2];
    $4 = HEAP32[$10 + 68 >> 2];
    $12 = HEAP32[$10 + 72 >> 2];
    $13 = HEAP32[$10 + 76 >> 2];
    __multi3($10 + 32 | 0, $5, $6, $26, $25, $3, $4, $12, $13);
    if ((global$9 | 0) != ($17 | 0)) {
     wasm2js_trap()
    }
    $1 = HEAP32[$10 + 40 >> 2];
    $2 = HEAP32[$10 + 56 >> 2];
    $8 = HEAP32[$10 + 36 >> 2];
    $15 = $1 << 1 | $8 >>> 31;
    $11 = $2 - $15 | 0;
    $15 = HEAP32[$10 + 60 >> 2] - ((HEAP32[$10 + 44 >> 2] << 1 | $1 >>> 31) + ($2 >>> 0 < $15 >>> 0) | 0) | 0;
    $2 = HEAP32[$10 + 52 >> 2];
    $19 = $2;
    $1 = HEAP32[$10 + 32 >> 2];
    $7 = $8 << 1 | $1 >>> 31;
    $14 = $1 << 1;
    $1 = $14;
    $9 = HEAP32[$10 + 48 >> 2];
    $2 = ($2 | 0) == ($7 | 0) & $1 >>> 0 > $9 >>> 0 | $2 >>> 0 < $7 >>> 0;
    $1 = $11 - $2 | 0;
    $2 = $15 - ($2 >>> 0 > $11 >>> 0) | 0;
    $11 = $19 - (($9 >>> 0 < $14 >>> 0) + $7 | 0) | 0;
    $8 = $9 - $14 | 0;
   }
   __multi3($10 + 16 | 0, $5, $6, $26, $25, 3, 0, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   __multi3($10, $5, $6, $26, $25, 5, 0, 0, 0);
   if ((global$9 | 0) != ($17 | 0)) {
    wasm2js_trap()
   }
   $9 = 0;
   $7 = $11 + $9 | 0;
   $14 = $8;
   $11 = $3 & 1;
   $8 = $8 + $11 | 0;
   $7 = $14 >>> 0 > $8 >>> 0 ? $7 + 1 | 0 : $7;
   $6 = ($6 | 0) == ($7 | 0) & $5 >>> 0 < $8 >>> 0 | $6 >>> 0 < $7 >>> 0;
   $5 = ($7 | 0) == ($9 | 0) & $8 >>> 0 < $11 >>> 0 | $7 >>> 0 < $9 >>> 0;
   $11 = $2;
   $9 = $4;
   $2 = $1 + $5 | 0;
   $11 = $2 >>> 0 < $5 >>> 0 ? $11 + 1 | 0 : $11;
   $1 = ($25 | 0) == ($11 | 0);
   $1 = $1 & ($2 | 0) == ($26 | 0) ? $6 : $1 & $2 >>> 0 > $26 >>> 0 | $11 >>> 0 > $25 >>> 0;
   $5 = $1 + $3 | 0;
   $9 = $1 >>> 0 > $5 >>> 0 ? $9 + 1 | 0 : $9;
   $1 = $9;
   $3 = ($4 | 0) == ($9 | 0) & $3 >>> 0 > $5 >>> 0 | $4 >>> 0 > $9 >>> 0;
   $9 = $13;
   $4 = $3;
   $3 = $3 + $12 | 0;
   $9 = $4 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $6 = $3;
   $4 = HEAP32[$10 + 20 >> 2];
   $12 = ($4 | 0) == ($7 | 0) & HEAPU32[$10 + 16 >> 2] < $8 >>> 0 | $4 >>> 0 < $7 >>> 0;
   $4 = HEAP32[$10 + 28 >> 2];
   $3 = HEAP32[$10 + 24 >> 2];
   $4 = $9 >>> 0 < 2147418112 & (($2 | 0) == ($3 | 0) & ($4 | 0) == ($11 | 0) ? $12 : ($4 | 0) == ($11 | 0) & $3 >>> 0 < $2 >>> 0 | $4 >>> 0 < $11 >>> 0);
   $3 = $1;
   $12 = $4;
   $4 = $4 + $5 | 0;
   $3 = $12 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   $1 = ($1 | 0) == ($3 | 0) & $4 >>> 0 < $5 >>> 0 | $1 >>> 0 > $3 >>> 0;
   $5 = $1;
   $1 = $1 + $6 | 0;
   $9 = $5 >>> 0 > $1 >>> 0 ? $9 + 1 | 0 : $9;
   $5 = $1;
   $6 = HEAP32[$10 + 4 >> 2];
   $7 = ($6 | 0) == ($7 | 0) & HEAPU32[$10 >> 2] < $8 >>> 0 | $6 >>> 0 < $7 >>> 0;
   $6 = HEAP32[$10 + 12 >> 2];
   $1 = HEAP32[$10 + 8 >> 2];
   $1 = $9 >>> 0 < 2147418112 & (($1 | 0) == ($2 | 0) & ($6 | 0) == ($11 | 0) ? $7 : ($6 | 0) == ($11 | 0) & $1 >>> 0 < $2 >>> 0 | $6 >>> 0 < $11 >>> 0);
   $2 = $1;
   $1 = $1 + $4 | 0;
   $11 = $2 >>> 0 > $1 >>> 0 ? $3 + 1 | 0 : $3;
   $2 = $11;
   $4 = ($3 | 0) == ($11 | 0) & $1 >>> 0 < $4 >>> 0 | $3 >>> 0 > $11 >>> 0;
   $3 = $9;
   $6 = $4;
   $4 = $4 + $5 | 0;
   $3 = $6 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   $18 = $4 | $18;
   $20 = $3 | $20;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $18;
  HEAP32[$0 + 12 >> 2] = $20;
  __stack_pointer = $10 + 336 | 0;
 }
 
 function __extenddftf2($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $9 = global$9;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  wasm2js_scratch_store_f64(+$1);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $10 = $2;
  $5 = $2 & 1048575;
  $3 = $4;
  $2 = $2 >>> 20 & 2047;
  $4 = 0;
  block : {
   if ($2 | $4) {
    if (($2 | 0) != 2047 | $4) {
     $7 = ($5 & 15) << 28 | $3 >>> 4;
     $8 = $5 >>> 4 | 0;
     $2 = $2 + 15360 | 0;
     $4 = $3 << 28;
     $3 = 0;
     break block;
    }
    $7 = ($5 & 15) << 28 | $3 >>> 4;
    $8 = $5 >>> 4 | 0;
    $2 = 32767;
    $4 = $3 << 28;
    $3 = 0;
    break block;
   }
   if (!($5 | $3)) {
    $2 = 0;
    $3 = 0;
    break block;
   }
   $4 = $5;
   $5 = Math_clz32($5);
   $2 = ($5 | 0) == 32 ? Math_clz32($3) + 32 | 0 : $5;
   __ashlti3($6, $3, $4, 0, 0, $2 + 49 | 0);
   if ((global$9 | 0) != ($9 | 0)) {
    wasm2js_trap()
   }
   $7 = HEAP32[$6 + 8 >> 2];
   $8 = HEAP32[$6 + 12 >> 2] ^ 65536;
   $2 = 15372 - $2 | 0;
   $4 = HEAP32[$6 + 4 >> 2];
   $3 = HEAP32[$6 >> 2];
  }
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $8 | ($10 & -2147483648 | $2 << 16);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function __floatsitf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block : {
   if (!$1) {
    $1 = 0;
    break block;
   }
   $2 = $1 >> 31;
   $4 = ($2 ^ $1) - $2 | 0;
   $2 = Math_clz32($4);
   __ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
   if ((global$9 | 0) != ($5 | 0)) {
    wasm2js_trap()
   }
   $2 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2 << 16) | 0;
   $5 = 0 + HEAP32[$3 + 8 >> 2] | 0;
   $4 = $5;
   $6 = $1 & -2147483648 | ($4 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2);
   $2 = HEAP32[$3 + 4 >> 2];
   $1 = HEAP32[$3 >> 2];
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $6;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function __floatunsitf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block : {
   if (!$1) {
    $2 = 0;
    $1 = 0;
    break block;
   }
   $4 = $1;
   $1 = Math_clz32($1);
   __ashlti3($3, $4, 0, 0, 0, 112 - ($1 ^ 31) | 0);
   if ((global$9 | 0) != ($2 | 0)) {
    wasm2js_trap()
   }
   $2 = 0;
   $4 = $2 + HEAP32[$3 + 8 >> 2] | 0;
   $1 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $1 << 16) | 0;
   $5 = $2 >>> 0 > $4 >>> 0 ? $1 + 1 | 0 : $1;
   $2 = HEAP32[$3 + 4 >> 2];
   $1 = HEAP32[$3 >> 2];
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $5;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function __lshrti3($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  block : {
   if ($5 & 64) {
    $2 = $5 + -64 | 0;
    $1 = $2 & 31;
    if (($2 & 63) >>> 0 >= 32) {
     $2 = 0;
     $1 = $4 >>> $1 | 0;
    } else {
     $2 = $4 >>> $1 | 0;
     $1 = ((1 << $1) - 1 & $4) << 32 - $1 | $3 >>> $1;
    }
    $3 = 0;
    $4 = 0;
    break block;
   }
   if (!$5) {
    break block
   }
   $8 = $3;
   $7 = 64 - $5 | 0;
   $6 = $7 & 31;
   if (($7 & 63) >>> 0 >= 32) {
    $7 = $3 << $6;
    $9 = 0;
   } else {
    $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $4 << $6;
    $9 = $8 << $6;
   }
   $8 = $1;
   $1 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $6 = 0;
    $1 = $2 >>> $1 | 0;
   } else {
    $6 = $2 >>> $1 | 0;
    $1 = ((1 << $1) - 1 & $2) << 32 - $1 | $8 >>> $1;
   }
   $1 = $9 | $1;
   $2 = $6 | $7;
   $6 = $3;
   $3 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $7 = 0;
    $3 = $4 >>> $3 | 0;
   } else {
    $7 = $4 >>> $3 | 0;
    $3 = ((1 << $3) - 1 & $4) << 32 - $3 | $6 >>> $3;
   }
   $4 = $7;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
 }
 
 function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
  $24 = global$9;
  $10 = __stack_pointer - 96 | 0;
  __stack_pointer = $10;
  $14 = $8 & 65535;
  $12 = ($4 ^ $8) & -2147483648;
  $17 = $4 & 65535;
  $25 = $17;
  $43 = $8 >>> 16 & 32767;
  $44 = $4 >>> 16 & 32767;
  block1 : {
   block : {
    if ($43 - 32767 >>> 0 > 4294934529 & $44 - 32767 >>> 0 >= 4294934530) {
     break block
    }
    $18 = $4 & 2147483647;
    $15 = $18;
    $9 = $3;
    if (!(!$3 & ($15 | 0) == 2147418112 ? !($1 | $2) : $15 >>> 0 < 2147418112)) {
     $11 = $3;
     $12 = $4 | 32768;
     break block1;
    }
    $18 = $8 & 2147483647;
    $13 = $18;
    $4 = $7;
    if (!(!$4 & ($13 | 0) == 2147418112 ? !($5 | $6) : $13 >>> 0 < 2147418112)) {
     $11 = $4;
     $12 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break block1;
    }
    if (!($1 | $9 | ($15 ^ 2147418112 | $2))) {
     if (!($4 | $5 | ($6 | $13))) {
      $12 = 2147450880;
      $1 = 0;
      $2 = 0;
      break block1;
     }
     $12 = $12 | 2147418112;
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($4 | $5 | ($13 ^ 2147418112 | $6))) {
     $4 = $1 | $9;
     $3 = $2 | $15;
     $1 = 0;
     $2 = 0;
     if (!($3 | $4)) {
      $12 = 2147450880;
      break block1;
     }
     $12 = $12 | 2147418112;
     break block1;
    }
    if (!($1 | $9 | ($2 | $15))) {
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($4 | $5 | ($6 | $13))) {
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (($15 | 0) == 65535 | $15 >>> 0 < 65535) {
     $8 = $1;
     $9 = !($3 | $17);
     $1 = $9 ? $1 : $3;
     $18 = $9 << 6;
     $4 = Math_clz32($1) + 32 | 0;
     $1 = Math_clz32($9 ? $2 : $17);
     $1 = $18 + (($1 | 0) == 32 ? $4 : $1) | 0;
     __ashlti3($10 + 80 | 0, $8, $2, $3, $17, $1 - 15 | 0);
     if ((global$9 | 0) != ($24 | 0)) {
      wasm2js_trap()
     }
     $37 = 16 - $1 | 0;
     $3 = HEAP32[$10 + 88 >> 2];
     $25 = HEAP32[$10 + 92 >> 2];
     $2 = HEAP32[$10 + 84 >> 2];
     $1 = HEAP32[$10 + 80 >> 2];
    }
    if ($13 >>> 0 > 65535) {
     break block
    }
    $8 = !($7 | $14);
    $4 = $8 ? $5 : $7;
    $17 = $8 << 6;
    $9 = Math_clz32($4) + 32 | 0;
    $4 = Math_clz32($8 ? $6 : $14);
    $4 = $17 + (($4 | 0) == 32 ? $9 : $4) | 0;
    __ashlti3($10 - -64 | 0, $5, $6, $7, $14, $4 - 15 | 0);
    if ((global$9 | 0) != ($24 | 0)) {
     wasm2js_trap()
    }
    $37 = ($37 - $4 | 0) + 16 | 0;
    $7 = HEAP32[$10 + 72 >> 2];
    $14 = HEAP32[$10 + 76 >> 2];
    $5 = HEAP32[$10 + 64 >> 2];
    $6 = HEAP32[$10 + 68 >> 2];
   }
   $4 = $5;
   $5 = $6 << 15 | $4 >>> 17;
   $8 = $4 << 15;
   $4 = 0;
   $20 = $8 & -32768;
   $38 = $2;
   $18 = __wasm_i64_mul($20, $4, $2, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $28 = $4;
   $39 = $5;
   $15 = $1;
   $2 = __wasm_i64_mul($5, 0, $1, 0);
   $1 = $2 + $18 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $4 | 0;
   $8 = $1;
   $2 = $1 >>> 0 < $2 >>> 0 ? $5 + 1 | 0 : $5;
   $5 = $1;
   $9 = 0;
   $1 = __wasm_i64_mul($15, $23, $20, $23);
   $13 = $9 + $1 | 0;
   $4 = i64toi32_i32$HIGH_BITS + $5 | 0;
   $4 = $1 >>> 0 > $13 >>> 0 ? $4 + 1 | 0 : $4;
   $17 = $4;
   $21 = ($5 | 0) == ($4 | 0) & $9 >>> 0 > $13 >>> 0 | $4 >>> 0 < $5 >>> 0;
   $40 = $3;
   $26 = __wasm_i64_mul($20, $23, $3, 0);
   $41 = i64toi32_i32$HIGH_BITS;
   $1 = __wasm_i64_mul($38, $22, $39, $22);
   $19 = $1 + $26 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $41 | 0;
   $9 = $1 >>> 0 > $19 >>> 0 ? $9 + 1 | 0 : $9;
   $1 = $14 << 15 | $7 >>> 17;
   $29 = $7 << 15 | $6 >>> 17;
   $3 = __wasm_i64_mul($29, 0, $15, $23);
   $30 = $3 + $19 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $5 = $3 >>> 0 > $30 >>> 0 ? $5 + 1 | 0 : $5;
   $31 = $5;
   $4 = $5;
   $3 = ($2 | 0) == ($28 | 0) & $8 >>> 0 < $18 >>> 0 | $2 >>> 0 < $28 >>> 0;
   $32 = $2 + $30 | 0;
   $5 = $3 + $4 | 0;
   $5 = $2 >>> 0 > $32 >>> 0 ? $5 + 1 | 0 : $5;
   $8 = $5;
   $6 = $32;
   $2 = $5;
   $33 = $25 | 65536;
   $25 = __wasm_i64_mul($20, $23, $33, $16);
   $42 = i64toi32_i32$HIGH_BITS;
   $3 = __wasm_i64_mul($39, $22, $40, $11);
   $34 = $3 + $25 | 0;
   $4 = i64toi32_i32$HIGH_BITS + $42 | 0;
   $4 = $3 >>> 0 > $34 >>> 0 ? $4 + 1 | 0 : $4;
   $7 = $4;
   $35 = $1 | -2147483648;
   $1 = __wasm_i64_mul($35, 0, $15, $23);
   $20 = $1 + $34 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $4 | 0;
   $5 = $1 >>> 0 > $20 >>> 0 ? $5 + 1 | 0 : $5;
   $3 = __wasm_i64_mul($29, $11, $38, $22);
   $1 = $3 + $20 | 0;
   $36 = $5;
   $5 = $5 + i64toi32_i32$HIGH_BITS | 0;
   $28 = $1;
   $18 = $1 >>> 0 < $3 >>> 0 ? $5 + 1 | 0 : $5;
   $5 = $1;
   $1 = 0;
   $15 = $1 + $6 | 0;
   $4 = $2 + $5 | 0;
   $4 = $1 >>> 0 > $15 >>> 0 ? $4 + 1 | 0 : $4;
   $23 = $4;
   $1 = $15 + $21 | 0;
   $2 = $1 >>> 0 < $15 >>> 0 ? $4 + 1 | 0 : $4;
   $21 = (($44 + $43 | 0) + $37 | 0) - 16383 | 0;
   $4 = __wasm_i64_mul($35, $27, $38, $22);
   $16 = i64toi32_i32$HIGH_BITS;
   $6 = __wasm_i64_mul($39, $22, $33, $11);
   $3 = $6 + $4 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $16 | 0;
   $5 = $3 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $14 = $5;
   $22 = ($16 | 0) == ($5 | 0) & $3 >>> 0 < $4 >>> 0 | $5 >>> 0 < $16 >>> 0;
   $4 = __wasm_i64_mul($29, $11, $40, $11);
   $6 = $4 + $3 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $5 | 0;
   $5 = $4 >>> 0 > $6 >>> 0 ? $5 + 1 | 0 : $5;
   $16 = $5;
   $3 = ($14 | 0) == ($5 | 0) & $3 >>> 0 > $6 >>> 0 | $5 >>> 0 < $14 >>> 0;
   $5 = 0;
   $4 = $3;
   $3 = $3 + $22 | 0;
   $5 = $4 >>> 0 > $3 >>> 0 ? 1 : $5;
   $4 = $3;
   $3 = __wasm_i64_mul($35, $27, $33, $11);
   $4 = $4 + $3 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $5 | 0;
   $22 = $4;
   $3 = $3 >>> 0 > $4 >>> 0 ? $5 + 1 | 0 : $5;
   $4 = ($9 | 0) == ($41 | 0) & $19 >>> 0 < $26 >>> 0 | $9 >>> 0 < $41 >>> 0;
   $5 = 0;
   $9 = ($9 | 0) == ($31 | 0) & $19 >>> 0 > $30 >>> 0 | $9 >>> 0 > $31 >>> 0;
   $14 = $9;
   $9 = $4 + $9 | 0;
   $4 = ($14 >>> 0 > $9 >>> 0 ? 1 : $5) + $16 | 0;
   $5 = $6 + $9 | 0;
   $4 = $5 >>> 0 < $9 >>> 0 ? $4 + 1 | 0 : $4;
   $14 = $4;
   $26 = $5;
   $4 = ($16 | 0) == ($4 | 0) & $6 >>> 0 > $5 >>> 0 | $4 >>> 0 < $16 >>> 0;
   $5 = $3;
   $3 = $4 + $22 | 0;
   $5 = $3 >>> 0 < $4 >>> 0 ? $5 + 1 | 0 : $5;
   $9 = $3;
   $16 = $5;
   $4 = __wasm_i64_mul($29, $11, $33, $11);
   $19 = i64toi32_i32$HIGH_BITS;
   $6 = __wasm_i64_mul($35, $27, $40, $11);
   $3 = $6 + $4 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $19 | 0;
   $5 = $3 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $6 = $5;
   $5 = ($19 | 0) == ($5 | 0) & $3 >>> 0 < $4 >>> 0 | $5 >>> 0 < $19 >>> 0;
   $27 = $6 + $9 | 0;
   $4 = $5 + $16 | 0;
   $4 = $6 >>> 0 > $27 >>> 0 ? $4 + 1 | 0 : $4;
   $19 = $27;
   $9 = $3;
   $3 = 0;
   $6 = $3 + $26 | 0;
   $5 = $9 + $14 | 0;
   $5 = $3 >>> 0 > $6 >>> 0 ? $5 + 1 | 0 : $5;
   $16 = $5;
   $3 = ($14 | 0) == ($5 | 0) & $6 >>> 0 < $26 >>> 0 | $5 >>> 0 < $14 >>> 0;
   $5 = $4;
   $4 = $3;
   $3 = $3 + $19 | 0;
   $5 = $4 >>> 0 > $3 >>> 0 ? $5 + 1 | 0 : $5;
   $14 = $3;
   $3 = $5;
   $9 = ($18 | 0) == ($36 | 0) & $20 >>> 0 > $28 >>> 0 | $18 >>> 0 < $36 >>> 0;
   $4 = ($7 | 0) == ($42 | 0) & $25 >>> 0 > $34 >>> 0 | $7 >>> 0 < $42 >>> 0;
   $7 = ($7 | 0) == ($36 | 0) & $20 >>> 0 < $34 >>> 0 | $7 >>> 0 > $36 >>> 0;
   $4 = $4 + $7 | 0;
   $4 = $4 + $9 | 0;
   $9 = $18;
   $7 = $9 + $6 | 0;
   $4 = $4 + $16 | 0;
   $5 = $3;
   $4 = $7 >>> 0 < $9 >>> 0 ? $4 + 1 | 0 : $4;
   $9 = $4;
   $4 = ($16 | 0) == ($4 | 0) & $6 >>> 0 > $7 >>> 0 | $4 >>> 0 < $16 >>> 0;
   $3 = $4 + $14 | 0;
   $5 = $4 >>> 0 > $3 >>> 0 ? $5 + 1 | 0 : $5;
   $16 = $3;
   $6 = $5;
   $5 = 0;
   $4 = ($8 | 0) == ($23 | 0) & $15 >>> 0 < $32 >>> 0 | $8 >>> 0 > $23 >>> 0;
   $3 = $4 + (($8 | 0) == ($31 | 0) & $30 >>> 0 > $32 >>> 0 | $8 >>> 0 < $31 >>> 0) | 0;
   $4 = ($4 >>> 0 > $3 >>> 0 ? 1 : $5) + $9 | 0;
   $5 = $6;
   $6 = $3;
   $3 = $3 + $7 | 0;
   $4 = $6 >>> 0 > $3 >>> 0 ? $4 + 1 | 0 : $4;
   $7 = ($9 | 0) == ($4 | 0) & $3 >>> 0 < $7 >>> 0 | $4 >>> 0 < $9 >>> 0;
   $6 = $7;
   $7 = $7 + $16 | 0;
   $5 = $6 >>> 0 > $7 >>> 0 ? $5 + 1 | 0 : $5;
   $8 = $5;
   block2 : {
    if ($5 & 65536) {
     $21 = $21 + 1 | 0;
     break block2;
    }
    $9 = $17 >>> 31 | 0;
    $6 = 0;
    $5 = $8 << 1 | $7 >>> 31;
    $7 = $7 << 1 | $4 >>> 31;
    $8 = $5;
    $5 = $4 << 1 | $3 >>> 31;
    $3 = $3 << 1 | $2 >>> 31;
    $4 = $5;
    $5 = $17 << 1 | $13 >>> 31;
    $13 = $13 << 1;
    $17 = $5;
    $5 = $2 << 1 | $1 >>> 31;
    $1 = $1 << 1 | $9;
    $2 = $5 | $6;
   }
   if (($21 | 0) >= 32767) {
    $12 = $12 | 2147418112;
    $1 = 0;
    $2 = 0;
    break block1;
   }
   block3 : {
    if (($21 | 0) <= 0) {
     $6 = 1 - $21 | 0;
     if ($6 >>> 0 <= 127) {
      $5 = $21 + 127 | 0;
      __ashlti3($10 + 48 | 0, $13, $17, $1, $2, $5);
      if ((global$9 | 0) != ($24 | 0)) {
       wasm2js_trap()
      }
      __ashlti3($10 + 32 | 0, $3, $4, $7, $8, $5);
      if ((global$9 | 0) != ($24 | 0)) {
       wasm2js_trap()
      }
      __lshrti3($10 + 16 | 0, $13, $17, $1, $2, $6);
      if ((global$9 | 0) != ($24 | 0)) {
       wasm2js_trap()
      }
      __lshrti3($10, $3, $4, $7, $8, $6);
      if ((global$9 | 0) != ($24 | 0)) {
       wasm2js_trap()
      }
      $13 = HEAP32[$10 + 32 >> 2] | HEAP32[$10 + 16 >> 2] | (HEAP32[$10 + 48 >> 2] | HEAP32[$10 + 56 >> 2] | (HEAP32[$10 + 52 >> 2] | HEAP32[$10 + 60 >> 2])) != 0;
      $17 = HEAP32[$10 + 36 >> 2] | HEAP32[$10 + 20 >> 2];
      $1 = HEAP32[$10 + 40 >> 2] | HEAP32[$10 + 24 >> 2];
      $2 = HEAP32[$10 + 44 >> 2] | HEAP32[$10 + 28 >> 2];
      $3 = HEAP32[$10 >> 2];
      $4 = HEAP32[$10 + 4 >> 2];
      $6 = HEAP32[$10 + 8 >> 2];
      $5 = HEAP32[$10 + 12 >> 2];
      break block3;
     }
     $1 = 0;
     $2 = 0;
     break block1;
    }
    $6 = $7;
    $5 = $8 & 65535 | $21 << 16;
   }
   $11 = $6 | $11;
   $12 = $5 | $12;
   if (!(!$1 & ($2 | 0) == -2147483648 ? !($13 | $17) : ($2 | 0) > 0 | ($2 | 0) >= 0)) {
    $1 = $3 + 1 | 0;
    $9 = $1 ? $4 : $4 + 1 | 0;
    $4 = $12;
    $2 = $9;
    $3 = !($9 | $1);
    $11 = $3 + $11 | 0;
    $12 = $3 >>> 0 > $11 >>> 0 ? $4 + 1 | 0 : $4;
    break block1;
   }
   if ($1 | $13 | ($2 ^ -2147483648 | $17)) {
    $1 = $3;
    $2 = $4;
    break block1;
   }
   $1 = $3 & 1;
   $2 = $1;
   $1 = $1 + $3 | 0;
   $2 = $2 >>> 0 > $1 >>> 0 ? $4 + 1 | 0 : $4;
   $3 = ($4 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $4 >>> 0;
   $5 = $12;
   $11 = $3 + $11 | 0;
   $12 = $11 >>> 0 < $3 >>> 0 ? $5 + 1 | 0 : $5;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $11;
  HEAP32[$0 + 12 >> 2] = $12;
  __stack_pointer = $10 + 96 | 0;
 }
 
 function __multi3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $8 = __wasm_i64_mul($1, $2, $7, $8);
  $7 = i64toi32_i32$HIGH_BITS;
  $4 = __wasm_i64_mul($3, $4, $5, $6);
  $8 = $4 + $8 | 0;
  $3 = i64toi32_i32$HIGH_BITS + $7 | 0;
  $7 = $4 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
  $9 = $6;
  $4 = 0;
  $10 = $2;
  $3 = 0;
  $2 = __wasm_i64_mul($6, $4, $2, $3);
  $6 = $2 + $8 | 0;
  $8 = i64toi32_i32$HIGH_BITS + $7 | 0;
  $11 = $6;
  $2 = $2 >>> 0 > $6 >>> 0 ? $8 + 1 | 0 : $8;
  $6 = __wasm_i64_mul($5, 0, $1, 0);
  $7 = i64toi32_i32$HIGH_BITS;
  $8 = 0;
  $3 = __wasm_i64_mul($5, $8, $10, $3);
  $7 = $7 + $3 | 0;
  $5 = i64toi32_i32$HIGH_BITS + $8 | 0;
  $5 = $3 >>> 0 > $7 >>> 0 ? $5 + 1 | 0 : $5;
  $8 = $5 + $11 | 0;
  $3 = $2;
  $5 = $5 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = __wasm_i64_mul($1, $12, $9, $4) + $7 | 0;
  $4 = i64toi32_i32$HIGH_BITS;
  $4 = $1 >>> 0 < $7 >>> 0 ? $4 + 1 | 0 : $4;
  $7 = $4 + $8 | 0;
  $8 = $5;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $4 >>> 0 > $7 >>> 0 ? $8 + 1 | 0 : $8;
  HEAP32[$0 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function emscripten_stack_init() {
  __stack_base = 145936;
  __stack_end = 80400;
 }
 
 function emscripten_stack_set_limits($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  __stack_base = $0;
  __stack_end = $1;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0;
  $10 = global$9;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  __addtf3($9, $1, $2, $3, $4, $5, $6, $7, $8 ^ -2147483648);
  if ((global$9 | 0) != ($10 | 0)) {
   wasm2js_trap()
  }
  $3 = HEAP32[$9 >> 2];
  $2 = HEAP32[$9 + 4 >> 2];
  $1 = HEAP32[$9 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $2;
  __stack_pointer = $9 + 16 | 0;
 }
 
 function __trunctfdf2($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $9 = global$9;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $4 = $3 & 65535;
  $5 = $3 >>> 16 & 32767;
  $8 = $5;
  block1 : {
   if ($5 - 15361 >>> 0 <= 2045) {
    $4 = $4 << 4 | $2 >>> 28;
    $2 = $2 << 4;
    $5 = $4;
    $4 = $1 >>> 28 | $2;
    $2 = $5;
    $5 = $8 - 15360 | 0;
    $1 = $1 & 268435455;
    block : {
     if (($1 | 0) == 134217728 & ($0 | 0) != 0 | $1 >>> 0 > 134217728) {
      $4 = $4 + 1 | 0;
      $2 = $4 ? $2 : $2 + 1 | 0;
      break block;
     }
     if ($0 | ($1 | 0) != 134217728) {
      break block
     }
     $0 = $4;
     $4 = $4 + ($4 & 1) | 0;
     $2 = $0 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
    }
    $7 = $2 >>> 0 > 1048575;
    $0 = $7 ? 0 : $4;
    $1 = $7 ? 0 : $2;
    $4 = 0;
    $2 = $5 + $7 | 0;
    $5 = $2 >>> 0 < $5 >>> 0 ? 1 : $4;
    break block1;
   }
   if (!(!($0 | $2 | ($1 | $4)) | (($5 | 0) != 32767 | ($7 | 0) != 0))) {
    $0 = $2;
    $2 = $4 << 4 | $2 >>> 28;
    $0 = $0 << 4 | $1 >>> 28;
    $1 = $2 | 524288;
    $2 = 2047;
    $5 = 0;
    break block1;
   }
   if ($8 >>> 0 > 17406) {
    $0 = 0;
    $1 = 0;
    $2 = 2047;
    $5 = 0;
    break block1;
   }
   $7 = !($5 | $7);
   $10 = $7 ? 15360 : 15361;
   $5 = $10 - $8 | 0;
   if (($5 | 0) > 112) {
    $0 = 0;
    $1 = 0;
    $2 = 0;
    $5 = 0;
    break block1;
   }
   $4 = $7 ? $4 : $4 | 65536;
   __ashlti3($6 + 16 | 0, $0, $1, $2, $4, 128 - $5 | 0);
   if ((global$9 | 0) != ($9 | 0)) {
    wasm2js_trap()
   }
   __lshrti3($6, $0, $1, $2, $4, $5);
   if ((global$9 | 0) != ($9 | 0)) {
    wasm2js_trap()
   }
   $0 = HEAP32[$6 + 8 >> 2];
   $7 = $0 << 4;
   $1 = HEAP32[$6 + 12 >> 2] << 4 | $0 >>> 28;
   $0 = HEAP32[$6 + 4 >> 2];
   $5 = $0;
   $0 = $0 >>> 28 | $7;
   $5 = $5 & 268435455;
   $2 = HEAP32[$6 >> 2] | ($8 | 0) != ($10 | 0) & (HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 24 >> 2] | (HEAP32[$6 + 20 >> 2] | HEAP32[$6 + 28 >> 2])) != 0;
   block3 : {
    if (($5 | 0) == 134217728 & ($2 | 0) != 0 | $5 >>> 0 > 134217728) {
     $0 = $0 + 1 | 0;
     $1 = $0 ? $1 : $1 + 1 | 0;
     break block3;
    }
    if ($2 | ($5 | 0) != 134217728) {
     break block3
    }
    $4 = $1;
    $1 = $0;
    $0 = $0 + ($0 & 1) | 0;
    $1 = $1 >>> 0 > $0 >>> 0 ? $4 + 1 | 0 : $4;
   }
   $2 = $1 >>> 0 > 1048575;
   $1 = $2 ? $1 ^ 1048576 : $1;
   $5 = 0;
  }
  __stack_pointer = $6 + 32 | 0;
  wasm2js_scratch_store_i32(0, $0 | 0);
  wasm2js_scratch_store_i32(1, $1 | ($3 & -2147483648 | $2 << 20));
  return +wasm2js_scratch_load_f64();
 }
 
 function __trunctfsf2($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $9 = global$9;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $5 = $3 & 65535;
  $7 = $3 >>> 16 & 32767;
  block1 : {
   if ($7 - 16257 >>> 0 <= 253) {
    $4 = ($5 & 33554431) << 7 | $2 >>> 25;
    $5 = 0;
    $2 = $2 & 33554431;
    block : {
     if (!(!$5 & ($2 | 0) == 16777216 ? !($0 | $1) : !$5 & $2 >>> 0 < 16777216)) {
      $4 = $4 + 1 | 0;
      break block;
     }
     if ($2 ^ 16777216 | $0 | ($1 | $5)) {
      break block
     }
     $4 = ($4 & 1) + $4 | 0;
    }
    $0 = $4 >>> 0 > 8388607;
    $4 = $0 ? 0 : $4;
    $0 = $7 + ($0 ? -16255 : -16256) | 0;
    break block1;
   }
   if (!(!($0 | $2 | ($1 | $5)) | (($7 | 0) != 32767 | ($4 | 0) != 0))) {
    $4 = ($5 & 33554431) << 7 | $2 >>> 25 | 4194304;
    $0 = 255;
    break block1;
   }
   if ($7 >>> 0 > 16510) {
    $0 = 255;
    break block1;
   }
   $4 = !($4 | $7);
   $10 = $4 ? 16256 : 16257;
   $8 = $10 - $7 | 0;
   if (($8 | 0) > 112) {
    $4 = 0;
    $0 = 0;
    break block1;
   }
   $5 = $4 ? $5 : $5 | 65536;
   __ashlti3($6 + 16 | 0, $0, $1, $2, $5, 128 - $8 | 0);
   if ((global$9 | 0) != ($9 | 0)) {
    wasm2js_trap()
   }
   __lshrti3($6, $0, $1, $2, $5, $8);
   if ((global$9 | 0) != ($9 | 0)) {
    wasm2js_trap()
   }
   $0 = HEAP32[$6 + 8 >> 2];
   $4 = (HEAP32[$6 + 12 >> 2] & 33554431) << 7 | $0 >>> 25;
   $2 = HEAP32[$6 >> 2] | ($7 | 0) != ($10 | 0) & (HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 24 >> 2] | (HEAP32[$6 + 20 >> 2] | HEAP32[$6 + 28 >> 2])) != 0;
   $5 = HEAP32[$6 + 4 >> 2];
   $1 = 0;
   $0 = $0 & 33554431;
   block3 : {
    if (!(!$1 & ($0 | 0) == 16777216 ? !($2 | $5) : !$1 & $0 >>> 0 < 16777216)) {
     $4 = $4 + 1 | 0;
     break block3;
    }
    if ($0 ^ 16777216 | $2 | ($1 | $5)) {
     break block3
    }
    $4 = ($4 & 1) + $4 | 0;
   }
   $0 = $4 >>> 0 > 8388607;
   $4 = $0 ? $4 ^ 8388608 : $4;
  }
  __stack_pointer = $6 + 32 | 0;
  return wasm2js_scratch_store_i32(2, $3 & -2147483648 | $0 << 23 | $4), wasm2js_scratch_load_f32();
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__ios_base___ios_base_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29_762($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    std____2__ios_base___ios_base_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $2 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 28696;
   $1 = $0 + 4 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__locale___locale_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29_764($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $2 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____basic_streambuf_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 28696;
   $1 = $0 + 4 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__locale__locale_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____setbuf_28char__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $0 | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $1 = global$9;
  std____2__fpos___mbstate_t___fpos_5babi_nn190106_5d_28long_20long_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__fpos___mbstate_t___fpos_5babi_nn190106_5d_28long_20long_29($0) {
  HEAP32[$0 + 8 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $1 = global$9;
  std____2__fpos___mbstate_t___fpos_5babi_nn190106_5d_28long_20long_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____xsgetn_28char__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer;
   $4 = $3 - 16 | 0;
   __stack_pointer = $4;
  }
  block2 : {
   while (1) {
    block : {
     if (!global$9) {
      if (($2 | 0) <= ($7 | 0)) {
       break block
      }
      $3 = HEAP32[$0 + 12 >> 2];
      $6 = HEAP32[$0 + 16 >> 2];
      $8 = $3 >>> 0 < $6 >>> 0;
     }
     block1 : {
      if (!global$9) {
       if ($8) {
        HEAP32[$4 + 12 >> 2] = 2147483647;
        HEAP32[$4 + 8 >> 2] = $6 - $3;
        HEAP32[$4 + 4 >> 2] = $2 - $7;
        $8 = $4 + 4 | 0;
        $3 = HEAP32[long_20const__20std____2__min_5babi_nn190106_5d_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, long_20const__20std____2__min_5babi_nn190106_5d_long__28long_20const__2c_20long_20const__29($4 + 8 | 0, $8)) >> 2];
        std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($1, HEAP32[$0 + 12 >> 2], $3);
        $6 = HEAP32[$0 + 12 >> 2] + $3 | 0;
        HEAP32[$0 + 12 >> 2] = $6;
        break block1;
       }
       $3 = HEAP32[HEAP32[$0 >> 2] + 40 >> 2];
      }
      if (!global$9 | !$9) {
       $5 = FUNCTION_TABLE[$3 | 0]($0) | 0;
       if ((global$9 | 0) == 1) {
        break block2
       }
       $3 = $5;
      }
      if (!global$9) {
       $6 = ($3 | 0) == -1;
       if ($6) {
        break block
       }
       HEAP8[$1 | 0] = $3 << 24 >> 24;
       $3 = 1;
      }
     }
     if (!global$9) {
      $1 = $1 + $3 | 0;
      $7 = $3 + $7 | 0;
      continue;
     }
    }
    break;
   };
   if (!global$9) {
    __stack_pointer = $4 + 16 | 0;
    return $7 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $7;
  HEAP32[$5 + 24 >> 2] = $6;
  HEAP32[$5 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function long_20const__20std____2__min_5babi_nn190106_5d_long__28long_20const__2c_20long_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$9;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn190106_5d_long_2c_20long__28long_20const__2c_20long_20const__29_20const($1, $0);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 ? $1 : $0;
 }
 
 function std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0;
  $3 = global$9;
  char__20std____2____constexpr_memmove_5babi_nn190106_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($0, $1, $2);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
 }
 
 function char__20std____2____constexpr_memmove_5babi_nn190106_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($0, $1, $2) {
  if ($2) {
   wasm2js_memory_copy($0, $1, $2)
  }
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____underflow_28_29($0) {
  $0 = $0 | 0;
  return -1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____uflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 36 >> 2];
  block : {
   if (!global$9 | !$2) {
    $2 = FUNCTION_TABLE[$1 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    if (($1 | 0) == -1) {
     return -1
    }
    $2 = $0;
    $0 = HEAP32[$0 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = $0 + 1;
    return std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$0 | 0]) | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29($0) {
  return $0 & 255;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return -1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____xsputn_28char_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer;
   $6 = $3 - 16 | 0;
   __stack_pointer = $6;
  }
  block1 : {
   while (1) {
    block : {
     if (!global$9) {
      if (($2 | 0) <= ($5 | 0)) {
       break block
      }
      $3 = HEAP32[$0 + 24 >> 2];
      $7 = HEAP32[$0 + 28 >> 2];
      $9 = $3 >>> 0 >= $7 >>> 0;
     }
     $8 = global$9 ? $8 : $9;
     if ($8 | (global$9 | 0) == 2) {
      if (!global$9) {
       $3 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$1 | 0]);
       $7 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2];
      }
      if (!global$9 | !$10) {
       $4 = FUNCTION_TABLE[$7 | 0]($0, $3) | 0;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $3 = $4;
      }
      if (!global$9) {
       $3 = ($3 | 0) == -1;
       if ($3) {
        break block
       }
       $5 = $5 + 1 | 0;
       $1 = $1 + 1 | 0;
       continue;
      }
     }
     if (!global$9 & (!$8 | (global$9 | 0) == 2)) {
      HEAP32[$6 + 12 >> 2] = $7 - $3;
      HEAP32[$6 + 8 >> 2] = $2 - $5;
      $3 = HEAP32[long_20const__20std____2__min_5babi_nn190106_5d_long__28long_20const__2c_20long_20const__29($6 + 12 | 0, $6 + 8 | 0) >> 2];
      std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], $1, $3);
      $7 = HEAP32[$0 + 24 >> 2] + $3 | 0;
      HEAP32[$0 + 24 >> 2] = $7;
      $5 = $3 + $5 | 0;
      $1 = $1 + $3 | 0;
      continue;
     }
    }
    break;
   };
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0;
    return $5 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $7;
  HEAP32[$4 + 28 >> 2] = $9;
  HEAP32[$4 + 32 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_788($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  } else {
   $1 = 0
  }
  $1 = global$9 ? $1 : $0 + 8 | 0;
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    std____2__ios_base___ios_base_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
  block : {
   if (!global$9 | !$1) {
    $1 = std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_788($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_790($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_788($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_791($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
  block : {
   if (!global$9 | !$1) {
    std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_790($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____good_5babi_nn190106_5d_28_29_20const($0) {
  return !HEAP32[$0 + 16 >> 2];
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2];
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    $1 = global$9 ? $1 : $2 + 8 | 0;
    if (!global$9 | !$4) {
     $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($1, $0);
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $3;
    }
    $1 = global$9 ? $1 : !HEAPU8[$2 + 8 | 0];
    block1 : {
     if (!global$9) {
      if ($1) {
       break block1
      }
      $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2];
     }
     if (!global$9 | ($4 | 0) == 1) {
      $3 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn190106_5d_28_29($1);
      $5 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $3;
     }
     if (!global$9) {
      if (($1 | 0) != -1) {
       break block1
      }
      $0 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
      std____2__basic_ios_char_2c_20std____2__char_traits_char____setstate_5babi_nn190106_5d_28unsigned_20int_29($0, 1);
     }
    }
    $0 = global$9 ? $0 : $2 + 8 | 0;
    if (!global$9 | ($4 | 0) == 2) {
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($0);
     $5 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $2 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78752);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$3) {
    $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char______test_for_eof_5babi_nn190106_5d_28_29_20const($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($3 | 0) == 1) {
    $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char______test_for_eof_5babi_nn190106_5d_28_29_20const($1);
    $4 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    return $0 ^ $1 ^ 1
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : HEAP32[$0 >> 2];
  block : {
   if (!global$9 | !$1) {
    $1 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sgetc_5babi_nn190106_5d_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 << 24 >> 24
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($0, $1, $2) {
  if (($2 | 0) >= 0) {
   $0 = (HEAP32[HEAP32[$0 + 8 >> 2] + ($2 << 2) >> 2] & $1) != 0
  } else {
   $0 = 0
  }
  return $0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[$0 >> 2];
  block : {
   if (!global$9 | !$2) {
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sbumpc_5babi_nn190106_5d_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____setstate_5babi_nn190106_5d_28unsigned_20int_29($0, $1) {
  var $2 = 0;
  $2 = global$9;
  std____2__ios_base__clear_28unsigned_20int_29($0, HEAP32[$0 + 16 >> 2] | $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 24 >> 2];
  block : {
   if (!global$9 | !$2) {
    $2 = FUNCTION_TABLE[$1 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sgetc_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (global$9) {
    $1 = $2
   } else {
    $2 = HEAP32[$0 + 12 >> 2];
    $1 = ($2 | 0) == HEAP32[$0 + 16 >> 2];
   }
   if ($1 | (global$9 | 0) == 2) {
    $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 36 >> 2];
    if (!global$9 | !$3) {
     $1 = FUNCTION_TABLE[$2 | 0]($0) | 0;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $1;
    }
    if (!global$9) {
     return $0
    }
   }
   if (!global$9) {
    return std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$2 | 0])
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sbumpc_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (global$9) {
    $1 = $2
   } else {
    $2 = HEAP32[$0 + 12 >> 2];
    $1 = ($2 | 0) == HEAP32[$0 + 16 >> 2];
   }
   if ($1 | (global$9 | 0) == 2) {
    $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 40 >> 2];
    if (!global$9 | !$3) {
     $1 = FUNCTION_TABLE[$2 | 0]($0) | 0;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $1;
    }
    if (!global$9) {
     return $0
    }
   }
   if (!global$9) {
    HEAP32[$0 + 12 >> 2] = $2 + 1;
    return std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$2 | 0]);
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($0) {
  return ($0 | 0) == -1;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_816($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  } else {
   $1 = 0
  }
  $1 = global$9 ? $1 : $0 + 4 | 0;
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    std____2__ios_base___ios_base_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
  block : {
   if (!global$9 | !$1) {
    $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_816($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_818($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_816($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_819($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
  block : {
   if (!global$9 | !$1) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_818($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 + 4 >> 2] = $1;
   HEAP8[$0 | 0] = 0;
   $2 = std____2__basic_ios_char_2c_20std____2__char_traits_char____good_5babi_nn190106_5d_28_29_20const(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0);
  }
  block : {
   if ((global$9 | 0) == 2 | $2) {
    if (!global$9) {
     $2 = HEAP32[(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0) + 72 >> 2]
    }
    if ((global$9 | 0) == 2 | $2) {
     $1 = global$9 ? $1 : HEAP32[(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0) + 72 >> 2];
     if (!global$9 | !$3) {
      std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29($1);
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     HEAP8[$0 | 0] = 1
    }
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   block : {
    if (!global$9) {
     $1 = HEAP32[$0 + 4 >> 2];
     if (!HEAP32[($1 + HEAP32[HEAP32[$1 >> 2] - 12 >> 2] | 0) + 24 >> 2]) {
      break block
     }
     $1 = HEAP32[$0 + 4 >> 2];
     if (!std____2__basic_ios_char_2c_20std____2__char_traits_char____good_5babi_nn190106_5d_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] - 12 >> 2] | 0)) {
      break block
     }
     $1 = HEAP32[$0 + 4 >> 2];
     if (!(HEAP32[($1 + HEAP32[HEAP32[$1 >> 2] - 12 >> 2] | 0) + 4 >> 2] & 8192)) {
      break block
     }
     $1 = HEAP32[$0 + 4 >> 2];
     $2 = HEAP32[($1 + HEAP32[HEAP32[$1 >> 2] - 12 >> 2] | 0) + 24 >> 2];
    }
    if (!global$9 | !$3) {
     $1 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn190106_5d_28_29($2);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $2 = $1;
    }
    if (!global$9) {
     if (($2 | 0) != -1) {
      break block
     }
     $0 = HEAP32[$0 + 4 >> 2];
     std____2__basic_ios_char_2c_20std____2__char_traits_char____setstate_5babi_nn190106_5d_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, 1);
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____operator___28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $4 = HEAP32[$1 + 20 >> 2];
   $10 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $2 = $5 + 8 | 0;
  }
  block : {
   if (!global$9 | !$7) {
    $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($2, $0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $3;
   }
   $2 = global$9 ? $2 : !HEAPU8[$5 + 8 | 0];
   block1 : {
    if (!global$9) {
     if ($2) {
      break block1
     }
     $2 = $5 + 4 | 0;
     $9 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
     std____2__ios_base__getloc_28_29_20const($2, $9);
    }
    if (!global$9 | ($7 | 0) == 1) {
     $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2, 78432);
     $8 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $11 = $3;
    }
    $2 = global$9 ? $2 : $5 + 4 | 0;
    if (!global$9 | ($7 | 0) == 2) {
     std____2__locale___locale_28_29($2);
     $8 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAP32[$5 >> 2] = HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2];
     $9 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
     $2 = $9;
     $4 = $2 + 76 | 0;
     $6 = !HEAPU8[$4 + 4 | 0];
    }
    if ((global$9 | 0) == 2 | $6) {
     if (!global$9) {
      $6 = __stack_pointer - 16 | 0;
      __stack_pointer = $6;
      $3 = $6 + 12 | 0;
      $10 = $3;
      std____2__ios_base__getloc_28_29_20const($3, $2);
      $2 = $3;
     }
     if (!global$9 | ($7 | 0) == 3) {
      $3 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($2);
      $8 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $3;
     }
     if (!global$9 | ($7 | 0) == 4) {
      $3 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($2, 32);
      $8 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $3;
     }
     $10 = global$9 ? $10 : $6 + 12 | 0;
     if (!global$9 | ($7 | 0) == 5) {
      std____2__locale___locale_28_29($10);
      $8 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $6 = $6 + 16 | 0;
      __stack_pointer = $6;
      HEAP8[$4 | 0] = $2;
      HEAP8[$4 + 1 | 0] = $2 >>> 8;
      HEAP8[$4 + 2 | 0] = $2 >>> 16;
      HEAP8[$4 + 3 | 0] = $2 >>> 24;
      HEAP8[$4 + 4 | 0] = 1;
     }
    }
    if (!global$9) {
     $6 = (HEAPU8[$4 | 0] | HEAPU8[$4 + 1 | 0] << 8 | (HEAPU8[$4 + 2 | 0] << 16 | HEAPU8[$4 + 3 | 0] << 24)) << 24 >> 24;
     $4 = HEAP32[HEAP32[$11 >> 2] + 16 >> 2];
     $2 = HEAP32[$5 >> 2];
    }
    if (!global$9 | ($7 | 0) == 6) {
     $3 = FUNCTION_TABLE[$4 | 0]($11, $2, $9, $6, $1) | 0;
     $8 = 6;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $3;
    }
    if (!global$9) {
     HEAP32[$5 + 4 >> 2] = $1;
     $1 = HEAP32[$5 + 4 >> 2];
     if ($1) {
      break block1
     }
     $1 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
     std____2__basic_ios_char_2c_20std____2__char_traits_char____setstate_5babi_nn190106_5d_28unsigned_20int_29($1, 5);
    }
   }
   $1 = global$9 ? $1 : $5 + 8 | 0;
   if (!global$9 | ($7 | 0) == 7) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($1);
    $8 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $5 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $5;
  HEAP32[$3 + 16 >> 2] = $6;
  HEAP32[$3 + 20 >> 2] = $4;
  HEAP32[$3 + 24 >> 2] = $10;
  HEAP32[$3 + 28 >> 2] = $9;
  HEAP32[$3 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28char_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   $4 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   block : {
    if (global$9) {
     $2 = $3
    } else {
     $4 = HEAP32[$0 >> 2];
     if (!$4) {
      break block
     }
     $3 = HEAP32[$4 + 24 >> 2];
     $2 = ($3 | 0) == HEAP32[$4 + 28 >> 2];
    }
    block2 : {
     if ($2 | (global$9 | 0) == 2) {
      if (!global$9) {
       $1 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29($1);
       $3 = HEAP32[HEAP32[$4 >> 2] + 52 >> 2];
      }
      if (!global$9 | !$5) {
       $2 = FUNCTION_TABLE[$3 | 0]($4, $1) | 0;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $1 = $2;
      }
      if (!global$9) {
       break block2
      }
     }
     if (!global$9) {
      HEAP32[$4 + 24 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $1;
      $1 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29($1);
     }
    }
    if (!global$9) {
     if (!std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1)) {
      break block
     }
     HEAP32[$0 >> 2] = 0;
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn190106_5d_28char_20const__2c_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $3 = global$9 ? $3 : HEAP32[HEAP32[$0 >> 2] + 48 >> 2];
  block : {
   if (!global$9 | !$4) {
    $4 = FUNCTION_TABLE[$3 | 0]($0, $1, $2) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 28856;
   $1 = $0 + 4 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__locale___locale_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29_839($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $2 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____basic_streambuf_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 28856;
   $1 = $0 + 4 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__locale__locale_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____xsgetn_28wchar_t__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $5 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer;
   $4 = $3 - 16 | 0;
   __stack_pointer = $4;
  }
  block2 : {
   while (1) {
    block : {
     if (!global$9) {
      if (($2 | 0) <= ($7 | 0)) {
       break block
      }
      $3 = HEAP32[$0 + 12 >> 2];
      $5 = HEAP32[$0 + 16 >> 2];
      $8 = $3 >>> 0 < $5 >>> 0;
     }
     block1 : {
      if (!global$9) {
       if ($8) {
        HEAP32[$4 + 12 >> 2] = 2147483647;
        HEAP32[$4 + 8 >> 2] = $5 - $3 >> 2;
        HEAP32[$4 + 4 >> 2] = $2 - $7;
        $3 = HEAP32[long_20const__20std____2__min_5babi_nn190106_5d_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, long_20const__20std____2__min_5babi_nn190106_5d_long__28long_20const__2c_20long_20const__29($4 + 8 | 0, $4 + 4 | 0)) >> 2];
        std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($1, HEAP32[$0 + 12 >> 2], $3);
        $5 = $3 << 2;
        $8 = $5;
        HEAP32[$0 + 12 >> 2] = $5 + HEAP32[$0 + 12 >> 2];
        $1 = $1 + $5 | 0;
        break block1;
       }
       $3 = HEAP32[HEAP32[$0 >> 2] + 40 >> 2];
      }
      if (!global$9 | !$9) {
       $6 = FUNCTION_TABLE[$3 | 0]($0) | 0;
       if ((global$9 | 0) == 1) {
        break block2
       }
       $3 = $6;
      }
      if (!global$9) {
       $5 = ($3 | 0) == -1;
       if ($5) {
        break block
       }
       HEAP32[$1 >> 2] = $3;
       $3 = 1;
       $1 = $1 + 4 | 0;
      }
     }
     if (!global$9) {
      $7 = $3 + $7 | 0;
      continue;
     }
    }
    break;
   };
   if (!global$9) {
    __stack_pointer = $4 + 16 | 0;
    return $7 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $7;
  HEAP32[$6 + 24 >> 2] = $5;
  HEAP32[$6 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0;
  $3 = global$9;
  wchar_t__20std____2____constexpr_memmove_5babi_nn190106_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($0, $1, $2);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
 }
 
 function wchar_t__20std____2____constexpr_memmove_5babi_nn190106_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($0, $1, $2) {
  block : {
   if (!$2) {
    break block
   }
   $2 = $2 << 2;
   if (!$2) {
    break block
   }
   wasm2js_memory_copy($0, $1, $2);
  }
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____uflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 36 >> 2];
  block : {
   if (!global$9 | !$2) {
    $2 = FUNCTION_TABLE[$1 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    if (($1 | 0) == -1) {
     return -1
    }
    $2 = $0;
    $0 = HEAP32[$0 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = $0 + 4;
    return HEAP32[$0 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $5 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer;
   $7 = $3 - 16 | 0;
   __stack_pointer = $7;
  }
  block1 : {
   while (1) {
    block : {
     if (!global$9) {
      if (($2 | 0) <= ($6 | 0)) {
       break block
      }
      $3 = HEAP32[$0 + 24 >> 2];
      $5 = HEAP32[$0 + 28 >> 2];
      $8 = $3 >>> 0 >= $5 >>> 0;
     }
     $9 = global$9 ? $9 : $8;
     if ($9 | (global$9 | 0) == 2) {
      if (!global$9) {
       $5 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2];
       $3 = HEAP32[$1 >> 2];
      }
      if (!global$9 | !$10) {
       $4 = FUNCTION_TABLE[$5 | 0]($0, $3) | 0;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $3 = $4;
      }
      if (!global$9) {
       $3 = ($3 | 0) == -1;
       if ($3) {
        break block
       }
       $6 = $6 + 1 | 0;
       $1 = $1 + 4 | 0;
       continue;
      }
     }
     if (!global$9 & (!$9 | (global$9 | 0) == 2)) {
      HEAP32[$7 + 12 >> 2] = $5 - $3 >> 2;
      HEAP32[$7 + 8 >> 2] = $2 - $6;
      $3 = HEAP32[long_20const__20std____2__min_5babi_nn190106_5d_long__28long_20const__2c_20long_20const__29($7 + 12 | 0, $7 + 8 | 0) >> 2];
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], $1, $3);
      $5 = $3 << 2;
      $8 = $5 + HEAP32[$0 + 24 >> 2] | 0;
      HEAP32[$0 + 24 >> 2] = $8;
      $6 = $3 + $6 | 0;
      $1 = $1 + $5 | 0;
      continue;
     }
    }
    break;
   };
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0;
    return $6 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $6;
  HEAP32[$4 + 20 >> 2] = $7;
  HEAP32[$4 + 24 >> 2] = $5;
  HEAP32[$4 + 28 >> 2] = $8;
  HEAP32[$4 + 32 >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____flush_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   $4 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2];
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9) {
     $1 = $4 + 8 | 0;
     HEAP32[$1 + 4 >> 2] = $0;
     HEAP8[$1 | 0] = 0;
     $3 = std____2__basic_ios_char_2c_20std____2__char_traits_char____good_5babi_nn190106_5d_28_29_20const(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0);
    }
    if ((global$9 | 0) == 2 | $3) {
     $3 = global$9 ? $3 : HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 72 >> 2];
     if ($3 | (global$9 | 0) == 2) {
      $3 = global$9 ? $3 : HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 72 >> 2];
      if (!global$9 | !$5) {
       std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____flush_28_29($3);
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      HEAP8[$1 | 0] = 1
     }
    }
    $1 = global$9 ? $1 : !HEAPU8[$4 + 8 | 0];
    block1 : {
     if (!global$9) {
      if ($1) {
       break block1
      }
      $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2];
     }
     if (!global$9 | ($5 | 0) == 1) {
      $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn190106_5d_28_29($1);
      $6 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $2;
     }
     if (!global$9) {
      if (($1 | 0) != -1) {
       break block1
      }
      $0 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
      std____2__basic_ios_char_2c_20std____2__char_traits_char____setstate_5babi_nn190106_5d_28unsigned_20int_29($0, 1);
     }
    }
    $0 = global$9 ? $0 : $4 + 8 | 0;
    if (!global$9 | ($5 | 0) == 2) {
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($0);
     $6 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78744);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$3) {
    $2 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t______test_for_eof_5babi_nn190106_5d_28_29_20const($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($3 | 0) == 1) {
    $2 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t______test_for_eof_5babi_nn190106_5d_28_29_20const($1);
    $4 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    return $0 ^ $1 ^ 1
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : HEAP32[$0 >> 2];
  block : {
   if (!global$9 | !$1) {
    $1 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sgetc_5babi_nn190106_5d_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $3 = global$9 ? $3 : HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
  block : {
   if (!global$9 | !$4) {
    $4 = FUNCTION_TABLE[$3 | 0]($0, $1, $2) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[$0 >> 2];
  block : {
   if (!global$9 | !$2) {
    std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sbumpc_5babi_nn190106_5d_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sgetc_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (global$9) {
    $1 = $2
   } else {
    $2 = HEAP32[$0 + 12 >> 2];
    $1 = ($2 | 0) == HEAP32[$0 + 16 >> 2];
   }
   if ($1 | (global$9 | 0) == 2) {
    $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 36 >> 2];
    if (!global$9 | !$3) {
     $1 = FUNCTION_TABLE[$2 | 0]($0) | 0;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $1;
    }
    if (!global$9) {
     return $0
    }
   }
   if (!global$9) {
    return HEAP32[$2 >> 2]
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sbumpc_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (global$9) {
    $1 = $2
   } else {
    $2 = HEAP32[$0 + 12 >> 2];
    $1 = ($2 | 0) == HEAP32[$0 + 16 >> 2];
   }
   if ($1 | (global$9 | 0) == 2) {
    $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 40 >> 2];
    if (!global$9 | !$3) {
     $1 = FUNCTION_TABLE[$2 | 0]($0) | 0;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $1;
    }
    if (!global$9) {
     return $0
    }
   }
   if (!global$9) {
    HEAP32[$0 + 12 >> 2] = $2 + 4;
    return HEAP32[$2 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28wchar_t_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   $4 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   block : {
    if (global$9) {
     $2 = $3
    } else {
     $4 = HEAP32[$0 >> 2];
     if (!$4) {
      break block
     }
     $3 = HEAP32[$4 + 24 >> 2];
     $2 = ($3 | 0) == HEAP32[$4 + 28 >> 2];
    }
    block2 : {
     if ($2 | (global$9 | 0) == 2) {
      $3 = global$9 ? $3 : HEAP32[HEAP32[$4 >> 2] + 52 >> 2];
      if (!global$9 | !$5) {
       $2 = FUNCTION_TABLE[$3 | 0]($4, $1) | 0;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $1 = $2;
      }
      if (!global$9) {
       break block2
      }
     }
     if (!global$9) {
      HEAP32[$4 + 24 >> 2] = $3 + 4;
      HEAP32[$3 >> 2] = $1;
     }
    }
    if (!global$9) {
     if (!std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1)) {
      break block
     }
     HEAP32[$0 >> 2] = 0;
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   $2 = HEAP32[$2 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
  }
  block : {
   if ((global$9 | 0) == 2 | $4) {
    if (!global$9) {
     $4 = HEAP32[$0 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0);
    }
    if (!global$9 | !$3) {
     std____2__allocator_traits_std____2__allocator_char____deallocate_5babi_nn190106_5d_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($4);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($1);
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    $3 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $3;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($1, 0);
    HEAP8[$2 + 15 | 0] = 0;
    std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($1, $2 + 15 | 0);
    $1 = ($0 | 0) == ($1 | 0);
    if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0) | $1)) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn190106_5d_28_29_20const($0)
    }
    __stack_pointer = $2 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn190106_5d_28_29_20const($0, $1) {
  var $2 = 0;
  $2 = global$9;
  std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 4 | 0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  if ($2) {
   return HEAP32[$0 >> 2]
  }
  return $0;
 }
 
 function std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn190106_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = $2;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0) {
  return HEAPU8[$0 + 11 | 0] >>> 7 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn190106_5d_28_29_20const($0) {
  return HEAPU8[$0 + 11 | 0] & 127;
 }
 
 function void_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_char__2c_200__28char__2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $4 = HEAP32[$3 + 12 >> 2];
   $5 = HEAP32[$3 + 16 >> 2];
   $7 = HEAP32[$3 + 20 >> 2];
   $3 = HEAP32[$3 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = std____2__iterator_traits_char____difference_type_20std____2__distance_5babi_nn190106_5d_char___28char__2c_20char__29($1, $2);
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $4 = $7 >>> 0 <= 2147483639;
  }
  block1 : {
   block2 : {
    if ((global$9 | 0) == 2 | $4) {
     if (!global$9) {
      $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($7)
     }
     block : {
      if (!global$9) {
       if ($4) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $7);
        $4 = $0;
        break block;
       }
       $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn190106_5d_28unsigned_20long_29($7) + 1 | 0;
       $4 = $5 + 8 | 0;
      }
      if (!global$9 | !$6) {
       auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($4, $3);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $4 = HEAP32[$5 + 8 >> 2];
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $4);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$5 + 12 >> 2]);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $7);
      }
     }
     if (!global$9) {
      $0 = char__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______copy_non_overlapping_range_5babi_nn190106_5d_char__2c_20char___28char__2c_20char__2c_20char__29($1, $2, $4);
      HEAP8[$5 + 7 | 0] = 0;
      std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($0, $5 + 7 | 0);
      __stack_pointer = $5 + 16 | 0;
      break block2;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
     wasm2js_trap();
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 16 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = $7;
  HEAP32[$6 + 24 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  if ($2) {
   return HEAP32[$0 + 4 >> 2]
  }
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  if ($2) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
   $0 = $0 - 1 | 0;
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $5 = HEAP32[$2 + 8 >> 2];
   $3 = HEAP32[$2 + 12 >> 2];
   $6 = HEAP32[$2 + 16 >> 2];
   $2 = HEAP32[$2 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
   $3 = $5 >>> 0 < $1 >>> 0;
  }
  block : {
   block1 : {
    if ((global$9 | 0) == 2 | $3) {
     if (!global$9) {
      $3 = __stack_pointer;
      $2 = $3 - 16 | 0;
      __stack_pointer = $2;
      $5 = $1 - $5 | 0;
     }
     if ((global$9 | 0) == 2 | $5) {
      if (!global$9) {
       $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($0);
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
       $6 = $3 - $1 >>> 0 < $5 >>> 0;
      }
      if ((global$9 | 0) == 2 | $6) {
       $6 = global$9 ? $6 : ($5 - $3 | 0) + $1 | 0;
       if (!global$9 | !$4) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_without_replace_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, $6, $1, $1);
        if ((global$9 | 0) == 1) {
         break block
        }
       }
      }
      if (!global$9) {
       $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
       std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20unsigned_20long_2c_20char_29($4 + $1 | 0, $5, 0);
       $3 = $0;
       $0 = $1 + $5 | 0;
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn190106_5d_28unsigned_20long_29($3, $0);
       HEAP8[$2 + 15 | 0] = 0;
       $0 = $0 + $4 | 0;
       $1 = $2 + 15 | 0;
       std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($0, $1);
      }
     }
     if (!global$9) {
      __stack_pointer = $2 + 16 | 0;
      break block1;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______null_terminate_at_5babi_nn190106_5d_28char__2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0), $1)
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $5;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $6;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function std____2__char_traits_char___not_eof_5babi_nn190106_5d_28int_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $2 ? 0 : $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0) {
  return HEAP32[$0 + 8 >> 2] & 2147483647;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__codecvt_char_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78760);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 28 >> 2];
  block : {
   if (!global$9 | !$2) {
    $2 = FUNCTION_TABLE[$1 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function unsigned_20long_20const__20std____2__min_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$9;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn190106_5d_unsigned_20long_2c_20unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($1, $0);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 ? $1 : $0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_5babi_nn190106_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $8 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$8 >> 2];
   $1 = HEAP32[$8 + 4 >> 2];
   $2 = HEAP32[$8 + 8 >> 2];
   $3 = HEAP32[$8 + 12 >> 2];
   $4 = HEAP32[$8 + 16 >> 2];
   $5 = HEAP32[$8 + 20 >> 2];
   $6 = HEAP32[$8 + 24 >> 2];
   $7 = HEAP32[$8 + 28 >> 2];
   $8 = HEAP32[$8 + 32 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $8 = global$9 ? $8 : HEAP32[HEAP32[$0 >> 2] + 16 >> 2];
  block : {
   if (!global$9 | !$9) {
    $9 = FUNCTION_TABLE[$8 | 0]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $9;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $9 = HEAP32[global$10 >> 2];
  HEAP32[$9 >> 2] = $0;
  HEAP32[$9 + 4 >> 2] = $1;
  HEAP32[$9 + 8 >> 2] = $2;
  HEAP32[$9 + 12 >> 2] = $3;
  HEAP32[$9 + 16 >> 2] = $4;
  HEAP32[$9 + 20 >> 2] = $5;
  HEAP32[$9 + 24 >> 2] = $6;
  HEAP32[$9 + 28 >> 2] = $7;
  HEAP32[$9 + 32 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2____throw_bad_cast_5babi_nn190106_5d_28_29() {
  var $0 = 0;
  $0 = global$9;
  abort();
  if ((global$9 | 0) != ($0 | 0)) {
   wasm2js_trap()
  }
  wasm2js_trap();
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn190106_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $8 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$8 >> 2];
   $1 = HEAP32[$8 + 4 >> 2];
   $2 = HEAP32[$8 + 8 >> 2];
   $3 = HEAP32[$8 + 12 >> 2];
   $4 = HEAP32[$8 + 16 >> 2];
   $5 = HEAP32[$8 + 20 >> 2];
   $6 = HEAP32[$8 + 24 >> 2];
   $7 = HEAP32[$8 + 28 >> 2];
   $8 = HEAP32[$8 + 32 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $8 = global$9 ? $8 : HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
  block : {
   if (!global$9 | !$9) {
    $9 = FUNCTION_TABLE[$8 | 0]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $9;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $9 = HEAP32[global$10 >> 2];
  HEAP32[$9 >> 2] = $0;
  HEAP32[$9 + 4 >> 2] = $1;
  HEAP32[$9 + 8 >> 2] = $2;
  HEAP32[$9 + 12 >> 2] = $3;
  HEAP32[$9 + 16 >> 2] = $4;
  HEAP32[$9 + 20 >> 2] = $5;
  HEAP32[$9 + 24 >> 2] = $6;
  HEAP32[$9 + 28 >> 2] = $7;
  HEAP32[$9 + 32 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn190106_5d_long_2c_20long__28long_20const__2c_20long_20const__29_20const($0, $1) {
  return HEAP32[$0 >> 2] < HEAP32[$1 >> 2];
 }
 
 function std____2__allocator_traits_std____2__allocator_char____deallocate_5babi_nn190106_5d_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2____libcpp_deallocate_5babi_nn190106_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, 1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1) {
  HEAP8[$0 + 11 | 0] = HEAPU8[$0 + 11 | 0] & 128 | $1 & 127;
  HEAP8[$0 + 11 | 0] = HEAPU8[$0 + 11 | 0] & 127;
 }
 
 function std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($0, $1) {
  HEAP8[$0 | 0] = HEAPU8[$1 | 0];
 }
 
 function std____2____libcpp_deallocate_5babi_nn190106_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1) {
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9) {
    $1 = std____2____is_overaligned_for_new_5babi_nn190106_5d_28unsigned_20long_29($1)
   }
   if ($1 | (global$9 | 0) == 2) {
    if (!global$9 | !$2) {
     emscripten_builtin_free($0);
     $1 = 0;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     return
    }
   }
   if (!global$9 | ($2 | 0) == 1) {
    emscripten_builtin_free($0);
    $1 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____is_overaligned_for_new_5babi_nn190106_5d_28unsigned_20long_29($0) {
  return $0 >>> 0 > 8;
 }
 
 function std____2__iterator_traits_char____difference_type_20std____2__distance_5babi_nn190106_5d_char___28char__2c_20char__29($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $0 = std____2__iterator_traits_char____difference_type_20std____2____distance_5babi_nn190106_5d_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function std____2__iterator_traits_char____difference_type_20std____2____distance_5babi_nn190106_5d_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
  return $1 - $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($0) {
  return $0 >>> 0 < 11;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn190106_5d_28unsigned_20long_29($0) {
  var $1 = 0;
  if ($0 >>> 0 >= 11) {
   $1 = $0 + 8 & -8;
   $0 = $1 - 1 | 0;
   $0 = ($0 | 0) == 11 ? $1 : $0;
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $4 = 0
   }
   if ($2 | !$4) {
    $2 = std____2____libcpp_allocate_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_29($1, 1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $3 = $2;
   }
   if (!global$9) {
    HEAP32[$0 + 4 >> 2] = $1;
    HEAP32[$0 >> 2] = $3;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $1) {
  HEAP32[$0 >> 2] = $1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, $1) {
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] & -2147483648 | $1 & 2147483647;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | -2147483648;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1) {
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function char__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______copy_non_overlapping_range_5babi_nn190106_5d_char__2c_20char___28char__2c_20char__2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$9;
  $4 = $0;
  $0 = $1 - $0 | 0;
  std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($2, $4, $0);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  return $0 + $2 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const() {
  var $0 = 0;
  $0 = global$9;
  std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
  if ((global$9 | 0) != ($0 | 0)) {
   wasm2js_trap()
  }
  wasm2js_trap();
 }
 
 function std____2____libcpp_allocate_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = std____2____is_overaligned_for_new_5babi_nn190106_5d_28unsigned_20long_29($1)
  }
  block1 : {
   if ((global$9 | 0) == 2 | $2) {
    if (!global$9) {
     $2 = $1 >>> 0 <= 4;
     $10 = $2 ? 4 : $1;
     $1 = $0 >>> 0 <= 1;
     $0 = $1 ? 1 : $0;
    }
    while (1) {
     block9 : {
      if (!global$9) {
       $2 = $10;
       $1 = ($2 + $0 | 0) - 1 & 0 - $2;
       $1 = $0 >>> 0 > $1 >>> 0 ? $0 : $1;
       $8 = __stack_pointer - 16 | 0;
       __stack_pointer = $8;
       $4 = $2 & 3;
       $3 = 0;
      }
      block : {
       if (!global$9) {
        if ($4) {
         break block
        }
        $4 = ($1 >>> 0) % ($2 >>> 0) | 0;
        if ($4) {
         break block
        }
        $11 = $8 + 12 | 0;
        $3 = ($2 | 0) == 8;
       }
       block3 : {
        block2 : {
         if ((global$9 | 0) == 2 | $3) {
          if (!global$9 | !$9) {
           $6 = emscripten_builtin_malloc($1);
           $7 = 0;
           if ((global$9 | 0) == 1) {
            break block1
           }
           $1 = $6;
          }
          if (!global$9) {
           break block2
          }
         }
         if (!global$9) {
          $3 = 28;
          $4 = $2 >>> 0 < 4;
          if ($4) {
           break block3
          }
          $4 = $2 & 3;
          if ($4) {
           break block3
          }
          $4 = $2 >>> 2 | 0;
          $5 = $4 - 1 | 0;
          $4 = $5 & $4;
          if ($4) {
           break block3
          }
          $3 = 48;
          $4 = -64 - $2 >>> 0 < $1 >>> 0;
          if ($4) {
           break block3
          }
          $4 = $1;
          $3 = 16;
          $1 = $2 >>> 0 <= 16 ? 16 : $2;
          $1 = $1 >>> 0 <= 16 ? 16 : $1;
          block4 : {
           if (!($1 & $1 - 1)) {
            $2 = $1;
            break block4;
           }
           while (1) {
            $2 = $3;
            $3 = $2 << 1;
            $5 = $1 >>> 0 > $2 >>> 0;
            if ($5) {
             continue
            }
            break;
           };
          }
          $1 = -64 - $2 >>> 0 <= $4 >>> 0;
         }
         block5 : {
          if (!global$9) {
           if ($1) {
            HEAP32[__tls_base >> 2] = 48;
            $1 = 0;
            break block5;
           }
           $3 = $4 >>> 0 < 11;
           $4 = $3 ? 16 : $4 + 11 & -8;
           $1 = ($4 + $2 | 0) + 12 | 0;
          }
          if (!global$9 | ($9 | 0) == 1) {
           $6 = emscripten_builtin_malloc($1);
           $7 = 1;
           if ((global$9 | 0) == 1) {
            break block1
           }
           $3 = $6;
          }
          if (!global$9) {
           $1 = 0;
           $5 = !$3;
           if ($5) {
            break block5
           }
           $5 = HEAPU8[75964] & 2;
          }
          block6 : {
           if ((global$9 | 0) == 2 | $5) {
            if (!global$9 | ($9 | 0) == 2) {
             $6 = __pthread_mutex_lock(75968);
             $7 = 2;
             if ((global$9 | 0) == 1) {
              break block1
             }
             $5 = $6;
            }
            if (!($5 ? global$9 : 1)) {
             break block6
            }
           }
           if (!global$9) {
            $1 = $3 - 8 | 0;
            $5 = !($2 - 1 & $3);
            block7 : {
             if ($5) {
              $2 = $1;
              break block7;
             }
             $6 = $3 - 4 | 0;
             $7 = HEAP32[$6 >> 2];
             $5 = $2;
             $2 = (($2 + $3 | 0) - 1 & 0 - $2) - 8 | 0;
             $2 = ($2 - $1 >>> 0 <= 15 ? $5 : 0) + $2 | 0;
             $3 = $2 - $1 | 0;
             $5 = ($7 & -8) - $3 | 0;
             if (!($7 & 3)) {
              $1 = HEAP32[$1 >> 2];
              HEAP32[$2 + 4 >> 2] = $5;
              HEAP32[$2 >> 2] = $1 + $3;
              break block7;
             }
             HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & 1 | $5 | 2;
             $5 = $2 + $5 | 0;
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
             HEAP32[$6 >> 2] = $3 | HEAP32[$6 >> 2] & 1 | 2;
             $5 = $1 + $3 | 0;
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
             dispose_chunk($1, $3);
            }
            $3 = HEAP32[$2 + 4 >> 2];
            block8 : {
             if (!($3 & 3)) {
              break block8
             }
             $1 = $3 & -8;
             $5 = $1 >>> 0 <= $4 + 16 >>> 0;
             if ($5) {
              break block8
             }
             HEAP32[$2 + 4 >> 2] = $3 & 1 | $4 | 2;
             $3 = $2 + $4 | 0;
             $4 = $1 - $4 | 0;
             HEAP32[$3 + 4 >> 2] = $4 | 3;
             $1 = $1 + $2 | 0;
             $5 = HEAP32[$1 + 4 >> 2] | 1;
             HEAP32[$1 + 4 >> 2] = $5;
             dispose_chunk($3, $4);
            }
            $1 = $2 + 8 | 0;
            $2 = !(HEAPU8[75964] & 2);
            if ($2) {
             break block6
            }
            $2 = __pthread_mutex_unlock(75968);
           }
          }
         }
        }
        if (!global$9) {
         $3 = 48;
         $2 = $1;
         $1 = !$1;
         if ($1) {
          break block3
         }
         HEAP32[$11 >> 2] = $2;
         $3 = 0;
        }
       }
       if (!global$9) {
        $1 = HEAP32[$8 + 12 >> 2];
        $2 = $3;
        $3 = $2 ? 0 : $1;
       }
      }
      if (!global$9) {
       __stack_pointer = $8 + 16 | 0;
       $2 = $3;
       if ($2) {
        break block9
       }
       $1 = Atomics.load(HEAP32, 20093);
       $3 = !$1;
       if ($3) {
        break block9
       }
      }
      if (!global$9 | ($9 | 0) == 3) {
       FUNCTION_TABLE[$1 | 0]();
       $7 = 3;
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       continue
      }
     }
     break;
    };
    if (!global$9) {
     if (!$2) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const()
     }
     return $2;
    }
   }
   if (!global$9 | ($9 | 0) == 4) {
    $6 = operator_20new_28unsigned_20long_29($0);
    $7 = 4;
    if ((global$9 | 0) == 1) {
     break block1
    }
    $0 = $6;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $8;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[$6 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn190106_5d_unsigned_20long_2c_20unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1) {
  return HEAPU32[$0 >> 2] < HEAPU32[$1 >> 2];
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char______test_for_eof_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $1 = global$9 ? $1 : HEAP32[$0 >> 2];
   if ($1 | (global$9 | 0) == 2) {
    if (!global$9 | !$2) {
     $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sgetc_5babi_nn190106_5d_28_29($1);
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $2;
    }
    if (!global$9) {
     if (!std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1)) {
      return !HEAP32[$0 >> 2]
     }
     HEAP32[$0 >> 2] = 0;
    }
   }
   if (!global$9) {
    return 1
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 28 >> 2];
  block : {
   if (!global$9 | !$3) {
    $3 = FUNCTION_TABLE[$2 | 0]($0, $1) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t______test_for_eof_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $1 = global$9 ? $1 : HEAP32[$0 >> 2];
   if ($1 | (global$9 | 0) == 2) {
    if (!global$9 | !$2) {
     $2 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sgetc_5babi_nn190106_5d_28_29($1);
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $2;
    }
    if (!global$9) {
     if (!std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1)) {
      return !HEAP32[$0 >> 2]
     }
     HEAP32[$0 >> 2] = 0;
    }
   }
   if (!global$9) {
    return 1
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 44 >> 2];
  block : {
   if (!global$9 | !$3) {
    $3 = FUNCTION_TABLE[$2 | 0]($0, $1) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_0__28char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $4 = HEAP32[$3 + 12 >> 2];
   $5 = HEAP32[$3 + 16 >> 2];
   $7 = HEAP32[$3 + 20 >> 2];
   $3 = HEAP32[$3 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = __stack_pointer - 16 | 0;
   __stack_pointer = $7;
   $4 = strlen($1);
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $2 = $4 >>> 0 <= 2147483639;
  }
  block1 : {
   block2 : {
    if ((global$9 | 0) == 2 | $2) {
     if (!global$9) {
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($4)
     }
     block : {
      if (!global$9) {
       if ($2) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $4);
        $2 = $0;
        break block;
       }
       $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn190106_5d_28unsigned_20long_29($4) + 1 | 0;
       $2 = $5 + 8 | 0;
      }
      if (!global$9 | !$6) {
       auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($2, $3);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $2 = HEAP32[$5 + 8 >> 2];
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $2);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$5 + 12 >> 2]);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $4);
      }
     }
     if (!global$9) {
      std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($2, $1, $4);
      HEAP8[$5 + 7 | 0] = 0;
      std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($2 + $4 | 0, $5 + 7 | 0);
      __stack_pointer = $5 + 16 | 0;
      break block2;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 16 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = $7;
  HEAP32[$6 + 24 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__ios_base__getloc_28_29_20const($0, $1) {
  var $2 = 0;
  $2 = global$9;
  std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 28 | 0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
 }
 
 function unsigned_20long_20const__20std____2__max_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$9;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn190106_5d_unsigned_20long_2c_20unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 ? $1 : $0;
 }
 
 function std____2__ios_base__clear_28unsigned_20int_29($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $1 = !HEAP32[$0 + 24 >> 2] | $1;
  HEAP32[$0 + 16 >> 2] = $1;
  if ($1 & HEAP32[$0 + 20 >> 2]) {
   std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
   if ((global$9 | 0) != ($2 | 0)) {
    wasm2js_trap()
   }
   wasm2js_trap();
  }
 }
 
 function std____2__ios_base___ios_base_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   $5 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 29568;
   $1 = HEAP32[$0 + 28 >> 2];
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    $1 = global$9 ? $1 : HEAP32[$0 + 40 >> 2];
    while (1) {
     if ((global$9 | 0) == 2 | $1) {
      if (!global$9) {
       $1 = $1 - 1 | 0;
       $2 = $1 << 2;
       $5 = HEAP32[$2 + HEAP32[$0 + 36 >> 2] >> 2];
       $4 = HEAP32[$2 + HEAP32[$0 + 32 >> 2] >> 2];
      }
      if (!global$9 | !$3) {
       FUNCTION_TABLE[$4 | 0](0, $0, $5);
       $2 = 0;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       continue
      }
     }
     break;
    };
    $1 = global$9 ? $1 : $0 + 28 | 0;
    if (!global$9 | ($3 | 0) == 1) {
     std____2__locale___locale_28_29($1);
     $2 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAP32[$0 + 32 >> 2];
    if (!global$9 | ($3 | 0) == 2) {
     emscripten_builtin_free($1);
     $2 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAP32[$0 + 36 >> 2];
    if (!global$9 | ($3 | 0) == 3) {
     emscripten_builtin_free($1);
     $2 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAP32[$0 + 48 >> 2];
    if (!global$9 | ($3 | 0) == 4) {
     emscripten_builtin_free($1);
     $2 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $1 = global$9 ? $1 : HEAP32[$0 + 60 >> 2];
    if (!global$9 | ($3 | 0) == 5) {
     emscripten_builtin_free($1);
     $2 = 5;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 12 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function std____2__ios_base___ios_base_28_29_1003($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__ios_base___ios_base_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_void_20_28__29_28void__29_2c_200__28void_20_28____29_28void__29_29($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  return $0;
 }
 
 function getc($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $6 = HEAP32[$1 + 12 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = HEAP32[$0 + 76 >> 2];
   $2 = ($1 | 0) >= 0;
  }
  block2 : {
   block1 : {
    block : {
     if (!global$9) {
      if ($2) {
       $2 = !$1;
       if ($2) {
        break block
       }
       $2 = HEAP32[thread_ptr + 24 >> 2];
       $1 = ($2 | 0) != ($1 & 1073741823);
       if ($1) {
        break block
       }
      }
      $1 = HEAP32[$0 + 4 >> 2];
      $2 = ($1 | 0) != HEAP32[$0 + 8 >> 2];
      if ($2) {
       HEAP32[$0 + 4 >> 2] = $1 + 1;
       $0 = HEAPU8[$1 | 0];
       break block1;
      }
     }
     if (!global$9 | !$5) {
      $3 = __uflow($0);
      if ((global$9 | 0) == 1) {
       break block2
      }
      $0 = $3;
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     $2 = $0 + 76 | 0;
     $1 = a_cas_1013($2);
    }
    if (!global$9 | ($5 | 0) == 1 ? (global$9 | 0) == 2 | $1 : 0) {
     $3 = __lockfile($0);
     $4 = 1;
     if ((global$9 | 0) == 1) {
      break block2
     }
     $1 = $3;
    }
    $4 = global$9;
    if (global$9) {
     $3 = $6
    } else {
     $1 = HEAP32[$0 + 4 >> 2];
     $3 = ($1 | 0) != HEAP32[$0 + 8 >> 2];
    }
    block3 : {
     if (!($3 ? $4 : 1)) {
      HEAP32[$0 + 4 >> 2] = $1 + 1;
      $0 = HEAPU8[$1 | 0];
      break block3;
     }
     if (!global$9 | ($5 | 0) == 2) {
      $3 = __uflow($0);
      $4 = 2;
      if ((global$9 | 0) == 1) {
       break block2
      }
      $0 = $3;
     }
    }
    if (!global$9) {
     if (a_swap($2) & 1073741824) {
      __wake($2)
     }
    }
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function a_cas_1013($0) {
  return Atomics.compareExchange(HEAP32, $0 >> 2, 0, 1073741823) | 0;
 }
 
 function fwide($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[$0 + 76 >> 2] < 0;
  $1 = global$9 ? 0 : $2;
  $3 = (global$9 | 0) == 2;
  $2 = (global$9 ? 0 : $1 | $3) ? 0 : $2;
  block : {
   if (($3 | !$1) & (!global$9 | !$4)) {
    $1 = __lockfile($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $1;
   }
   if (!global$9) {
    $1 = !$2;
    if (!HEAP32[$0 + 136 >> 2]) {
     HEAP32[$0 + 136 >> 2] = HEAP32[HEAP32[thread_ptr + 96 >> 2] >> 2] ? 29696 : 29672
    }
    if (!HEAP32[$0 + 72 >> 2]) {
     HEAP32[$0 + 72 >> 2] = 1
    }
    if (!$1) {
     __unlockfile($0)
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function mbtowc($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if (!$1) {
   return 0
  }
  block1 : {
   block : {
    if (!$2) {
     break block
    }
    $3 = HEAPU8[$1 | 0];
    $4 = $3 << 24 >> 24;
    if (($4 | 0) >= 0) {
     if ($0) {
      HEAP32[$0 >> 2] = $3
     }
     return ($4 | 0) != 0;
    }
    if (!HEAP32[HEAP32[thread_ptr + 96 >> 2] >> 2]) {
     $1 = 1;
     if (!$0) {
      break block1
     }
     HEAP32[$0 >> 2] = $4 & 57343;
     return 1;
    }
    $3 = $3 - 194 | 0;
    if ($3 >>> 0 > 50) {
     break block
    }
    $3 = HEAP32[($3 << 2) + 28480 >> 2];
    if ($2 >>> 0 <= 3) {
     if ($3 << Math_imul($2, 6) - 6 < 0) {
      break block
     }
    }
    $2 = HEAPU8[$1 + 1 | 0];
    $4 = $2 >>> 3 | 0;
    if (($4 - 16 | $4 + ($3 >> 26)) >>> 0 > 7) {
     break block
    }
    $2 = $2 - 128 | $3 << 6;
    if (($2 | 0) >= 0) {
     $1 = 2;
     if (!$0) {
      break block1
     }
     HEAP32[$0 >> 2] = $2;
     return 2;
    }
    $3 = HEAPU8[$1 + 2 | 0] - 128 | 0;
    if ($3 >>> 0 > 63) {
     break block
    }
    $4 = $3;
    $3 = $2 << 6;
    $2 = $4 | $3;
    if (($3 | 0) >= 0) {
     $1 = 3;
     if (!$0) {
      break block1
     }
     HEAP32[$0 >> 2] = $2;
     return 3;
    }
    $3 = HEAPU8[$1 + 3 | 0] - 128 | 0;
    if ($3 >>> 0 > 63) {
     break block
    }
    $1 = 4;
    if (!$0) {
     break block1
    }
    HEAP32[$0 >> 2] = $3 | $2 << 6;
    return 4;
   }
   HEAP32[__tls_base >> 2] = 25;
   $1 = -1;
  }
  return $1;
 }
 
 function __fgetwc_unlocked($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $3 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = thread_ptr;
   $7 = HEAP32[$6 + 96 >> 2];
   $1 = HEAP32[$0 + 72 >> 2] <= 0;
  }
  block : {
   if (!global$9 | !$8 ? (global$9 | 0) == 2 | $1 : 0) {
    fwide($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$6 + 96 >> 2] = HEAP32[$0 + 136 >> 2];
    $2 = __stack_pointer - 32 | 0;
    __stack_pointer = $2;
    $1 = $0;
    $0 = HEAP32[$0 + 4 >> 2];
    $3 = HEAP32[$1 + 8 >> 2];
    $4 = ($0 | 0) == ($3 | 0);
   }
   block4 : {
    block2 : {
     if (!global$9) {
      block1 : {
       if ($4) {
        break block1
       }
       $3 = $3 - $0 | 0;
       $0 = mbtowc($2 + 28 | 0, $0, $3);
       $4 = ($0 | 0) == -1;
       if ($4) {
        break block1
       }
       $0 = HEAP32[$1 + 4 >> 2] + ($0 >>> 0 <= 1 ? 1 : $0) | 0;
       HEAP32[$1 + 4 >> 2] = $0;
       break block2;
      }
      HEAP32[$2 + 16 >> 2] = 0;
      HEAP32[$2 + 20 >> 2] = 0;
      $0 = 0;
     }
     while (1) {
      if (!global$9) {
       $4 = $0;
       $0 = HEAP32[$1 + 4 >> 2];
       $3 = ($0 | 0) != HEAP32[$1 + 8 >> 2];
      }
      block3 : {
       if (!($3 ? global$9 : 1)) {
        $3 = $0 + 1 | 0;
        HEAP32[$1 + 4 >> 2] = $3;
        $0 = HEAPU8[$0 | 0];
        HEAP8[$2 + 15 | 0] = $0;
        break block3;
       }
       if (!global$9 | ($8 | 0) == 1) {
        $5 = __uflow($1);
        $9 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
        $0 = $5;
       }
       if (!global$9) {
        HEAP8[$2 + 15 | 0] = $0;
        $0 = ($0 | 0) >= 0;
        if ($0) {
         break block3
        }
        $0 = -1;
        if (!($4 & 1)) {
         break block4
        }
        HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 32;
        HEAP32[__tls_base >> 2] = 25;
        break block4;
       }
      }
      if (!global$9) {
       $0 = 1;
       $3 = mbrtowc($2 + 28 | 0, $2 + 15 | 0, 1, $2 + 16 | 0);
       if (($3 | 0) == -2) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      $0 = -1;
      if (($3 | 0) != -1) {
       break block2
      }
      if (!($4 & 1)) {
       break block4
      }
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 32;
      $4 = HEAPU8[$2 + 15 | 0];
     }
     if (!global$9 | ($8 | 0) == 2) {
      ungetc($4, $1);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      break block4
     }
    }
    $0 = global$9 ? $0 : HEAP32[$2 + 28 >> 2];
   }
   if (!global$9) {
    __stack_pointer = $2 + 32 | 0;
    HEAP32[$6 + 96 >> 2] = $7;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $4;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function __overflow($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
   HEAP8[$4 + 15 | 0] = $1;
   $2 = HEAP32[$0 + 16 >> 2];
  }
  block2 : {
   block : {
    if (!global$9) {
     if (!$2) {
      if (__towrite($0)) {
       $2 = -1;
       break block;
      }
      $2 = HEAP32[$0 + 16 >> 2];
     }
     block1 : {
      $3 = HEAP32[$0 + 20 >> 2];
      if (($3 | 0) == ($2 | 0)) {
       break block1
      }
      $2 = $1 & 255;
      if (($2 | 0) == HEAP32[$0 + 80 >> 2]) {
       break block1
      }
      HEAP32[$0 + 20 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $1;
      break block;
     }
     $2 = $4 + 15 | 0;
     $1 = HEAP32[$0 + 36 >> 2];
    }
    if (!global$9 | !$5) {
     $3 = FUNCTION_TABLE[$1 | 0]($0, $2, 1) | 0;
     if ((global$9 | 0) == 1) {
      break block2
     }
     $0 = $3;
    }
    if (!global$9) {
     if (($0 | 0) != 1) {
      $2 = -1;
      break block;
     }
     $2 = HEAPU8[$4 + 15 | 0];
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 16 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function __fputwc_unlocked($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $6 = thread_ptr;
   $7 = HEAP32[$6 + 96 >> 2];
   $2 = HEAP32[$1 + 72 >> 2] <= 0;
  }
  block : {
   if (!global$9 | !$8 ? (global$9 | 0) == 2 | $2 : 0) {
    fwide($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$6 + 96 >> 2] = HEAP32[$1 + 136 >> 2];
    $2 = $0 >>> 0 <= 127;
   }
   block2 : {
    block4 : {
     block3 : {
      if ((global$9 | 0) == 2 | $2) {
       if (!global$9) {
        block1 : {
         $2 = HEAP32[$1 + 80 >> 2] == ($0 | 0);
         if ($2) {
          break block1
         }
         $2 = HEAP32[$1 + 20 >> 2];
         $3 = ($2 | 0) == HEAP32[$1 + 16 >> 2];
         if ($3) {
          break block1
         }
         HEAP32[$1 + 20 >> 2] = $2 + 1;
         HEAP8[$2 | 0] = $0;
         break block2;
        }
       }
       if (!global$9 | ($8 | 0) == 1) {
        $4 = __overflow($1, $0);
        $9 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
        $0 = $4;
       }
       if (!global$9) {
        break block3
       }
      }
      if (!global$9) {
       $3 = HEAP32[$1 + 20 >> 2];
       if (HEAPU32[$1 + 16 >> 2] > $3 + 4 >>> 0) {
        $3 = wctomb($3, $0);
        if (($3 | 0) < 0) {
         break block4
        }
        HEAP32[$1 + 20 >> 2] = $3 + HEAP32[$1 + 20 >> 2];
        break block3;
       }
       $3 = $5 + 12 | 0;
       $2 = wctomb($3, $0);
       if (($2 | 0) < 0) {
        break block4
       }
      }
      if (!global$9 | ($8 | 0) == 2) {
       $4 = __fwritex($3, $2, $1);
       $9 = 2;
       if ((global$9 | 0) == 1) {
        break block
       }
       $3 = $4;
      }
      if (!global$9 & $3 >>> 0 < $2 >>> 0) {
       break block4
      }
     }
     if (!global$9 & ($0 | 0) != -1) {
      break block2
     }
    }
    if (!global$9) {
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 32;
     $0 = -1;
    }
   }
   if (!global$9) {
    HEAP32[$6 + 96 >> 2] = $7;
    __stack_pointer = $5 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
  }
  block : {
   if (!global$9 | !$6) {
    $3 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____basic_streambuf_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    HEAP32[$0 + 32 >> 2] = $1;
    HEAP32[$0 >> 2] = 29828;
    $1 = $4 + 12 | 0;
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn190106_5d_28_29_20const($1, $0);
   }
   if (!global$9 | ($6 | 0) == 1) {
    $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__codecvt_char_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
    $7 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   $5 = global$9 ? $5 : $4 + 12 | 0;
   if (!global$9 | ($6 | 0) == 2) {
    std____2__locale___locale_28_29($5);
    $7 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$0 + 40 >> 2] = $2;
    HEAP32[$0 + 36 >> 2] = $1;
   }
   if (!global$9 | ($6 | 0) == 3) {
    $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn190106_5d_28_29_20const($1);
    $7 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   if (!global$9) {
    HEAP8[$0 + 44 | 0] = $1;
    __stack_pointer = $4 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____basic_ostream_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = std____2__basic_ios_char_2c_20std____2__char_traits_char____basic_ios_5babi_nn190106_5d_28_29($0 + 4 | 0);
   HEAP32[$0 >> 2] = 28812;
   HEAP32[$3 >> 2] = 28832;
   $0 = HEAP32[7200] + $0 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____tie_5babi_nn190106_5d_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($0, $1) {
  HEAP32[$0 + 72 >> 2] = $1;
 }
 
 function std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
  }
  block : {
   if (!global$9 | !$6) {
    $3 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____basic_streambuf_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    HEAP32[$0 + 32 >> 2] = $1;
    HEAP32[$0 >> 2] = 30032;
    $1 = $4 + 12 | 0;
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn190106_5d_28_29_20const($1, $0);
   }
   if (!global$9 | ($6 | 0) == 1) {
    $3 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
    $7 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   $5 = global$9 ? $5 : $4 + 12 | 0;
   if (!global$9 | ($6 | 0) == 2) {
    std____2__locale___locale_28_29($5);
    $7 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$0 + 40 >> 2] = $2;
    HEAP32[$0 + 36 >> 2] = $1;
   }
   if (!global$9 | ($6 | 0) == 3) {
    $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn190106_5d_28_29_20const($1);
    $7 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   if (!global$9) {
    HEAP8[$0 + 44 | 0] = $1;
    __stack_pointer = $4 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ostream_5babi_nn190106_5d_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____29($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ios_5babi_nn190106_5d_28_29($0 + 4 | 0);
   HEAP32[$0 >> 2] = 28972;
   HEAP32[$3 >> 2] = 28992;
   $0 = HEAP32[7240] + $0 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____basic_ios_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = global$9;
  $0 = std____2__ios_base__ios_base_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$0 >> 2] = 29016;
  return $0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn190106_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29($0, $1) {
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 24 >> 2] = $1;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 4098;
   HEAP32[$0 + 8 >> 2] = 6;
   HEAP32[$0 + 16 >> 2] = !$1;
   wasm2js_memory_fill($0 + 32 | 0, 0, 40);
   $1 = $0 + 28 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__locale__locale_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$0 + 72 >> 2] = 0;
    HEAP8[($0 + 76 | 0) + 4 | 0] = 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__ios_base__setf_5babi_nn190106_5d_28unsigned_20int_29($0) {
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 8192;
 }
 
 function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ios_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = global$9;
  $0 = std____2__ios_base__ios_base_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$0 >> 2] = 29292;
  return $0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78768);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29(77264);
    $0 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($1 | 0) == 1) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29(77616);
    $0 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($1 | 0) == 2) {
    std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____flush_28_29(77352);
    $0 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($1 | 0) == 3) {
    std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____flush_28_29(77704);
    $0 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____stdinbuf_char______stdinbuf_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____stdinbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$3) {
    $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__codecvt_char_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP32[$0 + 36 >> 2] = $1
   }
   if (!global$9 | ($3 | 0) == 1) {
    $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn190106_5d_28_29($1);
    $4 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP32[$0 + 44 >> 2] = $1;
    $1 = HEAP32[$0 + 36 >> 2];
   }
   if (!global$9 | ($3 | 0) == 2) {
    $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn190106_5d_28_29_20const($1);
    $4 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP8[$0 + 53 | 0] = $1;
    if (HEAP32[$0 + 44 >> 2] >= 9) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2____stdinbuf_char___underflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2____stdinbuf_char_____getchar_28bool_29($0, 0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2____stdinbuf_char_____getchar_28bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 56;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 32 | 0;
   __stack_pointer = $4;
   $6 = HEAPU8[$0 + 52 | 0] == 1;
  }
  block1 : {
   block : {
    if (!global$9) {
     if ($6) {
      $2 = HEAP32[$0 + 48 >> 2];
      if (!$1) {
       break block
      }
      HEAP8[$0 + 52 | 0] = 0;
      HEAP32[$0 + 48 >> 2] = -1;
      break block;
     }
     $6 = HEAPU8[$0 + 53 | 0] == 1;
    }
    block2 : {
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = $4 + 24 | 0;
       $2 = HEAP32[$0 + 32 >> 2];
      }
      if (!global$9 | !$9) {
       $3 = getc($2);
       if ((global$9 | 0) == 1) {
        break block1
       }
       $2 = $3;
      }
      if (!global$9) {
       $5 = ($2 | 0) != -1;
       if ($5) {
        HEAP8[$6 | 0] = $2
       }
       $2 = ($2 | 0) == -1;
       if ($2) {
        break block2
       }
       $2 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$4 + 24 | 0]);
       $1 = !$1;
      }
      block3 : {
       if ((global$9 | 0) == 2 | $1) {
        if (!global$9) {
         $1 = HEAP8[$4 + 24 | 0];
         $0 = HEAP32[$0 + 32 >> 2];
        }
        if (!global$9 | ($9 | 0) == 1) {
         $3 = std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20char_29($2, $0);
         $10 = 1;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $0 = $3;
        }
        if (!global$9) {
         $0 = !$0;
         if ($0) {
          break block2
         }
         break block3;
        }
       }
       if (!global$9) {
        HEAP32[$0 + 48 >> 2] = $2
       }
      }
      if (!global$9) {
       $2 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$4 + 24 | 0]);
       break block;
      }
     }
     if (!global$9) {
      HEAP32[$4 + 24 >> 2] = 1;
      $6 = HEAP32[int_20const__20std____2__max_5babi_nn190106_5d_int__28int_20const__2c_20int_20const__29($4 + 24 | 0, $0 + 44 | 0) >> 2];
      $5 = ($6 | 0) > 0;
      $8 = $5 ? $6 : 0;
     }
     while (1) {
      $5 = global$9 ? $5 : ($2 | 0) != ($8 | 0);
      if ($5 | (global$9 | 0) == 2) {
       $5 = global$9 ? $5 : HEAP32[$0 + 32 >> 2];
       if (!global$9 | ($9 | 0) == 2) {
        $3 = getc($5);
        $10 = 2;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $5 = $3;
       }
       if (!global$9) {
        if (($5 | 0) == -1) {
         break block2
        }
        $7 = ($4 + 24 | 0) + $2 | 0;
        HEAP8[$7 | 0] = $5;
        $2 = $2 + 1 | 0;
        continue;
       }
      }
      break;
     };
     $8 = global$9 ? $8 : $4 + 24 | 0;
     block6 : {
      while (1) {
       block5 : {
        if (!global$9) {
         $2 = HEAP32[$0 + 40 >> 2];
         $11 = HEAP32[$2 >> 2];
         $12 = HEAP32[$2 + 4 >> 2];
         $7 = HEAP32[$0 + 36 >> 2];
         $5 = $4 + 24 | 0;
         $13 = $5;
         $14 = $4 + 16 | 0;
         $15 = $4 + 23 | 0;
         $16 = $4 + 12 | 0;
         $5 = $5 + $6 | 0;
        }
        if (!global$9 | ($9 | 0) == 3) {
         $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_5babi_nn190106_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($7, $2, $13, $5, $14, $15, $8, $16);
         $10 = 3;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $2 = $3;
        }
        if (!global$9) {
         block4 : {
          $2 = $2 - 1 | 0;
          switch ($2 | 0) {
          case 1:
           break block2;
          case 0:
           break block4;
          case 2:
           break block5;
          default:
           break block6;
          };
         }
         $2 = HEAP32[$0 + 40 >> 2];
         HEAP32[$2 >> 2] = $11;
         HEAP32[$2 + 4 >> 2] = $12;
         $2 = ($6 | 0) == 8;
         if ($2) {
          break block2
         }
         $2 = HEAP32[$0 + 32 >> 2];
        }
        if (!global$9 | ($9 | 0) == 4) {
         $3 = getc($2);
         $10 = 4;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $2 = $3;
        }
        if (!global$9) {
         $7 = ($2 | 0) == -1;
         if ($7) {
          break block2
         }
         HEAP8[$5 | 0] = $2;
         $6 = $6 + 1 | 0;
         continue;
        }
       }
       break;
      };
      if (!global$9) {
       $2 = HEAPU8[$4 + 24 | 0];
       HEAP8[$4 + 23 | 0] = $2;
      }
     }
     $1 = global$9 ? $1 : !$1;
     block7 : {
      if ($1 | (global$9 | 0) == 2) {
       while (1) {
        if (!global$9) {
         if (($6 | 0) <= 0) {
          break block7
         }
         $6 = $6 - 1 | 0;
         $1 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$6 + ($4 + 24 | 0) | 0]);
         $2 = HEAP32[$0 + 32 >> 2];
        }
        if (!global$9 | ($9 | 0) == 5) {
         $3 = ungetc($1, $2);
         $10 = 5;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $1 = $3;
        }
        if (!global$9) {
         $1 = ($1 | 0) != -1;
         if ($1) {
          continue
         }
        }
        break;
       };
       if (!global$9) {
        break block2
       }
      }
      if (!global$9) {
       (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$4 + 23 | 0])), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1
      }
     }
     if (!global$9) {
      $2 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$4 + 23 | 0]);
      break block;
     }
    }
    $2 = global$9 ? $2 : -1;
   }
   if (!global$9) {
    __stack_pointer = $4 + 32 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $6;
  HEAP32[$3 + 20 >> 2] = $5;
  HEAP32[$3 + 24 >> 2] = $8;
  HEAP32[$3 + 28 >> 2] = $7;
  HEAP32[$3 + 32 >> 2] = $11;
  HEAP32[$3 + 36 >> 2] = $12;
  HEAP32[$3 + 40 >> 2] = $13;
  HEAP32[$3 + 44 >> 2] = $14;
  HEAP32[$3 + 48 >> 2] = $15;
  HEAP32[$3 + 52 >> 2] = $16;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 56;
  return 0;
 }
 
 function std____2____stdinbuf_char___uflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2____stdinbuf_char_____getchar_28bool_29($0, 1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2____stdinbuf_char___pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $10 = HEAP32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $6 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $12 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 32 | 0;
   __stack_pointer = $4;
   $2 = std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1);
  }
  block3 : {
   block : {
    if (!global$9) {
     if ($2) {
      if (HEAPU8[$0 + 52 | 0]) {
       break block
      }
      $1 = HEAP32[$0 + 48 >> 2];
      (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1) ^ 1), HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
      break block;
     }
     $5 = !HEAPU8[$0 + 53 | 0];
     $2 = HEAPU8[$0 + 52 | 0];
    }
    block2 : {
     block4 : {
      block1 : {
       if (!global$9) {
        if ($5) {
         $2 = $2 & 1;
         if ($2) {
          break block1
         }
         break block2;
        }
        $2 = $2 & 1;
       }
       if ((global$9 | 0) == 2 | $2) {
        if (!global$9) {
         $5 = HEAP32[$0 + 32 >> 2];
         $2 = HEAP32[$0 + 48 >> 2];
        }
        if (!global$9 | !$12) {
         $3 = std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20char_29($2, $5);
         if ((global$9 | 0) == 1) {
          break block3
         }
         $2 = $3;
        }
        if (!global$9) {
         if ($2) {
          break block2
         }
         break block4;
        }
       }
       if (!global$9) {
        $2 = !$2;
        if ($2) {
         break block2
        }
       }
      }
      if (!global$9) {
       HEAP8[$4 + 19 | 0] = HEAP32[$0 + 48 >> 2] << 24 >> 24;
       $5 = HEAP32[$0 + 40 >> 2];
       $7 = $4 + 19 | 0;
       $6 = $4 + 20 | 0;
       $8 = $6;
       $9 = $4 + 12 | 0;
       $10 = $4 + 24 | 0;
       $11 = $4 + 32 | 0;
       $2 = HEAP32[$0 + 36 >> 2];
      }
      if (!global$9 | ($12 | 0) == 1) {
       $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn190106_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($2, $5, $7, $8, $9, $10, $11, $6);
       $13 = 1;
       if ((global$9 | 0) == 1) {
        break block3
       }
       $2 = $3;
      }
      if (!global$9) {
       block6 : {
        block5 : {
         $2 = $2 - 1 | 0;
         switch ($2 | 0) {
         case 0:
         case 1:
          break block4;
         case 2:
          break block5;
         default:
          break block6;
         };
        }
        $2 = HEAP32[$0 + 48 >> 2];
        $5 = $4 + 25 | 0;
        HEAP32[$4 + 20 >> 2] = $5;
        HEAP8[$4 + 24 | 0] = $2;
       }
      }
      while (1) {
       if (!global$9) {
        $2 = HEAP32[$4 + 20 >> 2];
        if ($2 >>> 0 <= $4 + 24 >>> 0) {
         break block2
        }
        $2 = $2 - 1 | 0;
        HEAP32[$4 + 20 >> 2] = $2;
        $5 = HEAP32[$0 + 32 >> 2];
        $2 = HEAP8[$2 | 0];
       }
       if (!global$9 | ($12 | 0) == 2) {
        $3 = ungetc($2, $5);
        $13 = 2;
        if ((global$9 | 0) == 1) {
         break block3
        }
        $2 = $3;
       }
       if (!global$9) {
        $2 = ($2 | 0) != -1;
        if ($2) {
         continue
        }
       }
       break;
      };
     }
     if (!global$9) {
      $1 = -1;
      break block;
     }
    }
    if (!global$9) {
     HEAP8[$0 + 52 | 0] = 1;
     HEAP32[$0 + 48 >> 2] = $1;
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 32 | 0;
    return $1 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $7;
  HEAP32[$3 + 24 >> 2] = $8;
  HEAP32[$3 + 28 >> 2] = $9;
  HEAP32[$3 + 32 >> 2] = $10;
  HEAP32[$3 + 36 >> 2] = $11;
  HEAP32[$3 + 40 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20char_29($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    $2 = ungetc($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9) {
    return ($0 | 0) != -1
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function int_20const__20std____2__max_5babi_nn190106_5d_int__28int_20const__2c_20int_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$9;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn190106_5d_long_2c_20long__28long_20const__2c_20long_20const__29_20const($0, $1);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 ? $1 : $0;
 }
 
 function std____2__ios_base__ios_base_5babi_nn190106_5d_28_29($0) {
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 >> 2] = 29568;
  return $0;
 }
 
 function std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $3 = global$9 ? $3 : HEAP32[HEAP32[$0 >> 2] + 24 >> 2];
  block : {
   if (!global$9 | !$4) {
    FUNCTION_TABLE[$3 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($4 | 0) == 1) {
    $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__codecvt_char_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
    $5 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP32[$0 + 36 >> 2] = $1
   }
   if (!global$9 | ($4 | 0) == 2) {
    $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn190106_5d_28_29_20const($1);
    $5 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP8[$0 + 44 | 0] = $1
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2____stdoutbuf_char___sync_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 4 >> 2];
   $4 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   $8 = $3 + 16 | 0;
  }
  block : {
   block1 : {
    while (1) {
     if (!global$9) {
      $6 = $3 + 8 | 0;
      $5 = HEAP32[$0 + 36 >> 2];
      $7 = HEAP32[HEAP32[$5 >> 2] + 20 >> 2];
      $4 = HEAP32[$0 + 40 >> 2];
      $1 = $3 + 4 | 0;
     }
     if (!global$9 | !$9) {
      $2 = FUNCTION_TABLE[$7 | 0]($5, $4, $6, $8, $1) | 0;
      $10 = 0;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $2;
     }
     if (!global$9) {
      $7 = HEAP32[$0 + 32 >> 2];
      $1 = $3 + 8 | 0;
      $4 = HEAP32[$3 + 4 >> 2] - $1 | 0;
      $5 = -1;
     }
     if (!global$9 | ($9 | 0) == 1) {
      $2 = fwrite($1, 1, $4, $7);
      $10 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $2;
     }
     if (!global$9) {
      if (($1 | 0) != ($4 | 0)) {
       break block1
      }
      block2 : {
       $4 = $6 - 1 | 0;
       switch ($4 | 0) {
       case 1:
        break block1;
       case 0:
        continue;
       default:
        break block2;
       };
      }
     }
     break;
    };
    $0 = global$9 ? $0 : HEAP32[$0 + 32 >> 2];
    if (!global$9 | ($9 | 0) == 2) {
     $2 = fflush($0);
     $10 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    $5 = global$9 ? $5 : $0 ? -1 : 0;
   }
   if (!global$9) {
    __stack_pointer = $3 + 16 | 0;
    return $5 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = $5;
  HEAP32[$2 + 20 >> 2] = $6;
  HEAP32[$2 + 24 >> 2] = $7;
  HEAP32[$2 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   $3 = global$9 ? $3 : !HEAPU8[$0 + 44 | 0];
   block : {
    if ($3 | (global$9 | 0) == 2) {
     if (!global$9) {
      $3 = ($2 | 0) > 0;
      $2 = $3 ? $2 : 0;
     }
     while (1) {
      if (!global$9) {
       if (($2 | 0) == ($5 | 0)) {
        break block
       }
       $3 = std____2__char_traits_char___to_int_type_5babi_nn190106_5d_28char_29(HEAP8[$1 | 0]);
       $6 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2];
      }
      if (!global$9 | !$7) {
       $4 = FUNCTION_TABLE[$6 | 0]($0, $3) | 0;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $3 = $4;
      }
      if (!global$9) {
       $3 = ($3 | 0) == -1;
       if ($3) {
        return $5 | 0
       } else {
        $1 = $1 + 1 | 0;
        $5 = $5 + 1 | 0;
        continue;
       }
      }
      break;
     };
    }
    $0 = global$9 ? $0 : HEAP32[$0 + 32 >> 2];
    if (!global$9 | ($7 | 0) == 1) {
     $4 = fwrite($1, 1, $2, $0);
     $8 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
     $2 = $4;
    }
   }
   if (!global$9) {
    return $2 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function std____2____stdoutbuf_char___overflow_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $10 = HEAP32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $12 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 32 | 0;
   __stack_pointer = $4;
   $3 = std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1);
  }
  block1 : {
   block3 : {
    block2 : {
     block : {
      if (!global$9) {
       if ($3) {
        break block
       }
       $5 = $1 << 24 >> 24;
       HEAP8[$4 + 23 | 0] = $5;
       $3 = HEAPU8[$0 + 44 | 0] == 1;
      }
      if ((global$9 | 0) == 2 | $3) {
       if (!global$9) {
        $3 = HEAP32[$0 + 32 >> 2];
        $0 = __stack_pointer - 16 | 0;
        __stack_pointer = $0;
        HEAP8[$0 + 15 | 0] = $5;
        $5 = $0 + 15 | 0;
       }
       if (!global$9 | !$8) {
        $2 = fwrite($5, 1, 1, $3);
        if ((global$9 | 0) == 1) {
         break block1
        }
        $5 = $2;
       }
       if (!global$9) {
        __stack_pointer = $0 + 16 | 0;
        $0 = ($5 | 0) != 1;
        if ($0) {
         break block2
        }
        break block;
       }
      }
      if (!global$9) {
       $3 = $4 + 24 | 0;
       HEAP32[$4 + 16 >> 2] = $3;
       $9 = $4 + 32 | 0;
       $10 = $3;
       $3 = $4 + 23 | 0;
      }
      while (1) {
       if (!global$9) {
        $6 = HEAP32[$0 + 40 >> 2];
        $7 = $4 + 12 | 0;
        $11 = $4 + 24 | 0;
        $12 = $4 + 16 | 0;
        $5 = HEAP32[$0 + 36 >> 2];
       }
       if (!global$9 | ($8 | 0) == 1) {
        $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn190106_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($5, $6, $3, $10, $7, $11, $9, $12);
        $13 = 1;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $5 = $2;
       }
       if (!global$9) {
        if (HEAP32[$4 + 12 >> 2] == ($3 | 0)) {
         break block2
        }
        $6 = ($5 | 0) == 3;
       }
       if ((global$9 | 0) == 2 | $6) {
        $0 = global$9 ? $0 : HEAP32[$0 + 32 >> 2];
        if (!global$9 | ($8 | 0) == 2) {
         $2 = fwrite($3, 1, 1, $0);
         $13 = 2;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $0 = $2;
        }
        if (!global$9) {
         $0 = ($0 | 0) == 1;
         if ($0) {
          break block
         }
         break block2;
        }
       }
       if (!global$9) {
        if ($5 >>> 0 > 1) {
         break block2
        }
        $7 = HEAP32[$0 + 32 >> 2];
        $6 = $4 + 24 | 0;
        $3 = HEAP32[$4 + 16 >> 2] - $6 | 0;
       }
       if (!global$9 | ($8 | 0) == 3) {
        $2 = fwrite($6, 1, $3, $7);
        $13 = 3;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $6 = $2;
       }
       if (!global$9) {
        if (($3 | 0) != ($6 | 0)) {
         break block2
        }
        $3 = HEAP32[$4 + 12 >> 2];
        $5 = ($5 | 0) == 1;
        if ($5) {
         continue
        }
       }
       break;
      };
     }
     if (!global$9) {
      $0 = std____2__char_traits_char___not_eof_5babi_nn190106_5d_28int_29($1);
      break block3;
     }
    }
    $0 = global$9 ? $0 : -1;
   }
   if (!global$9) {
    __stack_pointer = $4 + 32 | 0;
    return $0 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $5;
  HEAP32[$2 + 20 >> 2] = $6;
  HEAP32[$2 + 24 >> 2] = $7;
  HEAP32[$2 + 28 >> 2] = $9;
  HEAP32[$2 + 32 >> 2] = $10;
  HEAP32[$2 + 36 >> 2] = $11;
  HEAP32[$2 + 40 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2____stdinbuf_wchar_t______stdinbuf_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$3) {
    $2 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP32[$0 + 36 >> 2] = $1
   }
   if (!global$9 | ($3 | 0) == 1) {
    $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn190106_5d_28_29($1);
    $4 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP32[$0 + 44 >> 2] = $1;
    $1 = HEAP32[$0 + 36 >> 2];
   }
   if (!global$9 | ($3 | 0) == 2) {
    $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn190106_5d_28_29_20const($1);
    $4 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP8[$0 + 53 | 0] = $1;
    if (HEAP32[$0 + 44 >> 2] >= 9) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2____stdinbuf_wchar_t___underflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 56;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 32 | 0;
   __stack_pointer = $5;
   $4 = HEAPU8[$0 + 52 | 0] == 1;
  }
  block1 : {
   block : {
    if (!global$9) {
     if ($4) {
      $2 = HEAP32[$0 + 48 >> 2];
      if (!$1) {
       break block
      }
      HEAP8[$0 + 52 | 0] = 0;
      HEAP32[$0 + 48 >> 2] = -1;
      break block;
     }
     $4 = HEAPU8[$0 + 53 | 0] == 1;
    }
    block3 : {
     if ((global$9 | 0) == 2 | $4) {
      if (!global$9) {
       $6 = $5 + 24 | 0;
       $2 = HEAP32[$0 + 32 >> 2];
       $4 = HEAP32[$2 + 76 >> 2] < 0;
      }
      block2 : {
       if ((global$9 | 0) == 2 | $4) {
        if (!global$9 | !$8) {
         $3 = __fgetwc_unlocked($2);
         if ((global$9 | 0) == 1) {
          break block1
         }
         $2 = $3;
        }
        if (!global$9) {
         break block2
        }
       }
       if (!global$9 | ($8 | 0) == 1) {
        $3 = __lockfile($2);
        $10 = 1;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $7 = $3;
       }
       if (!global$9 | ($8 | 0) == 2) {
        $3 = __fgetwc_unlocked($2);
        $10 = 2;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $4 = $3;
       }
       if (!global$9) {
        if ($7) {
         __unlockfile($2)
        }
        $2 = $4;
       }
      }
      if (!global$9) {
       $4 = ($2 | 0) != -1;
       if ($4) {
        HEAP32[$6 >> 2] = $2
       }
       $2 = ($2 | 0) == -1;
       if ($2) {
        break block3
       }
       $2 = HEAP32[$5 + 24 >> 2];
       $1 = !$1;
      }
      block4 : {
       if ((global$9 | 0) == 2 | $1) {
        if (!global$9) {
         $1 = HEAP32[$5 + 24 >> 2];
         $0 = HEAP32[$0 + 32 >> 2];
        }
        if (!global$9 | ($8 | 0) == 3) {
         $3 = std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20wchar_t_29($2, $0);
         $10 = 3;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $0 = $3;
        }
        if (!global$9) {
         $0 = !$0;
         if ($0) {
          break block3
         }
         break block4;
        }
       }
       if (!global$9) {
        HEAP32[$0 + 48 >> 2] = $2
       }
      }
      if (!global$9) {
       $2 = HEAP32[$5 + 24 >> 2];
       break block;
      }
     }
     if (!global$9) {
      HEAP32[$5 + 24 >> 2] = 1;
      $6 = HEAP32[int_20const__20std____2__max_5babi_nn190106_5d_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, $0 + 44 | 0) >> 2];
      $4 = ($6 | 0) > 0;
      $7 = $4 ? $6 : 0;
     }
     while (1) {
      $4 = global$9 ? $4 : ($2 | 0) != ($7 | 0);
      if ($4 | (global$9 | 0) == 2) {
       $4 = global$9 ? $4 : HEAP32[$0 + 32 >> 2];
       if (!global$9 | ($8 | 0) == 4) {
        $3 = getc($4);
        $10 = 4;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $4 = $3;
       }
       if (!global$9) {
        if (($4 | 0) == -1) {
         break block3
        }
        $9 = ($5 + 24 | 0) + $2 | 0;
        HEAP8[$9 | 0] = $4;
        $2 = $2 + 1 | 0;
        continue;
       }
      }
      break;
     };
     $7 = global$9 ? $7 : $5 + 24 | 0;
     block7 : {
      while (1) {
       block6 : {
        if (!global$9) {
         $2 = HEAP32[$0 + 40 >> 2];
         $11 = HEAP32[$2 >> 2];
         $12 = HEAP32[$2 + 4 >> 2];
         $9 = HEAP32[$0 + 36 >> 2];
         $4 = $5 + 24 | 0;
         $13 = $4;
         $14 = $5 + 16 | 0;
         $15 = $5 + 20 | 0;
         $16 = $5 + 12 | 0;
         $4 = $4 + $6 | 0;
        }
        if (!global$9 | ($8 | 0) == 5) {
         $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_5babi_nn190106_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($9, $2, $13, $4, $14, $15, $7, $16);
         $10 = 5;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $2 = $3;
        }
        if (!global$9) {
         block5 : {
          $2 = $2 - 1 | 0;
          switch ($2 | 0) {
          case 1:
           break block3;
          case 0:
           break block5;
          case 2:
           break block6;
          default:
           break block7;
          };
         }
         $2 = HEAP32[$0 + 40 >> 2];
         HEAP32[$2 >> 2] = $11;
         HEAP32[$2 + 4 >> 2] = $12;
         $2 = ($6 | 0) == 8;
         if ($2) {
          break block3
         }
         $2 = HEAP32[$0 + 32 >> 2];
        }
        if (!global$9 | ($8 | 0) == 6) {
         $3 = getc($2);
         $10 = 6;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $2 = $3;
        }
        if (!global$9) {
         $9 = ($2 | 0) == -1;
         if ($9) {
          break block3
         }
         HEAP8[$4 | 0] = $2;
         $6 = $6 + 1 | 0;
         continue;
        }
       }
       break;
      };
      if (!global$9) {
       $2 = HEAP8[$5 + 24 | 0];
       HEAP32[$5 + 20 >> 2] = $2;
      }
     }
     $1 = global$9 ? $1 : !$1;
     block8 : {
      if ($1 | (global$9 | 0) == 2) {
       while (1) {
        if (!global$9) {
         if (($6 | 0) <= 0) {
          break block8
         }
         $2 = HEAP32[$0 + 32 >> 2];
         $6 = $6 - 1 | 0;
         $1 = HEAP8[$6 + ($5 + 24 | 0) | 0];
        }
        if (!global$9 | ($8 | 0) == 7) {
         $3 = ungetc($1, $2);
         $10 = 7;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $1 = $3;
        }
        if (!global$9) {
         $1 = ($1 | 0) != -1;
         if ($1) {
          continue
         }
        }
        break;
       };
       if (!global$9) {
        break block3
       }
      }
      if (!global$9) {
       HEAP32[$0 + 48 >> 2] = HEAP32[$5 + 20 >> 2]
      }
     }
     if (!global$9) {
      $2 = HEAP32[$5 + 20 >> 2];
      break block;
     }
    }
    $2 = global$9 ? $2 : -1;
   }
   if (!global$9) {
    __stack_pointer = $5 + 32 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $6;
  HEAP32[$3 + 24 >> 2] = $7;
  HEAP32[$3 + 28 >> 2] = $9;
  HEAP32[$3 + 32 >> 2] = $11;
  HEAP32[$3 + 36 >> 2] = $12;
  HEAP32[$3 + 40 >> 2] = $13;
  HEAP32[$3 + 44 >> 2] = $14;
  HEAP32[$3 + 48 >> 2] = $15;
  HEAP32[$3 + 52 >> 2] = $16;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 56;
  return 0;
 }
 
 function std____2____stdinbuf_wchar_t___uflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2____stdinbuf_wchar_t___pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $10 = HEAP32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $6 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $12 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 32 | 0;
   __stack_pointer = $4;
   $2 = std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1);
  }
  block3 : {
   block : {
    if (!global$9) {
     if ($2) {
      if (HEAPU8[$0 + 52 | 0]) {
       break block
      }
      $1 = HEAP32[$0 + 48 >> 2];
      (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1) ^ 1), HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
      break block;
     }
     $5 = !HEAPU8[$0 + 53 | 0];
     $2 = HEAPU8[$0 + 52 | 0];
    }
    block2 : {
     block4 : {
      block1 : {
       if (!global$9) {
        if ($5) {
         $2 = $2 & 1;
         if ($2) {
          break block1
         }
         break block2;
        }
        $2 = $2 & 1;
       }
       if ((global$9 | 0) == 2 | $2) {
        if (!global$9) {
         $5 = HEAP32[$0 + 32 >> 2];
         $2 = HEAP32[$0 + 48 >> 2];
        }
        if (!global$9 | !$12) {
         $3 = std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20wchar_t_29($2, $5);
         if ((global$9 | 0) == 1) {
          break block3
         }
         $2 = $3;
        }
        if (!global$9) {
         if ($2) {
          break block2
         }
         break block4;
        }
       }
       if (!global$9) {
        $2 = !$2;
        if ($2) {
         break block2
        }
       }
      }
      if (!global$9) {
       HEAP32[$4 + 16 >> 2] = HEAP32[$0 + 48 >> 2];
       $5 = HEAP32[$0 + 40 >> 2];
       $7 = $4 + 16 | 0;
       $6 = $4 + 20 | 0;
       $8 = $6;
       $9 = $4 + 12 | 0;
       $10 = $4 + 24 | 0;
       $11 = $4 + 32 | 0;
       $2 = HEAP32[$0 + 36 >> 2];
      }
      if (!global$9 | ($12 | 0) == 1) {
       $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn190106_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($2, $5, $7, $8, $9, $10, $11, $6);
       $13 = 1;
       if ((global$9 | 0) == 1) {
        break block3
       }
       $2 = $3;
      }
      if (!global$9) {
       block6 : {
        block5 : {
         $2 = $2 - 1 | 0;
         switch ($2 | 0) {
         case 0:
         case 1:
          break block4;
         case 2:
          break block5;
         default:
          break block6;
         };
        }
        $2 = HEAP32[$0 + 48 >> 2];
        $5 = $4 + 25 | 0;
        HEAP32[$4 + 20 >> 2] = $5;
        HEAP8[$4 + 24 | 0] = $2;
       }
      }
      while (1) {
       if (!global$9) {
        $2 = HEAP32[$4 + 20 >> 2];
        if ($2 >>> 0 <= $4 + 24 >>> 0) {
         break block2
        }
        $2 = $2 - 1 | 0;
        HEAP32[$4 + 20 >> 2] = $2;
        $5 = HEAP32[$0 + 32 >> 2];
        $2 = HEAP8[$2 | 0];
       }
       if (!global$9 | ($12 | 0) == 2) {
        $3 = ungetc($2, $5);
        $13 = 2;
        if ((global$9 | 0) == 1) {
         break block3
        }
        $2 = $3;
       }
       if (!global$9) {
        $2 = ($2 | 0) != -1;
        if ($2) {
         continue
        }
       }
       break;
      };
     }
     if (!global$9) {
      $1 = -1;
      break block;
     }
    }
    if (!global$9) {
     HEAP8[$0 + 52 | 0] = 1;
     HEAP32[$0 + 48 >> 2] = $1;
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 32 | 0;
    return $1 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $7;
  HEAP32[$3 + 24 >> 2] = $8;
  HEAP32[$3 + 28 >> 2] = $9;
  HEAP32[$3 + 32 >> 2] = $10;
  HEAP32[$3 + 36 >> 2] = $11;
  HEAP32[$3 + 40 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20wchar_t_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   $4 = HEAP32[$2 + 12 >> 2];
   $5 = HEAP32[$2 + 16 >> 2];
   $7 = HEAP32[$2 + 20 >> 2];
   $8 = HEAP32[$2 + 24 >> 2];
   $9 = HEAP32[$2 + 28 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $7 = thread_ptr;
   $8 = HEAP32[$7 + 96 >> 2];
   $3 = HEAP32[$1 + 76 >> 2] < 0;
  }
  $6 = (global$9 | 0) == 2;
  $2 = global$9 ? 0 : $3;
  $3 = (global$9 ? 0 : $6 | $2) ? 0 : $3;
  block : {
   if (($6 | !$2) & (!global$9 | !$10)) {
    $2 = __lockfile($1);
    $6 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $3 = $2;
   }
   if (!global$9) {
    $9 = !$3;
    $3 = HEAP32[$1 + 72 >> 2] <= 0;
   }
   if (!global$9 | ($10 | 0) == 1 ? (global$9 | 0) == 2 | $3 : 0) {
    fwide($1);
    $6 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (global$9) {
    $2 = $3
   } else {
    HEAP32[$7 + 96 >> 2] = HEAP32[$1 + 136 >> 2];
    $2 = !HEAP32[$1 + 4 >> 2];
   }
   if ($2 | (global$9 | 0) == 2) {
    if (!global$9 | ($10 | 0) == 2) {
     __toread($1);
     $6 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $4 = !HEAP32[$1 + 4 >> 2]
    }
   }
   if (!global$9) {
    $3 = -1;
    block1 : {
     if ($4 | ($0 | 0) == -1) {
      break block1
     }
     $4 = wcrtomb($5 + 12 | 0, $0);
     if (($4 | 0) < 0) {
      break block1
     }
     $2 = HEAP32[$1 + 4 >> 2];
     if ($2 >>> 0 < ($4 + HEAP32[$1 + 44 >> 2] | 0) - 8 >>> 0) {
      break block1
     }
     block2 : {
      if ($0 >>> 0 <= 127) {
       $3 = $2 - 1 | 0;
       HEAP32[$1 + 4 >> 2] = $3;
       HEAP8[$3 | 0] = $0;
       break block2;
      }
      $3 = $2 - $4 | 0;
      HEAP32[$1 + 4 >> 2] = $3;
      __memcpy($3, $5 + 12 | 0, $4);
     }
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
     $3 = $0;
    }
    if (!$9) {
     __unlockfile($1)
    }
    HEAP32[$7 + 96 >> 2] = $8;
    __stack_pointer = $5 + 16 | 0;
    return ($3 | 0) != -1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $5;
  HEAP32[$2 + 20 >> 2] = $7;
  HEAP32[$2 + 24 >> 2] = $8;
  HEAP32[$2 + 28 >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $3 = global$9 ? $3 : HEAP32[HEAP32[$0 >> 2] + 24 >> 2];
  block : {
   if (!global$9 | !$4) {
    FUNCTION_TABLE[$3 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($4 | 0) == 1) {
    $2 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
    $5 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP32[$0 + 36 >> 2] = $1
   }
   if (!global$9 | ($4 | 0) == 2) {
    $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn190106_5d_28_29_20const($1);
    $5 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    HEAP8[$0 + 44 | 0] = $1
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   $3 = global$9 ? $3 : !HEAPU8[$0 + 44 | 0];
   block : {
    if ($3 | (global$9 | 0) == 2) {
     if (!global$9) {
      $3 = ($2 | 0) > 0;
      $2 = $3 ? $2 : 0;
     }
     while (1) {
      if (!global$9) {
       if (($2 | 0) == ($5 | 0)) {
        break block
       }
       $6 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2];
       $3 = HEAP32[$1 >> 2];
      }
      if (!global$9 | !$7) {
       $4 = FUNCTION_TABLE[$6 | 0]($0, $3) | 0;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $3 = $4;
      }
      if (!global$9) {
       $3 = ($3 | 0) == -1;
       if ($3) {
        return $5 | 0
       } else {
        $1 = $1 + 4 | 0;
        $5 = $5 + 1 | 0;
        continue;
       }
      }
      break;
     };
    }
    $0 = global$9 ? $0 : HEAP32[$0 + 32 >> 2];
    if (!global$9 | ($7 | 0) == 1) {
     $4 = fwrite($1, 4, $2, $0);
     $8 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
     $2 = $4;
    }
   }
   if (!global$9) {
    return $2 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function std____2____stdoutbuf_wchar_t___overflow_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $11 = HEAP32[$1 + 28 >> 2];
   $10 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 32 | 0;
   __stack_pointer = $5;
   $3 = std____2__char_traits_char___eq_int_type_5babi_nn190106_5d_28int_2c_20int_29($1);
  }
  block1 : {
   block4 : {
    block3 : {
     block : {
      if (!global$9) {
       if ($3) {
        break block
       }
       $3 = $1;
       HEAP32[$5 + 20 >> 2] = $1;
       $4 = HEAPU8[$0 + 44 | 0] == 1;
      }
      if ((global$9 | 0) == 2 | $4) {
       if (!global$9) {
        $0 = HEAP32[$0 + 32 >> 2];
        $4 = HEAP32[$0 + 76 >> 2] < 0;
       }
       block2 : {
        if ((global$9 | 0) == 2 | $4) {
         if (!global$9 | !$7) {
          $2 = __fputwc_unlocked($3, $0);
          if ((global$9 | 0) == 1) {
           break block1
          }
          $3 = $2;
         }
         if (!global$9) {
          break block2
         }
        }
        if (!global$9 | ($7 | 0) == 1) {
         $2 = __lockfile($0);
         $9 = 1;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $4 = $2;
        }
        if (!global$9 | ($7 | 0) == 2) {
         $2 = __fputwc_unlocked($3, $0);
         $9 = 2;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $3 = $2;
        }
        if (!($4 ? global$9 : 1)) {
         __unlockfile($0)
        }
       }
       if (!global$9) {
        $0 = ($3 | 0) == -1;
        if ($0) {
         break block3
        }
        break block;
       }
      }
      if (!global$9) {
       $10 = $5 + 24 | 0;
       $3 = $10;
       HEAP32[$5 + 16 >> 2] = $3;
       $11 = $5 + 32 | 0;
       $4 = $5 + 20 | 0;
      }
      while (1) {
       if (!global$9) {
        $6 = HEAP32[$0 + 40 >> 2];
        $8 = $5 + 12 | 0;
        $12 = $5 + 24 | 0;
        $13 = $5 + 16 | 0;
        $3 = HEAP32[$0 + 36 >> 2];
       }
       if (!global$9 | ($7 | 0) == 3) {
        $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn190106_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($3, $6, $4, $10, $8, $12, $11, $13);
        $9 = 3;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $3 = $2;
       }
       if (!global$9) {
        if (HEAP32[$5 + 12 >> 2] == ($4 | 0)) {
         break block3
        }
        $6 = ($3 | 0) == 3;
       }
       if ((global$9 | 0) == 2 | $6) {
        $0 = global$9 ? $0 : HEAP32[$0 + 32 >> 2];
        if (!global$9 | ($7 | 0) == 4) {
         $2 = fwrite($4, 1, 1, $0);
         $9 = 4;
         if ((global$9 | 0) == 1) {
          break block1
         }
         $0 = $2;
        }
        if (!global$9) {
         $0 = ($0 | 0) == 1;
         if ($0) {
          break block
         }
         break block3;
        }
       }
       if (!global$9) {
        if ($3 >>> 0 > 1) {
         break block3
        }
        $4 = $5 + 24 | 0;
        $6 = $4;
        $8 = HEAP32[$0 + 32 >> 2];
        $4 = HEAP32[$5 + 16 >> 2] - $4 | 0;
       }
       if (!global$9 | ($7 | 0) == 5) {
        $2 = fwrite($6, 1, $4, $8);
        $9 = 5;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $6 = $2;
       }
       if (!global$9) {
        if (($4 | 0) != ($6 | 0)) {
         break block3
        }
        $4 = HEAP32[$5 + 12 >> 2];
        $3 = ($3 | 0) == 1;
        if ($3) {
         continue
        }
       }
       break;
      };
     }
     if (!global$9) {
      $0 = std____2__char_traits_char___not_eof_5babi_nn190106_5d_28int_29($1);
      break block4;
     }
    }
    $0 = global$9 ? $0 : -1;
   }
   if (!global$9) {
    __stack_pointer = $5 + 32 | 0;
    return $0 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $5;
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $6;
  HEAP32[$2 + 24 >> 2] = $8;
  HEAP32[$2 + 28 >> 2] = $11;
  HEAP32[$2 + 32 >> 2] = $10;
  HEAP32[$2 + 36 >> 2] = $12;
  HEAP32[$2 + 40 >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function getenv($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $3 = global$9;
  $1 = __strchrnul($0, 61);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  if (($0 | 0) == ($1 | 0)) {
   return 0
  }
  $3 = $1 - $0 | 0;
  block : {
   if (HEAPU8[$3 + $0 | 0]) {
    break block
   }
   $4 = HEAP32[19539];
   if (!$4) {
    break block
   }
   $2 = HEAP32[$4 >> 2];
   if (!$2) {
    break block
   }
   while (1) {
    block3 : {
     $5 = $0;
     $6 = $3;
     $1 = 0;
     block1 : {
      if (!$3) {
       break block1
      }
      $1 = HEAPU8[$0 | 0];
      if ($1) {
       block2 : {
        while (1) {
         $7 = HEAPU8[$2 | 0];
         if (($7 | 0) != ($1 | 0) | !$7) {
          break block2
         }
         $6 = $6 - 1 | 0;
         if (!$6) {
          break block2
         }
         $2 = $2 + 1 | 0;
         $1 = HEAPU8[$5 + 1 | 0];
         $5 = $5 + 1 | 0;
         if ($1) {
          continue
         }
         break;
        };
        $1 = 0;
       }
      } else {
       $1 = 0
      }
      $1 = $1 - HEAPU8[$2 | 0] | 0;
     }
     if (!$1) {
      $1 = HEAP32[$4 >> 2] + $3 | 0;
      if (HEAPU8[$1 | 0] == 61) {
       break block3
      }
     }
     $2 = HEAP32[$4 + 4 >> 2];
     $4 = $4 + 4 | 0;
     if ($2) {
      continue
     }
     break block;
    }
    break;
   };
   $8 = $1 + 1 | 0;
  }
  return $8;
 }
 
 function __get_locale($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $4 = HEAP32[$4 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   block : {
    if (HEAPU8[$1 | 0]) {
     break block
    }
    $1 = getenv(10761);
    if (HEAPU8[$1 | 0] ? $1 : 0) {
     break block
    }
    $1 = getenv(Math_imul($0, 12) + 30128 | 0);
    if (HEAPU8[$1 | 0] ? $1 : 0) {
     break block
    }
    $1 = getenv(10826);
    if (HEAPU8[$1 | 0] ? $1 : 0) {
     break block
    }
    $1 = 11534;
   }
   block2 : {
    while (1) {
     $3 = HEAPU8[$1 + $2 | 0];
     if (!(!$3 | ($3 | 0) == 47)) {
      $4 = 23;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != 23) {
       continue
      }
      break block2;
     }
     break;
    };
    $4 = $2;
   }
   $2 = HEAPU8[$1 | 0];
   $6 = ($2 | 0) == 46;
   $3 = 11534;
  }
  block8 : {
   block7 : {
    if (!global$9) {
     block6 : {
      block5 : {
       block4 : {
        if (!(HEAPU8[$1 + $4 | 0] | $6)) {
         $3 = $1;
         if (($2 | 0) != 67) {
          break block4
         }
        }
        if (!HEAPU8[$3 + 1 | 0]) {
         break block5
        }
       }
       if (!strcmp($3, 11534)) {
        break block5
       }
       if (strcmp($3, 10092)) {
        break block6
       }
      }
      if (!$0) {
       $2 = 29636;
       if (HEAPU8[$3 + 1 | 0] == 46) {
        break block7
       }
      }
      return 0;
     }
     $2 = HEAP32[19541];
     if ($2) {
      while (1) {
       if (!strcmp($3, $2 + 8 | 0)) {
        break block7
       }
       $2 = HEAP32[$2 + 32 >> 2];
       if ($2) {
        continue
       }
       break;
      }
     }
    }
    if (!global$9 | !$5) {
     $1 = emscripten_builtin_malloc(36);
     if ((global$9 | 0) == 1) {
      break block8
     }
     $2 = $1;
    }
    if (!global$9) {
     if ($2) {
      $1 = HEAP32[7410];
      HEAP32[$2 >> 2] = HEAP32[7409];
      HEAP32[$2 + 4 >> 2] = $1;
      $1 = $2 + 8 | 0;
      __memcpy($1, $3, $4);
      HEAP8[$1 + $4 | 0] = 0;
      HEAP32[$2 + 32 >> 2] = HEAP32[19541];
      HEAP32[19541] = $2;
     }
     $2 = $0 | $2 ? $2 : 29636;
    }
   }
   if (!global$9) {
    return $2
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function __loc_is_allocated($0) {
  return ($0 | 0) != 0 & ($0 | 0) != 29672 & ($0 | 0) != 29696 & ($0 | 0) != 78168 & ($0 | 0) != 78192;
 }
 
 function toupper($0) {
  return $0 - 97 >>> 0 < 26 ? $0 & 95 : $0;
 }
 
 function tolower($0) {
  return $0 - 65 >>> 0 < 26 ? $0 | 32 : $0;
 }
 
 function __isxdigit_l($0) {
  return $0 - 48 >>> 0 < 10 | ($0 | 32) - 97 >>> 0 < 6;
 }
 
 function __isdigit_l($0) {
  return $0 - 48 >>> 0 < 10;
 }
 
 function __nl_langinfo_l($0, $1) {
  var $2 = 0, $3 = 0;
  if (($0 | 0) == 14) {
   return HEAP32[$1 >> 2] ? 11536 : 10806
  }
  $2 = $0 & 65535;
  $3 = $0 >> 16;
  if (!(($2 | 0) != 65535 | ($3 | 0) > 5)) {
   $0 = HEAP32[($3 << 2) + $1 >> 2];
   return $0 ? $0 + 8 | 0 : 11066;
  }
  $0 = 14303;
  block3 : {
   block5 : {
    block4 : {
     switch ($3 - 1 | 0) {
     case 0:
      if ($2 >>> 0 > 1) {
       break block3
      }
      $0 = 30256;
      break block5;
     case 1:
      if ($2 >>> 0 > 49) {
       break block3
      }
      $0 = 30272;
      break block5;
     case 4:
      break block4;
     default:
      break block3;
     };
    }
    if ($2 >>> 0 > 3) {
     break block3
    }
    $0 = 30592;
   }
   if (!$2) {
    return $0
   }
   while (1) {
    $1 = HEAPU8[$0 | 0];
    $0 = $0 + 1 | 0;
    if ($1) {
     continue
    }
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function strtox($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $13 = global$9;
  $11 = __stack_pointer - 16 | 0;
  __stack_pointer = $11;
  block2 : {
   block1 : {
    block : {
     if (($2 | 0) <= 36) {
      $6 = HEAPU8[$0 | 0];
      if ($6) {
       break block
      }
      $5 = $0;
      break block1;
     }
     HEAP32[__tls_base >> 2] = 28;
     $3 = 0;
     $4 = 0;
     break block2;
    }
    $5 = $0;
    block3 : {
     while (1) {
      $7 = __isspace($6 << 24 >> 24);
      if ((global$9 | 0) != ($13 | 0)) {
       wasm2js_trap()
      }
      if (!$7) {
       break block3
      }
      $6 = HEAPU8[$5 + 1 | 0];
      $5 = $5 + 1 | 0;
      if ($6) {
       continue
      }
      break;
     };
     break block1;
    }
    block4 : {
     $7 = $6 & 255;
     switch ($7 - 43 | 0) {
     case 0:
     case 2:
      break block4;
     default:
      break block1;
     };
    }
    $9 = ($7 | 0) == 45 ? -1 : 0;
    $5 = $5 + 1 | 0;
   }
   block6 : {
    if (!(($2 | 16) != 16 | HEAPU8[$5 | 0] != 48)) {
     $14 = 1;
     if ((HEAPU8[$5 + 1 | 0] & 223) == 88) {
      $5 = $5 + 2 | 0;
      $12 = 16;
      break block6;
     }
     $5 = $5 + 1 | 0;
     $12 = $2 ? $2 : 8;
     break block6;
    }
    $12 = $2 ? $2 : 10;
   }
   $2 = 0;
   while (1) {
    block8 : {
     $7 = HEAPU8[$5 | 0];
     $6 = $7 - 48 | 0;
     block7 : {
      if (($6 & 255) >>> 0 < 10) {
       break block7
      }
      if (($7 - 97 & 255) >>> 0 <= 25) {
       $6 = $7 - 87 | 0;
       break block7;
      }
      if (($7 - 65 & 255) >>> 0 > 25) {
       break block8
      }
      $6 = $7 - 55 | 0;
     }
     if (($6 & 255) >= ($12 | 0)) {
      break block8
     }
     __multi3($11, $12, 0, 0, 0, $10, $8, 0, 0);
     if ((global$9 | 0) != ($13 | 0)) {
      wasm2js_trap()
     } else {
      $7 = 1;
      block9 : {
       if (HEAP32[$11 + 8 >> 2] | HEAP32[$11 + 12 >> 2]) {
        break block9
       }
       $15 = __wasm_i64_mul($12, 0, $10, $8);
       $16 = i64toi32_i32$HIGH_BITS;
       $6 = $6 & 255;
       if (($16 | 0) == -1 & ($6 ^ -1) >>> 0 < $15 >>> 0) {
        break block9
       }
       $8 = $16;
       $10 = $6 + $15 | 0;
       $8 = $10 >>> 0 < $6 >>> 0 ? $8 + 1 | 0 : $8;
       $14 = 1;
       $7 = $2;
      }
      $5 = $5 + 1 | 0;
      $2 = $7;
      continue;
     }
    }
    break;
   };
   if ($1) {
    HEAP32[$1 >> 2] = $14 ? $5 : $0
   }
   block11 : {
    block10 : {
     if ($2) {
      HEAP32[__tls_base >> 2] = 68;
      $0 = $3 & 1;
      $9 = $0 ? 0 : $9;
      $10 = $3;
      $8 = $4;
      break block10;
     }
     if (($4 | 0) == ($8 | 0) & $3 >>> 0 > $10 >>> 0 | $4 >>> 0 > $8 >>> 0) {
      break block11
     }
     $0 = $3 & 1;
    }
    if (!($0 | $9)) {
     HEAP32[__tls_base >> 2] = 68;
     $0 = $3;
     $3 = $0 - 1 | 0;
     $4 = $4 - !$0 | 0;
     break block2;
    }
    if (($4 | 0) == ($8 | 0) & $3 >>> 0 >= $10 >>> 0 | $4 >>> 0 > $8 >>> 0) {
     break block11
    }
    HEAP32[__tls_base >> 2] = 68;
    break block2;
   }
   $0 = $9 ^ $10;
   $3 = $0 - $9 | 0;
   $1 = $9 >> 31;
   $4 = ($1 ^ $8) - (($0 >>> 0 < $9 >>> 0) + $1 | 0) | 0;
  }
  __stack_pointer = $11 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $4;
  return $3;
 }
 
 function week_num($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $4 = global$9;
  $2 = 53;
  $5 = HEAP32[$0 + 24 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  $3 = $5 - $1 | 0;
  $1 = ((($1 - (($5 + 6 >>> 0) % 7 | 0) | 0) + 7 >>> 0) / 7 | 0) + (($3 + 369 >>> 0) % 7 >>> 0 < 3) | 0;
  block : {
   if (($1 | 0) != 53) {
    $2 = $1;
    if ($1) {
     break block
    }
    $2 = 52;
    block1 : {
     switch ((($3 + 6 >>> 0) % 7 | 0) - 4 | 0) {
     case 1:
      $0 = is_leap((HEAP32[$0 + 20 >> 2] % 400 | 0) - 1 | 0);
      if ((global$9 | 0) != ($4 | 0)) {
       wasm2js_trap()
      }
      if (!$0) {
       break block
      }
      break;
     case 0:
      break block1;
     default:
      break block;
     };
    }
    return 53;
   }
   block4 : {
    switch ((($3 + 371 >>> 0) % 7 | 0) - 3 | 0) {
    case 0:
     $0 = is_leap(HEAP32[$0 + 20 >> 2]);
     if ((global$9 | 0) != ($4 | 0)) {
      wasm2js_trap()
     }
     if ($0) {
      break block
     }
     break;
    case 1:
     break block;
    default:
     break block4;
    };
   }
   $2 = 1;
  }
  return $2;
 }
 
 function __strftime_l($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 88;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $9 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $6 = HEAP32[$1 + 32 >> 2];
   $7 = HEAP32[$1 + 36 >> 2];
   $11 = HEAP32[$1 + 40 >> 2];
   $13 = HEAP32[$1 + 44 >> 2];
   $14 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $21 = HEAP32[$1 + 64 >> 2];
   $15 = HEAP32[$1 + 68 >> 2];
   $19 = HEAP32[$1 + 72 >> 2];
   $23 = HEAP32[$1 + 76 >> 2];
   $25 = HEAP32[$1 + 80 >> 2];
   $26 = HEAP32[$1 + 84 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $22 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer;
   $18 = $5 - 128 | 0;
   __stack_pointer = $18;
  }
  block63 : {
   if ((global$9 | 0) == 2 | $1) {
    block1 : {
     while (1) {
      block66 : {
       if (!global$9) {
        $10 = HEAPU8[$2 | 0];
        $5 = ($10 | 0) != 37;
       }
       block5 : {
        if (!global$9) {
         block3 : {
          block2 : {
           block : {
            if ($5) {
             if ($10) {
              break block
             }
             $10 = $13;
             break block1;
            }
            $21 = 0;
            $11 = 1;
            block4 : {
             $5 = HEAPU8[$2 + 1 | 0];
             switch ($5 - 45 | 0) {
             case 0:
             case 3:
              break block2;
             case 1:
             case 2:
              break block3;
             default:
              break block4;
             };
            }
            $9 = ($5 | 0) == 95;
            if ($9) {
             break block2
            }
            if ($5) {
             break block3
            }
           }
           HEAP8[$0 + $13 | 0] = $10;
           $13 = $13 + 1 | 0;
           break block5;
          }
          $21 = $5;
          $5 = HEAPU8[$2 + 2 | 0];
          $11 = 2;
         }
         $23 = 0;
         $26 = $5 & 255;
         $11 = ($2 + $11 | 0) + (($26 | 0) == 43) | 0;
         block6 : {
          if (HEAP8[$11 | 0] - 48 >>> 0 <= 9) {
           $6 = strtox($11, $18 + 12 | 0, 10, -1, 0);
           $7 = i64toi32_i32$HIGH_BITS;
           $5 = HEAP32[$18 + 12 >> 2];
           $2 = $6;
           break block6;
          }
          HEAP32[$18 + 12 >> 2] = $11;
          $5 = $11;
          $2 = 0;
         }
         $10 = HEAPU8[$5 | 0];
         $9 = $10 - 67 | 0;
         block7 : {
          if ($9 >>> 0 > 22 | !(1 << $9 & 4194329)) {
           break block7
          }
          $23 = $2;
          if ($2) {
           break block7
          }
          $23 = ($5 | 0) != ($11 | 0);
         }
         if (($10 | 0) == 79 | ($10 | 0) == 69) {
          $10 = HEAPU8[$5 + 1 | 0];
          $2 = $5 + 1 | 0;
         } else {
          $2 = $5
         }
         $11 = $18 + 16 | 0;
         $9 = $3;
         $15 = __stack_pointer - 80 | 0;
         __stack_pointer = $15;
         $16 = 2036;
         $25 = 48;
         $17 = 131112;
         $14 = $18 + 124 | 0;
         $10 = $10 << 24 >> 24;
         $19 = $10 - 37 | 0;
         $5 = 0;
        }
        block11 : {
         block64 : {
          block48 : {
           block54 : {
            block53 : {
             block50 : {
              block15 : {
               block32 : {
                block39 : {
                 block49 : {
                  block47 : {
                   block52 : {
                    block10 : {
                     block29 : {
                      block46 : {
                       if (!global$9) {
                        block28 : {
                         block45 : {
                          block27 : {
                           block44 : {
                            block62 : {
                             block43 : {
                              switch ($19 | 0) {
                              case 60:
                               $5 = HEAP32[$9 + 24 >> 2];
                               $11 = $5 >>> 0 <= 6;
                               if ($11) {
                                break block47
                               }
                               break block48;
                              case 28:
                               $5 = HEAP32[$9 + 24 >> 2];
                               $11 = $5 >>> 0 > 6;
                               if ($11) {
                                break block48
                               }
                               $5 = $5 + 131079 | 0;
                               break block49;
                              case 61:
                              case 67:
                               $5 = HEAP32[$9 + 16 >> 2];
                               $11 = $5 >>> 0 > 11;
                               if ($11) {
                                break block48
                               }
                               $5 = $5 + 131086 | 0;
                               break block49;
                              case 29:
                               $5 = HEAP32[$9 + 16 >> 2];
                               $11 = $5 >>> 0 > 11;
                               if ($11) {
                                break block48
                               }
                               $5 = $5 + 131098 | 0;
                               break block49;
                              case 30:
                               $6 = HEAP32[$9 + 20 >> 2];
                               $7 = $6 >> 31;
                               $6 = $6 + 1900 | 0;
                               $7 = $6 >>> 0 < 1900 ? $7 + 1 | 0 : $7;
                               $6 = __wasm_i64_sdiv($6, $7, 100);
                               $7 = i64toi32_i32$HIGH_BITS;
                               break block50;
                              case 64:
                               $25 = 95;
                              case 63:
                               $6 = HEAP32[$9 + 12 >> 2];
                               $7 = $6 >> 31;
                               break block50;
                              case 33:
                               $16 = 9274;
                               break block15;
                              case 34:
                              case 66:
                               $8 = HEAP32[$9 + 20 >> 2];
                               $5 = $8 >> 31;
                               $6 = $8 + 1900 | 0;
                               $7 = $6 >>> 0 < 1900 ? $5 + 1 | 0 : $5;
                               $12 = HEAP32[$9 + 28 >> 2];
                               $17 = ($12 | 0) <= 2;
                               block51 : {
                                if ($17) {
                                 $12 = $7;
                                 $7 = $5;
                                 $5 = $8 + 1899 | 0;
                                 $7 = $5 >>> 0 < 1899 ? $7 + 1 | 0 : $7;
                                 $8 = $5;
                                 $5 = (week_num($9) | 0) == 1;
                                 $6 = $5 ? $6 : $8;
                                 $7 = $5 ? $12 : $7;
                                 break block51;
                                }
                                if ($12 >>> 0 < 361) {
                                 break block51
                                }
                                $8 = $8 + 1901 | 0;
                                $5 = $8 >>> 0 < 1901 ? $5 + 1 | 0 : $5;
                                $20 = $8;
                                $8 = (week_num($9) | 0) == 1;
                                $6 = $8 ? $20 : $6;
                                $7 = $8 ? $5 : $7;
                               }
                               $5 = ($10 | 0) == 103;
                               if ($5) {
                                break block52
                               }
                               break block53;
                              case 35:
                               $6 = HEAP32[$9 + 8 >> 2];
                               $7 = $6 >> 31;
                               break block50;
                              case 36:
                               $5 = 2;
                               $9 = HEAP32[$9 + 8 >> 2];
                               $10 = !$9;
                               if ($10) {
                                $6 = 12;
                                $7 = 0;
                                break block54;
                               }
                               $8 = $9 >> 31;
                               $7 = $9;
                               $9 = ($9 | 0) > 12;
                               $6 = $9 ? $7 - 12 | 0 : $7;
                               $7 = $9 ? $8 - ($7 >>> 0 < 12) | 0 : $8;
                               break block54;
                              case 69:
                               $6 = HEAP32[$9 + 28 >> 2] + 1 | 0;
                               $7 = $6 >> 31;
                               $5 = 3;
                               break block54;
                              case 72:
                               $5 = HEAP32[$9 + 16 >> 2] + 1 | 0;
                               $6 = $5;
                               $7 = $5 >> 31;
                               break block50;
                              case 40:
                               $6 = HEAP32[$9 + 4 >> 2];
                               $7 = $6 >> 31;
                               break block50;
                              case 73:
                               HEAP32[$14 >> 2] = 1;
                               $5 = 14300;
                               break block11;
                              case 75:
                               $5 = HEAP32[$9 + 8 >> 2] > 11 ? 131111 : 131110;
                               break block49;
                              case 45:
                               $16 = 10640;
                               break block15;
                              case 78:
                               $19 = 0;
                               $12 = 0;
                               $17 = __stack_pointer - 16 | 0;
                               __stack_pointer = $17;
                               $6 = HEAP32[$9 + 20 >> 2];
                               $7 = $6 >> 31;
                               $8 = $17 + 12 | 0;
                               $16 = HEAP32[$9 + 16 >> 2];
                               if ($16 >>> 0 >= 12) {
                                $10 = ($16 | 0) / 12 | 0;
                                $5 = $16 - Math_imul($10, 12) | 0;
                                $16 = ($5 | 0) < 0 ? $5 + 12 | 0 : $5;
                                $5 = $10 + ($5 >> 31) | 0;
                                $7 = $7 + ($5 >> 31) | 0;
                                $10 = $6;
                                $6 = $5 + $6 | 0;
                                $7 = $10 >>> 0 > $6 >>> 0 ? $7 + 1 | 0 : $7;
                               }
                               block57 : {
                                if (($6 >>> 0 < 2 | 0) == ($7 | 0) & $6 - 2 >>> 0 <= 136) {
                                 $10 = $6 - 68 >> 2;
                                 block55 : {
                                  block56 : {
                                   if (!($6 & 3)) {
                                    $10 = $10 - 1 | 0;
                                    $19 = !$8;
                                    if ($19) {
                                     break block55
                                    }
                                    $19 = 1;
                                    break block56;
                                   }
                                   $19 = !$8;
                                   if ($19) {
                                    break block55
                                   }
                                   $19 = 0;
                                  }
                                  HEAP32[$8 >> 2] = $19;
                                 }
                                 $6 = (Math_imul($6, 31536e3) + Math_imul($10, 86400) | 0) + 2087447296 | 0;
                                 $7 = $6 >> 31;
                                 break block57;
                                }
                                $5 = $6 - 100 | 0;
                                $10 = $5;
                                $6 = $7 - ($6 >>> 0 < 100) | 0;
                                $20 = $6;
                                $6 = __wasm_i64_sdiv($5, $6, 400);
                                $24 = __wasm_i64_mul($6, i64toi32_i32$HIGH_BITS, 400, 0);
                                $7 = $5 - $24 | 0;
                                $5 = $20 - (i64toi32_i32$HIGH_BITS + ($5 >>> 0 < $24 >>> 0) | 0) | 0;
                                $24 = $6 + ($5 >> 31) | 0;
                                block61 : {
                                 block60 : {
                                  block59 : {
                                   $6 = ($5 | 0) < 0 ? $7 + 400 | 0 : $7;
                                   if ($6) {
                                    block58 : {
                                     if (($6 | 0) >= 200) {
                                      if ($6 >>> 0 >= 300) {
                                       $19 = 3;
                                       $6 = $6 - 300 | 0;
                                       break block58;
                                      }
                                      $19 = 2;
                                      $6 = $6 - 200 | 0;
                                      break block58;
                                     }
                                     $19 = ($6 | 0) > 99;
                                     $6 = $19 ? $6 - 100 | 0 : $6;
                                    }
                                    if ($6) {
                                     break block59
                                    }
                                    $5 = 0;
                                   } else {
                                    $5 = 1
                                   }
                                   if ($8) {
                                    break block60
                                   }
                                   break block61;
                                  }
                                  $12 = $6 >>> 2 | 0;
                                  $5 = !($6 & 3);
                                  if (!$8) {
                                   break block61
                                  }
                                 }
                                 HEAP32[$8 >> 2] = $5;
                                }
                                $7 = __wasm_i64_mul($10, $20, 31536e3, 0);
                                $10 = i64toi32_i32$HIGH_BITS;
                                $6 = ((Math_imul($24, 97) + Math_imul($19, 24) | 0) + $12 | 0) - $5 | 0;
                                $5 = __wasm_i64_mul($6, $6 >> 31, 86400, 0);
                                $6 = $5 + $7 | 0;
                                $7 = i64toi32_i32$HIGH_BITS + $10 | 0;
                                $7 = $5 >>> 0 > $6 >>> 0 ? $7 + 1 | 0 : $7;
                                $6 = $6 + 946771200 | 0;
                                $7 = $6 >>> 0 < 946771200 ? $7 + 1 | 0 : $7;
                               }
                               $24 = HEAP32[$9 + 12 >> 2];
                               $8 = HEAP32[$9 + 8 >> 2];
                               $12 = HEAP32[$9 + 4 >> 2];
                               $10 = $17 + 16 | 0;
                               __stack_pointer = $10;
                               $5 = HEAP32[$9 >> 2];
                               $20 = HEAP32[($16 << 2) + 30208 >> 2];
                               $27 = HEAP32[$17 + 12 >> 2] ? $20 + 86400 | 0 : $20;
                               $17 = ($16 | 0) > 1;
                               $16 = $17 ? $27 : $20;
                               $7 = $7 + ($16 >> 31) | 0;
                               $20 = $6 + $16 | 0;
                               $7 = $20 >>> 0 < $6 >>> 0 ? $7 + 1 | 0 : $7;
                               $27 = $20;
                               $6 = $24 - 1 | 0;
                               $20 = __wasm_i64_mul($6, $6 >> 31, 86400, 0);
                               $6 = $27 + $20 | 0;
                               $7 = i64toi32_i32$HIGH_BITS + $7 | 0;
                               $7 = $6 >>> 0 < $20 >>> 0 ? $7 + 1 | 0 : $7;
                               $8 = __wasm_i64_mul($8, $8 >> 31, 3600, 0);
                               $6 = $8 + $6 | 0;
                               $7 = i64toi32_i32$HIGH_BITS + $7 | 0;
                               $7 = $6 >>> 0 < $8 >>> 0 ? $7 + 1 | 0 : $7;
                               $8 = __wasm_i64_mul($12, $12 >> 31, 60, 0);
                               $6 = $8 + $6 | 0;
                               $7 = i64toi32_i32$HIGH_BITS + $7 | 0;
                               $7 = ($6 >>> 0 < $8 >>> 0 ? $7 + 1 | 0 : $7) + ($5 >> 31) | 0;
                               $5 = $5 + $6 | 0;
                               $7 = $5 >>> 0 < $6 >>> 0 ? $7 + 1 | 0 : $7;
                               $8 = HEAP32[$9 + 36 >> 2];
                               $6 = $5 - $8 | 0;
                               $7 = $7 - (($8 >> 31) + ($5 >>> 0 < $8 >>> 0) | 0) | 0;
                               break block62;
                              case 46:
                               $6 = HEAP32[$9 >> 2];
                               $7 = $6 >> 31;
                               break block50;
                              case 79:
                               HEAP32[$14 >> 2] = 1;
                               $5 = 14302;
                               break block11;
                              case 47:
                               $16 = 10613;
                               break block15;
                              case 80:
                               $6 = HEAP32[$9 + 24 >> 2];
                               $6 = $6 ? $6 : 7;
                               $7 = $6 >> 31;
                               break block62;
                              case 48:
                               $5 = HEAP32[$9 + 28 >> 2];
                               $9 = HEAP32[$9 + 24 >> 2];
                               $5 = (($5 - $9 | 0) + 7 >>> 0) / 7 | 0;
                               $6 = $5;
                               $7 = 0;
                               break block50;
                              case 50:
                               $5 = HEAP32[$9 + 28 >> 2];
                               $9 = (HEAP32[$9 + 24 >> 2] + 6 >>> 0) % 7 | 0;
                               $5 = (($5 - $9 | 0) + 7 >>> 0) / 7 | 0;
                               $6 = $5;
                               $7 = 0;
                               break block50;
                              case 49:
                               $5 = week_num($9);
                               $6 = $5;
                               $7 = 0;
                               break block50;
                              case 0:
                               break block10;
                              case 31:
                               break block15;
                              case 51:
                               break block27;
                              case 52:
                               break block28;
                              case 53:
                               break block29;
                              case 62:
                               break block32;
                              case 77:
                               break block39;
                              case 82:
                               break block43;
                              case 83:
                               break block44;
                              case 84:
                               break block45;
                              case 85:
                               break block46;
                              default:
                               break block11;
                              };
                             }
                             $6 = HEAP32[$9 + 24 >> 2];
                             $7 = $6 >> 31;
                            }
                            $5 = 1;
                            break block54;
                           }
                           $17 = 131113;
                           break block32;
                          }
                          $17 = 131114;
                          break block32;
                         }
                         $6 = HEAP32[$9 + 20 >> 2];
                         $7 = $6 >> 31;
                         $6 = $6 + 1900 | 0;
                         $7 = $6 >>> 0 < 1900 ? $7 + 1 | 0 : $7;
                         $7 = __wasm_i64_srem($6, $7);
                         $6 = i64toi32_i32$HIGH_BITS;
                         $20 = $6;
                         $12 = $7;
                         $7 = $6 >> 31;
                         $8 = $7;
                         $12 = $12 ^ $8;
                         $6 = $12 - $8 | 0;
                         $7 = ($8 ^ $20) - (($8 >>> 0 > $12 >>> 0) + $8 | 0) | 0;
                         break block50;
                        }
                        $6 = HEAP32[$9 + 20 >> 2];
                        $7 = $6 >> 31;
                        $8 = $6;
                        $5 = $7;
                        $6 = $6 + 1900 | 0;
                        $7 = $6 >>> 0 < 1900 ? $5 + 1 | 0 : $5;
                        $5 = $8 >>> 0 < 8100 & ($5 | 0) <= 0 | ($5 | 0) < 0;
                        if ($5) {
                         break block53
                        }
                        HEAP32[$15 + 48 >> 2] = $6;
                        HEAP32[$15 + 52 >> 2] = $7;
                        $5 = $15 + 48 | 0;
                       }
                       if (!global$9 | !$22) {
                        $8 = snprintf($11, 8336, $5);
                        $12 = 0;
                        if ((global$9 | 0) == 1) {
                         break block63
                        }
                        $5 = $8;
                       }
                       if (!global$9) {
                        HEAP32[$14 >> 2] = $5;
                        $5 = $11;
                        break block11;
                       }
                      }
                      if (!global$9) {
                       if (HEAP32[$9 + 32 >> 2] < 0) {
                        HEAP32[$14 >> 2] = 0;
                        $5 = 14303;
                        break block11;
                       }
                       $5 = HEAP32[$9 + 36 >> 2];
                       $9 = ($5 | 0) / 3600 | 0;
                       $10 = Math_imul($9, 100);
                       $9 = Math_imul($9, 3600);
                       HEAP32[$15 + 64 >> 2] = $10 + (($5 - $9 << 16 >> 16) / 60 << 16 >> 16);
                       $5 = $15 - -64 | 0;
                      }
                      if (!global$9 | ($22 | 0) == 1) {
                       $8 = snprintf($11, 8342, $5);
                       $12 = 1;
                       if ((global$9 | 0) == 1) {
                        break block63
                       }
                       $5 = $8;
                      }
                      if (!global$9) {
                       HEAP32[$14 >> 2] = $5;
                       $5 = $11;
                       break block11;
                      }
                     }
                     if (!global$9) {
                      $5 = HEAP32[$9 + 32 >> 2] < 0;
                      if ($5) {
                       HEAP32[$14 >> 2] = 0;
                       $5 = 14303;
                       break block11;
                      }
                      $9 = HEAP32[$9 + 40 >> 2];
                     }
                     if (!global$9 | ($22 | 0) == 2) {
                      __lock(78236);
                      $12 = 2;
                      if ((global$9 | 0) == 1) {
                       break block63
                      }
                     }
                     if (!global$9) {
                      $5 = !(Atomics.load(HEAPU8, 78264) & 1)
                     }
                     if ((global$9 | 0) == 2 | $5) {
                      if (!global$9 | ($22 | 0) == 3) {
                       $8 = __pthread_mutex_lock(78240);
                       $12 = 3;
                       if ((global$9 | 0) == 1) {
                        break block63
                       }
                       $5 = $8;
                      }
                      if (!global$9) {
                       if (!(Atomics.load(HEAPU8, 78264) & 1)) {
                        _tzset_js(78220, 78224, 78272, 78304);
                        HEAP32[19558] = 78304;
                        HEAP32[19557] = 78272;
                        Atomics.store(HEAP8, 78264, 1);
                       }
                       $5 = __pthread_mutex_unlock(78240);
                      }
                     }
                     if (!global$9) {
                      __unlock(78236);
                      $5 = $9;
                      break block64;
                     }
                    }
                    if (!global$9) {
                     HEAP32[$14 >> 2] = 1;
                     $5 = 13016;
                     break block11;
                    }
                   }
                   if (!global$9) {
                    $6 = __wasm_i64_srem($6, $7);
                    $7 = i64toi32_i32$HIGH_BITS;
                    break block50;
                   }
                  }
                  $5 = global$9 ? $5 : $5 | 131072;
                 }
                 if (!global$9) {
                  $5 = __nl_langinfo_l($5, $4);
                  break block64;
                 }
                }
                $17 = global$9 ? $17 : 131115;
               }
               if (!global$9) {
                $16 = __nl_langinfo_l($17, $4)
               }
              }
              if (!global$9 | ($22 | 0) == 4) {
               $8 = __strftime_l($11, 100, $16, $9, $4);
               $12 = 4;
               if ((global$9 | 0) == 1) {
                break block63
               }
               $5 = $8;
              }
              if (!global$9) {
               HEAP32[$14 >> 2] = $5;
               $5 = $5 ? $11 : 0;
               break block11;
              }
             }
             if (!global$9) {
              $5 = 2;
              break block54;
             }
            }
            $5 = global$9 ? $5 : 4;
           }
           if (!global$9) {
            $9 = $21 ? $21 : $25;
            $10 = ($9 | 0) != 95;
           }
           block65 : {
            if ((global$9 | 0) == 2 | $10) {
             if (!global$9) {
              $9 = ($9 | 0) != 45;
              if ($9) {
               break block65
              }
              HEAP32[$15 + 16 >> 2] = $6;
              HEAP32[$15 + 20 >> 2] = $7;
              $5 = $15 + 16 | 0;
             }
             if (!global$9 | ($22 | 0) == 5) {
              $8 = snprintf($11, 8337, $5);
              $12 = 5;
              if ((global$9 | 0) == 1) {
               break block63
              }
              $5 = $8;
             }
             if (!global$9) {
              HEAP32[$14 >> 2] = $5;
              $5 = $11;
              break block11;
             }
            }
            if (!global$9) {
             HEAP32[$15 + 40 >> 2] = $6;
             HEAP32[$15 + 44 >> 2] = $7;
             HEAP32[$15 + 32 >> 2] = $5;
             $5 = $15 + 32 | 0;
            }
            if (!global$9 | ($22 | 0) == 6) {
             $8 = snprintf($11, 8330, $5);
             $12 = 6;
             if ((global$9 | 0) == 1) {
              break block63
             }
             $5 = $8;
            }
            if (!global$9) {
             HEAP32[$14 >> 2] = $5;
             $5 = $11;
             break block11;
            }
           }
           if (!global$9) {
            HEAP32[$15 + 8 >> 2] = $6;
            HEAP32[$15 + 12 >> 2] = $7;
            HEAP32[$15 >> 2] = $5;
           }
           if (!global$9 | ($22 | 0) == 7) {
            $8 = snprintf($11, 8323, $15);
            $12 = 7;
            if ((global$9 | 0) == 1) {
             break block63
            }
            $5 = $8;
           }
           if (!global$9) {
            HEAP32[$14 >> 2] = $5;
            $5 = $11;
            break block11;
           }
          }
          $5 = global$9 ? $5 : 11923;
         }
         if (!global$9) {
          $11 = strlen($5);
          HEAP32[$14 >> 2] = $11;
         }
        }
        if (!global$9) {
         __stack_pointer = $15 + 80 | 0;
         $21 = $5;
         if (!$5) {
          break block66
         }
         block67 : {
          if (!$23) {
           $11 = HEAP32[$18 + 124 >> 2];
           break block67;
          }
          block70 : {
           block68 : {
            block69 : {
             $10 = HEAPU8[$21 | 0];
             switch ($10 - 43 | 0) {
             case 0:
             case 2:
              break block68;
             default:
              break block69;
             };
            }
            $11 = HEAP32[$18 + 124 >> 2];
            break block70;
           }
           $10 = HEAPU8[$21 + 1 | 0];
           $21 = $21 + 1 | 0;
           $11 = HEAP32[$18 + 124 >> 2] - 1 | 0;
          }
          block71 : {
           if (($10 & 255) != 48) {
            break block71
           }
           while (1) {
            $5 = HEAP8[$21 + 1 | 0];
            if ($5 - 48 >>> 0 > 9) {
             break block71
            }
            $21 = $21 + 1 | 0;
            $11 = $11 - 1 | 0;
            if (($5 | 0) == 48) {
             continue
            }
            break;
           };
          }
          HEAP32[$18 + 124 >> 2] = $11;
          $10 = 0;
          while (1) {
           $5 = $10;
           $10 = $5 + 1 | 0;
           if (HEAP8[$5 + $21 | 0] - 48 >>> 0 < 10) {
            continue
           }
           break;
          };
          $10 = $11 >>> 0 < $23 >>> 0 ? $23 : $11;
          $9 = $0 + $13 | 0;
          $14 = HEAP32[$3 + 20 >> 2] < -1900;
          block72 : {
           if ($14) {
            $5 = 45
           } else {
            $14 = ($26 | 0) != 43;
            if ($14) {
             break block72
            }
            $14 = HEAPU8[HEAP32[$18 + 12 >> 2]] == 67 ? 3 : 5;
            if ($14 >>> 0 > $5 + ($10 - $11 | 0) >>> 0) {
             break block72
            }
            $5 = 43;
           }
           HEAP8[$9 | 0] = $5;
           $10 = $10 - 1 | 0;
           $13 = $13 + 1 | 0;
          }
          if ($10 >>> 0 <= $11 >>> 0 | $1 >>> 0 <= $13 >>> 0) {
           break block67
          }
          while (1) {
           HEAP8[$0 + $13 | 0] = 48;
           $13 = $13 + 1 | 0;
           $10 = $10 - 1 | 0;
           if ($11 >>> 0 >= $10 >>> 0) {
            break block67
           }
           if ($1 >>> 0 > $13 >>> 0) {
            continue
           }
           break;
          };
         }
         $5 = $1 - $13 | 0;
         $10 = $5 >>> 0 > $11 >>> 0 ? $11 : $5;
         HEAP32[$18 + 124 >> 2] = $10;
         __memcpy($0 + $13 | 0, $21, $10);
         $13 = HEAP32[$18 + 124 >> 2] + $13 | 0;
        }
       }
       if (!global$9) {
        $2 = $2 + 1 | 0;
        $5 = $1 >>> 0 > $13 >>> 0;
        if ($5) {
         continue
        }
       }
      }
      break;
     };
     if (!global$9) {
      $13 = ($1 | 0) == ($13 | 0) ? $1 - 1 | 0 : $13;
      $10 = 0;
     }
    }
    if (!global$9) {
     HEAP8[$0 + $13 | 0] = 0
    }
   }
   if (!global$9) {
    __stack_pointer = $18 + 128 | 0;
    return $10;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $9;
  HEAP32[$8 + 28 >> 2] = $10;
  HEAP32[$8 + 32 >> 2] = $6;
  HEAP32[$8 + 36 >> 2] = $7;
  HEAP32[$8 + 40 >> 2] = $11;
  HEAP32[$8 + 44 >> 2] = $13;
  HEAP32[$8 + 48 >> 2] = $14;
  HEAP32[$8 + 52 >> 2] = $16;
  HEAP32[$8 + 56 >> 2] = $17;
  HEAP32[$8 + 60 >> 2] = $18;
  HEAP32[$8 + 64 >> 2] = $21;
  HEAP32[$8 + 68 >> 2] = $15;
  HEAP32[$8 + 72 >> 2] = $19;
  HEAP32[$8 + 76 >> 2] = $23;
  HEAP32[$8 + 80 >> 2] = $25;
  HEAP32[$8 + 84 >> 2] = $26;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 88;
  return 0;
 }
 
 function is_leap($0) {
  $0 = ($0 | 0) > 2147481747 ? $0 - 2e3 | 0 : $0;
  if ($0 & 3) {
   return 0
  }
  $0 = $0 + 1900 | 0;
  if (($0 | 0) % 100 | 0) {
   return 1
  }
  return !(($0 | 0) % 400 | 0);
 }
 
 function pthread_cond_broadcast($0) {
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!(global$9 ? 1 : HEAP32[$0 >> 2]) | (global$9 | 0) == 2) {
    if (!global$9 | !$1) {
     $1 = __private_cond_signal($0, -1);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $1;
    }
    if (!global$9) {
     return $0
    }
   }
   if (!global$9) {
    if (HEAP32[$0 + 12 >> 2]) {
     $0 = $0 + 8 | 0;
     a_inc($0);
     __wake_563($0);
    }
    return 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2____libcpp_condvar_wait_5babi_nn190106_5d_28pthread_cond_t__2c_20pthread_mutex_t__29($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    pthread_cond_wait($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function freelocale($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9) {
    $2 = __loc_is_allocated($0)
   }
   if (!global$9 | !$1 ? $2 | (global$9 | 0) == 2 : 0) {
    emscripten_builtin_free($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function mbsrtowcs($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $7 = global$9;
  $4 = HEAP32[$1 >> 2];
  block4 : {
   block20 : {
    block19 : {
     block10 : {
      block12 : {
       block8 : {
        block6 : {
         block7 : {
          block5 : {
           block1 : {
            block2 : {
             block : {
              if (!$3) {
               break block
              }
              $6 = HEAP32[$3 >> 2];
              if (!$6) {
               break block
              }
              if (!$0) {
               $3 = $2;
               break block1;
              }
              HEAP32[$3 >> 2] = 0;
              $3 = $2;
              break block2;
             }
             block3 : {
              if (!HEAP32[HEAP32[thread_ptr + 96 >> 2] >> 2]) {
               if (!$0) {
                break block3
               }
               if (!$2) {
                break block4
               }
               $6 = $2;
               while (1) {
                $3 = HEAP8[$4 | 0];
                if ($3) {
                 HEAP32[$0 >> 2] = $3 & 57343;
                 $0 = $0 + 4 | 0;
                 $4 = $4 + 1 | 0;
                 $6 = $6 - 1 | 0;
                 if ($6) {
                  continue
                 }
                 break block4;
                }
                break;
               };
               HEAP32[$0 >> 2] = 0;
               HEAP32[$1 >> 2] = 0;
               return $2 - $6 | 0;
              }
              $3 = $2;
              if (!$0) {
               break block5
              }
              break block6;
             }
             $0 = strlen($4);
             if ((global$9 | 0) != ($7 | 0)) {
              wasm2js_trap()
             }
             return $0;
            }
            $5 = 1;
            break block6;
           }
           $5 = 0;
           break block7;
          }
          $5 = 1;
         }
         while (1) {
          if (!$5) {
           $5 = HEAPU8[$4 | 0] >>> 3 | 0;
           if (($5 - 16 | $5 + ($6 >> 26)) >>> 0 > 7) {
            break block8
           }
           $5 = $4 + 1 | 0;
           block9 : {
            if (!($6 & 33554432)) {
             break block9
            }
            if (HEAP8[$5 | 0] >= -64) {
             $4 = $4 - 1 | 0;
             break block10;
            }
            $5 = $4 + 2 | 0;
            if (!($6 & 524288)) {
             break block9
            }
            if (HEAP8[$5 | 0] >= -64) {
             $4 = $4 - 1 | 0;
             break block10;
            }
            $5 = $4 + 3 | 0;
           }
           $4 = $5;
           $3 = $3 - 1 | 0;
           $5 = 1;
           continue;
          }
          while (1) {
           $6 = HEAP8[$4 | 0];
           block11 : {
            if ($4 & 3 | ($6 | 0) <= 0) {
             break block11
            }
            $6 = HEAP32[$4 >> 2];
            if (($6 | $6 - 16843009) & -2139062144) {
             break block11
            }
            while (1) {
             $3 = $3 - 4 | 0;
             $6 = HEAP32[$4 + 4 >> 2];
             $4 = $4 + 4 | 0;
             if (!(($6 - 16843009 | $6) & -2139062144)) {
              continue
             }
             break;
            };
           }
           if ($6 << 24 >> 24 > 0) {
            $3 = $3 - 1 | 0;
            $4 = $4 + 1 | 0;
            continue;
           }
           break;
          };
          $5 = ($6 & 255) - 194 | 0;
          if ($5 >>> 0 > 50) {
           break block12
          }
          $4 = $4 + 1 | 0;
          $6 = HEAP32[($5 << 2) + 28480 >> 2];
          $5 = 0;
          continue;
         };
        }
        while (1) {
         if (!$5) {
          if (!$3) {
           break block4
          }
          while (1) {
           block13 : {
            $5 = HEAPU8[$4 | 0];
            $6 = $5 << 24 >> 24;
            if (($6 | 0) <= 0) {
             break block13
            }
            if (!($4 & 3 | $3 >>> 0 < 5)) {
             block15 : {
              while (1) {
               $6 = HEAP32[$4 >> 2];
               if (($6 | $6 - 16843009) & -2139062144) {
                break block15
               }
               HEAP32[$0 >> 2] = $6 & 255;
               HEAP32[$0 + 4 >> 2] = HEAPU8[$4 + 1 | 0];
               HEAP32[$0 + 8 >> 2] = HEAPU8[$4 + 2 | 0];
               HEAP32[$0 + 12 >> 2] = HEAPU8[$4 + 3 | 0];
               $0 = $0 + 16 | 0;
               $4 = $4 + 4 | 0;
               $3 = $3 - 4 | 0;
               if ($3 >>> 0 > 4) {
                continue
               }
               break;
              };
              $6 = HEAPU8[$4 | 0];
             }
             $5 = $6 & 255;
             if ($6 << 24 >> 24 <= 0) {
              break block13
             }
            }
            HEAP32[$0 >> 2] = $5;
            $0 = $0 + 4 | 0;
            $4 = $4 + 1 | 0;
            $3 = $3 - 1 | 0;
            if ($3) {
             continue
            }
            break block4;
           }
           break;
          };
          $5 = $5 - 194 | 0;
          if ($5 >>> 0 > 50) {
           break block12
          }
          $4 = $4 + 1 | 0;
          $6 = HEAP32[($5 << 2) + 28480 >> 2];
          $5 = 1;
          continue;
         }
         $5 = HEAPU8[$4 | 0];
         $7 = $5 >>> 3 | 0;
         if (($7 - 16 | $7 + ($6 >> 26)) >>> 0 > 7) {
          break block8
         }
         block18 : {
          block17 : {
           $7 = $4 + 1 | 0;
           $5 = $5 - 128 | $6 << 6;
           block16 : {
            if (($5 | 0) >= 0) {
             break block16
            }
            $7 = HEAPU8[$7 | 0] - 128 | 0;
            if ($7 >>> 0 > 63) {
             break block17
            }
            $8 = $5 << 6;
            $5 = $7 | $8;
            $7 = $4 + 2 | 0;
            if (($8 | 0) >= 0) {
             break block16
            }
            $7 = HEAPU8[$7 | 0] - 128 | 0;
            if ($7 >>> 0 > 63) {
             break block17
            }
            $5 = $7 | $5 << 6;
            $7 = $4 + 3 | 0;
           }
           $4 = $7;
           HEAP32[$0 >> 2] = $5;
           $3 = $3 - 1 | 0;
           $0 = $0 + 4 | 0;
           break block18;
          }
          HEAP32[__tls_base >> 2] = 25;
          $4 = $4 - 1 | 0;
          break block19;
         }
         $5 = 0;
         continue;
        };
       }
       $4 = $4 - 1 | 0;
       if ($6) {
        break block10
       }
       $6 = HEAPU8[$4 | 0];
      }
      if ($6 & 255) {
       break block10
      }
      if ($0) {
       HEAP32[$0 >> 2] = 0;
       HEAP32[$1 >> 2] = 0;
      }
      return $2 - $3 | 0;
     }
     HEAP32[__tls_base >> 2] = 25;
     if (!$0) {
      break block20
     }
    }
    HEAP32[$1 >> 2] = $4;
   }
   return -1;
  }
  HEAP32[$1 >> 2] = $4;
  return $2;
 }
 
 function __uselocale($0) {
  var $1 = 0, $2 = 0;
  $1 = thread_ptr;
  $2 = HEAP32[$1 + 96 >> 2];
  if ($0) {
   HEAP32[$1 + 96 >> 2] = ($0 | 0) == -1 ? 73136 : $0
  }
  return ($2 | 0) == 73136 ? -1 : $2;
 }
 
 function strtoull_l($0, $1, $2) {
  var $3 = 0;
  $3 = global$9;
  $0 = strtox($0, $1, $2, -1, -1);
  $1 = i64toi32_i32$HIGH_BITS;
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  i64toi32_i32$HIGH_BITS = $1;
  return $0;
 }
 
 function strtoll_l($0, $1, $2) {
  var $3 = 0;
  $3 = global$9;
  $0 = strtox($0, $1, $2, 0, -2147483648);
  $1 = i64toi32_i32$HIGH_BITS;
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  i64toi32_i32$HIGH_BITS = $1;
  return $0;
 }
 
 function strtox_1143($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $6 = HEAP32[$5 + 20 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 160 | 0;
   __stack_pointer = $4;
   HEAP32[$4 + 60 >> 2] = $1;
   HEAP32[$4 + 20 >> 2] = $1;
   HEAP32[$4 + 24 >> 2] = -1;
   $6 = $4 + 16 | 0;
   __shlim($6, 0, 0);
  }
  block : {
   if (!global$9 | !$7) {
    __floatscan($4, $6, $3, 1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = HEAP32[$4 + 8 >> 2];
    $6 = HEAP32[$4 + 12 >> 2];
    $5 = HEAP32[$4 >> 2];
    $7 = HEAP32[$4 + 4 >> 2];
    if ($2) {
     HEAP32[$2 >> 2] = HEAP32[$4 + 136 >> 2] + ((HEAP32[$4 + 20 >> 2] - HEAP32[$4 + 60 >> 2] | 0) + $1 | 0)
    }
    HEAP32[$0 + 8 >> 2] = $3;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 >> 2] = $5;
    HEAP32[$0 + 4 >> 2] = $7;
    __stack_pointer = $4 + 160 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function std____2__collate_char____collate_28_29_1151($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    emscripten_builtin_free($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0;
  $7 = ($4 - $3 | 0) + $1 | 0;
  block : {
   while (1) {
    if (($3 | 0) != ($4 | 0)) {
     $0 = -1;
     if (($1 | 0) == ($2 | 0)) {
      break block
     }
     $5 = HEAP8[$1 | 0];
     $6 = HEAP8[$3 | 0];
     if (($5 | 0) < ($6 | 0)) {
      break block
     }
     if (($5 | 0) > ($6 | 0)) {
      return 1
     } else {
      $3 = $3 + 1 | 0;
      $1 = $1 + 1 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($2 | 0) != ($7 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
  }
  block : {
   if (!global$9 | !$4) {
    void_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_char__2c_200__28char__2c_20char__29($0, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $1 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP8[$1 | 0] + ($0 << 4) | 0;
    $3 = $0 & -268435456;
    $0 = ($3 | $3 >>> 24) ^ $0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  block : {
   while (1) {
    if (($3 | 0) != ($4 | 0)) {
     $0 = -1;
     if (($1 | 0) == ($2 | 0)) {
      break block
     }
     $5 = HEAP32[$1 >> 2];
     $6 = HEAP32[$3 >> 2];
     if (($5 | 0) < ($6 | 0)) {
      break block
     }
     if (($5 | 0) > ($6 | 0)) {
      return 1
     } else {
      $3 = $3 + 4 | 0;
      $1 = $1 + 4 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($1 | 0) != ($2 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
  }
  block : {
   if (!global$9 | !$4) {
    void_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______init_wchar_t_20const__2c_200__28wchar_t_20const__2c_20wchar_t_20const__29($0, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $1 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function void_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______init_wchar_t_20const__2c_200__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $4 = HEAP32[$3 + 12 >> 2];
   $5 = HEAP32[$3 + 16 >> 2];
   $7 = HEAP32[$3 + 20 >> 2];
   $3 = HEAP32[$3 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_5babi_nn190106_5d_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $4 = $7 >>> 0 <= 1073741815;
  }
  block1 : {
   block2 : {
    if ((global$9 | 0) == 2 | $4) {
     if (!global$9) {
      $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($7)
     }
     block : {
      if (!global$9) {
       if ($4) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $7);
        $4 = $0;
        break block;
       }
       $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn190106_5d_28unsigned_20long_29($7) + 1 | 0;
       $4 = $5 + 8 | 0;
      }
      if (!global$9 | !$6) {
       auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_wchar_t___28std____2__allocator_wchar_t___2c_20unsigned_20long_29($4, $3);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $4 = HEAP32[$5 + 8 >> 2];
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $4);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$5 + 12 >> 2]);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $7);
      }
     }
     if (!global$9) {
      $0 = wchar_t__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______copy_non_overlapping_range_5babi_nn190106_5d_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__2c_20wchar_t__29($1, $2, $4);
      HEAP32[$5 + 4 >> 2] = 0;
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($0, $5 + 4 | 0);
      __stack_pointer = $5 + 16 | 0;
      break block2;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
     wasm2js_trap();
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 16 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = $7;
  HEAP32[$6 + 24 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$1 >> 2] + ($0 << 4) | 0;
    $3 = $0 & -268435456;
    $0 = ($3 | $3 >>> 24) ^ $0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 32 | 0;
   __stack_pointer = $6;
   HEAP32[$6 + 28 >> 2] = $1;
   $10 = !(HEAP32[$3 + 4 >> 2] & 1);
  }
  block : {
   block4 : {
    if ((global$9 | 0) == 2 | $10) {
     if (!global$9) {
      HEAP32[$6 >> 2] = -1;
      $10 = HEAP32[HEAP32[$0 >> 2] + 16 >> 2];
     }
     if (!global$9 | !$8) {
      $7 = FUNCTION_TABLE[$10 | 0]($0, $1, $2, $3, $4, $6) | 0;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $7;
     }
     if (!global$9) {
      block3 : {
       switch (HEAP32[$6 >> 2]) {
       case 0:
        HEAP8[$5 | 0] = 0;
        break block4;
       case 1:
        HEAP8[$5 | 0] = 1;
        break block4;
       default:
        break block3;
       };
      }
      HEAP8[$5 | 0] = 1;
      HEAP32[$4 >> 2] = 4;
      break block4;
     }
    }
    if (!global$9) {
     std____2__ios_base__getloc_28_29_20const($6, $3)
    }
    if (!global$9 | ($8 | 0) == 1) {
     $7 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($6);
     $9 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $7;
    }
    if (!global$9 | ($8 | 0) == 2) {
     std____2__locale___locale_28_29($6);
     $9 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     std____2__ios_base__getloc_28_29_20const($6, $3)
    }
    if (!global$9 | ($8 | 0) == 3) {
     $7 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_char___28std____2__locale_20const__29($6);
     $9 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $3 = $7;
    }
    if (!global$9 | ($8 | 0) == 4) {
     std____2__locale___locale_28_29($6);
     $9 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($8 | 0) == 5) {
     std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($6, $3);
     $9 = 5;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $6 | 12;
    if (!global$9 | ($8 | 0) == 6) {
     std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $3);
     $9 = 6;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $3 = $6 + 24 | 0;
     $0 = $6 + 28 | 0;
    }
    if (!global$9 | ($8 | 0) == 7) {
     $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($0, $2, $6, $3, $1, $4, 1);
     $9 = 7;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $7;
    }
    if (!global$9) {
     $0 = ($0 | 0) == ($6 | 0);
     HEAP8[$5 | 0] = $0;
     $1 = HEAP32[$6 + 28 >> 2];
    }
    while (1) {
     $0 = global$9 ? $0 : $3 - 12 | 0;
     if (!global$9 | ($8 | 0) == 8) {
      $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      $9 = 8;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $7;
     }
     if (!global$9) {
      $0 = ($3 | 0) != ($6 | 0);
      if ($0) {
       continue
      }
     }
     break;
    };
   }
   if (!global$9) {
    __stack_pointer = $6 + 32 | 0;
    return $1 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__locale___locale_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (global$9) {
    $1 = 0
   } else {
    $0 = HEAP32[$0 >> 2];
    $1 = ($0 | 0) != 78568;
   }
   if (!global$9 | !$2 ? $1 | (global$9 | 0) == 2 : 0) {
    std____2____shared_count____release_shared_5babi_nn190106_5d_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_char___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78808);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$1 >> 2] + 24 >> 2];
  block : {
   if (!global$9 | !$3) {
    FUNCTION_TABLE[$2 | 0]($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$1 >> 2] + 28 >> 2];
  block : {
   if (!global$9 | !$3) {
    FUNCTION_TABLE[$2 | 0]($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 84;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $14 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $20 = HEAP32[$1 + 60 >> 2];
   $18 = HEAP32[$1 + 64 >> 2];
   $21 = HEAP32[$1 + 68 >> 2];
   $22 = HEAP32[$1 + 72 >> 2];
   $19 = HEAP32[$1 + 76 >> 2];
   $23 = HEAP32[$1 + 80 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $12 = __stack_pointer - 128 | 0;
   __stack_pointer = $12;
   HEAP32[$12 + 124 >> 2] = $1;
   $11 = std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____difference_type_20std____2__distance_5babi_nn190106_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($2, $3);
   HEAP32[$12 + 16 >> 2] = 282;
   $10 = $12 + 16 | 0;
   $20 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($12 + 8 | 0, 0, $10);
   $1 = $11 >>> 0 >= 101;
  }
  block : {
   block3 : {
    block2 : {
     block1 : {
      if ((global$9 | 0) == 2 | $1) {
       if (!global$9 | !$13) {
        $7 = emscripten_builtin_malloc($11);
        if ((global$9 | 0) == 1) {
         break block
        }
        $10 = $7;
       }
       if (!global$9) {
        $1 = !$10;
        if ($1) {
         break block1
        }
       }
       if (!global$9 | ($13 | 0) == 1) {
        std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($20, $10);
        $15 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
      }
      if (!global$9) {
       $9 = $10;
       $1 = $2;
      }
      while (1) {
       $8 = global$9 ? $8 : ($1 | 0) == ($3 | 0);
       $18 = global$9 ? $18 : $8;
       if ($18 | (global$9 | 0) == 2) {
        label1 : while (1) {
         $1 = global$9 ? $1 : $12 + 124 | 0;
         if (!global$9 | ($13 | 0) == 2) {
          $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
          $15 = 2;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $7;
         }
         $1 = global$9 ? $1 : $11 ? $1 : 1;
         if ($1 | (global$9 | 0) == 2) {
          $1 = global$9 ? $1 : $12 + 124 | 0;
          if (!global$9 | ($13 | 0) == 3) {
           $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
           $15 = 3;
           if ((global$9 | 0) == 1) {
            break block
           }
           $0 = $7;
          }
          if (!global$9) {
           if ($0) {
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
           }
           while (1) {
            if (($2 | 0) == ($3 | 0)) {
             break block2
            }
            if (HEAPU8[$10 | 0] == 2) {
             break block3
            }
            $10 = $10 + 1 | 0;
            $2 = $2 + 12 | 0;
            continue;
           };
          }
         }
         if (!global$9 | ($13 | 0) == 4) {
          $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
          $15 = 4;
          if ((global$9 | 0) == 1) {
           break block
          }
          $17 = $7;
         }
         $1 = global$9 ? $1 : !$6;
         if (!global$9 | ($13 | 0) == 5 ? $1 | (global$9 | 0) == 2 : 0) {
          $7 = std____2__ctype_char___toupper_5babi_nn190106_5d_28char_29_20const($4, $17);
          $15 = 5;
          if ((global$9 | 0) == 1) {
           break block
          }
          $17 = $7;
         }
         if (!global$9) {
          $16 = $21 + 1 | 0;
          $22 = 0;
          $9 = $10;
          $1 = $2;
         }
         while (1) {
          $8 = global$9 ? $8 : ($1 | 0) == ($3 | 0);
          $19 = global$9 ? $19 : $8;
          if ($19 | (global$9 | 0) == 2) {
           if (!global$9) {
            $21 = $16;
            $1 = !$22;
            if ($1) {
             continue label1
            }
           }
           if (!global$9 | ($13 | 0) == 6) {
            $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
            $15 = 6;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $7;
           }
           if (!global$9) {
            $9 = $10;
            $1 = $2;
            $8 = $11 + $14 >>> 0 < 2;
            if ($8) {
             continue label1
            }
            while (1) {
             $8 = ($1 | 0) == ($3 | 0);
             if ($8) {
              continue label1
             }
             block4 : {
              if (HEAPU8[$9 | 0] != 2) {
               break block4
              }
              if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1) | 0) == ($16 | 0)) {
               break block4
              }
              HEAP8[$9 | 0] = 0;
              $14 = $14 - 1 | 0;
             }
             $9 = $9 + 1 | 0;
             $1 = $1 + 12 | 0;
             continue;
            };
           }
          }
          if (!$19 | (global$9 | 0) == 2) {
           $8 = global$9 ? $8 : HEAPU8[$9 | 0] != 1;
           block5 : {
            if (!global$9) {
             if ($8) {
              break block5
             }
             $8 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($1, $21) | 0];
            }
            $23 = global$9 ? $23 : $6;
            if ((!$23 | (global$9 | 0) == 2) & (!global$9 | ($13 | 0) == 7)) {
             $7 = std____2__ctype_char___toupper_5babi_nn190106_5d_28char_29_20const($4, $8);
             $15 = 7;
             if ((global$9 | 0) == 1) {
              break block
             }
             $8 = $7;
            }
            if (!global$9) {
             $8 = ($8 | 0) == ($17 | 0);
             block6 : {
              if ($8) {
               $22 = 1;
               $8 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1) | 0) != ($16 | 0);
               if ($8) {
                break block5
               }
               HEAP8[$9 | 0] = 2;
               $14 = $14 + 1 | 0;
               break block6;
              }
              HEAP8[$9 | 0] = 0;
             }
             $11 = $11 - 1 | 0;
            }
           }
           if (!global$9) {
            $9 = $9 + 1 | 0;
            $1 = $1 + 12 | 0;
            continue;
           }
          }
          break;
         };
         break;
        }
       }
       if (!global$9 & (!$18 | (global$9 | 0) == 2)) {
        $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($1);
        $16 = $8 ? 2 : 1;
        HEAP8[$9 | 0] = $16;
        $9 = $9 + 1 | 0;
        $1 = $1 + 12 | 0;
        $14 = $8 + $14 | 0;
        $11 = $11 - $8 | 0;
        continue;
       }
       break;
      };
     }
     if (!global$9) {
      std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
      wasm2js_trap();
     }
    }
    if (!global$9) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4
    }
   }
   if (!global$9 | ($13 | 0) == 8) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($20);
    $15 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $12 + 128 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $15;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[$7 + 32 >> 2] = $9;
  HEAP32[$7 + 36 >> 2] = $11;
  HEAP32[$7 + 40 >> 2] = $10;
  HEAP32[$7 + 44 >> 2] = $12;
  HEAP32[$7 + 48 >> 2] = $14;
  HEAP32[$7 + 52 >> 2] = $16;
  HEAP32[$7 + 56 >> 2] = $17;
  HEAP32[$7 + 60 >> 2] = $20;
  HEAP32[$7 + 64 >> 2] = $18;
  HEAP32[$7 + 68 >> 2] = $21;
  HEAP32[$7 + 72 >> 2] = $22;
  HEAP32[$7 + 76 >> 2] = $19;
  HEAP32[$7 + 80 >> 2] = $23;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 84;
  return 0;
 }
 
 function std____2__locale__use_facet_28std____2__locale__id__29_20const($0, $1) {
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : HEAP32[$0 >> 2];
  block : {
   if (!global$9 | !$2) {
    $2 = std____2__locale__id____get_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    $2 = $0 + 8 | 0;
    if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($2) >>> 0 > $1 >>> 0) {
     $2 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29($2, $1) >> 2] != 0
    } else {
     $2 = 0
    }
    if (!$2) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
    return HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29($0 + 8 | 0, $1) >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____difference_type_20std____2__distance_5babi_nn190106_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1) {
  return ($1 - $0 | 0) / 12 | 0;
 }
 
 function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $1;
  $0 = std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_void_20_28__29_28void__29_2c_200__28void_20_28____29_28void__29_29($0, $3 + 12 | 0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_void_20_28__29_28void__29_2c_200__28void_20_28____29_28void__29_29($0 + 4 | 0, $2);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $1;
  }
  block : {
   if ((global$9 | 0) == 2 | $2) {
    if (!global$9) {
     $0 = HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_5babi_nn190106_5d_28_29($0) >> 2]
    }
    if (!global$9 | !$3) {
     FUNCTION_TABLE[$0 | 0]($2);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__ctype_char___toupper_5babi_nn190106_5d_28char_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
  block : {
   if (!global$9 | !$3) {
    $3 = FUNCTION_TABLE[$2 | 0]($0, $1) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return $0 + $1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0;
  $1 = global$9;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return !$0;
 }
 
 function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($0, 0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = $2;
   HEAP32[$0 + 252 >> 2] = $1;
   $2 = $0 + 196 | 0;
   $6 = $0 + 247 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($2, $3, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $10 = $0 + 248 | 0;
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($6, $10);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($10 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 3) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 252 | 0;
     if (!global$9 | ($8 | 0) == 5) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $10 = $0 + 180 | 0;
      $6 = std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($6, $1, $2, $10, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 33712);
      if ($6) {
       break block1
      }
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $6 = HEAP32[$0 + 12 >> 2];
     if (($6 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $6 + 4;
     HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $6 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 7) {
    $7 = long_20std____2____num_get_signed_integral_5babi_nn190106_5d_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $6, $4, $1);
    $9 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $1;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 248 | 0;
    $1 = $0 + 252 | 0;
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $2);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 252 >> 2];
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 256 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2____num_get_base____get_base_28std____2__ios_base__29($0) {
  block : {
   $0 = HEAP32[$0 + 4 >> 2] & 74;
   if ($0) {
    if (($0 | 0) == 64) {
     return 8
    }
    if (($0 | 0) != 8) {
     break block
    }
    return 16;
   }
   return 0;
  }
  return 10;
 }
 
 function std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
   $5 = $4 + 12 | 0;
   std____2__ios_base__getloc_28_29_20const($5, $1);
   $1 = $5;
  }
  block : {
   if (!global$9 | !$6) {
    $3 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_char___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   if (!global$9 | ($6 | 0) == 1) {
    $3 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($1);
    $7 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $5 = $3;
   }
   if (!global$9) {
    HEAP8[$2 | 0] = $5
   }
   if (!global$9 | ($6 | 0) == 2) {
    std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $1);
    $7 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : $4 + 12 | 0;
   if (!global$9 | ($6 | 0) == 3) {
    std____2__locale___locale_28_29($0);
    $7 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $12 = global$9;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  HEAP8[$10 + 15 | 0] = $0;
  block3 : {
   block1 : {
    block : {
     $11 = HEAP32[$3 >> 2];
     if (($11 | 0) != ($2 | 0)) {
      break block
     }
     $13 = $0 & 255;
     if (($13 | 0) == HEAPU8[$9 + 24 | 0]) {
      $0 = 43
     } else {
      if (HEAPU8[$9 + 25 | 0] != ($13 | 0)) {
       break block
      }
      $0 = 45;
     }
     HEAP32[$3 >> 2] = $11 + 1;
     HEAP8[$11 | 0] = $0;
     break block1;
    }
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6);
    if ((global$9 | 0) != ($12 | 0)) {
     wasm2js_trap()
    }
    if (!(!$6 | ($0 | 0) != ($5 | 0))) {
     $0 = 0;
     $1 = HEAP32[$8 >> 2];
     if (($1 - $7 | 0) > 159) {
      break block3
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$8 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $0;
     break block1;
    }
    $0 = -1;
    $5 = char_20const__20std____2__find_5babi_nn190106_5d_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($9, $9 + 26 | 0, $10 + 15 | 0);
    if ((global$9 | 0) != ($12 | 0)) {
     wasm2js_trap()
    }
    $5 = $5 - $9 | 0;
    if (($5 | 0) > 23) {
     break block3
    }
    block5 : {
     block6 : {
      switch ($1 - 8 | 0) {
      case 0:
      case 2:
       if (($1 | 0) > ($5 | 0)) {
        break block5
       }
       break block3;
      case 1:
       break block5;
      default:
       break block6;
      };
     }
     if (($1 | 0) != 16 | ($5 | 0) < 22) {
      break block5
     }
     $1 = HEAP32[$3 >> 2];
     if (($1 | 0) == ($2 | 0) | ($1 - $2 | 0) > 2 | HEAPU8[$1 - 1 | 0] != 48) {
      break block3
     }
     $0 = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$3 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = HEAPU8[$5 + 33712 | 0];
     break block3;
    }
    $0 = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = HEAPU8[$5 + 33712 | 0];
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
    $0 = 0;
    break block3;
   }
   $0 = 0;
   HEAP32[$4 >> 2] = 0;
  }
  __stack_pointer = $10 + 16 | 0;
  return $0;
 }
 
 function long_20std____2____num_get_signed_integral_5babi_nn190106_5d_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $6 = HEAP32[$4 + 16 >> 2];
   $8 = HEAP32[$4 + 20 >> 2];
   $9 = HEAP32[$4 + 24 >> 2];
   $7 = HEAP32[$4 + 28 >> 2];
   $4 = HEAP32[$4 + 32 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = __stack_pointer - 16 | 0;
   __stack_pointer = $8;
   $6 = ($0 | 0) != ($1 | 0);
  }
  block : {
   block5 : {
    block2 : {
     block3 : {
      block4 : {
       if ((global$9 | 0) == 2 | $6) {
        if (!global$9) {
         $6 = __tls_base;
         $4 = HEAP32[$6 >> 2];
         HEAP32[$6 >> 2] = 0;
        }
        if (!global$9 | !$5) {
         std____2____cloc_28_29();
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         $9 = strtoll_l($0, $8 + 12 | 0, $3);
         $7 = i64toi32_i32$HIGH_BITS;
         $0 = HEAP32[$6 >> 2];
         block1 : {
          if ($0) {
           $1 = HEAP32[$8 + 12 >> 2] != ($1 | 0);
           if ($1) {
            break block1
           }
           if (($0 | 0) == 68) {
            break block2
           }
           break block3;
          }
          HEAP32[$6 >> 2] = $4;
          if (HEAP32[$8 + 12 >> 2] == ($1 | 0)) {
           break block3
          }
         }
         HEAP32[$2 >> 2] = 4;
         break block4;
        }
       }
       if (!global$9) {
        HEAP32[$2 >> 2] = 4
       }
      }
      $0 = 0;
      if (!global$9) {
       break block5
      }
     }
     if (!global$9) {
      if (($7 | 0) < 0 & $9 >>> 0 < 2147483648 | ($7 | 0) < -1 | ($9 >>> 0 > 2147483647 & ($7 | 0) >= 0 | ($7 | 0) > 0)) {
       break block2
      }
      $0 = $9;
      break block5;
     }
    }
    if (!global$9) {
     HEAP32[$2 >> 2] = 4;
     $0 = 2147483647;
     if (!!$9 & ($7 | 0) >= 0 | ($7 | 0) > 0) {
      break block5
     }
     $1 = -2147483648;
    }
    $0 = $1;
   }
   if (!global$9) {
    __stack_pointer = $8 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $6;
  HEAP32[$5 + 20 >> 2] = $8;
  HEAP32[$5 + 24 >> 2] = $9;
  HEAP32[$5 + 28 >> 2] = $7;
  HEAP32[$5 + 32 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$9;
  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  block : {
   if (!$5 | ($2 - $1 | 0) < 5) {
    break block
   }
   void_20std____2__reverse_5babi_nn190106_5d_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
   $5 = $2 - 4 | 0;
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
   $4 = $0 + $2 | 0;
   block3 : {
    while (1) {
     block1 : {
      $0 = HEAP8[$2 | 0];
      if ($1 >>> 0 >= $5 >>> 0) {
       break block1
      }
      if (!(($0 | 0) <= 0 | ($0 | 0) >= 127) & HEAP32[$1 >> 2] != HEAP8[$2 | 0]) {
       break block3
      }
      $1 = $1 + 4 | 0;
      $2 = (($4 - $2 | 0) > 1) + $2 | 0;
      continue;
     }
     break;
    };
    if (($0 | 0) <= 0 | ($0 | 0) >= 127 | HEAP8[$2 | 0] >>> 0 > HEAP32[$5 >> 2] - 1 >>> 0) {
     break block
    }
   }
   HEAP32[$3 >> 2] = 4;
  }
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = $2;
   HEAP32[$0 + 252 >> 2] = $1;
   $2 = $0 + 196 | 0;
   $6 = $0 + 247 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($2, $3, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $10 = $0 + 248 | 0;
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($6, $10);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($10 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 3) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 252 | 0;
     if (!global$9 | ($8 | 0) == 5) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $10 = $0 + 180 | 0;
      $6 = std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($6, $1, $2, $10, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 33712);
      if ($6) {
       break block1
      }
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $6 = HEAP32[$0 + 12 >> 2];
     if (($6 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $6 + 4;
     HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $6 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 7) {
    $7 = long_20long_20std____2____num_get_signed_integral_5babi_nn190106_5d_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $6, $4, $1);
    $13 = i64toi32_i32$HIGH_BITS;
    $9 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
    $12 = $13;
    $11 = $7;
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $11;
    HEAP32[$5 + 4 >> 2] = $12;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 248 | 0;
    $1 = $0 + 252 | 0;
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $2);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 252 >> 2];
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 256 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[$7 + 36 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function long_20long_20std____2____num_get_signed_integral_5babi_nn190106_5d_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $7 = HEAP32[$4 + 16 >> 2];
   $5 = HEAP32[$4 + 20 >> 2];
   $6 = HEAP32[$4 + 24 >> 2];
   $8 = HEAP32[$4 + 28 >> 2];
   $9 = HEAP32[$4 + 32 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = __stack_pointer - 16 | 0;
   __stack_pointer = $8;
   $6 = ($0 | 0) != ($1 | 0);
  }
  block : {
   block3 : {
    block2 : {
     block4 : {
      if ((global$9 | 0) == 2 | $6) {
       if (!global$9) {
        $6 = __tls_base;
        $9 = HEAP32[$6 >> 2];
        HEAP32[$6 >> 2] = 0;
       }
       if (!global$9 | !$10) {
        std____2____cloc_28_29();
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $7 = strtoll_l($0, $8 + 12 | 0, $3);
        $5 = i64toi32_i32$HIGH_BITS;
        $0 = HEAP32[$6 >> 2];
        block1 : {
         if ($0) {
          if (HEAP32[$8 + 12 >> 2] != ($1 | 0)) {
           break block1
          }
          if (($0 | 0) == 68) {
           break block2
          }
          break block3;
         }
         HEAP32[$6 >> 2] = $9;
         if (HEAP32[$8 + 12 >> 2] == ($1 | 0)) {
          break block3
         }
        }
        HEAP32[$2 >> 2] = 4;
        break block4;
       }
      }
      if (!global$9) {
       HEAP32[$2 >> 2] = 4
      }
     }
     if (!global$9) {
      $7 = 0;
      $5 = 0;
      break block3;
     }
    }
    if (!global$9) {
     HEAP32[$2 >> 2] = 4;
     if (!!$7 & ($5 | 0) >= 0 | ($5 | 0) > 0) {
      $7 = -1;
      $5 = 2147483647;
      break block3;
     }
     $5 = -2147483648;
     $7 = 0;
    }
   }
   if (!global$9) {
    __stack_pointer = $8 + 16 | 0;
    i64toi32_i32$HIGH_BITS = $5;
    return $7;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $7;
  HEAP32[$4 + 20 >> 2] = $5;
  HEAP32[$4 + 24 >> 2] = $6;
  HEAP32[$4 + 28 >> 2] = $8;
  HEAP32[$4 + 32 >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = $2;
   HEAP32[$0 + 252 >> 2] = $1;
   $2 = $0 + 196 | 0;
   $6 = $0 + 247 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($2, $3, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $10 = $0 + 248 | 0;
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($6, $10);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($10 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 3) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 252 | 0;
     if (!global$9 | ($8 | 0) == 5) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $10 = $0 + 180 | 0;
      $6 = std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($6, $1, $2, $10, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 33712);
      if ($6) {
       break block1
      }
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $6 = HEAP32[$0 + 12 >> 2];
     if (($6 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $6 + 4;
     HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $6 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 7) {
    $7 = unsigned_20short_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $6, $4, $1);
    $9 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    HEAP16[$5 >> 1] = $1;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 248 | 0;
    $1 = $0 + 252 | 0;
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $2);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 252 >> 2];
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 256 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function unsigned_20short_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $6 = HEAP32[$4 + 16 >> 2];
   $7 = HEAP32[$4 + 20 >> 2];
   $8 = HEAP32[$4 + 24 >> 2];
   $10 = HEAP32[$4 + 28 >> 2];
   $9 = HEAP32[$4 + 32 >> 2];
   $4 = HEAP32[$4 + 36 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block2 : {
   if (!global$9) {
    $7 = __stack_pointer - 16 | 0;
    __stack_pointer = $7;
    $6 = ($0 | 0) != ($1 | 0);
   }
   block6 : {
    block7 : {
     block4 : {
      block5 : {
       block1 : {
        if ((global$9 | 0) == 2 | $6) {
         if (!global$9) {
          block : {
           $9 = HEAPU8[$0 | 0];
           if (($9 | 0) != 45) {
            break block
           }
           $0 = $0 + 1 | 0;
           if (($1 | 0) != ($0 | 0)) {
            break block
           }
           HEAP32[$2 >> 2] = 4;
           break block1;
          }
          $6 = __tls_base;
          $4 = HEAP32[$6 >> 2];
          HEAP32[$6 >> 2] = 0;
         }
         if (!global$9 | !$5) {
          std____2____cloc_28_29();
          if ((global$9 | 0) == 1) {
           break block2
          }
         }
         if (!global$9) {
          $8 = strtoull_l($0, $7 + 12 | 0, $3);
          $10 = i64toi32_i32$HIGH_BITS;
          $0 = HEAP32[$6 >> 2];
          block3 : {
           if ($0) {
            if (HEAP32[$7 + 12 >> 2] != ($1 | 0)) {
             break block3
            }
            $0 = ($0 | 0) == 68;
            if ($0) {
             break block4
            }
            break block5;
           }
           HEAP32[$6 >> 2] = $4;
           $0 = HEAP32[$7 + 12 >> 2] == ($1 | 0);
           if ($0) {
            break block5
           }
          }
          HEAP32[$2 >> 2] = 4;
          break block1;
         }
        }
        if (!global$9) {
         HEAP32[$2 >> 2] = 4
        }
       }
       $1 = 0;
       if (!global$9) {
        break block6
       }
      }
      if (!global$9) {
       $0 = !$10 & $8 >>> 0 <= 65535;
       if ($0) {
        break block7
       }
      }
     }
     if (!global$9) {
      HEAP32[$2 >> 2] = 4;
      $1 = 65535;
      break block6;
     }
    }
    if (!global$9) {
     $0 = ($9 | 0) == 45 ? 0 - $8 | 0 : $8
    }
    $1 = $0;
   }
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0;
    return $1 & 65535;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $6;
  HEAP32[$5 + 20 >> 2] = $7;
  HEAP32[$5 + 24 >> 2] = $8;
  HEAP32[$5 + 28 >> 2] = $10;
  HEAP32[$5 + 32 >> 2] = $9;
  HEAP32[$5 + 36 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = $2;
   HEAP32[$0 + 252 >> 2] = $1;
   $2 = $0 + 196 | 0;
   $6 = $0 + 247 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($2, $3, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $10 = $0 + 248 | 0;
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($6, $10);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($10 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 3) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 252 | 0;
     if (!global$9 | ($8 | 0) == 5) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $10 = $0 + 180 | 0;
      $6 = std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($6, $1, $2, $10, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 33712);
      if ($6) {
       break block1
      }
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $6 = HEAP32[$0 + 12 >> 2];
     if (($6 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $6 + 4;
     HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $6 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 7) {
    $7 = unsigned_20int_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $6, $4, $1);
    $9 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $1;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 248 | 0;
    $1 = $0 + 252 | 0;
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $2);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 252 >> 2];
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 256 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function unsigned_20int_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $6 = HEAP32[$4 + 16 >> 2];
   $7 = HEAP32[$4 + 20 >> 2];
   $8 = HEAP32[$4 + 24 >> 2];
   $10 = HEAP32[$4 + 28 >> 2];
   $9 = HEAP32[$4 + 32 >> 2];
   $4 = HEAP32[$4 + 36 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block2 : {
   if (!global$9) {
    $7 = __stack_pointer - 16 | 0;
    __stack_pointer = $7;
    $6 = ($0 | 0) != ($1 | 0);
   }
   block6 : {
    block7 : {
     block4 : {
      block5 : {
       block1 : {
        if ((global$9 | 0) == 2 | $6) {
         if (!global$9) {
          block : {
           $9 = HEAPU8[$0 | 0];
           if (($9 | 0) != 45) {
            break block
           }
           $0 = $0 + 1 | 0;
           if (($1 | 0) != ($0 | 0)) {
            break block
           }
           HEAP32[$2 >> 2] = 4;
           break block1;
          }
          $6 = __tls_base;
          $4 = HEAP32[$6 >> 2];
          HEAP32[$6 >> 2] = 0;
         }
         if (!global$9 | !$5) {
          std____2____cloc_28_29();
          if ((global$9 | 0) == 1) {
           break block2
          }
         }
         if (!global$9) {
          $8 = strtoull_l($0, $7 + 12 | 0, $3);
          $10 = i64toi32_i32$HIGH_BITS;
          $0 = HEAP32[$6 >> 2];
          block3 : {
           if ($0) {
            if (HEAP32[$7 + 12 >> 2] != ($1 | 0)) {
             break block3
            }
            $0 = ($0 | 0) == 68;
            if ($0) {
             break block4
            }
            break block5;
           }
           HEAP32[$6 >> 2] = $4;
           $0 = HEAP32[$7 + 12 >> 2] == ($1 | 0);
           if ($0) {
            break block5
           }
          }
          HEAP32[$2 >> 2] = 4;
          break block1;
         }
        }
        if (!global$9) {
         HEAP32[$2 >> 2] = 4
        }
       }
       $1 = 0;
       if (!global$9) {
        break block6
       }
      }
      if (!global$9) {
       $0 = !$10;
       if ($0) {
        break block7
       }
      }
     }
     if (!global$9) {
      HEAP32[$2 >> 2] = 4;
      $1 = -1;
      break block6;
     }
    }
    if (!global$9) {
     $0 = ($9 | 0) == 45 ? 0 - $8 | 0 : $8
    }
    $1 = $0;
   }
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $6;
  HEAP32[$5 + 20 >> 2] = $7;
  HEAP32[$5 + 24 >> 2] = $8;
  HEAP32[$5 + 28 >> 2] = $10;
  HEAP32[$5 + 32 >> 2] = $9;
  HEAP32[$5 + 36 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = $2;
   HEAP32[$0 + 252 >> 2] = $1;
   $2 = $0 + 196 | 0;
   $6 = $0 + 247 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($2, $3, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $10 = $0 + 248 | 0;
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($6, $10);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($10 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 3) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 252 | 0;
     if (!global$9 | ($8 | 0) == 5) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $10 = $0 + 180 | 0;
      $6 = std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($6, $1, $2, $10, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 33712);
      if ($6) {
       break block1
      }
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $6 = HEAP32[$0 + 12 >> 2];
     if (($6 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $6 + 4;
     HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $6 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 7) {
    $7 = unsigned_20long_20long_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $6, $4, $1);
    $13 = i64toi32_i32$HIGH_BITS;
    $9 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
    $12 = $13;
    $11 = $7;
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $11;
    HEAP32[$5 + 4 >> 2] = $12;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 248 | 0;
    $1 = $0 + 252 | 0;
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $2);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 252 >> 2];
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 256 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[$7 + 36 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function unsigned_20long_20long_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $6 = HEAP32[$4 + 16 >> 2];
   $8 = HEAP32[$4 + 20 >> 2];
   $9 = HEAP32[$4 + 24 >> 2];
   $7 = HEAP32[$4 + 28 >> 2];
   $10 = HEAP32[$4 + 32 >> 2];
   $4 = HEAP32[$4 + 36 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block2 : {
   if (!global$9) {
    $7 = __stack_pointer - 16 | 0;
    __stack_pointer = $7;
    $6 = ($0 | 0) != ($1 | 0);
   }
   block6 : {
    block5 : {
     block4 : {
      block1 : {
       if ((global$9 | 0) == 2 | $6) {
        if (!global$9) {
         block : {
          $10 = HEAPU8[$0 | 0];
          if (($10 | 0) != 45) {
           break block
          }
          $0 = $0 + 1 | 0;
          if (($1 | 0) != ($0 | 0)) {
           break block
          }
          HEAP32[$2 >> 2] = 4;
          break block1;
         }
         $6 = __tls_base;
         $4 = HEAP32[$6 >> 2];
         HEAP32[$6 >> 2] = 0;
        }
        if (!global$9 | !$5) {
         std____2____cloc_28_29();
         if ((global$9 | 0) == 1) {
          break block2
         }
        }
        if (!global$9) {
         $8 = strtoull_l($0, $7 + 12 | 0, $3);
         $9 = i64toi32_i32$HIGH_BITS;
         $0 = HEAP32[$6 >> 2];
         block3 : {
          if ($0) {
           if (HEAP32[$7 + 12 >> 2] != ($1 | 0)) {
            break block3
           }
           if (($0 | 0) == 68) {
            break block4
           }
           break block5;
          }
          HEAP32[$6 >> 2] = $4;
          if (HEAP32[$7 + 12 >> 2] == ($1 | 0)) {
           break block5
          }
         }
         HEAP32[$2 >> 2] = 4;
         break block1;
        }
       }
       if (!global$9) {
        HEAP32[$2 >> 2] = 4
       }
      }
      $0 = 0;
      $1 = 0;
      if (!global$9) {
       break block6
      }
     }
     if (!global$9) {
      HEAP32[$2 >> 2] = 4;
      $0 = -1;
      $1 = -1;
      break block6;
     }
    }
    if (global$9) {
     $0 = $8;
     $1 = $9;
    } else {
     $1 = ($10 | 0) == 45;
     $0 = $1 ? 0 - $8 | 0 : $8;
     $1 = $1 ? 0 - ($9 + (($8 | 0) != 0) | 0) | 0 : $9;
    }
   }
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0;
    i64toi32_i32$HIGH_BITS = $1;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $6;
  HEAP32[$5 + 20 >> 2] = $8;
  HEAP32[$5 + 24 >> 2] = $9;
  HEAP32[$5 + 28 >> 2] = $7;
  HEAP32[$5 + 32 >> 2] = $10;
  HEAP32[$5 + 36 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0);
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $11 = HEAPF32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = $2;
   HEAP32[$0 + 252 >> 2] = $1;
   $2 = $0 + 208 | 0;
   $6 = $0 + 207 | 0;
   $8 = $0 + 206 | 0;
   $1 = $0 + 192 | 0;
  }
  block : {
   if (!global$9 | !$9) {
    std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($1, $3, $2, $6, $8);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 180 | 0);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2);
   }
   if (!global$9 | ($9 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $10 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
    HEAP32[$0 + 176 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = $0 + 16;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP8[$0 + 7 | 0] = 1;
    HEAP8[$0 + 6 | 0] = 69;
    $3 = 0;
   }
   while (1) {
    block8 : {
     if (!global$9) {
      $8 = $0 + 248 | 0;
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($9 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($6, $8);
      $10 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     block3 : {
      block2 : {
       block1 : {
        if (!global$9) {
         if ($6) {
          break block1
         }
         $6 = HEAP32[$0 + 176 >> 2];
         $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) + $1 | 0;
         $6 = ($6 | 0) == ($8 | 0);
        }
        if ((global$9 | 0) == 2 | $6) {
         if (!global$9) {
          $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) << 1;
         }
         if (!global$9 | ($9 | 0) == 3) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $10 = 3;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2)
         }
         if (!global$9 | ($9 | 0) == 4) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $10 = 4;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
          $6 = $6 + $1 | 0;
          HEAP32[$0 + 176 >> 2] = $6;
         }
        }
        $6 = global$9 ? $6 : $0 + 252 | 0;
        if (!global$9 | ($9 | 0) == 5) {
         $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($6);
         $10 = 5;
         if ((global$9 | 0) == 1) {
          break block
         }
         $6 = $7;
        }
        if (!global$9) {
         $8 = $0 + 7 | 0;
         $6 = std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($6, $8, $0 + 6 | 0, $1, $0 + 176 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $0 + 192 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 208 | 0);
         if ($6) {
          break block1
         }
         $3 = $3 & 1;
         if ($3) {
          break block2
         }
         $3 = 0;
         $6 = HEAP32[$0 + 176 >> 2] - $1 | 0;
         $8 = ($6 | 0) <= 0;
         if ($8) {
          break block3
         }
         block4 : {
          block5 : {
           $8 = HEAPU8[$1 | 0];
           $7 = $8 - 43 | 0;
           switch ($7 | 0) {
           case 0:
           case 2:
            break block4;
           default:
            break block5;
           };
          }
          $3 = ($8 | 0) == 46;
          if ($3) {
           break block2
          }
          $3 = 1;
          $6 = ($8 - 48 & 255) >>> 0 < 10;
          if ($6) {
           break block3
          }
          break block1;
         }
         $6 = ($6 | 0) == 1;
         if ($6) {
          break block3
         }
         block6 : {
          switch ($7 | 0) {
          case 0:
          case 2:
           break block6;
          default:
           break block3;
          };
         }
         $6 = HEAPU8[$1 + 1 | 0];
         $3 = ($6 | 0) == 46;
         if ($3) {
          break block2
         }
         $3 = 1;
         $6 = ($6 - 48 & 255) >>> 0 <= 9;
         if ($6) {
          break block3
         }
        }
       }
       if (!global$9) {
        block7 : {
         if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 192 | 0) | HEAPU8[$0 + 7 | 0] != 1) {
          break block7
         }
         $3 = HEAP32[$0 + 12 >> 2];
         $6 = ($3 - ($0 + 16 | 0) | 0) > 159;
         if ($6) {
          break block7
         }
         HEAP32[$0 + 12 >> 2] = $3 + 4;
         $6 = HEAP32[$0 + 8 >> 2];
         HEAP32[$3 >> 2] = $6;
        }
        $3 = HEAP32[$0 + 176 >> 2];
       }
       if (!global$9 | ($9 | 0) == 6) {
        $12 = float_20std____2____num_get_float_5babi_nn190106_5d_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, $3, $4);
        $10 = 6;
        if ((global$9 | 0) == 1) {
         break block
        }
        $11 = $12;
       }
       if (!global$9) {
        HEAPF32[$5 >> 2] = $11;
        $5 = HEAP32[$0 + 12 >> 2];
        std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 192 | 0, $0 + 16 | 0, $5, $4);
        $3 = $0 + 248 | 0;
        $1 = $0 + 252 | 0;
       }
       if (!global$9 | ($9 | 0) == 7) {
        $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $3);
        $10 = 7;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $7;
       }
       if (!global$9) {
        if ($1) {
         HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
        }
        $1 = HEAP32[$0 + 252 >> 2];
       }
       if (!global$9 | ($9 | 0) == 8) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $10 = 8;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       $2 = global$9 ? $2 : $0 + 192 | 0;
       if (!global$9 | ($9 | 0) == 9) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $10 = 9;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       if (!global$9) {
        __stack_pointer = $0 + 256 | 0;
        break block8;
       }
      }
      $3 = global$9 ? $3 : 1;
     }
     $6 = global$9 ? $6 : $0 + 252 | 0;
     if (!global$9 | ($9 | 0) == 10) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($6);
      $10 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    return $1 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAPF32[$7 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $5 = $6 + 12 | 0;
   std____2__ios_base__getloc_28_29_20const($5, $1);
   $1 = $5;
  }
  block : {
   if (!global$9 | !$7) {
    $5 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $5;
   }
   if (!global$9 | ($7 | 0) == 1) {
    std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($1, 33712, 33740, $2);
    $8 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $1 = global$9 ? $1 : $6 + 12 | 0;
   if (!global$9 | ($7 | 0) == 2) {
    $5 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_char___28std____2__locale_20const__29($1);
    $8 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $5;
   }
   if (!global$9 | ($7 | 0) == 3) {
    $5 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($1);
    $8 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    HEAP8[$3 | 0] = $2
   }
   if (!global$9 | ($7 | 0) == 4) {
    $5 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($1);
    $8 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    HEAP8[$4 | 0] = $2
   }
   if (!global$9 | ($7 | 0) == 5) {
    std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $1);
    $8 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : $6 + 12 | 0;
   if (!global$9 | ($7 | 0) == 6) {
    std____2__locale___locale_28_29($0);
    $8 = 6;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = 0, $13 = 0;
  $12 = global$9;
  $13 = __stack_pointer - 16 | 0;
  __stack_pointer = $13;
  HEAP8[$13 + 15 | 0] = $0;
  block1 : {
   block : {
    if (($0 | 0) == ($5 | 0)) {
     if (HEAPU8[$1 | 0] != 1) {
      break block
     }
     $0 = 0;
     HEAP8[$1 | 0] = 0;
     $1 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 46;
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($7);
     if ((global$9 | 0) != ($12 | 0)) {
      wasm2js_trap()
     }
     if (!$1) {
      break block1
     }
     $1 = HEAP32[$9 >> 2];
     if (($1 - $8 | 0) > 159) {
      break block1
     }
     $2 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $2;
     break block1;
    }
    block3 : {
     block2 : {
      if (($0 | 0) != ($6 | 0)) {
       break block2
      }
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($7);
      if ((global$9 | 0) != ($12 | 0)) {
       wasm2js_trap()
      }
      if (!$0) {
       break block2
      }
      if (HEAPU8[$1 | 0] != 1) {
       break block
      }
      $0 = HEAP32[$9 >> 2];
      if (($0 - $8 | 0) > 159) {
       break block3
      }
      $1 = HEAP32[$10 >> 2];
      HEAP32[$9 >> 2] = $0 + 4;
      HEAP32[$0 >> 2] = $1;
      $0 = 0;
      HEAP32[$10 >> 2] = 0;
      break block1;
     }
     $0 = char_20const__20std____2__find_5babi_nn190106_5d_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($11, $11 + 28 | 0, $13 + 15 | 0);
     if ((global$9 | 0) != ($12 | 0)) {
      wasm2js_trap()
     }
     $5 = $0 - $11 | 0;
     if (($5 | 0) > 27) {
      break block
     }
     $6 = HEAP8[$5 + 33712 | 0];
     block7 : {
      block5 : {
       switch (($5 & -2) - 22 | 0) {
       case 2:
        $0 = $3;
        $3 = HEAP32[$4 >> 2];
        if (($0 | 0) != ($3 | 0)) {
         $0 = -1;
         $1 = toupper(HEAP8[$3 - 1 | 0]);
         if ((global$9 | 0) != ($12 | 0)) {
          wasm2js_trap()
         }
         $2 = toupper(HEAP8[$2 | 0]);
         if ((global$9 | 0) != ($12 | 0)) {
          wasm2js_trap()
         }
         if (($1 | 0) != ($2 | 0)) {
          break block1
         }
        }
        HEAP32[$4 >> 2] = $3 + 1;
        HEAP8[$3 | 0] = $6;
        break block3;
       case 0:
        HEAP8[$2 | 0] = 80;
        break block7;
       default:
        break block5;
       };
      }
      $0 = toupper($6);
      if ((global$9 | 0) != ($12 | 0)) {
       wasm2js_trap()
      }
      if (($0 | 0) != HEAP8[$2 | 0]) {
       break block7
      }
      $0 = tolower($0);
      if ((global$9 | 0) != ($12 | 0)) {
       wasm2js_trap()
      }
      HEAP8[$2 | 0] = $0;
      if (HEAPU8[$1 | 0] != 1) {
       break block7
      }
      HEAP8[$1 | 0] = 0;
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($7);
      if ((global$9 | 0) != ($12 | 0)) {
       wasm2js_trap()
      }
      if (!$0) {
       break block7
      }
      $0 = HEAP32[$9 >> 2];
      if (($0 - $8 | 0) > 159) {
       break block7
      }
      $1 = HEAP32[$10 >> 2];
      HEAP32[$9 >> 2] = $0 + 4;
      HEAP32[$0 >> 2] = $1;
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $6;
     $0 = 0;
     if (($5 | 0) > 21) {
      break block1
     }
     HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
     break block1;
    }
    $0 = 0;
    break block1;
   }
   $0 = -1;
  }
  __stack_pointer = $13 + 16 | 0;
  return $0;
 }
 
 function float_20std____2____num_get_float_5babi_nn190106_5d_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAPF32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $3 = ($0 | 0) != ($1 | 0);
  }
  block : {
   block3 : {
    block4 : {
     block2 : {
      if ((global$9 | 0) == 2 | $3) {
       if (!global$9) {
        $6 = __tls_base;
        $9 = HEAP32[$6 >> 2];
        HEAP32[$6 >> 2] = 0;
       }
       if (!global$9 | !$10) {
        $4 = std____2____cloc_28_29();
        if ((global$9 | 0) == 1) {
         break block
        }
        $3 = $4;
       }
       if (!global$9) {
        $3 = __stack_pointer - 16 | 0;
        __stack_pointer = $3;
        $8 = $5 + 12 | 0;
       }
       if (!global$9 | ($10 | 0) == 1) {
        strtox_1143($3, $0, $8, 0);
        $11 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $7 = __trunctfsf2(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
        __stack_pointer = $3 + 16 | 0;
        block1 : {
         $0 = HEAP32[$6 >> 2];
         if ($0) {
          if (HEAP32[$5 + 12 >> 2] == ($1 | 0)) {
           break block1
          }
          break block2;
         }
         HEAP32[$6 >> 2] = $9;
         if (HEAP32[$5 + 12 >> 2] != ($1 | 0)) {
          break block2
         }
         break block3;
        }
        if (($0 | 0) != 68) {
         break block3
        }
        break block4;
       }
      }
      if (!global$9) {
       HEAP32[$2 >> 2] = 4;
       break block3;
      }
     }
     $7 = global$9 ? $7 : Math_fround(0.0);
    }
    if (!global$9) {
     HEAP32[$2 >> 2] = 4
    }
   }
   if (!global$9) {
    __stack_pointer = $5 + 16 | 0;
    return $7;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAPF32[$4 + 24 >> 2] = $7;
  HEAP32[$4 + 28 >> 2] = $8;
  HEAP32[$4 + 32 >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return Math_fround(0.0);
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $7 = HEAP32[$1 + 36 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   wasm2js_scratch_store_i32(0, $9 | 0);
   wasm2js_scratch_store_i32(1, $7 | 0);
   $11 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = $2;
   HEAP32[$0 + 252 >> 2] = $1;
   $2 = $0 + 208 | 0;
   $6 = $0 + 207 | 0;
   $8 = $0 + 206 | 0;
   $1 = $0 + 192 | 0;
  }
  block : {
   if (!global$9 | !$10) {
    std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($1, $3, $2, $6, $8);
    $9 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 180 | 0);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2);
   }
   if (!global$9 | ($10 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
    HEAP32[$0 + 176 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = $0 + 16;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP8[$0 + 7 | 0] = 1;
    HEAP8[$0 + 6 | 0] = 69;
    $3 = 0;
   }
   while (1) {
    block8 : {
     if (!global$9) {
      $8 = $0 + 248 | 0;
      $6 = $0 + 252 | 0;
     }
     if (!global$9 | ($10 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($6, $8);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     block3 : {
      block2 : {
       block1 : {
        if (!global$9) {
         if ($6) {
          break block1
         }
         $6 = HEAP32[$0 + 176 >> 2];
         $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) + $1 | 0;
         $6 = ($6 | 0) == ($8 | 0);
        }
        if ((global$9 | 0) == 2 | $6) {
         if (!global$9) {
          $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) << 1;
         }
         if (!global$9 | ($10 | 0) == 3) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $9 = 3;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2)
         }
         if (!global$9 | ($10 | 0) == 4) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $9 = 4;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
          $6 = $6 + $1 | 0;
          HEAP32[$0 + 176 >> 2] = $6;
         }
        }
        $6 = global$9 ? $6 : $0 + 252 | 0;
        if (!global$9 | ($10 | 0) == 5) {
         $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($6);
         $9 = 5;
         if ((global$9 | 0) == 1) {
          break block
         }
         $6 = $7;
        }
        if (!global$9) {
         $8 = $0 + 7 | 0;
         $6 = std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($6, $8, $0 + 6 | 0, $1, $0 + 176 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $0 + 192 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 208 | 0);
         if ($6) {
          break block1
         }
         $3 = $3 & 1;
         if ($3) {
          break block2
         }
         $3 = 0;
         $6 = HEAP32[$0 + 176 >> 2] - $1 | 0;
         $8 = ($6 | 0) <= 0;
         if ($8) {
          break block3
         }
         block4 : {
          block5 : {
           $8 = HEAPU8[$1 | 0];
           $7 = $8 - 43 | 0;
           switch ($7 | 0) {
           case 0:
           case 2:
            break block4;
           default:
            break block5;
           };
          }
          $3 = ($8 | 0) == 46;
          if ($3) {
           break block2
          }
          $3 = 1;
          $6 = ($8 - 48 & 255) >>> 0 < 10;
          if ($6) {
           break block3
          }
          break block1;
         }
         $6 = ($6 | 0) == 1;
         if ($6) {
          break block3
         }
         block6 : {
          switch ($7 | 0) {
          case 0:
          case 2:
           break block6;
          default:
           break block3;
          };
         }
         $6 = HEAPU8[$1 + 1 | 0];
         $3 = ($6 | 0) == 46;
         if ($3) {
          break block2
         }
         $3 = 1;
         $6 = ($6 - 48 & 255) >>> 0 <= 9;
         if ($6) {
          break block3
         }
        }
       }
       if (!global$9) {
        block7 : {
         if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 192 | 0) | HEAPU8[$0 + 7 | 0] != 1) {
          break block7
         }
         $3 = HEAP32[$0 + 12 >> 2];
         $6 = ($3 - ($0 + 16 | 0) | 0) > 159;
         if ($6) {
          break block7
         }
         HEAP32[$0 + 12 >> 2] = $3 + 4;
         $6 = HEAP32[$0 + 8 >> 2];
         HEAP32[$3 >> 2] = $6;
        }
        $3 = HEAP32[$0 + 176 >> 2];
       }
       if (!global$9 | ($10 | 0) == 6) {
        $12 = double_20std____2____num_get_float_5babi_nn190106_5d_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, $3, $4);
        $9 = 6;
        if ((global$9 | 0) == 1) {
         break block
        }
        $11 = $12;
       }
       if (!global$9) {
        HEAPF64[$5 >> 3] = $11;
        $5 = HEAP32[$0 + 12 >> 2];
        std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 192 | 0, $0 + 16 | 0, $5, $4);
        $3 = $0 + 248 | 0;
        $1 = $0 + 252 | 0;
       }
       if (!global$9 | ($10 | 0) == 7) {
        $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $3);
        $9 = 7;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $7;
       }
       if (!global$9) {
        if ($1) {
         HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
        }
        $1 = HEAP32[$0 + 252 >> 2];
       }
       if (!global$9 | ($10 | 0) == 8) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $9 = 8;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       $2 = global$9 ? $2 : $0 + 192 | 0;
       if (!global$9 | ($10 | 0) == 9) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $9 = 9;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       if (!global$9) {
        __stack_pointer = $0 + 256 | 0;
        break block8;
       }
      }
      $3 = global$9 ? $3 : 1;
     }
     $6 = global$9 ? $6 : $0 + 252 | 0;
     if (!global$9 | ($10 | 0) == 10) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($6);
      $9 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    return $1 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  wasm2js_scratch_store_f64(+$11);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $7, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  HEAP32[$7 + 36 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function double_20std____2____num_get_float_5babi_nn190106_5d_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $5 = HEAP32[$4 + 12 >> 2];
   $6 = HEAP32[$4 + 16 >> 2];
   $7 = HEAP32[$4 + 20 >> 2];
   $3 = HEAP32[$4 + 28 >> 2];
   $1 = HEAP32[$4 + 24 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $8 = +wasm2js_scratch_load_f64();
   $9 = HEAP32[$4 + 32 >> 2];
   $10 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $5 = ($0 | 0) != ($1 | 0);
  }
  block : {
   block3 : {
    block4 : {
     block2 : {
      if ((global$9 | 0) == 2 | $5) {
       if (!global$9) {
        $7 = __tls_base;
        $10 = HEAP32[$7 >> 2];
        HEAP32[$7 >> 2] = 0;
       }
       if (!global$9 | !$11) {
        $3 = std____2____cloc_28_29();
        $4 = 0;
        if ((global$9 | 0) == 1) {
         break block
        }
        $5 = $3;
       }
       if (!global$9) {
        $5 = __stack_pointer - 16 | 0;
        __stack_pointer = $5;
        $9 = $6 + 12 | 0;
       }
       if (!global$9 | ($11 | 0) == 1) {
        strtox_1143($5, $0, $9, 1);
        $4 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $8 = __trunctfdf2(HEAP32[$5 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2]);
        __stack_pointer = $5 + 16 | 0;
        block1 : {
         $0 = HEAP32[$7 >> 2];
         if ($0) {
          if (HEAP32[$6 + 12 >> 2] == ($1 | 0)) {
           break block1
          }
          break block2;
         }
         HEAP32[$7 >> 2] = $10;
         if (HEAP32[$6 + 12 >> 2] != ($1 | 0)) {
          break block2
         }
         break block3;
        }
        if (($0 | 0) != 68) {
         break block3
        }
        break block4;
       }
      }
      if (!global$9) {
       HEAP32[$2 >> 2] = 4;
       break block3;
      }
     }
     $8 = global$9 ? $8 : 0.0;
    }
    if (!global$9) {
     HEAP32[$2 >> 2] = 4
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0;
    return $8;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $5;
  HEAP32[$3 + 16 >> 2] = $6;
  HEAP32[$3 + 20 >> 2] = $7;
  wasm2js_scratch_store_f64(+$8);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 32 >> 2] = $9;
  HEAP32[$3 + 36 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0.0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 272 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 264 >> 2] = $2;
   HEAP32[$0 + 268 >> 2] = $1;
   $2 = $0 + 224 | 0;
   $6 = $0 + 223 | 0;
   $8 = $0 + 222 | 0;
   $1 = $0 + 208 | 0;
  }
  block : {
   if (!global$9 | !$9) {
    std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($1, $3, $2, $6, $8);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 196 | 0);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2);
   }
   if (!global$9 | ($9 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $10 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
    HEAP32[$0 + 192 >> 2] = $1;
    HEAP32[$0 + 28 >> 2] = $0 + 32;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP8[$0 + 23 | 0] = 1;
    HEAP8[$0 + 22 | 0] = 69;
    $3 = 0;
   }
   while (1) {
    block8 : {
     if (!global$9) {
      $8 = $0 + 264 | 0;
      $6 = $0 + 268 | 0;
     }
     if (!global$9 | ($9 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($6, $8);
      $10 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     block3 : {
      block2 : {
       block1 : {
        if (!global$9) {
         if ($6) {
          break block1
         }
         $6 = HEAP32[$0 + 192 >> 2];
         $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) + $1 | 0;
         $6 = ($6 | 0) == ($8 | 0);
        }
        if ((global$9 | 0) == 2 | $6) {
         if (!global$9) {
          $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) << 1;
         }
         if (!global$9 | ($9 | 0) == 3) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $10 = 3;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2)
         }
         if (!global$9 | ($9 | 0) == 4) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $10 = 4;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
          $6 = $6 + $1 | 0;
          HEAP32[$0 + 192 >> 2] = $6;
         }
        }
        $6 = global$9 ? $6 : $0 + 268 | 0;
        if (!global$9 | ($9 | 0) == 5) {
         $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($6);
         $10 = 5;
         if ((global$9 | 0) == 1) {
          break block
         }
         $6 = $7;
        }
        if (!global$9) {
         $8 = $0 + 23 | 0;
         $6 = std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($6, $8, $0 + 22 | 0, $1, $0 + 192 | 0, HEAP8[$0 + 223 | 0], HEAP8[$0 + 222 | 0], $0 + 208 | 0, $0 + 32 | 0, $0 + 28 | 0, $0 + 24 | 0, $0 + 224 | 0);
         if ($6) {
          break block1
         }
         $3 = $3 & 1;
         if ($3) {
          break block2
         }
         $3 = 0;
         $6 = HEAP32[$0 + 192 >> 2] - $1 | 0;
         $8 = ($6 | 0) <= 0;
         if ($8) {
          break block3
         }
         block4 : {
          block5 : {
           $8 = HEAPU8[$1 | 0];
           $7 = $8 - 43 | 0;
           switch ($7 | 0) {
           case 0:
           case 2:
            break block4;
           default:
            break block5;
           };
          }
          $3 = ($8 | 0) == 46;
          if ($3) {
           break block2
          }
          $3 = 1;
          $6 = ($8 - 48 & 255) >>> 0 < 10;
          if ($6) {
           break block3
          }
          break block1;
         }
         $6 = ($6 | 0) == 1;
         if ($6) {
          break block3
         }
         block6 : {
          switch ($7 | 0) {
          case 0:
          case 2:
           break block6;
          default:
           break block3;
          };
         }
         $6 = HEAPU8[$1 + 1 | 0];
         $3 = ($6 | 0) == 46;
         if ($3) {
          break block2
         }
         $3 = 1;
         $6 = ($6 - 48 & 255) >>> 0 <= 9;
         if ($6) {
          break block3
         }
        }
       }
       if (!global$9) {
        block7 : {
         if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 208 | 0) | HEAPU8[$0 + 23 | 0] != 1) {
          break block7
         }
         $3 = HEAP32[$0 + 28 >> 2];
         $6 = ($3 - ($0 + 32 | 0) | 0) > 159;
         if ($6) {
          break block7
         }
         HEAP32[$0 + 28 >> 2] = $3 + 4;
         $6 = HEAP32[$0 + 24 >> 2];
         HEAP32[$3 >> 2] = $6;
        }
        $3 = HEAP32[$0 + 192 >> 2];
       }
       if (!global$9 | ($9 | 0) == 6) {
        long_20double_20std____2____num_get_float_5babi_nn190106_5d_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $3, $4);
        $10 = 6;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $1 = HEAP32[$0 >> 2];
        $3 = HEAP32[$0 + 4 >> 2];
        $7 = HEAP32[$0 + 12 >> 2];
        HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
        HEAP32[$5 + 12 >> 2] = $7;
        HEAP32[$5 >> 2] = $1;
        HEAP32[$5 + 4 >> 2] = $3;
        $5 = HEAP32[$0 + 28 >> 2];
        std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 208 | 0, $0 + 32 | 0, $5, $4);
        $3 = $0 + 264 | 0;
        $1 = $0 + 268 | 0;
       }
       if (!global$9 | ($9 | 0) == 7) {
        $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $3);
        $10 = 7;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $7;
       }
       if (!global$9) {
        if ($1) {
         HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
        }
        $1 = HEAP32[$0 + 268 >> 2];
       }
       if (!global$9 | ($9 | 0) == 8) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $10 = 8;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       $2 = global$9 ? $2 : $0 + 208 | 0;
       if (!global$9 | ($9 | 0) == 9) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $10 = 9;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       if (!global$9) {
        __stack_pointer = $0 + 272 | 0;
        break block8;
       }
      }
      $3 = global$9 ? $3 : 1;
     }
     $6 = global$9 ? $6 : $0 + 268 | 0;
     if (!global$9 | ($9 | 0) == 10) {
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($6);
      $10 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    return $1 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function long_20double_20std____2____num_get_float_5babi_nn190106_5d_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 76;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $9 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $11 = HEAP32[$1 + 28 >> 2];
   $7 = HEAP32[$1 + 32 >> 2];
   $8 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $10 = HEAP32[$1 + 48 >> 2];
   $14 = HEAP32[$1 + 52 >> 2];
   $15 = HEAP32[$1 + 56 >> 2];
   $16 = HEAP32[$1 + 60 >> 2];
   $17 = HEAP32[$1 + 64 >> 2];
   $18 = HEAP32[$1 + 68 >> 2];
   $19 = HEAP32[$1 + 72 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $20 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 32 | 0;
   __stack_pointer = $6;
   $11 = ($1 | 0) != ($2 | 0);
  }
  block : {
   block3 : {
    block2 : {
     block1 : {
      if ((global$9 | 0) == 2 | $11) {
       if (!global$9) {
        $12 = __tls_base;
        $15 = HEAP32[$12 >> 2];
        HEAP32[$12 >> 2] = 0;
        $11 = __stack_pointer;
        $7 = $11 - 16 | 0;
        __stack_pointer = $7;
       }
       if (!global$9 | !$20) {
        $4 = std____2____cloc_28_29();
        if ((global$9 | 0) == 1) {
         break block
        }
        $11 = $4;
       }
       if (!global$9) {
        $8 = __stack_pointer - 16 | 0;
        __stack_pointer = $8;
        $13 = __stack_pointer - 16 | 0;
        __stack_pointer = $13;
        $11 = $6 + 28 | 0;
       }
       if (!global$9 | ($20 | 0) == 1) {
        strtox_1143($13, $1, $11, 2);
        $21 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $1 = $13;
        $5 = HEAP32[$1 >> 2];
        $9 = HEAP32[$1 + 4 >> 2];
        $10 = HEAP32[$1 + 12 >> 2];
        HEAP32[$8 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
        HEAP32[$8 + 12 >> 2] = $10;
        HEAP32[$8 >> 2] = $5;
        HEAP32[$8 + 4 >> 2] = $9;
        __stack_pointer = $1 + 16 | 0;
        $9 = HEAP32[$8 >> 2];
        $10 = HEAP32[$8 + 4 >> 2];
        $1 = HEAP32[$8 + 12 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        HEAP32[$7 + 12 >> 2] = $1;
        HEAP32[$7 >> 2] = $9;
        HEAP32[$7 + 4 >> 2] = $10;
        __stack_pointer = $8 + 16 | 0;
        $9 = HEAP32[$7 >> 2];
        $10 = HEAP32[$7 + 4 >> 2];
        $1 = HEAP32[$7 + 12 >> 2];
        $5 = $6 + 8 | 0;
        HEAP32[$5 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        HEAP32[$5 + 12 >> 2] = $1;
        HEAP32[$5 >> 2] = $9;
        HEAP32[$5 + 4 >> 2] = $10;
        __stack_pointer = $7 + 16 | 0;
        $9 = HEAP32[$6 + 16 >> 2];
        $5 = HEAP32[$6 + 20 >> 2];
        $10 = HEAP32[$6 + 8 >> 2];
        $1 = HEAP32[$6 + 12 >> 2];
        $14 = $1;
        $4 = HEAP32[$12 >> 2];
        if (!$4) {
         break block1
        }
        if (HEAP32[$6 + 28 >> 2] != ($2 | 0)) {
         break block2
        }
        $16 = $10;
        $17 = $1;
        $18 = $9;
        $19 = $5;
        if (($4 | 0) != 68) {
         break block3
        }
        break block2;
       }
      }
      if (!global$9) {
       HEAP32[$3 >> 2] = 4;
       break block3;
      }
     }
     if (!global$9) {
      HEAP32[$12 >> 2] = $15;
      if (HEAP32[$6 + 28 >> 2] == ($2 | 0)) {
       break block3
      }
     }
    }
    if (!global$9) {
     HEAP32[$3 >> 2] = 4;
     $9 = $18;
     $5 = $19;
     $14 = $17;
     $10 = $16;
    }
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $10;
    HEAP32[$0 + 4 >> 2] = $14;
    HEAP32[$0 + 8 >> 2] = $9;
    HEAP32[$0 + 12 >> 2] = $5;
    __stack_pointer = $6 + 32 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $21;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $9;
  HEAP32[$4 + 20 >> 2] = $5;
  HEAP32[$4 + 24 >> 2] = $6;
  HEAP32[$4 + 28 >> 2] = $11;
  HEAP32[$4 + 32 >> 2] = $7;
  HEAP32[$4 + 36 >> 2] = $8;
  HEAP32[$4 + 40 >> 2] = $13;
  HEAP32[$4 + 44 >> 2] = $12;
  HEAP32[$4 + 48 >> 2] = $10;
  HEAP32[$4 + 52 >> 2] = $14;
  HEAP32[$4 + 56 >> 2] = $15;
  HEAP32[$4 + 60 >> 2] = $16;
  HEAP32[$4 + 64 >> 2] = $17;
  HEAP32[$4 + 68 >> 2] = $18;
  HEAP32[$4 + 72 >> 2] = $19;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 76;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $9 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = $2;
   HEAP32[$0 + 252 >> 2] = $1;
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 196 | 0);
   $1 = $0 + 16 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$7) {
    $6 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   $2 = global$9 ? $2 : $0 + 208 | 0;
   if (!global$9 | ($7 | 0) == 1) {
    std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($1, 33712, 33738, $2);
    $8 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $1 = global$9 ? $1 : $0 + 16 | 0;
   if (!global$9 | ($7 | 0) == 2) {
    std____2__locale___locale_28_29($1);
    $8 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2);
   }
   if (!global$9 | ($7 | 0) == 3) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $8 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
    HEAP32[$0 + 180 >> 2] = $1;
    $3 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $9 = $0 + 248 | 0;
      $3 = $0 + 252 | 0;
     }
     if (!global$9 | ($7 | 0) == 4) {
      $6 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($3, $9);
      $8 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $6;
     }
     if (!global$9) {
      if ($3) {
       break block1
      }
      $3 = HEAP32[$0 + 180 >> 2];
      $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) + $1 | 0;
      $3 = ($3 | 0) == ($9 | 0);
     }
     if ((global$9 | 0) == 2 | $3) {
      if (!global$9) {
       $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) << 1;
      }
      if (!global$9 | ($7 | 0) == 5) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
       $8 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2)
      }
      if (!global$9 | ($7 | 0) == 6) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
       $8 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
       $3 = $3 + $1 | 0;
       HEAP32[$0 + 180 >> 2] = $3;
      }
     }
     $3 = global$9 ? $3 : $0 + 252 | 0;
     if (!global$9 | ($7 | 0) == 7) {
      $6 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($3);
      $8 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $6;
     }
     if (!global$9) {
      $9 = $0 + 180 | 0;
      $3 = std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($3, 16, $1, $9, $0 + 8 | 0, 0, $10, $0 + 16 | 0, $0 + 12 | 0, $0 + 208 | 0);
      if ($3) {
       break block1
      }
      $3 = $0 + 252 | 0;
     }
     if (!global$9 | ($7 | 0) == 8) {
      $6 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($3);
      $8 = 8;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $6;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    $3 = HEAP32[$0 + 180 >> 2];
    $1 = $3 - $1 | 0;
   }
   if (!global$9 | ($7 | 0) == 9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $8 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($2)
   }
   if (!global$9 | ($7 | 0) == 10) {
    $6 = std____2____cloc_28_29();
    $8 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $3 = $6;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $5
   }
   if (!global$9 | ($7 | 0) == 11) {
    $6 = std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($1, $3, $0);
    $8 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   if (!global$9) {
    if (($1 | 0) != 1) {
     HEAP32[$4 >> 2] = 4
    }
    $3 = $0 + 248 | 0;
    $1 = $0 + 252 | 0;
   }
   if (!global$9 | ($7 | 0) == 12) {
    $6 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $3);
    $8 = 12;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   if (!global$9) {
    if ($1) {
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
    }
    $1 = HEAP32[$0 + 252 >> 2];
   }
   if (!global$9 | ($7 | 0) == 13) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
    $8 = 13;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($7 | 0) == 14) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
    $8 = 14;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 256 | 0;
    return $1 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $9;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $4 = global$9 ? $4 : HEAP32[HEAP32[$0 >> 2] + 32 >> 2];
  block : {
   if (!global$9 | !$5) {
    FUNCTION_TABLE[$4 | 0]($0, $1, $2, $3) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function std____2____cloc_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $3 = HEAP32[global$10 >> 2];
   $1 = HEAP32[$3 >> 2];
   $2 = HEAP32[$3 + 4 >> 2];
   $4 = HEAP32[$3 + 8 >> 2];
   $7 = HEAP32[$3 + 16 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = Atomics.load(HEAPU8, 78564) & 1
  }
  block1 : {
   block : {
    if (!($2 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$5) {
     $0 = __cxa_guard_acquire(78564);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $2 = $0;
    }
    if (!global$9) {
     $2 = !$2;
     if ($2) {
      break block
     }
    }
    if (!global$9 | ($5 | 0) == 1) {
     __lock(78160);
     $6 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     $2 = __stack_pointer - 32 | 0;
     __stack_pointer = $2;
    }
    block3 : {
     block2 : {
      while (1) {
       if (!global$9) {
        $7 = ($2 + 8 | 0) + ($4 << 2) | 0;
        $3 = 1 << $4 & 2147483647 ? 11066 : 14303;
       }
       if (!global$9 | ($5 | 0) == 2) {
        $0 = __get_locale($4, $3);
        $6 = 2;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $3 = $0;
       }
       if (!global$9) {
        HEAP32[$7 >> 2] = $3;
        if (($3 | 0) == -1) {
         break block2
        }
        $4 = $4 + 1 | 0;
        $3 = ($4 | 0) != 6;
        if ($3) {
         continue
        }
       }
       break;
      };
      if (!global$9) {
       $4 = !__loc_is_allocated(0)
      }
      if ((global$9 | 0) == 2 | $4) {
       if (!global$9) {
        $1 = 29672;
        $0 = $2 + 8 | 0;
        if (!memcmp($0, 29672, 24)) {
         break block3
        }
        $1 = 29696;
        if (!memcmp($0, 29696, 24)) {
         break block3
        }
        $4 = 0;
        $1 = !HEAPU8[78216];
       }
       if ((global$9 | 0) == 2 | $1) {
        while (1) {
         $1 = global$9 ? $1 : ($4 << 2) + 78168 | 0;
         if (!global$9 | ($5 | 0) == 3) {
          $0 = __get_locale($4, 14303);
          $6 = 3;
          if ((global$9 | 0) == 1) {
           break block1
          }
          $3 = $0;
         }
         if (!global$9) {
          HEAP32[$1 >> 2] = $3;
          $4 = $4 + 1 | 0;
          $1 = ($4 | 0) != 6;
          if ($1) {
           continue
          }
         }
         break;
        };
        if (!global$9) {
         HEAP8[78216] = 1;
         HEAP32[19548] = HEAP32[19542];
        }
       }
       if (!global$9) {
        $1 = 78168;
        $0 = $2 + 8 | 0;
        if (!memcmp($0, 78168, 24)) {
         break block3
        }
        $1 = 78192;
        if (!memcmp($0, 78192, 24)) {
         break block3
        }
       }
       if (!global$9 | ($5 | 0) == 4) {
        $0 = emscripten_builtin_malloc(24);
        $6 = 4;
        if ((global$9 | 0) == 1) {
         break block1
        }
        $1 = $0;
       }
       if (!(global$9 | $1)) {
        break block2
       }
      }
      if (!global$9) {
       $0 = HEAP32[$2 + 12 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$2 + 8 >> 2];
       HEAP32[$1 + 4 >> 2] = $0;
       $0 = HEAP32[$2 + 28 >> 2];
       HEAP32[$1 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
       HEAP32[$1 + 20 >> 2] = $0;
       $0 = HEAP32[$2 + 20 >> 2];
       HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 16 >> 2];
       HEAP32[$1 + 12 >> 2] = $0;
       break block3;
      }
     }
     $1 = global$9 ? $1 : 0;
    }
    if (!global$9) {
     __stack_pointer = $2 + 32 | 0;
     __unlock(78160);
     HEAP32[19640] = $1;
    }
    if (!global$9 | ($5 | 0) == 5) {
     __cxa_guard_release(78564);
     $6 = 5;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return HEAP32[19640]
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $0 = HEAP32[global$10 >> 2];
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 12 >> 2] = $1;
   HEAP32[$3 + 8 >> 2] = $2;
   $2 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($3 + 4 | 0, $3 + 12 | 0);
   $1 = HEAP32[$3 + 8 >> 2];
  }
  block : {
   if (!global$9 | !$4) {
    $4 = vsscanf($0, 4903, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $4;
   }
   if (!global$9) {
    std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($2);
    __stack_pointer = $3 + 16 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function char_20const__20std____2__find_5babi_nn190106_5d_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$9;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $2 = memchr($0, HEAP8[$2 | 0], $1 - $0 | 0);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  $0 = char__20std____2____rewrap_iter_5babi_nn190106_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($0, $2 ? $2 : $1);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $1 = __uselocale(HEAP32[$1 >> 2]);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$0 >> 2] = $1;
  return $0;
 }
 
 function std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = global$9;
  $0 = HEAP32[$0 >> 2];
  if ($0) {
   __uselocale($0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 32 | 0;
   __stack_pointer = $6;
   HEAP32[$6 + 28 >> 2] = $1;
   $10 = !(HEAP32[$3 + 4 >> 2] & 1);
  }
  block : {
   block4 : {
    if ((global$9 | 0) == 2 | $10) {
     if (!global$9) {
      HEAP32[$6 >> 2] = -1;
      $10 = HEAP32[HEAP32[$0 >> 2] + 16 >> 2];
     }
     if (!global$9 | !$8) {
      $7 = FUNCTION_TABLE[$10 | 0]($0, $1, $2, $3, $4, $6) | 0;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $7;
     }
     if (!global$9) {
      block3 : {
       switch (HEAP32[$6 >> 2]) {
       case 0:
        HEAP8[$5 | 0] = 0;
        break block4;
       case 1:
        HEAP8[$5 | 0] = 1;
        break block4;
       default:
        break block3;
       };
      }
      HEAP8[$5 | 0] = 1;
      HEAP32[$4 >> 2] = 4;
      break block4;
     }
    }
    if (!global$9) {
     std____2__ios_base__getloc_28_29_20const($6, $3)
    }
    if (!global$9 | ($8 | 0) == 1) {
     $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($6);
     $9 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $7;
    }
    if (!global$9 | ($8 | 0) == 2) {
     std____2__locale___locale_28_29($6);
     $9 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     std____2__ios_base__getloc_28_29_20const($6, $3)
    }
    if (!global$9 | ($8 | 0) == 3) {
     $7 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($6);
     $9 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $3 = $7;
    }
    if (!global$9 | ($8 | 0) == 4) {
     std____2__locale___locale_28_29($6);
     $9 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($8 | 0) == 5) {
     std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($6, $3);
     $9 = 5;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $6 | 12;
    if (!global$9 | ($8 | 0) == 6) {
     std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $3);
     $9 = 6;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $3 = $6 + 24 | 0;
     $0 = $6 + 28 | 0;
    }
    if (!global$9 | ($8 | 0) == 7) {
     $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($0, $2, $6, $3, $1, $4, 1);
     $9 = 7;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $7;
    }
    if (!global$9) {
     $0 = ($0 | 0) == ($6 | 0);
     HEAP8[$5 | 0] = $0;
     $1 = HEAP32[$6 + 28 >> 2];
    }
    while (1) {
     $0 = global$9 ? $0 : $3 - 12 | 0;
     if (!global$9 | ($8 | 0) == 8) {
      $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
      $9 = 8;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $7;
     }
     if (!global$9) {
      $0 = ($3 | 0) != ($6 | 0);
      if ($0) {
       continue
      }
     }
     break;
    };
   }
   if (!global$9) {
    __stack_pointer = $6 + 32 | 0;
    return $1 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78816);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 84;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $11 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $14 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $20 = HEAP32[$1 + 60 >> 2];
   $18 = HEAP32[$1 + 64 >> 2];
   $21 = HEAP32[$1 + 68 >> 2];
   $22 = HEAP32[$1 + 72 >> 2];
   $19 = HEAP32[$1 + 76 >> 2];
   $23 = HEAP32[$1 + 80 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $12 = __stack_pointer - 128 | 0;
   __stack_pointer = $12;
   HEAP32[$12 + 124 >> 2] = $1;
   $11 = std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____difference_type_20std____2__distance_5babi_nn190106_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($2, $3);
   HEAP32[$12 + 16 >> 2] = 282;
   $10 = $12 + 16 | 0;
   $20 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($12 + 8 | 0, 0, $10);
   $1 = $11 >>> 0 >= 101;
  }
  block : {
   block3 : {
    block2 : {
     block1 : {
      if ((global$9 | 0) == 2 | $1) {
       if (!global$9 | !$13) {
        $7 = emscripten_builtin_malloc($11);
        if ((global$9 | 0) == 1) {
         break block
        }
        $10 = $7;
       }
       if (!global$9) {
        $1 = !$10;
        if ($1) {
         break block1
        }
       }
       if (!global$9 | ($13 | 0) == 1) {
        std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($20, $10);
        $15 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
      }
      if (!global$9) {
       $9 = $10;
       $1 = $2;
      }
      while (1) {
       $8 = global$9 ? $8 : ($1 | 0) == ($3 | 0);
       $18 = global$9 ? $18 : $8;
       if ($18 | (global$9 | 0) == 2) {
        label1 : while (1) {
         $1 = global$9 ? $1 : $12 + 124 | 0;
         if (!global$9 | ($13 | 0) == 2) {
          $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
          $15 = 2;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $7;
         }
         $1 = global$9 ? $1 : $11 ? $1 : 1;
         if ($1 | (global$9 | 0) == 2) {
          $1 = global$9 ? $1 : $12 + 124 | 0;
          if (!global$9 | ($13 | 0) == 3) {
           $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
           $15 = 3;
           if ((global$9 | 0) == 1) {
            break block
           }
           $0 = $7;
          }
          if (!global$9) {
           if ($0) {
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
           }
           while (1) {
            if (($2 | 0) == ($3 | 0)) {
             break block2
            }
            if (HEAPU8[$10 | 0] == 2) {
             break block3
            }
            $10 = $10 + 1 | 0;
            $2 = $2 + 12 | 0;
            continue;
           };
          }
         }
         if (!global$9 | ($13 | 0) == 4) {
          $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
          $15 = 4;
          if ((global$9 | 0) == 1) {
           break block
          }
          $17 = $7;
         }
         $1 = global$9 ? $1 : !$6;
         if (!global$9 | ($13 | 0) == 5 ? $1 | (global$9 | 0) == 2 : 0) {
          $7 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($4, $17);
          $15 = 5;
          if ((global$9 | 0) == 1) {
           break block
          }
          $17 = $7;
         }
         if (!global$9) {
          $16 = $21 + 1 | 0;
          $22 = 0;
          $9 = $10;
          $1 = $2;
         }
         while (1) {
          $8 = global$9 ? $8 : ($1 | 0) == ($3 | 0);
          $19 = global$9 ? $19 : $8;
          if ($19 | (global$9 | 0) == 2) {
           if (!global$9) {
            $21 = $16;
            $1 = !$22;
            if ($1) {
             continue label1
            }
           }
           if (!global$9 | ($13 | 0) == 6) {
            $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
            $15 = 6;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $7;
           }
           if (!global$9) {
            $9 = $10;
            $1 = $2;
            $8 = $11 + $14 >>> 0 < 2;
            if ($8) {
             continue label1
            }
            while (1) {
             $8 = ($1 | 0) == ($3 | 0);
             if ($8) {
              continue label1
             }
             block4 : {
              if (HEAPU8[$9 | 0] != 2) {
               break block4
              }
              if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1) | 0) == ($16 | 0)) {
               break block4
              }
              HEAP8[$9 | 0] = 0;
              $14 = $14 - 1 | 0;
             }
             $9 = $9 + 1 | 0;
             $1 = $1 + 12 | 0;
             continue;
            };
           }
          }
          if (!$19 | (global$9 | 0) == 2) {
           $8 = global$9 ? $8 : HEAPU8[$9 | 0] != 1;
           block5 : {
            if (!global$9) {
             if ($8) {
              break block5
             }
             $8 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($1, $21) >> 2];
            }
            $23 = global$9 ? $23 : $6;
            if ((!$23 | (global$9 | 0) == 2) & (!global$9 | ($13 | 0) == 7)) {
             $7 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($4, $8);
             $15 = 7;
             if ((global$9 | 0) == 1) {
              break block
             }
             $8 = $7;
            }
            if (!global$9) {
             $8 = ($8 | 0) == ($17 | 0);
             block6 : {
              if ($8) {
               $22 = 1;
               $8 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1) | 0) != ($16 | 0);
               if ($8) {
                break block5
               }
               HEAP8[$9 | 0] = 2;
               $14 = $14 + 1 | 0;
               break block6;
              }
              HEAP8[$9 | 0] = 0;
             }
             $11 = $11 - 1 | 0;
            }
           }
           if (!global$9) {
            $9 = $9 + 1 | 0;
            $1 = $1 + 12 | 0;
            continue;
           }
          }
          break;
         };
         break;
        }
       }
       if (!global$9 & (!$18 | (global$9 | 0) == 2)) {
        $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($1);
        $16 = $8 ? 2 : 1;
        HEAP8[$9 | 0] = $16;
        $9 = $9 + 1 | 0;
        $1 = $1 + 12 | 0;
        $14 = $8 + $14 | 0;
        $11 = $11 - $8 | 0;
        continue;
       }
       break;
      };
     }
     if (!global$9) {
      std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
      wasm2js_trap();
     }
    }
    if (!global$9) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4
    }
   }
   if (!global$9 | ($13 | 0) == 8) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($20);
    $15 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $12 + 128 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $15;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[$7 + 32 >> 2] = $9;
  HEAP32[$7 + 36 >> 2] = $11;
  HEAP32[$7 + 40 >> 2] = $10;
  HEAP32[$7 + 44 >> 2] = $12;
  HEAP32[$7 + 48 >> 2] = $14;
  HEAP32[$7 + 52 >> 2] = $16;
  HEAP32[$7 + 56 >> 2] = $17;
  HEAP32[$7 + 60 >> 2] = $20;
  HEAP32[$7 + 64 >> 2] = $18;
  HEAP32[$7 + 68 >> 2] = $21;
  HEAP32[$7 + 72 >> 2] = $22;
  HEAP32[$7 + 76 >> 2] = $19;
  HEAP32[$7 + 80 >> 2] = $23;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 84;
  return 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return ($1 << 2) + $0 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 336 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 328 >> 2] = $2;
   HEAP32[$0 + 332 >> 2] = $1;
   $2 = $0 + 208 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $10 = $7;
   }
   if (!global$9) {
    $6 = $0 + 324 | 0;
    $2 = $0 + 196 | 0;
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($2, $3, $6);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $11 = $0 + 328 | 0;
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 3) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($6, $11);
      $9 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($11 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 5) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 332 | 0;
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $11 = $0 + 180 | 0;
      if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($6, $1, $2, $11, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $10)) {
       break block1
      }
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 7) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($6);
      $9 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $10 = HEAP32[$0 + 12 >> 2];
     if (($10 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $10 + 4;
     HEAP32[$10 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $10 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = long_20std____2____num_get_signed_integral_5babi_nn190106_5d_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $10, $4, $1);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $1;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 328 | 0;
    $1 = $0 + 332 | 0;
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $2);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 332 >> 2];
   }
   if (!global$9 | ($8 | 0) == 10) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 11) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 336 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   $2 = $3 + 12 | 0;
   std____2__ios_base__getloc_28_29_20const($2, $0);
   $0 = $2;
  }
  block : {
   if (!global$9 | !$4) {
    $2 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($4 | 0) == 1) {
    std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, 33712, 33738, $1);
    $5 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : $3 + 12 | 0;
   if (!global$9 | ($4 | 0) == 2) {
    std____2__locale___locale_28_29($0);
    $5 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $3 + 16 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
   $5 = $4 + 12 | 0;
   std____2__ios_base__getloc_28_29_20const($5, $1);
   $1 = $5;
  }
  block : {
   if (!global$9 | !$6) {
    $3 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   if (!global$9 | ($6 | 0) == 1) {
    $3 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($1);
    $7 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $5 = $3;
   }
   if (!global$9) {
    HEAP32[$2 >> 2] = $5
   }
   if (!global$9 | ($6 | 0) == 2) {
    std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $1);
    $7 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : $4 + 12 | 0;
   if (!global$9 | ($6 | 0) == 3) {
    std____2__locale___locale_28_29($0);
    $7 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = 0, $12 = 0;
  $12 = global$9;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  HEAP32[$10 + 12 >> 2] = $0;
  block3 : {
   block1 : {
    block : {
     $11 = HEAP32[$3 >> 2];
     if (($11 | 0) != ($2 | 0)) {
      break block
     }
     if (HEAP32[$9 + 96 >> 2] == ($0 | 0)) {
      $0 = 43
     } else {
      if (HEAP32[$9 + 100 >> 2] != ($0 | 0)) {
       break block
      }
      $0 = 45;
     }
     HEAP32[$3 >> 2] = $11 + 1;
     HEAP8[$11 | 0] = $0;
     break block1;
    }
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6);
    if ((global$9 | 0) != ($12 | 0)) {
     wasm2js_trap()
    }
    if (!(!$6 | ($0 | 0) != ($5 | 0))) {
     $0 = 0;
     $1 = HEAP32[$8 >> 2];
     if (($1 - $7 | 0) > 159) {
      break block3
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$8 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $0;
     break block1;
    }
    $0 = -1;
    $5 = wchar_t_20const__20std____2__find_5babi_nn190106_5d_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($9, $9 + 104 | 0, $10 + 12 | 0);
    if ((global$9 | 0) != ($12 | 0)) {
     wasm2js_trap()
    }
    $5 = $5 - $9 >> 2;
    if (($5 | 0) > 23) {
     break block3
    }
    block5 : {
     block6 : {
      switch ($1 - 8 | 0) {
      case 0:
      case 2:
       if (($1 | 0) > ($5 | 0)) {
        break block5
       }
       break block3;
      case 1:
       break block5;
      default:
       break block6;
      };
     }
     if (($1 | 0) != 16 | ($5 | 0) < 22) {
      break block5
     }
     $1 = HEAP32[$3 >> 2];
     if (($1 | 0) == ($2 | 0) | ($1 - $2 | 0) > 2 | HEAPU8[$1 - 1 | 0] != 48) {
      break block3
     }
     $0 = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$3 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = HEAPU8[$5 + 33712 | 0];
     break block3;
    }
    $0 = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = HEAPU8[$5 + 33712 | 0];
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
    $0 = 0;
    break block3;
   }
   $0 = 0;
   HEAP32[$4 >> 2] = 0;
  }
  __stack_pointer = $10 + 16 | 0;
  return $0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 336 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 328 >> 2] = $2;
   HEAP32[$0 + 332 >> 2] = $1;
   $2 = $0 + 208 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $10 = $7;
   }
   if (!global$9) {
    $6 = $0 + 324 | 0;
    $2 = $0 + 196 | 0;
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($2, $3, $6);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $11 = $0 + 328 | 0;
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 3) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($6, $11);
      $9 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($11 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 5) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 332 | 0;
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $11 = $0 + 180 | 0;
      if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($6, $1, $2, $11, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $10)) {
       break block1
      }
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 7) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($6);
      $9 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $10 = HEAP32[$0 + 12 >> 2];
     if (($10 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $10 + 4;
     HEAP32[$10 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $10 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = long_20long_20std____2____num_get_signed_integral_5babi_nn190106_5d_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $10, $4, $1);
    $14 = i64toi32_i32$HIGH_BITS;
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $13 = $14;
    $12 = $7;
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $12;
    HEAP32[$5 + 4 >> 2] = $13;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 328 | 0;
    $1 = $0 + 332 | 0;
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $2);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 332 >> 2];
   }
   if (!global$9 | ($8 | 0) == 10) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 11) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 336 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[$7 + 36 >> 2] = $12;
  HEAP32[$7 + 40 >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 336 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 328 >> 2] = $2;
   HEAP32[$0 + 332 >> 2] = $1;
   $2 = $0 + 208 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $10 = $7;
   }
   if (!global$9) {
    $6 = $0 + 324 | 0;
    $2 = $0 + 196 | 0;
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($2, $3, $6);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $11 = $0 + 328 | 0;
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 3) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($6, $11);
      $9 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($11 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 5) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 332 | 0;
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $11 = $0 + 180 | 0;
      if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($6, $1, $2, $11, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $10)) {
       break block1
      }
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 7) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($6);
      $9 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $10 = HEAP32[$0 + 12 >> 2];
     if (($10 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $10 + 4;
     HEAP32[$10 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $10 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = unsigned_20short_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $10, $4, $1);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    HEAP16[$5 >> 1] = $1;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 328 | 0;
    $1 = $0 + 332 | 0;
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $2);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 332 >> 2];
   }
   if (!global$9 | ($8 | 0) == 10) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 11) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 336 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 336 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 328 >> 2] = $2;
   HEAP32[$0 + 332 >> 2] = $1;
   $2 = $0 + 208 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $10 = $7;
   }
   if (!global$9) {
    $6 = $0 + 324 | 0;
    $2 = $0 + 196 | 0;
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($2, $3, $6);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $11 = $0 + 328 | 0;
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 3) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($6, $11);
      $9 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($11 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 5) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 332 | 0;
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $11 = $0 + 180 | 0;
      if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($6, $1, $2, $11, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $10)) {
       break block1
      }
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 7) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($6);
      $9 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $10 = HEAP32[$0 + 12 >> 2];
     if (($10 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $10 + 4;
     HEAP32[$10 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $10 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = unsigned_20int_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $10, $4, $1);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $1;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 328 | 0;
    $1 = $0 + 332 | 0;
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $2);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 332 >> 2];
   }
   if (!global$9 | ($8 | 0) == 10) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 11) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 336 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 336 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 328 >> 2] = $2;
   HEAP32[$0 + 332 >> 2] = $1;
   $2 = $0 + 208 | 0;
   $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $10 = $7;
   }
   if (!global$9) {
    $6 = $0 + 324 | 0;
    $2 = $0 + 196 | 0;
   }
   if (!global$9 | ($8 | 0) == 1) {
    std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($2, $3, $6);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3);
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
    HEAP32[$0 + 180 >> 2] = $2;
    $6 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $11 = $0 + 328 | 0;
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 3) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($6, $11);
      $9 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      if ($6) {
       break block1
      }
      $6 = HEAP32[$0 + 180 >> 2];
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) + $2 | 0;
      $6 = ($6 | 0) == ($11 | 0);
     }
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($3) << 1;
      }
      if (!global$9 | ($8 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($3)
      }
      if (!global$9 | ($8 | 0) == 5) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($3, $2);
       $9 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($3, 0);
       $6 = $6 + $2 | 0;
       HEAP32[$0 + 180 >> 2] = $6;
      }
     }
     $6 = global$9 ? $6 : $0 + 332 | 0;
     if (!global$9 | ($8 | 0) == 6) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($6);
      $9 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      $11 = $0 + 180 | 0;
      if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($6, $1, $2, $11, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $10)) {
       break block1
      }
      $6 = $0 + 332 | 0;
     }
     if (!global$9 | ($8 | 0) == 7) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($6);
      $9 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    block2 : {
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 196 | 0)) {
      break block2
     }
     $10 = HEAP32[$0 + 12 >> 2];
     if (($10 - ($0 + 16 | 0) | 0) > 159) {
      break block2
     }
     HEAP32[$0 + 12 >> 2] = $10 + 4;
     HEAP32[$10 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    $10 = HEAP32[$0 + 180 >> 2];
   }
   if (!global$9 | ($8 | 0) == 8) {
    $7 = unsigned_20long_20long_20std____2____num_get_unsigned_integral_5babi_nn190106_5d_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, $10, $4, $1);
    $14 = i64toi32_i32$HIGH_BITS;
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $13 = $14;
    $12 = $7;
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $12;
    HEAP32[$5 + 4 >> 2] = $13;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
    $2 = $0 + 328 | 0;
    $1 = $0 + 332 | 0;
   }
   if (!global$9 | ($8 | 0) == 9) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $2);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     $1 = HEAP32[$4 >> 2] | 2;
     HEAP32[$4 >> 2] = $1;
    }
    $2 = HEAP32[$0 + 332 >> 2];
   }
   if (!global$9 | ($8 | 0) == 10) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $1 = global$9 ? $1 : $0 + 196 | 0;
   if (!global$9 | ($8 | 0) == 11) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $9 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 336 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $10;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[$7 + 36 >> 2] = $12;
  HEAP32[$7 + 40 >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0);
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $11 = HEAPF32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 352 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 344 >> 2] = $2;
   HEAP32[$0 + 348 >> 2] = $1;
   $2 = $0 + 224 | 0;
   $6 = $0 + 220 | 0;
   $8 = $0 + 216 | 0;
   $1 = $0 + 204 | 0;
  }
  block : {
   if (!global$9 | !$9) {
    std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($1, $3, $2, $6, $8);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 192 | 0);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2);
   }
   if (!global$9 | ($9 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $10 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
    HEAP32[$0 + 188 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = $0 + 16;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP8[$0 + 7 | 0] = 1;
    HEAP8[$0 + 6 | 0] = 69;
    $3 = 0;
   }
   while (1) {
    block8 : {
     if (!global$9) {
      $8 = $0 + 344 | 0;
      $6 = $0 + 348 | 0;
     }
     if (!global$9 | ($9 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($6, $8);
      $10 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     block3 : {
      block2 : {
       block1 : {
        if (!global$9) {
         if ($6) {
          break block1
         }
         $6 = HEAP32[$0 + 188 >> 2];
         $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) + $1 | 0;
         $6 = ($6 | 0) == ($8 | 0);
        }
        if ((global$9 | 0) == 2 | $6) {
         if (!global$9) {
          $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) << 1;
         }
         if (!global$9 | ($9 | 0) == 3) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $10 = 3;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2)
         }
         if (!global$9 | ($9 | 0) == 4) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $10 = 4;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
          $6 = $6 + $1 | 0;
          HEAP32[$0 + 188 >> 2] = $6;
         }
        }
        $6 = global$9 ? $6 : $0 + 348 | 0;
        if (!global$9 | ($9 | 0) == 5) {
         $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($6);
         $10 = 5;
         if ((global$9 | 0) == 1) {
          break block
         }
         $6 = $7;
        }
        if (!global$9) {
         $8 = $0 + 7 | 0;
         $6 = std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($6, $8, $0 + 6 | 0, $1, $0 + 188 | 0, HEAP32[$0 + 220 >> 2], HEAP32[$0 + 216 >> 2], $0 + 204 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0);
         if ($6) {
          break block1
         }
         $3 = $3 & 1;
         if ($3) {
          break block2
         }
         $3 = 0;
         $6 = HEAP32[$0 + 188 >> 2] - $1 | 0;
         $8 = ($6 | 0) <= 0;
         if ($8) {
          break block3
         }
         block4 : {
          block5 : {
           $8 = HEAPU8[$1 | 0];
           $7 = $8 - 43 | 0;
           switch ($7 | 0) {
           case 0:
           case 2:
            break block4;
           default:
            break block5;
           };
          }
          $3 = ($8 | 0) == 46;
          if ($3) {
           break block2
          }
          $3 = 1;
          $6 = ($8 - 48 & 255) >>> 0 < 10;
          if ($6) {
           break block3
          }
          break block1;
         }
         $6 = ($6 | 0) == 1;
         if ($6) {
          break block3
         }
         block6 : {
          switch ($7 | 0) {
          case 0:
          case 2:
           break block6;
          default:
           break block3;
          };
         }
         $6 = HEAPU8[$1 + 1 | 0];
         $3 = ($6 | 0) == 46;
         if ($3) {
          break block2
         }
         $3 = 1;
         $6 = ($6 - 48 & 255) >>> 0 <= 9;
         if ($6) {
          break block3
         }
        }
       }
       if (!global$9) {
        block7 : {
         if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 204 | 0) | HEAPU8[$0 + 7 | 0] != 1) {
          break block7
         }
         $3 = HEAP32[$0 + 12 >> 2];
         $6 = ($3 - ($0 + 16 | 0) | 0) > 159;
         if ($6) {
          break block7
         }
         HEAP32[$0 + 12 >> 2] = $3 + 4;
         $6 = HEAP32[$0 + 8 >> 2];
         HEAP32[$3 >> 2] = $6;
        }
        $3 = HEAP32[$0 + 188 >> 2];
       }
       if (!global$9 | ($9 | 0) == 6) {
        $12 = float_20std____2____num_get_float_5babi_nn190106_5d_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, $3, $4);
        $10 = 6;
        if ((global$9 | 0) == 1) {
         break block
        }
        $11 = $12;
       }
       if (!global$9) {
        HEAPF32[$5 >> 2] = $11;
        $5 = HEAP32[$0 + 12 >> 2];
        std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 204 | 0, $0 + 16 | 0, $5, $4);
        $3 = $0 + 344 | 0;
        $1 = $0 + 348 | 0;
       }
       if (!global$9 | ($9 | 0) == 7) {
        $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $3);
        $10 = 7;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $7;
       }
       if (!global$9) {
        if ($1) {
         HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
        }
        $1 = HEAP32[$0 + 348 >> 2];
       }
       if (!global$9 | ($9 | 0) == 8) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $10 = 8;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       $2 = global$9 ? $2 : $0 + 204 | 0;
       if (!global$9 | ($9 | 0) == 9) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $10 = 9;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       if (!global$9) {
        __stack_pointer = $0 + 352 | 0;
        break block8;
       }
      }
      $3 = global$9 ? $3 : 1;
     }
     $6 = global$9 ? $6 : $0 + 348 | 0;
     if (!global$9 | ($9 | 0) == 10) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($6);
      $10 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    return $1 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAPF32[$7 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $5 = $6 + 12 | 0;
   std____2__ios_base__getloc_28_29_20const($5, $1);
   $1 = $5;
  }
  block : {
   if (!global$9 | !$7) {
    $5 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $5;
   }
   if (!global$9 | ($7 | 0) == 1) {
    std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($1, 33712, 33740, $2);
    $8 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $1 = global$9 ? $1 : $6 + 12 | 0;
   if (!global$9 | ($7 | 0) == 2) {
    $5 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($1);
    $8 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $5;
   }
   if (!global$9 | ($7 | 0) == 3) {
    $5 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($1);
    $8 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    HEAP32[$3 >> 2] = $2
   }
   if (!global$9 | ($7 | 0) == 4) {
    $5 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($1);
    $8 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    HEAP32[$4 >> 2] = $2
   }
   if (!global$9 | ($7 | 0) == 5) {
    std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $1);
    $8 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : $6 + 12 | 0;
   if (!global$9 | ($7 | 0) == 6) {
    std____2__locale___locale_28_29($0);
    $8 = 6;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = 0, $13 = 0;
  $12 = global$9;
  $13 = __stack_pointer - 16 | 0;
  __stack_pointer = $13;
  HEAP32[$13 + 12 >> 2] = $0;
  block1 : {
   block : {
    if (($0 | 0) == ($5 | 0)) {
     if (HEAPU8[$1 | 0] != 1) {
      break block
     }
     $0 = 0;
     HEAP8[$1 | 0] = 0;
     $1 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 46;
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($7);
     if ((global$9 | 0) != ($12 | 0)) {
      wasm2js_trap()
     }
     if (!$1) {
      break block1
     }
     $1 = HEAP32[$9 >> 2];
     if (($1 - $8 | 0) > 159) {
      break block1
     }
     $2 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $2;
     break block1;
    }
    block3 : {
     block2 : {
      if (($0 | 0) != ($6 | 0)) {
       break block2
      }
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($7);
      if ((global$9 | 0) != ($12 | 0)) {
       wasm2js_trap()
      }
      if (!$0) {
       break block2
      }
      if (HEAPU8[$1 | 0] != 1) {
       break block
      }
      $0 = HEAP32[$9 >> 2];
      if (($0 - $8 | 0) > 159) {
       break block3
      }
      $1 = HEAP32[$10 >> 2];
      HEAP32[$9 >> 2] = $0 + 4;
      HEAP32[$0 >> 2] = $1;
      $0 = 0;
      HEAP32[$10 >> 2] = 0;
      break block1;
     }
     $0 = wchar_t_20const__20std____2__find_5babi_nn190106_5d_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($11, $11 + 112 | 0, $13 + 12 | 0);
     if ((global$9 | 0) != ($12 | 0)) {
      wasm2js_trap()
     }
     $0 = $0 - $11 | 0;
     $6 = $0 >> 2;
     if (($6 | 0) > 27) {
      break block
     }
     $5 = HEAP8[$6 + 33712 | 0];
     block5 : {
      block4 : {
       $0 = $0 & -5;
       if (($0 | 0) != 88) {
        if (($0 | 0) != 96) {
         break block4
        }
        $0 = $3;
        $3 = HEAP32[$4 >> 2];
        if (($0 | 0) != ($3 | 0)) {
         $0 = -1;
         $1 = toupper(HEAP8[$3 - 1 | 0]);
         if ((global$9 | 0) != ($12 | 0)) {
          wasm2js_trap()
         }
         $2 = toupper(HEAP8[$2 | 0]);
         if ((global$9 | 0) != ($12 | 0)) {
          wasm2js_trap()
         }
         if (($1 | 0) != ($2 | 0)) {
          break block1
         }
        }
        HEAP32[$4 >> 2] = $3 + 1;
        HEAP8[$3 | 0] = $5;
        break block3;
       }
       HEAP8[$2 | 0] = 80;
       break block5;
      }
      $0 = toupper($5);
      if ((global$9 | 0) != ($12 | 0)) {
       wasm2js_trap()
      }
      if (($0 | 0) != HEAP8[$2 | 0]) {
       break block5
      }
      $0 = tolower($0);
      if ((global$9 | 0) != ($12 | 0)) {
       wasm2js_trap()
      }
      HEAP8[$2 | 0] = $0;
      if (HEAPU8[$1 | 0] != 1) {
       break block5
      }
      HEAP8[$1 | 0] = 0;
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($7);
      if ((global$9 | 0) != ($12 | 0)) {
       wasm2js_trap()
      }
      if (!$0) {
       break block5
      }
      $0 = HEAP32[$9 >> 2];
      if (($0 - $8 | 0) > 159) {
       break block5
      }
      $1 = HEAP32[$10 >> 2];
      HEAP32[$9 >> 2] = $0 + 4;
      HEAP32[$0 >> 2] = $1;
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $5;
     $0 = 0;
     if (($6 | 0) > 21) {
      break block1
     }
     HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
     break block1;
    }
    $0 = 0;
    break block1;
   }
   $0 = -1;
  }
  __stack_pointer = $13 + 16 | 0;
  return $0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $7 = HEAP32[$1 + 36 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   wasm2js_scratch_store_i32(0, $9 | 0);
   wasm2js_scratch_store_i32(1, $7 | 0);
   $11 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 352 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 344 >> 2] = $2;
   HEAP32[$0 + 348 >> 2] = $1;
   $2 = $0 + 224 | 0;
   $6 = $0 + 220 | 0;
   $8 = $0 + 216 | 0;
   $1 = $0 + 204 | 0;
  }
  block : {
   if (!global$9 | !$10) {
    std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($1, $3, $2, $6, $8);
    $9 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 192 | 0);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2);
   }
   if (!global$9 | ($10 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
    HEAP32[$0 + 188 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = $0 + 16;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP8[$0 + 7 | 0] = 1;
    HEAP8[$0 + 6 | 0] = 69;
    $3 = 0;
   }
   while (1) {
    block8 : {
     if (!global$9) {
      $8 = $0 + 344 | 0;
      $6 = $0 + 348 | 0;
     }
     if (!global$9 | ($10 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($6, $8);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     block3 : {
      block2 : {
       block1 : {
        if (!global$9) {
         if ($6) {
          break block1
         }
         $6 = HEAP32[$0 + 188 >> 2];
         $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) + $1 | 0;
         $6 = ($6 | 0) == ($8 | 0);
        }
        if ((global$9 | 0) == 2 | $6) {
         if (!global$9) {
          $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) << 1;
         }
         if (!global$9 | ($10 | 0) == 3) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $9 = 3;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2)
         }
         if (!global$9 | ($10 | 0) == 4) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $9 = 4;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
          $6 = $6 + $1 | 0;
          HEAP32[$0 + 188 >> 2] = $6;
         }
        }
        $6 = global$9 ? $6 : $0 + 348 | 0;
        if (!global$9 | ($10 | 0) == 5) {
         $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($6);
         $9 = 5;
         if ((global$9 | 0) == 1) {
          break block
         }
         $6 = $7;
        }
        if (!global$9) {
         $8 = $0 + 7 | 0;
         $6 = std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($6, $8, $0 + 6 | 0, $1, $0 + 188 | 0, HEAP32[$0 + 220 >> 2], HEAP32[$0 + 216 >> 2], $0 + 204 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0);
         if ($6) {
          break block1
         }
         $3 = $3 & 1;
         if ($3) {
          break block2
         }
         $3 = 0;
         $6 = HEAP32[$0 + 188 >> 2] - $1 | 0;
         $8 = ($6 | 0) <= 0;
         if ($8) {
          break block3
         }
         block4 : {
          block5 : {
           $8 = HEAPU8[$1 | 0];
           $7 = $8 - 43 | 0;
           switch ($7 | 0) {
           case 0:
           case 2:
            break block4;
           default:
            break block5;
           };
          }
          $3 = ($8 | 0) == 46;
          if ($3) {
           break block2
          }
          $3 = 1;
          $6 = ($8 - 48 & 255) >>> 0 < 10;
          if ($6) {
           break block3
          }
          break block1;
         }
         $6 = ($6 | 0) == 1;
         if ($6) {
          break block3
         }
         block6 : {
          switch ($7 | 0) {
          case 0:
          case 2:
           break block6;
          default:
           break block3;
          };
         }
         $6 = HEAPU8[$1 + 1 | 0];
         $3 = ($6 | 0) == 46;
         if ($3) {
          break block2
         }
         $3 = 1;
         $6 = ($6 - 48 & 255) >>> 0 <= 9;
         if ($6) {
          break block3
         }
        }
       }
       if (!global$9) {
        block7 : {
         if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 204 | 0) | HEAPU8[$0 + 7 | 0] != 1) {
          break block7
         }
         $3 = HEAP32[$0 + 12 >> 2];
         $6 = ($3 - ($0 + 16 | 0) | 0) > 159;
         if ($6) {
          break block7
         }
         HEAP32[$0 + 12 >> 2] = $3 + 4;
         $6 = HEAP32[$0 + 8 >> 2];
         HEAP32[$3 >> 2] = $6;
        }
        $3 = HEAP32[$0 + 188 >> 2];
       }
       if (!global$9 | ($10 | 0) == 6) {
        $12 = double_20std____2____num_get_float_5babi_nn190106_5d_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, $3, $4);
        $9 = 6;
        if ((global$9 | 0) == 1) {
         break block
        }
        $11 = $12;
       }
       if (!global$9) {
        HEAPF64[$5 >> 3] = $11;
        $5 = HEAP32[$0 + 12 >> 2];
        std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 204 | 0, $0 + 16 | 0, $5, $4);
        $3 = $0 + 344 | 0;
        $1 = $0 + 348 | 0;
       }
       if (!global$9 | ($10 | 0) == 7) {
        $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $3);
        $9 = 7;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $7;
       }
       if (!global$9) {
        if ($1) {
         HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
        }
        $1 = HEAP32[$0 + 348 >> 2];
       }
       if (!global$9 | ($10 | 0) == 8) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $9 = 8;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       $2 = global$9 ? $2 : $0 + 204 | 0;
       if (!global$9 | ($10 | 0) == 9) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $9 = 9;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       if (!global$9) {
        __stack_pointer = $0 + 352 | 0;
        break block8;
       }
      }
      $3 = global$9 ? $3 : 1;
     }
     $6 = global$9 ? $6 : $0 + 348 | 0;
     if (!global$9 | ($10 | 0) == 10) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($6);
      $9 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    return $1 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  wasm2js_scratch_store_f64(+$11);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $7, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  HEAP32[$7 + 36 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 368 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 360 >> 2] = $2;
   HEAP32[$0 + 364 >> 2] = $1;
   $2 = $0 + 240 | 0;
   $6 = $0 + 236 | 0;
   $8 = $0 + 232 | 0;
   $1 = $0 + 220 | 0;
  }
  block : {
   if (!global$9 | !$9) {
    std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($1, $3, $2, $6, $8);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 208 | 0);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2);
   }
   if (!global$9 | ($9 | 0) == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $10 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
    HEAP32[$0 + 204 >> 2] = $1;
    HEAP32[$0 + 28 >> 2] = $0 + 32;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP8[$0 + 23 | 0] = 1;
    HEAP8[$0 + 22 | 0] = 69;
    $3 = 0;
   }
   while (1) {
    block8 : {
     if (!global$9) {
      $8 = $0 + 360 | 0;
      $6 = $0 + 364 | 0;
     }
     if (!global$9 | ($9 | 0) == 2) {
      $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($6, $8);
      $10 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     block3 : {
      block2 : {
       block1 : {
        if (!global$9) {
         if ($6) {
          break block1
         }
         $6 = HEAP32[$0 + 204 >> 2];
         $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) + $1 | 0;
         $6 = ($6 | 0) == ($8 | 0);
        }
        if ((global$9 | 0) == 2 | $6) {
         if (!global$9) {
          $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) << 1;
         }
         if (!global$9 | ($9 | 0) == 3) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $10 = 3;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2)
         }
         if (!global$9 | ($9 | 0) == 4) {
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
          $10 = 4;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
          $6 = $6 + $1 | 0;
          HEAP32[$0 + 204 >> 2] = $6;
         }
        }
        $6 = global$9 ? $6 : $0 + 364 | 0;
        if (!global$9 | ($9 | 0) == 5) {
         $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($6);
         $10 = 5;
         if ((global$9 | 0) == 1) {
          break block
         }
         $6 = $7;
        }
        if (!global$9) {
         $8 = $0 + 23 | 0;
         $6 = std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($6, $8, $0 + 22 | 0, $1, $0 + 204 | 0, HEAP32[$0 + 236 >> 2], HEAP32[$0 + 232 >> 2], $0 + 220 | 0, $0 + 32 | 0, $0 + 28 | 0, $0 + 24 | 0, $0 + 240 | 0);
         if ($6) {
          break block1
         }
         $3 = $3 & 1;
         if ($3) {
          break block2
         }
         $3 = 0;
         $6 = HEAP32[$0 + 204 >> 2] - $1 | 0;
         $8 = ($6 | 0) <= 0;
         if ($8) {
          break block3
         }
         block4 : {
          block5 : {
           $8 = HEAPU8[$1 | 0];
           $7 = $8 - 43 | 0;
           switch ($7 | 0) {
           case 0:
           case 2:
            break block4;
           default:
            break block5;
           };
          }
          $3 = ($8 | 0) == 46;
          if ($3) {
           break block2
          }
          $3 = 1;
          $6 = ($8 - 48 & 255) >>> 0 < 10;
          if ($6) {
           break block3
          }
          break block1;
         }
         $6 = ($6 | 0) == 1;
         if ($6) {
          break block3
         }
         block6 : {
          switch ($7 | 0) {
          case 0:
          case 2:
           break block6;
          default:
           break block3;
          };
         }
         $6 = HEAPU8[$1 + 1 | 0];
         $3 = ($6 | 0) == 46;
         if ($3) {
          break block2
         }
         $3 = 1;
         $6 = ($6 - 48 & 255) >>> 0 <= 9;
         if ($6) {
          break block3
         }
        }
       }
       if (!global$9) {
        block7 : {
         if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 220 | 0) | HEAPU8[$0 + 23 | 0] != 1) {
          break block7
         }
         $3 = HEAP32[$0 + 28 >> 2];
         $6 = ($3 - ($0 + 32 | 0) | 0) > 159;
         if ($6) {
          break block7
         }
         HEAP32[$0 + 28 >> 2] = $3 + 4;
         $6 = HEAP32[$0 + 24 >> 2];
         HEAP32[$3 >> 2] = $6;
        }
        $3 = HEAP32[$0 + 204 >> 2];
       }
       if (!global$9 | ($9 | 0) == 6) {
        long_20double_20std____2____num_get_float_5babi_nn190106_5d_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $3, $4);
        $10 = 6;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $1 = HEAP32[$0 >> 2];
        $3 = HEAP32[$0 + 4 >> 2];
        $7 = HEAP32[$0 + 12 >> 2];
        HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
        HEAP32[$5 + 12 >> 2] = $7;
        HEAP32[$5 >> 2] = $1;
        HEAP32[$5 + 4 >> 2] = $3;
        $5 = HEAP32[$0 + 28 >> 2];
        std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 220 | 0, $0 + 32 | 0, $5, $4);
        $3 = $0 + 360 | 0;
        $1 = $0 + 364 | 0;
       }
       if (!global$9 | ($9 | 0) == 7) {
        $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $3);
        $10 = 7;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $7;
       }
       if (!global$9) {
        if ($1) {
         HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
        }
        $1 = HEAP32[$0 + 364 >> 2];
       }
       if (!global$9 | ($9 | 0) == 8) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $10 = 8;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       $2 = global$9 ? $2 : $0 + 220 | 0;
       if (!global$9 | ($9 | 0) == 9) {
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
        $10 = 9;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $7;
       }
       if (!global$9) {
        __stack_pointer = $0 + 368 | 0;
        break block8;
       }
      }
      $3 = global$9 ? $3 : 1;
     }
     $6 = global$9 ? $6 : $0 + 364 | 0;
     if (!global$9 | ($9 | 0) == 10) {
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($6);
      $10 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $7;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    return $1 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $9 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 320 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 312 >> 2] = $2;
   HEAP32[$0 + 316 >> 2] = $1;
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 196 | 0);
   $1 = $0 + 16 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$7) {
    $6 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   $2 = global$9 ? $2 : $0 + 208 | 0;
   if (!global$9 | ($7 | 0) == 1) {
    std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($1, 33712, 33738, $2);
    $8 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $1 = global$9 ? $1 : $0 + 16 | 0;
   if (!global$9 | ($7 | 0) == 2) {
    std____2__locale___locale_28_29($1);
    $8 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2);
   }
   if (!global$9 | ($7 | 0) == 3) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $8 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
    HEAP32[$0 + 180 >> 2] = $1;
    $3 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$0 + 8 >> 2] = 0;
   }
   while (1) {
    block1 : {
     if (!global$9) {
      $9 = $0 + 312 | 0;
      $3 = $0 + 316 | 0;
     }
     if (!global$9 | ($7 | 0) == 4) {
      $6 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($3, $9);
      $8 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $6;
     }
     if (!global$9) {
      if ($3) {
       break block1
      }
      $3 = HEAP32[$0 + 180 >> 2];
      $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) + $1 | 0;
      $3 = ($3 | 0) == ($9 | 0);
     }
     if ((global$9 | 0) == 2 | $3) {
      if (!global$9) {
       $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) << 1;
      }
      if (!global$9 | ($7 | 0) == 5) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
       $8 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($2)
      }
      if (!global$9 | ($7 | 0) == 6) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
       $8 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, 0);
       $3 = $3 + $1 | 0;
       HEAP32[$0 + 180 >> 2] = $3;
      }
     }
     $3 = global$9 ? $3 : $0 + 316 | 0;
     if (!global$9 | ($7 | 0) == 7) {
      $6 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($3);
      $8 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $6;
     }
     if (!global$9) {
      $9 = $0 + 180 | 0;
      $3 = std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($3, 16, $1, $9, $0 + 8 | 0, 0, $10, $0 + 16 | 0, $0 + 12 | 0, $0 + 208 | 0);
      if ($3) {
       break block1
      }
      $3 = $0 + 316 | 0;
     }
     if (!global$9 | ($7 | 0) == 8) {
      $6 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($3);
      $8 = 8;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $6;
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    $3 = HEAP32[$0 + 180 >> 2];
    $1 = $3 - $1 | 0;
   }
   if (!global$9 | ($7 | 0) == 9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn190106_5d_28unsigned_20long_29($2, $1);
    $8 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($2)
   }
   if (!global$9 | ($7 | 0) == 10) {
    $6 = std____2____cloc_28_29();
    $8 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $3 = $6;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $5
   }
   if (!global$9 | ($7 | 0) == 11) {
    $6 = std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($1, $3, $0);
    $8 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   if (!global$9) {
    if (($1 | 0) != 1) {
     HEAP32[$4 >> 2] = 4
    }
    $3 = $0 + 312 | 0;
    $1 = $0 + 316 | 0;
   }
   if (!global$9 | ($7 | 0) == 12) {
    $6 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $3);
    $8 = 12;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   if (!global$9) {
    if ($1) {
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
    }
    $1 = HEAP32[$0 + 316 >> 2];
   }
   if (!global$9 | ($7 | 0) == 13) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
    $8 = 13;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($7 | 0) == 14) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
    $8 = 14;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 320 | 0;
    return $1 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $9;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $4 = global$9 ? $4 : HEAP32[HEAP32[$0 >> 2] + 48 >> 2];
  block : {
   if (!global$9 | !$5) {
    FUNCTION_TABLE[$4 | 0]($0, $1, $2, $3) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function wchar_t_20const__20std____2__find_5babi_nn190106_5d_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $5 = HEAP32[$2 >> 2];
  $6 = $0;
  $2 = $1 - $0 >> 2;
  block : {
   if ($2) {
    while (1) {
     if (HEAP32[$0 >> 2] == ($5 | 0)) {
      break block
     }
     $0 = $0 + 4 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break;
    }
   }
   $0 = 0;
  }
  $0 = char__20std____2____rewrap_iter_5babi_nn190106_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($6, $0 ? $0 : $1);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
  block : {
   if (!global$9 | !$2) {
    $2 = FUNCTION_TABLE[$1 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 16 >> 2];
  block : {
   if (!global$9 | !$2) {
    $2 = FUNCTION_TABLE[$1 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$1 >> 2] + 20 >> 2];
  block : {
   if (!global$9 | !$3) {
    FUNCTION_TABLE[$2 | 0]($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function char__20std____2____rewrap_iter_5babi_nn190106_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($0, $1) {
  return ($1 - $0 | 0) + $0 | 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 32 | 0;
   __stack_pointer = $5;
   HEAP32[$5 + 28 >> 2] = $1;
   $8 = !(HEAP32[$2 + 4 >> 2] & 1);
  }
  block : {
   block1 : {
    if ((global$9 | 0) == 2 | $8) {
     $8 = global$9 ? $8 : HEAP32[HEAP32[$0 >> 2] + 24 >> 2];
     if (!global$9 | !$7) {
      $6 = FUNCTION_TABLE[$8 | 0]($0, $1, $2, $3, $4) | 0;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $6;
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     $0 = $5 + 16 | 0;
     std____2__ios_base__getloc_28_29_20const($0, $2);
    }
    if (!global$9 | ($7 | 0) == 1) {
     $6 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_char___28std____2__locale_20const__29($0);
     $9 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $6;
    }
    $0 = global$9 ? $0 : $5 + 16 | 0;
    if (!global$9 | ($7 | 0) == 2) {
     std____2__locale___locale_28_29($0);
     $9 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    block2 : {
     if ((global$9 | 0) == 2 | $4) {
      $0 = global$9 ? $0 : $5 + 16 | 0;
      if (!global$9 | ($7 | 0) == 3) {
       std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($0, $2);
       $9 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       break block2
      }
     }
     $0 = global$9 ? $0 : $5 + 16 | 0;
     if (!global$9 | ($7 | 0) == 4) {
      std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $2);
      $9 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($5 + 16 | 0);
     HEAP32[$5 + 12 >> 2] = $0;
    }
    while (1) {
     if (!global$9) {
      (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($5 + 16 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      $1 = $5 + 8 | 0;
      $0 = bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($5 + 12 | 0, $1);
     }
     $10 = global$9 ? $10 : $0;
     if ($10 | (global$9 | 0) == 2) {
      if (!global$9) {
       $2 = HEAP32[$5 + 28 >> 2];
       $0 = $5 + 16 | 0;
      }
      if (!global$9 | ($7 | 0) == 5) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
       $9 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $6;
      }
     }
     if (!$10 | (global$9 | 0) == 2) {
      if (!global$9) {
       $1 = HEAP8[HEAP32[$5 + 12 >> 2]];
       $0 = $5 + 28 | 0;
      }
      if (!global$9 | ($7 | 0) == 6) {
       std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28char_29($0, $1);
       $9 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = $5 + 12 | 0;
       std____2____wrap_iter_char____operator___5babi_nn190106_5d_28_29($0);
       continue;
      }
     }
     break;
    };
   }
   if (!global$9) {
    __stack_pointer = $5 + 32 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $8;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = global$9;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______make_iterator_5babi_nn190106_5d_28char__29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______make_iterator_5babi_nn190106_5d_28char__29($0 + $2 | 0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
  return HEAP32[$0 >> 2] == HEAP32[$1 >> 2];
 }
 
 function std____2____wrap_iter_char____operator___5babi_nn190106_5d_28_29($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______make_iterator_5babi_nn190106_5d_28char__29($0) {
  var $1 = 0, $2 = 0;
  $2 = global$9;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn190106_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($1 + 12 | 0, $0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$0 >> 2];
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $12 = HEAP32[$1 + 32 >> 2];
   $13 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer + -64 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 56 >> 2] = 37;
   HEAP32[$0 + 60 >> 2] = 0;
   $6 = $0 + 56 | 1;
   $7 = HEAP32[$2 + 4 >> 2];
   std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6, 5568, 1, $7);
  }
  block : {
   if (!global$9 | !$9) {
    $5 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    $4 = $0 + 43 | 0;
    $7 = $4;
    $8 = $0 + 56 | 0;
   }
   if (!global$9 | ($9 | 0) == 1) {
    $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, 13, $6, $8, $0);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    $7 = $0 + 43 | 0;
    $6 = $7 + $6 | 0;
    $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $6, $2);
    $10 = $0 + 4 | 0;
    std____2__ios_base__getloc_28_29_20const($10, $2);
    $8 = $0 + 16 | 0;
    $12 = $0 + 12 | 0;
    $13 = $0 + 8 | 0;
   }
   if (!global$9 | ($9 | 0) == 2) {
    std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($7, $4, $6, $8, $12, $13, $10);
    $11 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $4 = global$9 ? $4 : $0 + 4 | 0;
   if (!global$9 | ($9 | 0) == 3) {
    std____2__locale___locale_28_29($4);
    $11 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $6 = HEAP32[$0 + 12 >> 2];
    $7 = HEAP32[$0 + 8 >> 2];
    $4 = $0 + 16 | 0;
   }
   if (!global$9 | ($9 | 0) == 4) {
    $5 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, $6, $7, $2, $3);
    $11 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    __stack_pointer = $0 - -64 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $8;
  HEAP32[$5 + 32 >> 2] = $12;
  HEAP32[$5 + 36 >> 2] = $13;
  HEAP32[$5 + 40 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0, $1, $2, $3) {
  var $4 = 0;
  block : {
   if (!($3 & 2048)) {
    break block
   }
   $4 = $3 & 74;
   if (!$2 | (($4 | 0) == 8 | ($4 | 0) == 64)) {
    break block
   }
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($3 & 512) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if ($4) {
    HEAP8[$0 | 0] = $4;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  $4 = $3 & 74;
  $1 = 111;
  block1 : {
   if (($4 | 0) == 64) {
    break block1
   }
   $1 = $3 & 16384 ? 88 : 120;
   if (($4 | 0) == 8) {
    break block1
   }
   $1 = $2 ? 100 : 117;
  }
  HEAP8[$0 | 0] = $1;
 }
 
 function std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $5 = HEAP32[$5 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   HEAP32[$5 + 12 >> 2] = $2;
   HEAP32[$5 + 8 >> 2] = $4;
   $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($5 + 4 | 0, $5 + 12 | 0);
   $2 = HEAP32[$5 + 8 >> 2];
  }
  block : {
   if (!global$9 | !$6) {
    $6 = vsnprintf($0, $1, $3, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($4);
    __stack_pointer = $5 + 16 | 0;
    return $2;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $1, $2) {
  $2 = HEAP32[$2 + 4 >> 2] & 176;
  if (($2 | 0) == 32) {
   return $1
  }
  block : {
   if (($2 | 0) != 16) {
    break block
   }
   block2 : {
    block1 : {
     $2 = HEAPU8[$0 | 0];
     switch ($2 - 43 | 0) {
     case 0:
     case 2:
      break block1;
     default:
      break block2;
     };
    }
    return $0 + 1 | 0;
   }
   if (($2 | 0) != 48 | ($1 - $0 | 0) < 2 | (HEAPU8[$0 + 1 | 0] | 32) != 120) {
    break block
   }
   $0 = $0 + 2 | 0;
  }
  return $0;
 }
 
 function std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + -64;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $11 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $12 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $9 = __stack_pointer;
   $14 = $9 - 16 | 0;
   __stack_pointer = $14;
  }
  block : {
   if (!global$9 | !$12) {
    $7 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($6);
    if ((global$9 | 0) == 1) {
     break block
    }
    $15 = $7;
   }
   $9 = global$9 ? $9 : $14 + 4 | 0;
   if (!global$9 | ($12 | 0) == 1) {
    $7 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_char___28std____2__locale_20const__29($6);
    $13 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $7;
   }
   if (!global$9 | ($12 | 0) == 2) {
    std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($9, $6);
    $13 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($14 + 4 | 0)
   }
   block1 : {
    if ((global$9 | 0) == 2 | $9) {
     if (!global$9 | ($12 | 0) == 3) {
      std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($15, $0, $2, $3);
      $13 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $6 = ($2 - $0 | 0) + $3 | 0;
      HEAP32[$5 >> 2] = $6;
      break block1;
     }
    }
    if (!global$9) {
     HEAP32[$5 >> 2] = $3;
     $9 = $0;
     $8 = HEAPU8[$9 | 0];
     $10 = $8 - 43 | 0;
    }
    block3 : {
     if (!global$9) {
      block2 : {
       switch ($10 | 0) {
       case 0:
       case 2:
        break block2;
       default:
        break block3;
       };
      }
      $9 = $8 << 24 >> 24;
     }
     if (!global$9 | ($12 | 0) == 4) {
      $7 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($15, $9);
      $13 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $8 = $7;
     }
     if (!global$9) {
      $10 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $10 + 1;
      HEAP8[$10 | 0] = $8;
      $9 = $0 + 1 | 0;
     }
    }
    $8 = global$9 ? $8 : ($2 - $9 | 0) < 2;
    block4 : {
     if (!global$9) {
      if ($8) {
       break block4
      }
      $8 = HEAPU8[$9 | 0] != 48;
      if ($8) {
       break block4
      }
      $8 = (HEAPU8[$9 + 1 | 0] | 32) != 120;
      if ($8) {
       break block4
      }
     }
     if (!global$9 | ($12 | 0) == 5) {
      $7 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($15, 48);
      $13 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $8 = $7;
     }
     if (!global$9) {
      $10 = HEAP32[$5 >> 2];
      $11 = $10 + 1 | 0;
      HEAP32[$5 >> 2] = $11;
      HEAP8[$10 | 0] = $8;
      $8 = HEAP8[$9 + 1 | 0];
     }
     if (!global$9 | ($12 | 0) == 6) {
      $7 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($15, $8);
      $13 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $8 = $7;
     }
     if (!global$9) {
      $10 = HEAP32[$5 >> 2];
      $11 = $10 + 1 | 0;
      HEAP32[$5 >> 2] = $11;
      HEAP8[$10 | 0] = $8;
      $9 = $9 + 2 | 0;
     }
    }
    if (!global$9) {
     void_20std____2__reverse_5babi_nn190106_5d_char___28char__2c_20char__29($9, $2);
     $8 = 0;
    }
    if (!global$9 | ($12 | 0) == 7) {
     $7 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($6);
     $13 = 7;
     if ((global$9 | 0) == 1) {
      break block
     }
     $17 = $7;
    }
    if (!global$9) {
     $10 = 0;
     $6 = $9;
    }
    while (1) {
     $11 = global$9 ? $11 : $2 >>> 0 <= $6 >>> 0;
     $16 = global$9 ? $16 : $11;
     if (global$9 ? 0 : $16 | (global$9 | 0) == 2) {
      $6 = ($9 - $0 | 0) + $3 | 0;
      $9 = HEAP32[$5 >> 2];
      void_20std____2__reverse_5babi_nn190106_5d_char___28char__2c_20char__29($6, $9);
      $6 = HEAP32[$5 >> 2];
     }
     if (!$16 | (global$9 | 0) == 2) {
      if (!global$9) {
       $11 = $14 + 4 | 0;
       block5 : {
        if (!HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, $10) | 0]) {
         break block5
        }
        if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, $10) | 0] != ($8 | 0)) {
         break block5
        }
        $8 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $8 + 1;
        HEAP8[$8 | 0] = $17;
        $10 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($11) - 1 >>> 0 > $10 >>> 0) + $10 | 0;
        $8 = 0;
       }
       $11 = HEAP8[$6 | 0];
      }
      if (!global$9 | ($12 | 0) == 8) {
       $7 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($15, $11);
       $13 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
       $18 = $7;
      }
      if (!global$9) {
       $11 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $11 + 1;
       HEAP8[$11 | 0] = $18;
       $6 = $6 + 1 | 0;
       $8 = $8 + 1 | 0;
       continue;
      }
     }
     break;
    };
   }
   if (!global$9) {
    HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 | 0) + $3 | 0;
    $0 = $14 + 4 | 0;
   }
   if (!global$9 | ($12 | 0) == 9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
    $13 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $14 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $9;
  HEAP32[$7 + 32 >> 2] = $8;
  HEAP32[$7 + 36 >> 2] = $10;
  HEAP32[$7 + 40 >> 2] = $11;
  HEAP32[$7 + 44 >> 2] = $14;
  HEAP32[$7 + 48 >> 2] = $15;
  HEAP32[$7 + 52 >> 2] = $16;
  HEAP32[$7 + 56 >> 2] = $17;
  HEAP32[$7 + 60 >> 2] = $18;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - -64;
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $10 = __stack_pointer - 16 | 0;
   __stack_pointer = $10;
   $7 = !$0;
  }
  block1 : {
   block2 : {
    block : {
     if (!global$9) {
      if ($7) {
       break block
      }
      $8 = $2 - $1 | 0;
      $9 = ($8 | 0) > 0;
      $7 = HEAP32[$4 + 12 >> 2];
     }
     if ((global$9 | 0) == 2 | $9) {
      if (!global$9 | !$11) {
       $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn190106_5d_28char_20const__2c_20long_29($0, $1, $8);
       if ((global$9 | 0) == 1) {
        break block1
       }
       $9 = $6;
      }
      if (!global$9) {
       $8 = ($8 | 0) != ($9 | 0);
       if ($8) {
        break block
       }
      }
     }
     if (!global$9) {
      $1 = $3 - $1 | 0;
      $8 = $7 - $1 | 0;
      $1 = ($1 | 0) < ($7 | 0) ? $8 : 0;
      $7 = ($1 | 0) > 0;
     }
     if ((global$9 | 0) == 2 | $7) {
      $7 = global$9 ? $7 : $10 + 4 | 0;
      if (!global$9 | ($11 | 0) == 1) {
       $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28unsigned_20long_2c_20char_29($7, $1, $5);
       $12 = 1;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $7 = $6;
      }
      if (!global$9) {
       $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($7)
      }
      if (!global$9 | ($11 | 0) == 2) {
       $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn190106_5d_28char_20const__2c_20long_29($0, $5, $1);
       $12 = 2;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $8 = $6;
      }
      if (!global$9 | ($11 | 0) == 3) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($7);
       $12 = 3;
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $1 = ($1 | 0) != ($8 | 0);
       if ($1) {
        break block
       }
      }
     }
     if (global$9) {
      $6 = $3
     } else {
      $1 = $3 - $2 | 0;
      $6 = ($1 | 0) > 0;
     }
     if ($6 | (global$9 | 0) == 2) {
      if (!global$9 | ($11 | 0) == 4) {
       $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn190106_5d_28char_20const__2c_20long_29($0, $2, $1);
       $12 = 4;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $2 = $6;
      }
      if (!global$9 & ($1 | 0) != ($2 | 0)) {
       break block
      }
     }
     if (!global$9) {
      std____2__ios_base__width_5babi_nn190106_5d_28long_29($4);
      break block2;
     }
    }
    $0 = global$9 ? $0 : 0;
   }
   if (!global$9) {
    __stack_pointer = $10 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $8;
  HEAP32[$6 + 32 >> 2] = $9;
  HEAP32[$6 + 36 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 52;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $14 = HEAP32[$1 + 40 >> 2];
   $15 = HEAP32[$1 + 44 >> 2];
   $12 = HEAP32[$1 + 48 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 112 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 104 >> 2] = 37;
   HEAP32[$0 + 108 >> 2] = 0;
   $7 = $0 + 104 | 1;
   $8 = HEAP32[$2 + 4 >> 2];
   std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($7, 5411, 1, $8);
  }
  block : {
   if (!global$9 | !$11) {
    $6 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $6;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    HEAP32[$0 + 4 >> 2] = $5;
    $10 = $0 + 104 | 0;
    $8 = $0 + 80 | 0;
    $9 = $8;
   }
   if (!global$9 | ($11 | 0) == 1) {
    $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($9, 24, $7, $10, $0);
    $13 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $6;
   }
   if (!global$9) {
    $9 = $0 + 80 | 0;
    $7 = $9 + $7 | 0;
    $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($8, $7, $2);
    $12 = $0 + 20 | 0;
    std____2__ios_base__getloc_28_29_20const($12, $2);
    $10 = $0 + 32 | 0;
    $14 = $0 + 28 | 0;
    $15 = $0 + 24 | 0;
   }
   if (!global$9 | ($11 | 0) == 2) {
    std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($9, $8, $7, $10, $14, $15, $12);
    $13 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $7 = global$9 ? $7 : $0 + 20 | 0;
   if (!global$9 | ($11 | 0) == 3) {
    std____2__locale___locale_28_29($7);
    $13 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $8 = HEAP32[$0 + 28 >> 2];
    $9 = HEAP32[$0 + 24 >> 2];
    $7 = $0 + 32 | 0;
   }
   if (!global$9 | ($11 | 0) == 4) {
    $6 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $7, $8, $9, $2, $3);
    $13 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    __stack_pointer = $0 + 112 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $9;
  HEAP32[$6 + 32 >> 2] = $8;
  HEAP32[$6 + 36 >> 2] = $10;
  HEAP32[$6 + 40 >> 2] = $14;
  HEAP32[$6 + 44 >> 2] = $15;
  HEAP32[$6 + 48 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 52;
  return 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $12 = HEAP32[$1 + 32 >> 2];
   $13 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer + -64 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 56 >> 2] = 37;
   HEAP32[$0 + 60 >> 2] = 0;
   $6 = $0 + 56 | 1;
   $7 = HEAP32[$2 + 4 >> 2];
   std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6, 5568, 0, $7);
  }
  block : {
   if (!global$9 | !$9) {
    $5 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    $4 = $0 + 43 | 0;
    $7 = $4;
    $8 = $0 + 56 | 0;
   }
   if (!global$9 | ($9 | 0) == 1) {
    $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, 13, $6, $8, $0);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    $7 = $0 + 43 | 0;
    $6 = $7 + $6 | 0;
    $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $6, $2);
    $10 = $0 + 4 | 0;
    std____2__ios_base__getloc_28_29_20const($10, $2);
    $8 = $0 + 16 | 0;
    $12 = $0 + 12 | 0;
    $13 = $0 + 8 | 0;
   }
   if (!global$9 | ($9 | 0) == 2) {
    std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($7, $4, $6, $8, $12, $13, $10);
    $11 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $4 = global$9 ? $4 : $0 + 4 | 0;
   if (!global$9 | ($9 | 0) == 3) {
    std____2__locale___locale_28_29($4);
    $11 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $6 = HEAP32[$0 + 12 >> 2];
    $7 = HEAP32[$0 + 8 >> 2];
    $4 = $0 + 16 | 0;
   }
   if (!global$9 | ($9 | 0) == 4) {
    $5 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, $6, $7, $2, $3);
    $11 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    __stack_pointer = $0 - -64 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $8;
  HEAP32[$5 + 32 >> 2] = $12;
  HEAP32[$5 + 36 >> 2] = $13;
  HEAP32[$5 + 40 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 52;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $14 = HEAP32[$1 + 40 >> 2];
   $15 = HEAP32[$1 + 44 >> 2];
   $12 = HEAP32[$1 + 48 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 112 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 104 >> 2] = 37;
   HEAP32[$0 + 108 >> 2] = 0;
   $7 = $0 + 104 | 1;
   $8 = HEAP32[$2 + 4 >> 2];
   std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($7, 5411, 0, $8);
  }
  block : {
   if (!global$9 | !$11) {
    $6 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $6;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    HEAP32[$0 + 4 >> 2] = $5;
    $10 = $0 + 104 | 0;
    $8 = $0 + 80 | 0;
    $9 = $8;
   }
   if (!global$9 | ($11 | 0) == 1) {
    $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($9, 24, $7, $10, $0);
    $13 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $6;
   }
   if (!global$9) {
    $9 = $0 + 80 | 0;
    $7 = $9 + $7 | 0;
    $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($8, $7, $2);
    $12 = $0 + 20 | 0;
    std____2__ios_base__getloc_28_29_20const($12, $2);
    $10 = $0 + 32 | 0;
    $14 = $0 + 28 | 0;
    $15 = $0 + 24 | 0;
   }
   if (!global$9 | ($11 | 0) == 2) {
    std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($9, $8, $7, $10, $14, $15, $12);
    $13 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $7 = global$9 ? $7 : $0 + 20 | 0;
   if (!global$9 | ($11 | 0) == 3) {
    std____2__locale___locale_28_29($7);
    $13 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $8 = HEAP32[$0 + 28 >> 2];
    $9 = HEAP32[$0 + 24 >> 2];
    $7 = $0 + 32 | 0;
   }
   if (!global$9 | ($11 | 0) == 4) {
    $6 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $7, $8, $9, $2, $3);
    $13 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    __stack_pointer = $0 + 112 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $9;
  HEAP32[$6 + 32 >> 2] = $8;
  HEAP32[$6 + 36 >> 2] = $10;
  HEAP32[$6 + 40 >> 2] = $14;
  HEAP32[$6 + 44 >> 2] = $15;
  HEAP32[$6 + 48 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 52;
  return 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 60;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $6 = HEAP32[$5 + 20 >> 2];
   $1 = HEAP32[$5 + 16 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $6 | 0);
   $4 = +wasm2js_scratch_load_f64();
   $7 = HEAP32[$5 + 24 >> 2];
   $6 = HEAP32[$5 + 28 >> 2];
   $8 = HEAP32[$5 + 32 >> 2];
   $9 = HEAP32[$5 + 36 >> 2];
   $12 = HEAP32[$5 + 40 >> 2];
   $13 = HEAP32[$5 + 44 >> 2];
   $15 = HEAP32[$5 + 48 >> 2];
   $16 = HEAP32[$5 + 52 >> 2];
   $14 = HEAP32[$5 + 56 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 208 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 200 >> 2] = 37;
   HEAP32[$0 + 204 >> 2] = 0;
   $7 = HEAP32[$2 + 4 >> 2];
   $8 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 200 | 1, 14303, $7);
   $6 = $0 + 160 | 0;
   HEAP32[$0 + 156 >> 2] = $6;
  }
  block : {
   if (!global$9 | !$10) {
    $5 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   block1 : {
    if ((global$9 | 0) == 2 | $8) {
     if (!global$9) {
      $7 = HEAP32[$2 + 8 >> 2];
      HEAPF64[$0 + 40 >> 3] = $4;
      HEAP32[$0 + 32 >> 2] = $7;
      $12 = $0 + 200 | 0;
      $9 = $0 + 32 | 0;
      $7 = $0 + 160 | 0;
     }
     if (!global$9 | ($10 | 0) == 1) {
      $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, 30, $6, $12, $9);
      $11 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $5;
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     HEAPF64[$0 + 48 >> 3] = $4;
     $12 = $0 + 200 | 0;
     $9 = $0 + 48 | 0;
     $7 = $0 + 160 | 0;
    }
    if (!global$9 | ($10 | 0) == 2) {
     $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, 30, $6, $12, $9);
     $11 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $6 = $5;
    }
   }
   if (!global$9) {
    HEAP32[$0 + 80 >> 2] = 282;
    $12 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 148 | 0, 0, $0 + 80 | 0);
    $9 = ($6 | 0) >= 30;
    $7 = $0 + 160 | 0;
   }
   block5 : {
    block3 : {
     if ((global$9 | 0) == 2 | $9) {
      if (!global$9 | ($10 | 0) == 3) {
       $5 = std____2____cloc_28_29();
       $11 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $6 = $5;
      }
      block2 : {
       if ((global$9 | 0) == 2 | $8) {
        if (!global$9) {
         $7 = HEAP32[$2 + 8 >> 2];
         HEAPF64[$0 + 8 >> 3] = $4;
         HEAP32[$0 >> 2] = $7;
         $8 = $0 + 200 | 0;
         $7 = $0 + 156 | 0;
        }
        if (!global$9 | ($10 | 0) == 4) {
         $5 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($7, $6, $8, $0);
         $11 = 4;
         if ((global$9 | 0) == 1) {
          break block
         }
         $6 = $5;
        }
        if (!global$9) {
         break block2
        }
       }
       if (!global$9) {
        HEAPF64[$0 + 16 >> 3] = $4;
        $8 = $0 + 200 | 0;
        $9 = $0 + 16 | 0;
        $7 = $0 + 156 | 0;
       }
       if (!global$9 | ($10 | 0) == 5) {
        $5 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($7, $6, $8, $9);
        $11 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
      }
      if (!global$9) {
       if (($6 | 0) == -1) {
        break block3
       }
       $7 = HEAP32[$0 + 156 >> 2];
      }
      if (!global$9 | ($10 | 0) == 6) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($12, $7);
       $11 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $7 = HEAP32[$0 + 156 >> 2]
      }
     }
     if (!global$9) {
      $9 = $6 + $7 | 0;
      $15 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($7, $9, $2);
      HEAP32[$0 + 80 >> 2] = 282;
      $7 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 72 | 0, 0, $0 + 80 | 0);
      $8 = HEAP32[$0 + 156 >> 2];
      $13 = ($8 | 0) == ($0 + 160 | 0);
     }
     block4 : {
      if (!global$9) {
       if ($13) {
        $6 = $0 + 80 | 0;
        break block4;
       }
       $6 = $6 << 1;
      }
      if (!global$9 | ($10 | 0) == 7) {
       $5 = emscripten_builtin_malloc($6);
       $11 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
       $6 = $5;
      }
      if (!global$9) {
       $8 = !$6;
       if ($8) {
        break block3
       }
      }
      if (!global$9 | ($10 | 0) == 8) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($7, $6);
       $11 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $8 = global$9 ? $8 : HEAP32[$0 + 156 >> 2];
     }
     if (!global$9) {
      $14 = $0 + 60 | 0;
      std____2__ios_base__getloc_28_29_20const($14, $2);
      $16 = $0 - -64 | 0;
      $13 = $0 + 68 | 0;
     }
     if (!global$9 | ($10 | 0) == 9) {
      std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($8, $15, $9, $6, $13, $16, $14);
      $11 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $8 = global$9 ? $8 : $0 + 60 | 0;
     if (!global$9 | ($10 | 0) == 10) {
      std____2__locale___locale_28_29($8);
      $11 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $8 = HEAP32[$0 + 68 >> 2];
      $9 = HEAP32[$0 + 64 >> 2];
     }
     if (!global$9 | ($10 | 0) == 11) {
      $5 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $6, $8, $9, $2, $3);
      $11 = 11;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $5;
     }
     if (!global$9 | ($10 | 0) == 12) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($7);
      $11 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9 | ($10 | 0) == 13) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($12);
      $11 = 13;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      __stack_pointer = $0 + 208 | 0;
      break block5;
     }
    }
    if (!global$9) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    return $2 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  wasm2js_scratch_store_f64(+$4);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 20 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $6;
  HEAP32[$5 + 32 >> 2] = $8;
  HEAP32[$5 + 36 >> 2] = $9;
  HEAP32[$5 + 40 >> 2] = $12;
  HEAP32[$5 + 44 >> 2] = $13;
  HEAP32[$5 + 48 >> 2] = $15;
  HEAP32[$5 + 52 >> 2] = $16;
  HEAP32[$5 + 56 >> 2] = $14;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 60;
  return 0;
 }
 
 function std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if ($2 & 2048) {
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($2 & 1024) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  $3 = $2 & 260;
  if (($3 | 0) != 260) {
   HEAP8[$0 | 0] = 46;
   HEAP8[$0 + 1 | 0] = 42;
   $0 = $0 + 2 | 0;
  }
  $2 = $2 & 16384;
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if ($4) {
    HEAP8[$0 | 0] = $4;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  block1 : {
   block : {
    if (($3 | 0) != 256) {
     if (($3 | 0) != 4) {
      break block
     }
     $1 = $2 ? 70 : 102;
     break block1;
    }
    $1 = $2 ? 69 : 101;
    break block1;
   }
   $1 = $2 ? 65 : 97;
   if (($3 | 0) == 260) {
    break block1
   }
   $1 = $2 ? 71 : 103;
  }
  HEAP8[$0 | 0] = $1;
  return ($3 | 0) != 260;
 }
 
 function std____2__ios_base__precision_5babi_nn190106_5d_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   HEAP32[$5 + 12 >> 2] = $1;
   HEAP32[$5 + 8 >> 2] = $3;
   $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($5 + 4 | 0, $5 + 12 | 0);
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $1 = HEAP32[$5 + 8 >> 2];
   HEAP32[$6 + 12 >> 2] = $1;
   HEAP32[$6 + 8 >> 2] = $1;
   $7 = -1;
  }
  block : {
   if (!global$9 | !$9) {
    $4 = vsnprintf(0, 0, $2, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $4;
   }
   $8 = global$9 ? $8 : ($1 | 0) < 0;
   block1 : {
    if (!global$9) {
     if ($8) {
      break block1
     }
     $8 = $0;
     $0 = $1 + 1 | 0;
    }
    if (!global$9 | ($9 | 0) == 1) {
     $4 = emscripten_builtin_malloc($0);
     $10 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $4;
    }
    if (!global$9) {
     HEAP32[$8 >> 2] = $1;
     if (!$1) {
      break block1
     }
     $7 = HEAP32[$6 + 12 >> 2];
    }
    if (!global$9 | ($9 | 0) == 2) {
     $4 = vsnprintf($1, $0, $2, $7);
     $10 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $7 = $4;
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0;
    std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($3);
    __stack_pointer = $5 + 16 | 0;
    return $7;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $7;
  HEAP32[$4 + 24 >> 2] = $6;
  HEAP32[$4 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 72;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $15 = HEAP32[$1 + 44 >> 2];
   $14 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $19 = HEAP32[$1 + 64 >> 2];
   $20 = HEAP32[$1 + 68 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $9 = __stack_pointer;
   $15 = $9 - 16 | 0;
   __stack_pointer = $15;
  }
  block : {
   if (!global$9 | !$11) {
    $8 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($6);
    if ((global$9 | 0) == 1) {
     break block
    }
    $14 = $8;
   }
   $9 = global$9 ? $9 : $15 + 4 | 0;
   if (!global$9 | ($11 | 0) == 1) {
    $8 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_char___28std____2__locale_20const__29($6);
    $12 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $17 = $8;
   }
   if (!global$9 | ($11 | 0) == 2) {
    std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($9, $17);
    $12 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $3;
    $9 = $0;
    $6 = HEAPU8[$9 | 0];
    $7 = $6 - 43 | 0;
   }
   block2 : {
    if (!global$9) {
     block1 : {
      switch ($7 | 0) {
      case 0:
      case 2:
       break block1;
      default:
       break block2;
      };
     }
     $6 = $6 << 24 >> 24;
    }
    if (!global$9 | ($11 | 0) == 3) {
     $8 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($14, $6);
     $12 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $6 = $8;
    }
    if (!global$9) {
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $6;
     $9 = $0 + 1 | 0;
    }
   }
   if (!global$9) {
    $6 = $9;
    $7 = ($2 - $6 | 0) <= 1;
   }
   block4 : {
    block3 : {
     if (!global$9) {
      if ($7) {
       break block3
      }
      $7 = HEAPU8[$6 | 0] != 48;
      if ($7) {
       break block3
      }
      $7 = (HEAPU8[$6 + 1 | 0] | 32) != 120;
      if ($7) {
       break block3
      }
     }
     if (!global$9 | ($11 | 0) == 4) {
      $8 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($14, 48);
      $12 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $8;
     }
     if (!global$9) {
      $7 = HEAP32[$5 >> 2];
      $10 = $7 + 1 | 0;
      HEAP32[$5 >> 2] = $10;
      HEAP8[$7 | 0] = $6;
      $6 = HEAP8[$9 + 1 | 0];
     }
     if (!global$9 | ($11 | 0) == 5) {
      $8 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($14, $6);
      $12 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $8;
     }
     if (!global$9) {
      $7 = HEAP32[$5 >> 2];
      $10 = $7 + 1 | 0;
      HEAP32[$5 >> 2] = $10;
      HEAP8[$7 | 0] = $6;
      $9 = $9 + 2 | 0;
      $6 = $9;
     }
     while (1) {
      if (!global$9) {
       $7 = $2 >>> 0 <= $6 >>> 0;
       if ($7) {
        break block4
       }
       $7 = HEAP8[$6 | 0];
      }
      if (!global$9 | ($11 | 0) == 6) {
       std____2____cloc_28_29();
       $12 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $7 = !__isxdigit_l($7);
       if ($7) {
        break block4
       }
       $6 = $6 + 1 | 0;
       continue;
      }
      break;
     };
    }
    while (1) {
     if (!global$9) {
      $7 = $2 >>> 0 <= $6 >>> 0;
      if ($7) {
       break block4
      }
      $7 = HEAP8[$6 | 0];
     }
     if (!global$9 | ($11 | 0) == 7) {
      std____2____cloc_28_29();
      $12 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $7 = !__isdigit_l($7);
      if ($7) {
       break block4
      }
      $6 = $6 + 1 | 0;
      continue;
     }
     break;
    };
   }
   if (!global$9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($15 + 4 | 0)
   }
   block5 : {
    if ((global$9 | 0) == 2 | $7) {
     $7 = global$9 ? $7 : HEAP32[$5 >> 2];
     if (!global$9 | ($11 | 0) == 8) {
      std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($14, $9, $6, $7);
      $12 = 8;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $7 = HEAP32[$5 >> 2];
      $9 = $7 + ($6 - $9 | 0) | 0;
      HEAP32[$5 >> 2] = $9;
      break block5;
     }
    }
    if (!global$9) {
     void_20std____2__reverse_5babi_nn190106_5d_char___28char__2c_20char__29($9, $6)
    }
    if (!global$9 | ($11 | 0) == 9) {
     $8 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($17);
     $12 = 9;
     if ((global$9 | 0) == 1) {
      break block
     }
     $19 = $8;
    }
    $7 = global$9 ? $7 : $9;
    while (1) {
     $10 = global$9 ? $10 : $6 >>> 0 <= $7 >>> 0;
     $18 = global$9 ? $18 : $10;
     if (global$9 ? 0 : $18 | (global$9 | 0) == 2) {
      $9 = ($9 - $0 | 0) + $3 | 0;
      $7 = HEAP32[$5 >> 2];
      void_20std____2__reverse_5babi_nn190106_5d_char___28char__2c_20char__29($9, $7);
     }
     if (!$18 | (global$9 | 0) == 2) {
      if (!global$9) {
       $10 = $15 + 4 | 0;
       block6 : {
        if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($10, $16) | 0] <= 0) {
         break block6
        }
        if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($10, $16) | 0] != ($13 | 0)) {
         break block6
        }
        $8 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $8 + 1;
        HEAP8[$8 | 0] = $19;
        $16 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($10) - 1 >>> 0 > $16 >>> 0) + $16 | 0;
        $13 = 0;
       }
       $10 = HEAP8[$7 | 0];
      }
      if (!global$9 | ($11 | 0) == 10) {
       $8 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($14, $10);
       $12 = 10;
       if ((global$9 | 0) == 1) {
        break block
       }
       $20 = $8;
      }
      if (!global$9) {
       $10 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $10 + 1;
       HEAP8[$10 | 0] = $20;
       $7 = $7 + 1 | 0;
       $13 = $13 + 1 | 0;
       continue;
      }
     }
     break;
    };
   }
   while (1) {
    $9 = global$9 ? $9 : $2 >>> 0 <= $6 >>> 0;
    block8 : {
     block7 : {
      if (!global$9) {
       if ($9) {
        $7 = $6;
        break block7;
       }
       $7 = $6 + 1 | 0;
       $6 = HEAP8[$6 | 0];
       if (($6 | 0) != 46) {
        break block8
       }
      }
      if (!global$9 | ($11 | 0) == 11) {
       $8 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($17);
       $12 = 11;
       if ((global$9 | 0) == 1) {
        break block
       }
       $6 = $8;
      }
      if (!global$9) {
       $13 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $13 + 1;
       HEAP8[$13 | 0] = $6;
      }
     }
     $6 = global$9 ? $6 : HEAP32[$5 >> 2];
     if (!global$9 | ($11 | 0) == 12) {
      std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($14, $7, $2, $6);
      $12 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $6 = HEAP32[$5 >> 2] + ($2 - $7 | 0) | 0;
      HEAP32[$5 >> 2] = $6;
      $0 = ($1 - $0 | 0) + $3 | 0;
      $1 = ($1 | 0) == ($2 | 0);
      HEAP32[$4 >> 2] = $1 ? $6 : $0;
      $0 = $15 + 4 | 0;
     }
     if (!global$9 | ($11 | 0) == 13) {
      $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      $12 = 13;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $8;
     }
     if (!global$9) {
      __stack_pointer = $15 + 16 | 0;
      return;
     }
    }
    if (!global$9 | ($11 | 0) == 14) {
     $8 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($14, $6);
     $12 = 14;
     if ((global$9 | 0) == 1) {
      break block
     }
     $6 = $8;
    }
    if (!global$9) {
     $13 = HEAP32[$5 >> 2];
     $9 = $13 + 1 | 0;
     HEAP32[$5 >> 2] = $9;
     HEAP8[$13 | 0] = $6;
     $6 = $7;
     continue;
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $10;
  HEAP32[$8 + 40 >> 2] = $13;
  HEAP32[$8 + 44 >> 2] = $15;
  HEAP32[$8 + 48 >> 2] = $14;
  HEAP32[$8 + 52 >> 2] = $16;
  HEAP32[$8 + 56 >> 2] = $17;
  HEAP32[$8 + 60 >> 2] = $18;
  HEAP32[$8 + 64 >> 2] = $19;
  HEAP32[$8 + 68 >> 2] = $20;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 72;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 68;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $11 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $18 = HEAP32[$1 + 56 >> 2];
   $19 = HEAP32[$1 + 60 >> 2];
   $17 = HEAP32[$1 + 64 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = 37;
   HEAP32[$0 + 252 >> 2] = 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $11 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 248 | 1, 10804, $9);
   $10 = $0 + 208 | 0;
   HEAP32[$0 + 204 >> 2] = $10;
  }
  block : {
   if (!global$9 | !$13) {
    $8 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $10 = $8;
   }
   block1 : {
    if ((global$9 | 0) == 2 | $11) {
     if (!global$9) {
      $8 = HEAP32[$2 + 8 >> 2];
      $9 = $0 - -64 | 0;
      HEAP32[$9 >> 2] = $6;
      HEAP32[$9 + 4 >> 2] = $7;
      HEAP32[$0 + 56 >> 2] = $4;
      HEAP32[$0 + 60 >> 2] = $5;
      HEAP32[$0 + 48 >> 2] = $8;
      $15 = $0 + 248 | 0;
      $12 = $0 + 48 | 0;
      $9 = $0 + 208 | 0;
     }
     if (!global$9 | ($13 | 0) == 1) {
      $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($9, 30, $10, $15, $12);
      $14 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $10 = $8;
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[$0 + 80 >> 2] = $4;
     HEAP32[$0 + 84 >> 2] = $5;
     HEAP32[$0 + 88 >> 2] = $6;
     HEAP32[$0 + 92 >> 2] = $7;
     $15 = $0 + 248 | 0;
     $12 = $0 + 80 | 0;
     $9 = $0 + 208 | 0;
    }
    if (!global$9 | ($13 | 0) == 2) {
     $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($9, 30, $10, $15, $12);
     $14 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $10 = $8;
    }
   }
   if (!global$9) {
    HEAP32[$0 + 128 >> 2] = 282;
    $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 196 | 0, 0, $0 + 128 | 0);
    $12 = ($10 | 0) >= 30;
    $9 = $0 + 208 | 0;
   }
   block5 : {
    block3 : {
     if ((global$9 | 0) == 2 | $12) {
      if (!global$9 | ($13 | 0) == 3) {
       $8 = std____2____cloc_28_29();
       $14 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $10 = $8;
      }
      block2 : {
       if ((global$9 | 0) == 2 | $11) {
        if (!global$9) {
         $9 = HEAP32[$2 + 8 >> 2];
         HEAP32[$0 + 16 >> 2] = $6;
         HEAP32[$0 + 20 >> 2] = $7;
         HEAP32[$0 + 8 >> 2] = $4;
         HEAP32[$0 + 12 >> 2] = $5;
         HEAP32[$0 >> 2] = $9;
         $11 = $0 + 248 | 0;
         $9 = $0 + 204 | 0;
        }
        if (!global$9 | ($13 | 0) == 4) {
         $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($9, $10, $11, $0);
         $14 = 4;
         if ((global$9 | 0) == 1) {
          break block
         }
         $10 = $8;
        }
        if (!global$9) {
         break block2
        }
       }
       if (!global$9) {
        HEAP32[$0 + 32 >> 2] = $4;
        HEAP32[$0 + 36 >> 2] = $5;
        HEAP32[$0 + 40 >> 2] = $6;
        HEAP32[$0 + 44 >> 2] = $7;
        $11 = $0 + 248 | 0;
        $12 = $0 + 32 | 0;
        $9 = $0 + 204 | 0;
       }
       if (!global$9 | ($13 | 0) == 5) {
        $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($9, $10, $11, $12);
        $14 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
        $10 = $8;
       }
      }
      if (!global$9) {
       if (($10 | 0) == -1) {
        break block3
       }
       $9 = HEAP32[$0 + 204 >> 2];
      }
      if (!global$9 | ($13 | 0) == 6) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($15, $9);
       $14 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $9 = HEAP32[$0 + 204 >> 2]
      }
     }
     if (!global$9) {
      $12 = $10 + $9 | 0;
      $18 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($9, $12, $2);
      HEAP32[$0 + 128 >> 2] = 282;
      $9 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 120 | 0, 0, $0 + 128 | 0);
      $11 = HEAP32[$0 + 204 >> 2];
      $16 = ($11 | 0) == ($0 + 208 | 0);
     }
     block4 : {
      if (!global$9) {
       if ($16) {
        $10 = $0 + 128 | 0;
        break block4;
       }
       $10 = $10 << 1;
      }
      if (!global$9 | ($13 | 0) == 7) {
       $8 = emscripten_builtin_malloc($10);
       $14 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
       $10 = $8;
      }
      if (!global$9) {
       $11 = !$10;
       if ($11) {
        break block3
       }
      }
      if (!global$9 | ($13 | 0) == 8) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($9, $10);
       $14 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $11 = global$9 ? $11 : HEAP32[$0 + 204 >> 2];
     }
     if (!global$9) {
      $17 = $0 + 108 | 0;
      std____2__ios_base__getloc_28_29_20const($17, $2);
      $19 = $0 + 112 | 0;
      $16 = $0 + 116 | 0;
     }
     if (!global$9 | ($13 | 0) == 9) {
      std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($11, $18, $12, $10, $16, $19, $17);
      $14 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $11 = global$9 ? $11 : $0 + 108 | 0;
     if (!global$9 | ($13 | 0) == 10) {
      std____2__locale___locale_28_29($11);
      $14 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $11 = HEAP32[$0 + 116 >> 2];
      $12 = HEAP32[$0 + 112 >> 2];
     }
     if (!global$9 | ($13 | 0) == 11) {
      $8 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $10, $11, $12, $2, $3);
      $14 = 11;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $8;
     }
     if (!global$9 | ($13 | 0) == 12) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($9);
      $14 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9 | ($13 | 0) == 13) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($15);
      $14 = 13;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      __stack_pointer = $0 + 256 | 0;
      break block5;
     }
    }
    if (!global$9) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    return $2 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $14;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $10;
  HEAP32[$8 + 40 >> 2] = $11;
  HEAP32[$8 + 44 >> 2] = $12;
  HEAP32[$8 + 48 >> 2] = $15;
  HEAP32[$8 + 52 >> 2] = $16;
  HEAP32[$8 + 56 >> 2] = $18;
  HEAP32[$8 + 60 >> 2] = $19;
  HEAP32[$8 + 64 >> 2] = $17;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 68;
  return 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $7 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 96 | 0;
   __stack_pointer = $0;
  }
  block : {
   if (!global$9 | !$10) {
    $5 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $9 = $5;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    $4 = $0 - -64 | 0;
    $6 = $4;
   }
   if (!global$9 | ($10 | 0) == 1) {
    $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($4, 20, $9, 4903, $0);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $5;
   }
   if (!global$9) {
    $4 = ($0 - -64 | 0) + $7 | 0;
    $9 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $4, $2);
    $6 = $0 + 16 | 0;
    std____2__ios_base__getloc_28_29_20const($6, $2);
   }
   if (!global$9 | ($10 | 0) == 2) {
    $5 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($6);
    $11 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   $8 = global$9 ? $8 : $0 + 16 | 0;
   if (!global$9 | ($10 | 0) == 3) {
    std____2__locale___locale_28_29($8);
    $11 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $12 = $0 + 16 | 0;
    $8 = $0 - -64 | 0;
   }
   if (!global$9 | ($10 | 0) == 4) {
    std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($6, $8, $4, $12);
    $11 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $6 = $0 + 16 | 0;
    $7 = $6 + $7 | 0;
    $4 = ($4 | 0) == ($9 | 0) ? $7 : (($9 - $0 | 0) + $0 | 0) - 48 | 0;
   }
   if (!global$9 | ($10 | 0) == 5) {
    $5 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $6, $4, $7, $2, $3);
    $11 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    __stack_pointer = $0 + 96 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $8;
  HEAP32[$5 + 28 >> 2] = $9;
  HEAP32[$5 + 32 >> 2] = $7;
  HEAP32[$5 + 36 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__ios_base__width_5babi_nn190106_5d_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28unsigned_20long_2c_20char_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   $7 = HEAP32[$4 + 20 >> 2];
   $4 = HEAP32[$4 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = __stack_pointer - 16 | 0;
   __stack_pointer = $7;
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $3 = $1 >>> 0 <= 2147483639;
  }
  block1 : {
   block2 : {
    if ((global$9 | 0) == 2 | $3) {
     if (!global$9) {
      $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($1)
     }
     block : {
      if (!global$9) {
       if ($3) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1);
        $3 = $0;
        break block;
       }
       $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn190106_5d_28unsigned_20long_29($1) + 1 | 0;
       $3 = $5 + 8 | 0;
      }
      if (!global$9 | !$6) {
       auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($3, $4);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $3 = HEAP32[$5 + 8 >> 2];
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $3);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$5 + 12 >> 2]);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1);
      }
     }
     if (!global$9) {
      std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20unsigned_20long_2c_20char_29($3, $1, $2);
      HEAP8[$5 + 7 | 0] = 0;
      std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($1 + $3 | 0, $5 + 7 | 0);
      __stack_pointer = $5 + 16 | 0;
      break block2;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = $7;
  HEAP32[$6 + 24 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function std____2__ios_base__width_5babi_nn190106_5d_28long_29($0) {
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 32 | 0;
   __stack_pointer = $5;
   HEAP32[$5 + 28 >> 2] = $1;
   $8 = !(HEAP32[$2 + 4 >> 2] & 1);
  }
  block : {
   block1 : {
    if ((global$9 | 0) == 2 | $8) {
     $8 = global$9 ? $8 : HEAP32[HEAP32[$0 >> 2] + 24 >> 2];
     if (!global$9 | !$7) {
      $6 = FUNCTION_TABLE[$8 | 0]($0, $1, $2, $3, $4) | 0;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $6;
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     $0 = $5 + 16 | 0;
     std____2__ios_base__getloc_28_29_20const($0, $2);
    }
    if (!global$9 | ($7 | 0) == 1) {
     $6 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($0);
     $9 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $6;
    }
    $0 = global$9 ? $0 : $5 + 16 | 0;
    if (!global$9 | ($7 | 0) == 2) {
     std____2__locale___locale_28_29($0);
     $9 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    block2 : {
     if ((global$9 | 0) == 2 | $4) {
      $0 = global$9 ? $0 : $5 + 16 | 0;
      if (!global$9 | ($7 | 0) == 3) {
       std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($0, $2);
       $9 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       break block2
      }
     }
     $0 = global$9 ? $0 : $5 + 16 | 0;
     if (!global$9 | ($7 | 0) == 4) {
      std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $2);
      $9 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($5 + 16 | 0);
     HEAP32[$5 + 12 >> 2] = $0;
    }
    while (1) {
     if (!global$9) {
      (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($5 + 16 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      $1 = $5 + 8 | 0;
      $0 = bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($5 + 12 | 0, $1);
     }
     $10 = global$9 ? $10 : $0;
     if ($10 | (global$9 | 0) == 2) {
      if (!global$9) {
       $2 = HEAP32[$5 + 28 >> 2];
       $0 = $5 + 16 | 0;
      }
      if (!global$9 | ($7 | 0) == 5) {
       $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
       $9 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $6;
      }
     }
     if (!$10 | (global$9 | 0) == 2) {
      if (!global$9) {
       $1 = HEAP32[HEAP32[$5 + 12 >> 2] >> 2];
       $0 = $5 + 28 | 0;
      }
      if (!global$9 | ($7 | 0) == 6) {
       std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28wchar_t_29($0, $1);
       $9 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = $5 + 12 | 0;
       std____2____wrap_iter_wchar_t____operator___5babi_nn190106_5d_28_29($0);
       continue;
      }
     }
     break;
    };
   }
   if (!global$9) {
    __stack_pointer = $5 + 32 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $8;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______make_iterator_5babi_nn190106_5d_28char__29(($0 << 2) + $2 | 0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function std____2____wrap_iter_wchar_t____operator___5babi_nn190106_5d_28_29($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 4;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $12 = HEAP32[$1 + 32 >> 2];
   $13 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 144 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 136 >> 2] = 37;
   HEAP32[$0 + 140 >> 2] = 0;
   $6 = $0 + 136 | 1;
   $7 = HEAP32[$2 + 4 >> 2];
   std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6, 5568, 1, $7);
  }
  block : {
   if (!global$9 | !$9) {
    $5 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    $4 = $0 + 123 | 0;
    $7 = $4;
    $8 = $0 + 136 | 0;
   }
   if (!global$9 | ($9 | 0) == 1) {
    $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, 13, $6, $8, $0);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    $7 = $0 + 123 | 0;
    $6 = $7 + $6 | 0;
    $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $6, $2);
    $10 = $0 + 4 | 0;
    std____2__ios_base__getloc_28_29_20const($10, $2);
    $8 = $0 + 16 | 0;
    $12 = $0 + 12 | 0;
    $13 = $0 + 8 | 0;
   }
   if (!global$9 | ($9 | 0) == 2) {
    std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($7, $4, $6, $8, $12, $13, $10);
    $11 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $4 = global$9 ? $4 : $0 + 4 | 0;
   if (!global$9 | ($9 | 0) == 3) {
    std____2__locale___locale_28_29($4);
    $11 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $6 = HEAP32[$0 + 12 >> 2];
    $7 = HEAP32[$0 + 8 >> 2];
    $4 = $0 + 16 | 0;
   }
   if (!global$9 | ($9 | 0) == 4) {
    $5 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, $6, $7, $2, $3);
    $11 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    __stack_pointer = $0 + 144 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $8;
  HEAP32[$5 + 32 >> 2] = $12;
  HEAP32[$5 + 36 >> 2] = $13;
  HEAP32[$5 + 40 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + -64;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $11 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $12 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $9 = __stack_pointer;
   $14 = $9 - 16 | 0;
   __stack_pointer = $14;
  }
  block : {
   if (!global$9 | !$12) {
    $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($6);
    if ((global$9 | 0) == 1) {
     break block
    }
    $15 = $7;
   }
   $9 = global$9 ? $9 : $14 + 4 | 0;
   if (!global$9 | ($12 | 0) == 1) {
    $7 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($6);
    $13 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $7;
   }
   if (!global$9 | ($12 | 0) == 2) {
    std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($9, $6);
    $13 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($14 + 4 | 0)
   }
   block1 : {
    if ((global$9 | 0) == 2 | $9) {
     if (!global$9 | ($12 | 0) == 3) {
      std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($15, $0, $2, $3);
      $13 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $6 = ($2 - $0 << 2) + $3 | 0;
      HEAP32[$5 >> 2] = $6;
      break block1;
     }
    }
    if (!global$9) {
     HEAP32[$5 >> 2] = $3;
     $9 = $0;
     $8 = HEAPU8[$9 | 0];
     $10 = $8 - 43 | 0;
    }
    block3 : {
     if (!global$9) {
      block2 : {
       switch ($10 | 0) {
       case 0:
       case 2:
        break block2;
       default:
        break block3;
       };
      }
      $9 = $8 << 24 >> 24;
     }
     if (!global$9 | ($12 | 0) == 4) {
      $7 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($15, $9);
      $13 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $8 = $7;
     }
     if (!global$9) {
      $10 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $10 + 4;
      HEAP32[$10 >> 2] = $8;
      $9 = $0 + 1 | 0;
     }
    }
    $8 = global$9 ? $8 : ($2 - $9 | 0) < 2;
    block4 : {
     if (!global$9) {
      if ($8) {
       break block4
      }
      $8 = HEAPU8[$9 | 0] != 48;
      if ($8) {
       break block4
      }
      $8 = (HEAPU8[$9 + 1 | 0] | 32) != 120;
      if ($8) {
       break block4
      }
     }
     if (!global$9 | ($12 | 0) == 5) {
      $7 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($15, 48);
      $13 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $8 = $7;
     }
     if (!global$9) {
      $10 = HEAP32[$5 >> 2];
      $11 = $10 + 4 | 0;
      HEAP32[$5 >> 2] = $11;
      HEAP32[$10 >> 2] = $8;
      $8 = HEAP8[$9 + 1 | 0];
     }
     if (!global$9 | ($12 | 0) == 6) {
      $7 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($15, $8);
      $13 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
      $8 = $7;
     }
     if (!global$9) {
      $10 = HEAP32[$5 >> 2];
      $11 = $10 + 4 | 0;
      HEAP32[$5 >> 2] = $11;
      HEAP32[$10 >> 2] = $8;
      $9 = $9 + 2 | 0;
     }
    }
    if (!global$9) {
     void_20std____2__reverse_5babi_nn190106_5d_char___28char__2c_20char__29($9, $2);
     $8 = 0;
    }
    if (!global$9 | ($12 | 0) == 7) {
     $7 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($6);
     $13 = 7;
     if ((global$9 | 0) == 1) {
      break block
     }
     $17 = $7;
    }
    if (!global$9) {
     $10 = 0;
     $6 = $9;
    }
    while (1) {
     $11 = global$9 ? $11 : $2 >>> 0 <= $6 >>> 0;
     $16 = global$9 ? $16 : $11;
     if (global$9 ? 0 : $16 | (global$9 | 0) == 2) {
      $6 = ($9 - $0 << 2) + $3 | 0;
      $9 = HEAP32[$5 >> 2];
      void_20std____2__reverse_5babi_nn190106_5d_wchar_t___28wchar_t__2c_20wchar_t__29($6, $9);
      $6 = HEAP32[$5 >> 2];
     }
     if (!$16 | (global$9 | 0) == 2) {
      if (!global$9) {
       $11 = $14 + 4 | 0;
       block5 : {
        if (!HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, $10) | 0]) {
         break block5
        }
        if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, $10) | 0] != ($8 | 0)) {
         break block5
        }
        $8 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $8 + 4;
        HEAP32[$8 >> 2] = $17;
        $10 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($11) - 1 >>> 0 > $10 >>> 0) + $10 | 0;
        $8 = 0;
       }
       $11 = HEAP8[$6 | 0];
      }
      if (!global$9 | ($12 | 0) == 8) {
       $7 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($15, $11);
       $13 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
       $18 = $7;
      }
      if (!global$9) {
       $11 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $11 + 4;
       HEAP32[$11 >> 2] = $18;
       $6 = $6 + 1 | 0;
       $8 = $8 + 1 | 0;
       continue;
      }
     }
     break;
    };
   }
   if (!global$9) {
    HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0;
    $0 = $14 + 4 | 0;
   }
   if (!global$9 | ($12 | 0) == 9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
    $13 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $14 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $9;
  HEAP32[$7 + 32 >> 2] = $8;
  HEAP32[$7 + 36 >> 2] = $10;
  HEAP32[$7 + 40 >> 2] = $11;
  HEAP32[$7 + 44 >> 2] = $14;
  HEAP32[$7 + 48 >> 2] = $15;
  HEAP32[$7 + 52 >> 2] = $16;
  HEAP32[$7 + 56 >> 2] = $17;
  HEAP32[$7 + 60 >> 2] = $18;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - -64;
 }
 
 function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $10 = __stack_pointer - 16 | 0;
   __stack_pointer = $10;
   $7 = !$0;
  }
  block1 : {
   block2 : {
    block : {
     if (!global$9) {
      if ($7) {
       break block
      }
      $8 = $2 - $1 >> 2;
      $9 = ($8 | 0) > 0;
      $7 = HEAP32[$4 + 12 >> 2];
     }
     if ((global$9 | 0) == 2 | $9) {
      if (!global$9 | !$11) {
       $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn190106_5d_28char_20const__2c_20long_29($0, $1, $8);
       if ((global$9 | 0) == 1) {
        break block1
       }
       $9 = $6;
      }
      if (!global$9) {
       $8 = ($8 | 0) != ($9 | 0);
       if ($8) {
        break block
       }
      }
     }
     if (!global$9) {
      $1 = $3 - $1 >> 2;
      $8 = $7 - $1 | 0;
      $1 = ($1 | 0) < ($7 | 0) ? $8 : 0;
      $7 = ($1 | 0) > 0;
     }
     if ((global$9 | 0) == 2 | $7) {
      $7 = global$9 ? $7 : $10 + 4 | 0;
      if (!global$9 | ($11 | 0) == 1) {
       $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29($7, $1, $5);
       $12 = 1;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $7 = $6;
      }
      if (!global$9) {
       $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($7)
      }
      if (!global$9 | ($11 | 0) == 2) {
       $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn190106_5d_28char_20const__2c_20long_29($0, $5, $1);
       $12 = 2;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $8 = $6;
      }
      if (!global$9 | ($11 | 0) == 3) {
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($7);
       $12 = 3;
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $1 = ($1 | 0) != ($8 | 0);
       if ($1) {
        break block
       }
      }
     }
     if (global$9) {
      $6 = $3
     } else {
      $1 = $3 - $2 >> 2;
      $6 = ($1 | 0) > 0;
     }
     if ($6 | (global$9 | 0) == 2) {
      if (!global$9 | ($11 | 0) == 4) {
       $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn190106_5d_28char_20const__2c_20long_29($0, $2, $1);
       $12 = 4;
       if ((global$9 | 0) == 1) {
        break block1
       }
       $2 = $6;
      }
      if (!global$9 & ($1 | 0) != ($2 | 0)) {
       break block
      }
     }
     if (!global$9) {
      std____2__ios_base__width_5babi_nn190106_5d_28long_29($4);
      break block2;
     }
    }
    $0 = global$9 ? $0 : 0;
   }
   if (!global$9) {
    __stack_pointer = $10 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $8;
  HEAP32[$6 + 32 >> 2] = $9;
  HEAP32[$6 + 36 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 52;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $14 = HEAP32[$1 + 40 >> 2];
   $15 = HEAP32[$1 + 44 >> 2];
   $12 = HEAP32[$1 + 48 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = 37;
   HEAP32[$0 + 252 >> 2] = 0;
   $7 = $0 + 248 | 1;
   $8 = HEAP32[$2 + 4 >> 2];
   std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($7, 5411, 1, $8);
  }
  block : {
   if (!global$9 | !$11) {
    $6 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $6;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    HEAP32[$0 + 4 >> 2] = $5;
    $10 = $0 + 248 | 0;
    $8 = $0 + 224 | 0;
    $9 = $8;
   }
   if (!global$9 | ($11 | 0) == 1) {
    $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($9, 24, $7, $10, $0);
    $13 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $6;
   }
   if (!global$9) {
    $9 = $0 + 224 | 0;
    $7 = $9 + $7 | 0;
    $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($8, $7, $2);
    $12 = $0 + 20 | 0;
    std____2__ios_base__getloc_28_29_20const($12, $2);
    $10 = $0 + 32 | 0;
    $14 = $0 + 28 | 0;
    $15 = $0 + 24 | 0;
   }
   if (!global$9 | ($11 | 0) == 2) {
    std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($9, $8, $7, $10, $14, $15, $12);
    $13 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $7 = global$9 ? $7 : $0 + 20 | 0;
   if (!global$9 | ($11 | 0) == 3) {
    std____2__locale___locale_28_29($7);
    $13 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $8 = HEAP32[$0 + 28 >> 2];
    $9 = HEAP32[$0 + 24 >> 2];
    $7 = $0 + 32 | 0;
   }
   if (!global$9 | ($11 | 0) == 4) {
    $6 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $7, $8, $9, $2, $3);
    $13 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    __stack_pointer = $0 + 256 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $9;
  HEAP32[$6 + 32 >> 2] = $8;
  HEAP32[$6 + 36 >> 2] = $10;
  HEAP32[$6 + 40 >> 2] = $14;
  HEAP32[$6 + 44 >> 2] = $15;
  HEAP32[$6 + 48 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 52;
  return 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $12 = HEAP32[$1 + 32 >> 2];
   $13 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 144 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 136 >> 2] = 37;
   HEAP32[$0 + 140 >> 2] = 0;
   $6 = $0 + 136 | 1;
   $7 = HEAP32[$2 + 4 >> 2];
   std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6, 5568, 0, $7);
  }
  block : {
   if (!global$9 | !$9) {
    $5 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    $4 = $0 + 123 | 0;
    $7 = $4;
    $8 = $0 + 136 | 0;
   }
   if (!global$9 | ($9 | 0) == 1) {
    $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, 13, $6, $8, $0);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    $7 = $0 + 123 | 0;
    $6 = $7 + $6 | 0;
    $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $6, $2);
    $10 = $0 + 4 | 0;
    std____2__ios_base__getloc_28_29_20const($10, $2);
    $8 = $0 + 16 | 0;
    $12 = $0 + 12 | 0;
    $13 = $0 + 8 | 0;
   }
   if (!global$9 | ($9 | 0) == 2) {
    std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($7, $4, $6, $8, $12, $13, $10);
    $11 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $4 = global$9 ? $4 : $0 + 4 | 0;
   if (!global$9 | ($9 | 0) == 3) {
    std____2__locale___locale_28_29($4);
    $11 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $6 = HEAP32[$0 + 12 >> 2];
    $7 = HEAP32[$0 + 8 >> 2];
    $4 = $0 + 16 | 0;
   }
   if (!global$9 | ($9 | 0) == 4) {
    $5 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, $6, $7, $2, $3);
    $11 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    __stack_pointer = $0 + 144 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $8;
  HEAP32[$5 + 32 >> 2] = $12;
  HEAP32[$5 + 36 >> 2] = $13;
  HEAP32[$5 + 40 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 52;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $14 = HEAP32[$1 + 40 >> 2];
   $15 = HEAP32[$1 + 44 >> 2];
   $12 = HEAP32[$1 + 48 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 248 >> 2] = 37;
   HEAP32[$0 + 252 >> 2] = 0;
   $7 = $0 + 248 | 1;
   $8 = HEAP32[$2 + 4 >> 2];
   std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($7, 5411, 0, $8);
  }
  block : {
   if (!global$9 | !$11) {
    $6 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $6;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    HEAP32[$0 + 4 >> 2] = $5;
    $10 = $0 + 248 | 0;
    $8 = $0 + 224 | 0;
    $9 = $8;
   }
   if (!global$9 | ($11 | 0) == 1) {
    $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($9, 24, $7, $10, $0);
    $13 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $6;
   }
   if (!global$9) {
    $9 = $0 + 224 | 0;
    $7 = $9 + $7 | 0;
    $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($8, $7, $2);
    $12 = $0 + 20 | 0;
    std____2__ios_base__getloc_28_29_20const($12, $2);
    $10 = $0 + 32 | 0;
    $14 = $0 + 28 | 0;
    $15 = $0 + 24 | 0;
   }
   if (!global$9 | ($11 | 0) == 2) {
    std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($9, $8, $7, $10, $14, $15, $12);
    $13 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $7 = global$9 ? $7 : $0 + 20 | 0;
   if (!global$9 | ($11 | 0) == 3) {
    std____2__locale___locale_28_29($7);
    $13 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $8 = HEAP32[$0 + 28 >> 2];
    $9 = HEAP32[$0 + 24 >> 2];
    $7 = $0 + 32 | 0;
   }
   if (!global$9 | ($11 | 0) == 4) {
    $6 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $7, $8, $9, $2, $3);
    $13 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    __stack_pointer = $0 + 256 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $9;
  HEAP32[$6 + 32 >> 2] = $8;
  HEAP32[$6 + 36 >> 2] = $10;
  HEAP32[$6 + 40 >> 2] = $14;
  HEAP32[$6 + 44 >> 2] = $15;
  HEAP32[$6 + 48 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 52;
  return 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 60;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $6 = HEAP32[$5 + 20 >> 2];
   $1 = HEAP32[$5 + 16 >> 2];
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $6 | 0);
   $4 = +wasm2js_scratch_load_f64();
   $7 = HEAP32[$5 + 24 >> 2];
   $6 = HEAP32[$5 + 28 >> 2];
   $8 = HEAP32[$5 + 32 >> 2];
   $9 = HEAP32[$5 + 36 >> 2];
   $12 = HEAP32[$5 + 40 >> 2];
   $13 = HEAP32[$5 + 44 >> 2];
   $15 = HEAP32[$5 + 48 >> 2];
   $16 = HEAP32[$5 + 52 >> 2];
   $14 = HEAP32[$5 + 56 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 368 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 360 >> 2] = 37;
   HEAP32[$0 + 364 >> 2] = 0;
   $7 = HEAP32[$2 + 4 >> 2];
   $8 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 360 | 1, 14303, $7);
   $6 = $0 + 320 | 0;
   HEAP32[$0 + 316 >> 2] = $6;
  }
  block : {
   if (!global$9 | !$10) {
    $5 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   block1 : {
    if ((global$9 | 0) == 2 | $8) {
     if (!global$9) {
      $7 = HEAP32[$2 + 8 >> 2];
      HEAPF64[$0 + 40 >> 3] = $4;
      HEAP32[$0 + 32 >> 2] = $7;
      $12 = $0 + 360 | 0;
      $9 = $0 + 32 | 0;
      $7 = $0 + 320 | 0;
     }
     if (!global$9 | ($10 | 0) == 1) {
      $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, 30, $6, $12, $9);
      $11 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $5;
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     HEAPF64[$0 + 48 >> 3] = $4;
     $12 = $0 + 360 | 0;
     $9 = $0 + 48 | 0;
     $7 = $0 + 320 | 0;
    }
    if (!global$9 | ($10 | 0) == 2) {
     $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, 30, $6, $12, $9);
     $11 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $6 = $5;
    }
   }
   if (!global$9) {
    HEAP32[$0 + 80 >> 2] = 282;
    $12 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 308 | 0, 0, $0 + 80 | 0);
    $9 = ($6 | 0) >= 30;
    $7 = $0 + 320 | 0;
   }
   block5 : {
    block3 : {
     if ((global$9 | 0) == 2 | $9) {
      if (!global$9 | ($10 | 0) == 3) {
       $5 = std____2____cloc_28_29();
       $11 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $6 = $5;
      }
      block2 : {
       if ((global$9 | 0) == 2 | $8) {
        if (!global$9) {
         $7 = HEAP32[$2 + 8 >> 2];
         HEAPF64[$0 + 8 >> 3] = $4;
         HEAP32[$0 >> 2] = $7;
         $8 = $0 + 360 | 0;
         $7 = $0 + 316 | 0;
        }
        if (!global$9 | ($10 | 0) == 4) {
         $5 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($7, $6, $8, $0);
         $11 = 4;
         if ((global$9 | 0) == 1) {
          break block
         }
         $6 = $5;
        }
        if (!global$9) {
         break block2
        }
       }
       if (!global$9) {
        HEAPF64[$0 + 16 >> 3] = $4;
        $8 = $0 + 360 | 0;
        $9 = $0 + 16 | 0;
        $7 = $0 + 316 | 0;
       }
       if (!global$9 | ($10 | 0) == 5) {
        $5 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($7, $6, $8, $9);
        $11 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
      }
      if (!global$9) {
       if (($6 | 0) == -1) {
        break block3
       }
       $7 = HEAP32[$0 + 316 >> 2];
      }
      if (!global$9 | ($10 | 0) == 6) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($12, $7);
       $11 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $7 = HEAP32[$0 + 316 >> 2]
      }
     }
     if (!global$9) {
      $9 = $6 + $7 | 0;
      $15 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($7, $9, $2);
      HEAP32[$0 + 80 >> 2] = 282;
      $7 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 72 | 0, 0, $0 + 80 | 0);
      $8 = HEAP32[$0 + 316 >> 2];
      $13 = ($8 | 0) == ($0 + 320 | 0);
     }
     block4 : {
      if (!global$9) {
       if ($13) {
        $6 = $0 + 80 | 0;
        break block4;
       }
       $6 = $6 << 3;
      }
      if (!global$9 | ($10 | 0) == 7) {
       $5 = emscripten_builtin_malloc($6);
       $11 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
       $6 = $5;
      }
      if (!global$9) {
       $8 = !$6;
       if ($8) {
        break block3
       }
      }
      if (!global$9 | ($10 | 0) == 8) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($7, $6);
       $11 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $8 = global$9 ? $8 : HEAP32[$0 + 316 >> 2];
     }
     if (!global$9) {
      $14 = $0 + 60 | 0;
      std____2__ios_base__getloc_28_29_20const($14, $2);
      $16 = $0 - -64 | 0;
      $13 = $0 + 68 | 0;
     }
     if (!global$9 | ($10 | 0) == 9) {
      std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($8, $15, $9, $6, $13, $16, $14);
      $11 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $8 = global$9 ? $8 : $0 + 60 | 0;
     if (!global$9 | ($10 | 0) == 10) {
      std____2__locale___locale_28_29($8);
      $11 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $8 = HEAP32[$0 + 68 >> 2];
      $9 = HEAP32[$0 + 64 >> 2];
     }
     if (!global$9 | ($10 | 0) == 11) {
      $5 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $6, $8, $9, $2, $3);
      $11 = 11;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $5;
     }
     if (!global$9 | ($10 | 0) == 12) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($7);
      $11 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9 | ($10 | 0) == 13) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($12);
      $11 = 13;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      __stack_pointer = $0 + 368 | 0;
      break block5;
     }
    }
    if (!global$9) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    return $2 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  wasm2js_scratch_store_f64(+$4);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 20 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $6;
  HEAP32[$5 + 32 >> 2] = $8;
  HEAP32[$5 + 36 >> 2] = $9;
  HEAP32[$5 + 40 >> 2] = $12;
  HEAP32[$5 + 44 >> 2] = $13;
  HEAP32[$5 + 48 >> 2] = $15;
  HEAP32[$5 + 52 >> 2] = $16;
  HEAP32[$5 + 56 >> 2] = $14;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 60;
  return 0;
 }
 
 function std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 72;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $13 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $16 = HEAP32[$1 + 44 >> 2];
   $14 = HEAP32[$1 + 48 >> 2];
   $15 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $19 = HEAP32[$1 + 64 >> 2];
   $20 = HEAP32[$1 + 68 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $9 = __stack_pointer;
   $16 = $9 - 16 | 0;
   __stack_pointer = $16;
  }
  block : {
   if (!global$9 | !$11) {
    $8 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($6);
    if ((global$9 | 0) == 1) {
     break block
    }
    $14 = $8;
   }
   $9 = global$9 ? $9 : $16 + 4 | 0;
   if (!global$9 | ($11 | 0) == 1) {
    $8 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($6);
    $12 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $17 = $8;
   }
   if (!global$9 | ($11 | 0) == 2) {
    std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($9, $17);
    $12 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$5 >> 2] = $3;
    $9 = $0;
    $6 = HEAPU8[$9 | 0];
    $7 = $6 - 43 | 0;
   }
   block2 : {
    if (!global$9) {
     block1 : {
      switch ($7 | 0) {
      case 0:
      case 2:
       break block1;
      default:
       break block2;
      };
     }
     $6 = $6 << 24 >> 24;
    }
    if (!global$9 | ($11 | 0) == 3) {
     $8 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($14, $6);
     $12 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $6 = $8;
    }
    if (!global$9) {
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 4;
     HEAP32[$7 >> 2] = $6;
     $9 = $0 + 1 | 0;
    }
   }
   if (!global$9) {
    $6 = $9;
    $7 = ($2 - $6 | 0) <= 1;
   }
   block4 : {
    block3 : {
     if (!global$9) {
      if ($7) {
       break block3
      }
      $7 = HEAPU8[$6 | 0] != 48;
      if ($7) {
       break block3
      }
      $7 = (HEAPU8[$6 + 1 | 0] | 32) != 120;
      if ($7) {
       break block3
      }
     }
     if (!global$9 | ($11 | 0) == 4) {
      $8 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($14, 48);
      $12 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $8;
     }
     if (!global$9) {
      $7 = HEAP32[$5 >> 2];
      $10 = $7 + 4 | 0;
      HEAP32[$5 >> 2] = $10;
      HEAP32[$7 >> 2] = $6;
      $6 = HEAP8[$9 + 1 | 0];
     }
     if (!global$9 | ($11 | 0) == 5) {
      $8 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($14, $6);
      $12 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $8;
     }
     if (!global$9) {
      $7 = HEAP32[$5 >> 2];
      $10 = $7 + 4 | 0;
      HEAP32[$5 >> 2] = $10;
      HEAP32[$7 >> 2] = $6;
      $9 = $9 + 2 | 0;
      $6 = $9;
     }
     while (1) {
      if (!global$9) {
       $7 = $2 >>> 0 <= $6 >>> 0;
       if ($7) {
        break block4
       }
       $7 = HEAP8[$6 | 0];
      }
      if (!global$9 | ($11 | 0) == 6) {
       std____2____cloc_28_29();
       $12 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $7 = !__isxdigit_l($7);
       if ($7) {
        break block4
       }
       $6 = $6 + 1 | 0;
       continue;
      }
      break;
     };
    }
    while (1) {
     if (!global$9) {
      $7 = $2 >>> 0 <= $6 >>> 0;
      if ($7) {
       break block4
      }
      $7 = HEAP8[$6 | 0];
     }
     if (!global$9 | ($11 | 0) == 7) {
      std____2____cloc_28_29();
      $12 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $7 = !__isdigit_l($7);
      if ($7) {
       break block4
      }
      $6 = $6 + 1 | 0;
      continue;
     }
     break;
    };
   }
   if (!global$9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($16 + 4 | 0)
   }
   block5 : {
    if ((global$9 | 0) == 2 | $7) {
     $7 = global$9 ? $7 : HEAP32[$5 >> 2];
     if (!global$9 | ($11 | 0) == 8) {
      std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($14, $9, $6, $7);
      $12 = 8;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $7 = HEAP32[$5 >> 2];
      $9 = $7 + ($6 - $9 << 2) | 0;
      HEAP32[$5 >> 2] = $9;
      break block5;
     }
    }
    if (!global$9) {
     void_20std____2__reverse_5babi_nn190106_5d_char___28char__2c_20char__29($9, $6)
    }
    if (!global$9 | ($11 | 0) == 9) {
     $8 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($17);
     $12 = 9;
     if ((global$9 | 0) == 1) {
      break block
     }
     $19 = $8;
    }
    $7 = global$9 ? $7 : $9;
    while (1) {
     $10 = global$9 ? $10 : $6 >>> 0 <= $7 >>> 0;
     $18 = global$9 ? $18 : $10;
     if (global$9 ? 0 : $18 | (global$9 | 0) == 2) {
      $9 = ($9 - $0 << 2) + $3 | 0;
      $7 = HEAP32[$5 >> 2];
      void_20std____2__reverse_5babi_nn190106_5d_wchar_t___28wchar_t__2c_20wchar_t__29($9, $7);
     }
     if (!$18 | (global$9 | 0) == 2) {
      if (!global$9) {
       $10 = $16 + 4 | 0;
       block6 : {
        if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($10, $15) | 0] <= 0) {
         break block6
        }
        if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($10, $15) | 0] != ($13 | 0)) {
         break block6
        }
        $8 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $8 + 4;
        HEAP32[$8 >> 2] = $19;
        $15 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($10) - 1 >>> 0 > $15 >>> 0) + $15 | 0;
        $13 = 0;
       }
       $10 = HEAP8[$7 | 0];
      }
      if (!global$9 | ($11 | 0) == 10) {
       $8 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($14, $10);
       $12 = 10;
       if ((global$9 | 0) == 1) {
        break block
       }
       $20 = $8;
      }
      if (!global$9) {
       $10 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $10 + 4;
       HEAP32[$10 >> 2] = $20;
       $7 = $7 + 1 | 0;
       $13 = $13 + 1 | 0;
       continue;
      }
     }
     break;
    };
   }
   block8 : {
    block7 : {
     while (1) {
      if (global$9) {
       $8 = $9
      } else {
       if ($2 >>> 0 <= $6 >>> 0) {
        break block7
       }
       $7 = $6 + 1 | 0;
       $6 = HEAP8[$6 | 0];
       $8 = ($6 | 0) != 46;
      }
      if ($8 | (global$9 | 0) == 2) {
       if (!global$9 | ($11 | 0) == 11) {
        $8 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($14, $6);
        $12 = 11;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $8;
       }
       if (!global$9) {
        $13 = HEAP32[$5 >> 2];
        $9 = $13 + 4 | 0;
        HEAP32[$5 >> 2] = $9;
        HEAP32[$13 >> 2] = $6;
        $6 = $7;
        continue;
       }
      }
      break;
     };
     if (!global$9 | ($11 | 0) == 12) {
      $8 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($17);
      $12 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $8;
     }
     if (!global$9) {
      $15 = HEAP32[$5 >> 2];
      $13 = $15 + 4 | 0;
      HEAP32[$5 >> 2] = $13;
      HEAP32[$15 >> 2] = $6;
      break block8;
     }
    }
    if (!global$9) {
     $13 = HEAP32[$5 >> 2];
     $7 = $6;
    }
   }
   if (!global$9 | ($11 | 0) == 13) {
    std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($14, $7, $2, $13);
    $12 = 13;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $6 = HEAP32[$5 >> 2] + ($2 - $7 << 2) | 0;
    HEAP32[$5 >> 2] = $6;
    HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0;
    $0 = $16 + 4 | 0;
   }
   if (!global$9 | ($11 | 0) == 14) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
    $12 = 14;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $16 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $13;
  HEAP32[$8 + 40 >> 2] = $10;
  HEAP32[$8 + 44 >> 2] = $16;
  HEAP32[$8 + 48 >> 2] = $14;
  HEAP32[$8 + 52 >> 2] = $15;
  HEAP32[$8 + 56 >> 2] = $17;
  HEAP32[$8 + 60 >> 2] = $18;
  HEAP32[$8 + 64 >> 2] = $19;
  HEAP32[$8 + 68 >> 2] = $20;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 72;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 68;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $11 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $18 = HEAP32[$1 + 56 >> 2];
   $19 = HEAP32[$1 + 60 >> 2];
   $17 = HEAP32[$1 + 64 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 416 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 408 >> 2] = 37;
   HEAP32[$0 + 412 >> 2] = 0;
   $9 = HEAP32[$2 + 4 >> 2];
   $11 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 408 | 1, 10804, $9);
   $10 = $0 + 368 | 0;
   HEAP32[$0 + 364 >> 2] = $10;
  }
  block : {
   if (!global$9 | !$13) {
    $8 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $10 = $8;
   }
   block1 : {
    if ((global$9 | 0) == 2 | $11) {
     if (!global$9) {
      $8 = HEAP32[$2 + 8 >> 2];
      $9 = $0 - -64 | 0;
      HEAP32[$9 >> 2] = $6;
      HEAP32[$9 + 4 >> 2] = $7;
      HEAP32[$0 + 56 >> 2] = $4;
      HEAP32[$0 + 60 >> 2] = $5;
      HEAP32[$0 + 48 >> 2] = $8;
      $15 = $0 + 408 | 0;
      $12 = $0 + 48 | 0;
      $9 = $0 + 368 | 0;
     }
     if (!global$9 | ($13 | 0) == 1) {
      $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($9, 30, $10, $15, $12);
      $14 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $10 = $8;
     }
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[$0 + 80 >> 2] = $4;
     HEAP32[$0 + 84 >> 2] = $5;
     HEAP32[$0 + 88 >> 2] = $6;
     HEAP32[$0 + 92 >> 2] = $7;
     $15 = $0 + 408 | 0;
     $12 = $0 + 80 | 0;
     $9 = $0 + 368 | 0;
    }
    if (!global$9 | ($13 | 0) == 2) {
     $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($9, 30, $10, $15, $12);
     $14 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $10 = $8;
    }
   }
   if (!global$9) {
    HEAP32[$0 + 128 >> 2] = 282;
    $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 356 | 0, 0, $0 + 128 | 0);
    $12 = ($10 | 0) >= 30;
    $9 = $0 + 368 | 0;
   }
   block5 : {
    block3 : {
     if ((global$9 | 0) == 2 | $12) {
      if (!global$9 | ($13 | 0) == 3) {
       $8 = std____2____cloc_28_29();
       $14 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $10 = $8;
      }
      block2 : {
       if ((global$9 | 0) == 2 | $11) {
        if (!global$9) {
         $9 = HEAP32[$2 + 8 >> 2];
         HEAP32[$0 + 16 >> 2] = $6;
         HEAP32[$0 + 20 >> 2] = $7;
         HEAP32[$0 + 8 >> 2] = $4;
         HEAP32[$0 + 12 >> 2] = $5;
         HEAP32[$0 >> 2] = $9;
         $11 = $0 + 408 | 0;
         $9 = $0 + 364 | 0;
        }
        if (!global$9 | ($13 | 0) == 4) {
         $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($9, $10, $11, $0);
         $14 = 4;
         if ((global$9 | 0) == 1) {
          break block
         }
         $10 = $8;
        }
        if (!global$9) {
         break block2
        }
       }
       if (!global$9) {
        HEAP32[$0 + 32 >> 2] = $4;
        HEAP32[$0 + 36 >> 2] = $5;
        HEAP32[$0 + 40 >> 2] = $6;
        HEAP32[$0 + 44 >> 2] = $7;
        $11 = $0 + 408 | 0;
        $12 = $0 + 32 | 0;
        $9 = $0 + 364 | 0;
       }
       if (!global$9 | ($13 | 0) == 5) {
        $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($9, $10, $11, $12);
        $14 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
        $10 = $8;
       }
      }
      if (!global$9) {
       if (($10 | 0) == -1) {
        break block3
       }
       $9 = HEAP32[$0 + 364 >> 2];
      }
      if (!global$9 | ($13 | 0) == 6) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($15, $9);
       $14 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $9 = HEAP32[$0 + 364 >> 2]
      }
     }
     if (!global$9) {
      $12 = $10 + $9 | 0;
      $18 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($9, $12, $2);
      HEAP32[$0 + 128 >> 2] = 282;
      $9 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 120 | 0, 0, $0 + 128 | 0);
      $11 = HEAP32[$0 + 364 >> 2];
      $16 = ($11 | 0) == ($0 + 368 | 0);
     }
     block4 : {
      if (!global$9) {
       if ($16) {
        $10 = $0 + 128 | 0;
        break block4;
       }
       $10 = $10 << 3;
      }
      if (!global$9 | ($13 | 0) == 7) {
       $8 = emscripten_builtin_malloc($10);
       $14 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
       $10 = $8;
      }
      if (!global$9) {
       $11 = !$10;
       if ($11) {
        break block3
       }
      }
      if (!global$9 | ($13 | 0) == 8) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($9, $10);
       $14 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $11 = global$9 ? $11 : HEAP32[$0 + 364 >> 2];
     }
     if (!global$9) {
      $17 = $0 + 108 | 0;
      std____2__ios_base__getloc_28_29_20const($17, $2);
      $19 = $0 + 112 | 0;
      $16 = $0 + 116 | 0;
     }
     if (!global$9 | ($13 | 0) == 9) {
      std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($11, $18, $12, $10, $16, $19, $17);
      $14 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $11 = global$9 ? $11 : $0 + 108 | 0;
     if (!global$9 | ($13 | 0) == 10) {
      std____2__locale___locale_28_29($11);
      $14 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $11 = HEAP32[$0 + 116 >> 2];
      $12 = HEAP32[$0 + 112 >> 2];
     }
     if (!global$9 | ($13 | 0) == 11) {
      $8 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $10, $11, $12, $2, $3);
      $14 = 11;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $8;
     }
     if (!global$9 | ($13 | 0) == 12) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($9);
      $14 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9 | ($13 | 0) == 13) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($15);
      $14 = 13;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      __stack_pointer = $0 + 416 | 0;
      break block5;
     }
    }
    if (!global$9) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    return $2 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $14;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $10;
  HEAP32[$8 + 40 >> 2] = $11;
  HEAP32[$8 + 44 >> 2] = $12;
  HEAP32[$8 + 48 >> 2] = $15;
  HEAP32[$8 + 52 >> 2] = $16;
  HEAP32[$8 + 56 >> 2] = $18;
  HEAP32[$8 + 60 >> 2] = $19;
  HEAP32[$8 + 64 >> 2] = $17;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 68;
  return 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $7 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 208 | 0;
   __stack_pointer = $0;
  }
  block : {
   if (!global$9 | !$10) {
    $5 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $9 = $5;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $4;
    $4 = $0 + 176 | 0;
    $6 = $4;
   }
   if (!global$9 | ($10 | 0) == 1) {
    $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($4, 20, $9, 4903, $0);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $5;
   }
   if (!global$9) {
    $4 = ($0 + 176 | 0) + $7 | 0;
    $9 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $4, $2);
    $6 = $0 + 16 | 0;
    std____2__ios_base__getloc_28_29_20const($6, $2);
   }
   if (!global$9 | ($10 | 0) == 2) {
    $5 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($6);
    $11 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   $8 = global$9 ? $8 : $0 + 16 | 0;
   if (!global$9 | ($10 | 0) == 3) {
    std____2__locale___locale_28_29($8);
    $11 = 3;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $12 = $0 + 16 | 0;
    $8 = $0 + 176 | 0;
   }
   if (!global$9 | ($10 | 0) == 4) {
    std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($6, $8, $4, $12);
    $11 = 4;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $6 = $0 + 16 | 0;
    $7 = ($7 << 2) + $6 | 0;
    $4 = ($4 | 0) == ($9 | 0) ? $7 : (($9 - $0 << 2) + $0 | 0) - 688 | 0;
   }
   if (!global$9 | ($10 | 0) == 5) {
    $5 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $6, $4, $7, $2, $3);
    $11 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $5;
   }
   if (!global$9) {
    __stack_pointer = $0 + 208 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $8;
  HEAP32[$5 + 28 >> 2] = $9;
  HEAP32[$5 + 32 >> 2] = $7;
  HEAP32[$5 + 36 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = __stack_pointer - 16 | 0;
   __stack_pointer = $7;
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $4 = $1 >>> 0 <= 1073741815;
  }
  block1 : {
   block2 : {
    if ((global$9 | 0) == 2 | $4) {
     if (!global$9) {
      $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($1)
     }
     block : {
      if (!global$9) {
       if ($4) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1);
        $4 = $0;
        break block;
       }
       $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn190106_5d_28unsigned_20long_29($1) + 1 | 0;
       $4 = $5 + 8 | 0;
      }
      if (!global$9 | !$3) {
       auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_wchar_t___28std____2__allocator_wchar_t___2c_20unsigned_20long_29($4, $6);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $4 = HEAP32[$5 + 8 >> 2];
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $4);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$5 + 12 >> 2]);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1);
      }
     }
     if (!global$9) {
      $3 = __stack_pointer - 16 | 0;
      __stack_pointer = $3;
      HEAP32[$3 + 12 >> 2] = $2;
      $6 = $4;
      $2 = $1;
      $8 = $3 + 12 | 0;
      while (1) {
       if ($2) {
        HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
        $2 = $2 - 1 | 0;
        $6 = $6 + 4 | 0;
        continue;
       }
       break;
      };
      __stack_pointer = $3 + 16 | 0;
      HEAP32[$5 + 4 >> 2] = 0;
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29(($1 << 2) + $4 | 0, $5 + 4 | 0);
      __stack_pointer = $5 + 16 | 0;
      break block2;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $6;
  HEAP32[$3 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function void_20std____2__reverse_5babi_nn190106_5d_char___28char__2c_20char__29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$9;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  block : {
   if (($0 | 0) == ($1 | 0)) {
    break block
   }
   while (1) {
    $1 = $1 - 1 | 0;
    HEAP32[$2 + 8 >> 2] = $1;
    if ($0 >>> 0 >= $1 >>> 0) {
     break block
    }
    std____2__enable_if_is_move_constructible_char___value_20___20is_move_assignable_char___value_2c_20void___type_20std____2__swap_5babi_nn190106_5d_char__28char__2c_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    if ((global$9 | 0) != ($3 | 0)) {
     wasm2js_trap()
    } else {
     $0 = HEAP32[$2 + 12 >> 2] + 1 | 0;
     HEAP32[$2 + 12 >> 2] = $0;
     $1 = HEAP32[$2 + 8 >> 2];
     continue;
    }
   };
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function void_20std____2__reverse_5babi_nn190106_5d_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$9;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  block : {
   if (($0 | 0) == ($1 | 0)) {
    break block
   }
   while (1) {
    $1 = $1 - 4 | 0;
    HEAP32[$2 + 8 >> 2] = $1;
    if ($0 >>> 0 >= $1 >>> 0) {
     break block
    }
    std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn190106_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    if ((global$9 | 0) != ($3 | 0)) {
     wasm2js_trap()
    } else {
     $0 = HEAP32[$2 + 12 >> 2] + 4 | 0;
     HEAP32[$2 + 12 >> 2] = $0;
     $1 = HEAP32[$2 + 8 >> 2];
     continue;
    }
   };
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 56;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $10 = __stack_pointer;
   $9 = $10 - 16 | 0;
   __stack_pointer = $9;
   HEAP32[$9 + 8 >> 2] = $2;
   HEAP32[$9 + 12 >> 2] = $1;
   $1 = $9 + 4 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$11) {
    $8 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $8;
   }
   $1 = global$9 ? $1 : $9 + 4 | 0;
   if (!global$9 | ($11 | 0) == 1) {
    std____2__locale___locale_28_29($1);
    $12 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$4 >> 2] = 0;
    $1 = 0;
   }
   block1 : {
    while (1) {
     if (!global$9) {
      if ($1 | ($6 | 0) == ($7 | 0)) {
       break block1
      }
      $10 = $9 + 8 | 0;
      $1 = $9 + 12 | 0;
     }
     if (!global$9 | ($11 | 0) == 2) {
      $8 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $10);
      $12 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $8;
     }
     block2 : {
      if (!global$9) {
       if ($1) {
        break block2
       }
       $1 = HEAP8[$6 | 0];
      }
      if (!global$9 | ($11 | 0) == 3) {
       $8 = std____2__ctype_char___narrow_5babi_nn190106_5d_28char_2c_20char_29_20const($2, $1);
       $12 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $1 = $8;
      }
      $1 = global$9 ? $1 : ($1 | 0) == 37;
      block5 : {
       if ($1 | (global$9 | 0) == 2) {
        if (!global$9) {
         $1 = $6 + 1 | 0;
         if (($7 | 0) == ($1 | 0)) {
          break block2
         }
         $10 = 0;
         $1 = HEAP8[$1 | 0];
        }
        if (!global$9 | ($11 | 0) == 4) {
         $8 = std____2__ctype_char___narrow_5babi_nn190106_5d_28char_2c_20char_29_20const($2, $1);
         $12 = 4;
         if ((global$9 | 0) == 1) {
          break block
         }
         $1 = $8;
        }
        $13 = global$9 ? $13 : ($1 | 0) == 69;
        block4 : {
         if (!global$9) {
          block3 : {
           if ($13) {
            break block3
           }
           $14 = 1;
           if (($1 & 255) == 48) {
            break block3
           }
           $13 = $1;
           break block4;
          }
          $10 = $6 + 2 | 0;
          $13 = ($10 | 0) == ($7 | 0);
          if ($13) {
           break block2
          }
          $14 = 2;
          $10 = HEAP8[$10 | 0];
         }
         if (!global$9 | ($11 | 0) == 5) {
          $8 = std____2__ctype_char___narrow_5babi_nn190106_5d_28char_2c_20char_29_20const($2, $10);
          $12 = 5;
          if ((global$9 | 0) == 1) {
           break block
          }
          $13 = $8;
         }
         $10 = global$9 ? $10 : $1;
        }
        if (!global$9) {
         $15 = HEAP32[$9 + 8 >> 2];
         $16 = HEAP32[HEAP32[$0 >> 2] + 36 >> 2];
         $1 = HEAP32[$9 + 12 >> 2];
        }
        if (!global$9 | ($11 | 0) == 6) {
         $8 = FUNCTION_TABLE[$16 | 0]($0, $1, $15, $3, $4, $5, $13, $10) | 0;
         $12 = 6;
         if ((global$9 | 0) == 1) {
          break block
         }
         $1 = $8;
        }
        if (!global$9) {
         HEAP32[$9 + 12 >> 2] = $1;
         $1 = $6 + $14 | 0;
         $6 = $1 + 1 | 0;
         break block5;
        }
       }
       if (!global$9) {
        $1 = std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($2, 1, HEAP8[$6 | 0])
       }
       if ((global$9 | 0) == 2 | $1) {
        if (!global$9) {
         while (1) {
          $6 = $6 + 1 | 0;
          $1 = ($7 | 0) != ($6 | 0);
          if ($1) {
           $1 = std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($2, 1, HEAP8[$6 | 0]);
           if ($1) {
            continue
           }
          }
          break;
         }
        }
        while (1) {
         if (!global$9) {
          $10 = $9 + 8 | 0;
          $1 = $9 + 12 | 0;
         }
         if (!global$9 | ($11 | 0) == 7) {
          $8 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $10);
          $12 = 7;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $8;
         }
         if (!global$9) {
          if ($1) {
           break block5
          }
          $1 = $9 + 12 | 0;
         }
         if (!global$9 | ($11 | 0) == 8) {
          $8 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($1);
          $12 = 8;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $8;
         }
         if (!global$9) {
          $1 = !std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($2, 1, $1);
          if ($1) {
           break block5
          }
          $1 = $9 + 12 | 0;
         }
         if (!global$9 | ($11 | 0) == 9) {
          $8 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($1);
          $12 = 9;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $8;
         }
         if (!global$9) {
          continue
         }
         break;
        };
       }
       $1 = global$9 ? $1 : $9 + 12 | 0;
       if (!global$9 | ($11 | 0) == 10) {
        $8 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($1);
        $12 = 10;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       if (!global$9 | ($11 | 0) == 11) {
        $8 = std____2__ctype_char___toupper_5babi_nn190106_5d_28char_29_20const($2, $1);
        $12 = 11;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       $10 = global$9 ? $10 : HEAP8[$6 | 0];
       if (!global$9 | ($11 | 0) == 12) {
        $8 = std____2__ctype_char___toupper_5babi_nn190106_5d_28char_29_20const($2, $10);
        $12 = 12;
        if ((global$9 | 0) == 1) {
         break block
        }
        $10 = $8;
       }
       $1 = global$9 ? $1 : ($1 | 0) == ($10 | 0);
       if ($1 | (global$9 | 0) == 2) {
        if (!global$9) {
         $6 = $6 + 1 | 0;
         $1 = $9 + 12 | 0;
        }
        if (!global$9 | ($11 | 0) == 13) {
         $8 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($1);
         $12 = 13;
         if ((global$9 | 0) == 1) {
          break block
         }
         $1 = $8;
        }
        if (!global$9) {
         break block5
        }
       }
       if (!global$9) {
        HEAP32[$4 >> 2] = 4
       }
      }
      if (!global$9) {
       $1 = HEAP32[$4 >> 2];
       continue;
      }
     }
     break;
    };
    if (!global$9) {
     HEAP32[$4 >> 2] = 4
    }
   }
   if (!global$9) {
    $1 = $9 + 8 | 0;
    $0 = $9 + 12 | 0;
   }
   if (!global$9 | ($11 | 0) == 14) {
    $8 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
    $12 = 14;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $8;
   }
   if (!global$9) {
    if ($0) {
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
    }
    __stack_pointer = $9 + 16 | 0;
    return HEAP32[$9 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $10;
  HEAP32[$8 + 40 >> 2] = $13;
  HEAP32[$8 + 44 >> 2] = $14;
  HEAP32[$8 + 48 >> 2] = $15;
  HEAP32[$8 + 52 >> 2] = $16;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 56;
  return 0;
 }
 
 function std____2__ctype_char___narrow_5babi_nn190106_5d_28char_2c_20char_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 36 >> 2];
  block : {
   if (!global$9 | !$3) {
    $3 = FUNCTION_TABLE[$2 | 0]($0, $1, 0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_date_order_28_29_20const($0) {
  $0 = $0 | 0;
  return 2;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $8 = HEAP32[$6 + 24 >> 2];
   $9 = HEAP32[$6 + 28 >> 2];
   $6 = HEAP32[$6 + 32 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = __stack_pointer - 16 | 0;
   __stack_pointer = $8;
   HEAP32[$8 + 8 >> 2] = 624576549;
   HEAP32[$8 + 12 >> 2] = 1394948685;
   $9 = $8 + 8 | 0;
   $6 = $8 + 16 | 0;
  }
  block : {
   if (!global$9 | !$7) {
    $7 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $9, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
    $5 = $7;
   }
   if (!global$9) {
    __stack_pointer = $8 + 16 | 0;
    return $5 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $8;
  HEAP32[$7 + 28 >> 2] = $9;
  HEAP32[$7 + 32 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = $0;
   $7 = $0 + 8 | 0;
   $0 = HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2];
  }
  block : {
   if (!global$9 | !$9) {
    $6 = FUNCTION_TABLE[$0 | 0]($7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   if (!global$9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0) + $6 | 0;
   }
   if (!global$9 | ($9 | 0) == 1) {
    $6 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($8, $1, $2, $3, $4, $5, $7, $0);
    $10 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   HEAP32[$6 + 12 >> 2] = $1;
   $1 = $6 + 8 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $3 = global$9 ? $3 : $6 + 8 | 0;
   if (!global$9 | ($8 | 0) == 1) {
    std____2__locale___locale_28_29($3);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = $5 + 24 | 0;
    $5 = $6 + 12 | 0;
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $3, $5, $2, $4, $1);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0;
    return HEAP32[$6 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = $0 + 8 | 0;
   $0 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$8) {
    $6 = FUNCTION_TABLE[$0 | 0]($7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   $7 = global$9 ? $7 : $0 + 168 | 0;
   if (!global$9 | ($8 | 0) == 1) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $7, $5, $4, 0);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    $0 = $2 - $0 | 0;
    if (($0 | 0) <= 167) {
     HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   HEAP32[$6 + 12 >> 2] = $1;
   $1 = $6 + 8 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $3 = global$9 ? $3 : $6 + 8 | 0;
   if (!global$9 | ($8 | 0) == 1) {
    std____2__locale___locale_28_29($3);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = $5 + 16 | 0;
    $5 = $6 + 12 | 0;
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $3, $5, $2, $4, $1);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0;
    return HEAP32[$6 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = $0 + 8 | 0;
   $0 = HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2];
  }
  block : {
   if (!global$9 | !$8) {
    $6 = FUNCTION_TABLE[$0 | 0]($7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   $7 = global$9 ? $7 : $0 + 288 | 0;
   if (!global$9 | ($8 | 0) == 1) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $7, $5, $4, 0);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    $0 = $2 - $0 | 0;
    if (($0 | 0) <= 287) {
     HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $5 = HEAP32[$5 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 16 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 12 >> 2] = $1;
   $1 = $0 + 8 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$7) {
    $6 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   $3 = global$9 ? $3 : $0 + 8 | 0;
   if (!global$9 | ($7 | 0) == 1) {
    std____2__locale___locale_28_29($3);
    $8 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = $5 + 20 | 0;
    $5 = $0 + 12 | 0;
   }
   if (!global$9 | ($7 | 0) == 2) {
    std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($3, $5, $2, $4, $1);
    $8 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 16 | 0;
    return HEAP32[$0 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
  }
  block : {
   $6 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $5 = 0
   }
   if ($6 | !$5) {
    $5 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 4);
    if ((global$9 | 0) == 1) {
     break block
    }
    $4 = $5;
   }
   if (!(global$9 | HEAPU8[$3 | 0] & 4)) {
    HEAP32[$0 >> 2] = (($4 | 0) < 69 ? $4 + 2e3 | 0 : $4 >>> 0 < 100 ? $4 + 1900 | 0 : $4) - 1900
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = __stack_pointer - 16 | 0;
   __stack_pointer = $8;
   HEAP32[$8 + 12 >> 2] = $1;
   $6 = $8 + 12 | 0;
   $1 = 0;
  }
  block : {
   if (!global$9 | !$9) {
    $5 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
    $7 = $5;
   }
   $6 = global$9 ? $6 : 6;
   block3 : {
    block1 : {
     if (!($7 ? global$9 : 1)) {
      break block1
     }
     if (!global$9 | ($9 | 0) == 1) {
      $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
      $10 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $7 = $5;
     }
     if (!global$9) {
      $6 = 4;
      if (!std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($3, 64, $7)) {
       break block1
      }
     }
     if (!global$9 | ($9 | 0) == 2) {
      $5 = std____2__ctype_char___narrow_5babi_nn190106_5d_28char_2c_20char_29_20const($3, $7);
      $10 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $5;
     }
     while (1) {
      block2 : {
       if (!global$9 | ($9 | 0) == 3) {
        $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
        $10 = 3;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
       if (!global$9) {
        $6 = $8 + 12 | 0;
        $1 = $1 - 48 | 0;
       }
       if (!global$9 | ($9 | 0) == 4) {
        $5 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $6);
        $10 = 4;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
       if (!global$9) {
        if ($6) {
         break block2
        }
        $6 = ($4 | 0) < 2;
        if ($6) {
         break block2
        }
       }
       if (!global$9 | ($9 | 0) == 5) {
        $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
        $10 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
        $7 = $5;
       }
       if (!global$9) {
        $6 = !std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($3, 64, $7);
        if ($6) {
         break block3
        }
        $4 = $4 - 1 | 0;
       }
       if (!global$9 | ($9 | 0) == 6) {
        $5 = std____2__ctype_char___narrow_5babi_nn190106_5d_28char_2c_20char_29_20const($3, $7);
        $10 = 6;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
       if (!global$9) {
        $1 = Math_imul($1, 10) + $6 | 0;
        continue;
       }
      }
      break;
     };
     $3 = global$9 ? $3 : $8 + 12 | 0;
     if (!global$9 | ($9 | 0) == 7) {
      $5 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $3);
      $10 = 7;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $5;
     }
     if (!global$9) {
      if (!$0) {
       break block3
      }
      $6 = 2;
     }
    }
    if (!global$9) {
     HEAP32[$2 >> 2] = $6 | HEAP32[$2 >> 2]
    }
   }
   if (!global$9) {
    __stack_pointer = $8 + 16 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = __stack_pointer - 16 | 0;
   __stack_pointer = $7;
   HEAP32[$7 + 12 >> 2] = $1;
   HEAP32[$4 >> 2] = 0;
   std____2__ios_base__getloc_28_29_20const($7, $3);
  }
  block : {
   if (!global$9 | !$10) {
    $8 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($7);
    if ((global$9 | 0) == 1) {
     break block
    }
    $9 = $8;
   }
   if (!global$9 | ($10 | 0) == 1) {
    std____2__locale___locale_28_29($7);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $12 = global$9 ? $12 : $6 - 65 | 0;
   block46 : {
    block25 : {
     block47 : {
      block3 : {
       block24 : {
        block13 : {
         block23 : {
          block12 : {
           block22 : {
            block21 : {
             block11 : {
              block10 : {
               block9 : {
                block20 : {
                 block19 : {
                  block18 : {
                   block8 : {
                    block17 : {
                     block16 : {
                      block7 : {
                       block6 : {
                        block5 : {
                         block4 : {
                          block15 : {
                           block14 : {
                            block2 : {
                             if (!global$9) {
                              block1 : {
                               switch ($12 | 0) {
                               case 0:
                               case 32:
                                break block1;
                               case 18:
                                break block10;
                               case 19:
                                break block11;
                               case 23:
                                break block12;
                               case 24:
                                break block13;
                               case 34:
                                break block14;
                               case 35:
                               case 36:
                                break block15;
                               case 41:
                                break block16;
                               case 44:
                                break block17;
                               case 45:
                               case 51:
                                break block18;
                               case 47:
                                break block19;
                               case 1:
                               case 33:
                               case 39:
                                break block2;
                               case 49:
                                break block20;
                               case 54:
                                break block21;
                               case 55:
                                break block22;
                               case 56:
                                break block23;
                               case 2:
                               case 4:
                               case 6:
                               case 9:
                               case 10:
                               case 11:
                               case 13:
                               case 14:
                               case 15:
                               case 16:
                               case 20:
                               case 21:
                               case 22:
                               case 25:
                               case 26:
                               case 27:
                               case 28:
                               case 29:
                               case 30:
                               case 31:
                               case 37:
                               case 38:
                               case 40:
                               case 42:
                               case 43:
                               case 46:
                               case 48:
                               case 50:
                               case 52:
                               case 53:
                                break block3;
                               case 3:
                                break block4;
                               case 5:
                                break block5;
                               case 7:
                                break block6;
                               case 8:
                                break block7;
                               case 12:
                                break block8;
                               case 17:
                                break block9;
                               default:
                                break block24;
                               };
                              }
                              $3 = $7 + 12 | 0;
                              $1 = $5 + 24 | 0;
                             }
                             if (!global$9 | ($10 | 0) == 2) {
                              std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $3, $2, $4, $9);
                              $11 = 2;
                              if ((global$9 | 0) == 1) {
                               break block
                              }
                             }
                             if (!global$9) {
                              break block25
                             }
                            }
                            if (!global$9) {
                             $3 = $7 + 12 | 0;
                             $1 = $5 + 16 | 0;
                            }
                            if (!global$9 | ($10 | 0) == 3) {
                             std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $3, $2, $4, $9);
                             $11 = 3;
                             if ((global$9 | 0) == 1) {
                              break block
                             }
                            }
                            if (!global$9) {
                             break block25
                            }
                           }
                           if (!global$9) {
                            $6 = HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2];
                            $1 = $0 + 8 | 0;
                           }
                           if (!global$9 | ($10 | 0) == 4) {
                            $8 = FUNCTION_TABLE[$6 | 0]($1) | 0;
                            $11 = 4;
                            if ((global$9 | 0) == 1) {
                             break block
                            }
                            $1 = $8;
                           }
                           if (!global$9) {
                            $6 = HEAP32[$7 + 12 >> 2];
                            $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
                            $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
                            $1 = $12 + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1) | 0;
                           }
                           if (!global$9 | ($10 | 0) == 5) {
                            $8 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $6, $2, $3, $4, $5, $9, $1);
                            $11 = 5;
                            if ((global$9 | 0) == 1) {
                             break block
                            }
                            $0 = $8;
                           }
                           if (!global$9) {
                            HEAP32[$7 + 12 >> 2] = $0;
                            break block25;
                           }
                          }
                          if (!global$9) {
                           $1 = $7 + 12 | 0;
                           $0 = $5 + 12 | 0;
                          }
                          if (!global$9 | ($10 | 0) == 6) {
                           $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $4, $9, 2);
                           $11 = 6;
                           if ((global$9 | 0) == 1) {
                            break block
                           }
                           $9 = $8;
                          }
                          if (!global$9) {
                           $1 = HEAP32[$4 >> 2];
                           if (!($1 & 4 | $9 - 1 >>> 0 > 30)) {
                            HEAP32[$0 >> 2] = $9;
                            break block25;
                           }
                           HEAP32[$4 >> 2] = $1 | 4;
                           break block25;
                          }
                         }
                         if (!global$9) {
                          HEAP32[$7 >> 2] = 623865125;
                          HEAP32[$7 + 4 >> 2] = 2032480100;
                          $6 = $7 + 8 | 0;
                         }
                         if (!global$9 | ($10 | 0) == 7) {
                          $8 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
                          $11 = 7;
                          if ((global$9 | 0) == 1) {
                           break block
                          }
                          $0 = $8;
                         }
                         if (!global$9) {
                          HEAP32[$7 + 12 >> 2] = $0;
                          break block25;
                         }
                        }
                        if (!global$9) {
                         HEAP32[$7 >> 2] = 623728933;
                         HEAP32[$7 + 4 >> 2] = 1680158061;
                         $6 = $7 + 8 | 0;
                        }
                        if (!global$9 | ($10 | 0) == 8) {
                         $8 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
                         $11 = 8;
                         if ((global$9 | 0) == 1) {
                          break block
                         }
                         $0 = $8;
                        }
                        if (!global$9) {
                         HEAP32[$7 + 12 >> 2] = $0;
                         break block25;
                        }
                       }
                       if (!global$9) {
                        $1 = $7 + 12 | 0;
                        $0 = $5 + 8 | 0;
                       }
                       if (!global$9 | ($10 | 0) == 9) {
                        $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $4, $9, 2);
                        $11 = 9;
                        if ((global$9 | 0) == 1) {
                         break block
                        }
                        $9 = $8;
                       }
                       if (!global$9) {
                        $1 = HEAP32[$4 >> 2];
                        if (!($1 & 4 | ($9 | 0) > 23)) {
                         HEAP32[$0 >> 2] = $9;
                         break block25;
                        }
                        HEAP32[$4 >> 2] = $1 | 4;
                        break block25;
                       }
                      }
                      if (!global$9) {
                       $1 = $7 + 12 | 0;
                       $0 = $5 + 8 | 0;
                      }
                      if (!global$9 | ($10 | 0) == 10) {
                       $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $4, $9, 2);
                       $11 = 10;
                       if ((global$9 | 0) == 1) {
                        break block
                       }
                       $9 = $8;
                      }
                      if (!global$9) {
                       $1 = HEAP32[$4 >> 2];
                       if (!($1 & 4 | $9 - 1 >>> 0 > 11)) {
                        HEAP32[$0 >> 2] = $9;
                        break block25;
                       }
                       HEAP32[$4 >> 2] = $1 | 4;
                       break block25;
                      }
                     }
                     if (!global$9) {
                      $1 = $7 + 12 | 0;
                      $0 = $5 + 28 | 0;
                     }
                     if (!global$9 | ($10 | 0) == 11) {
                      $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $4, $9, 3);
                      $11 = 11;
                      if ((global$9 | 0) == 1) {
                       break block
                      }
                      $9 = $8;
                     }
                     if (!global$9) {
                      $1 = HEAP32[$4 >> 2];
                      if (!($1 & 4 | ($9 | 0) > 365)) {
                       HEAP32[$0 >> 2] = $9;
                       break block25;
                      }
                      HEAP32[$4 >> 2] = $1 | 4;
                      break block25;
                     }
                    }
                    if (!global$9) {
                     $1 = $7 + 12 | 0;
                     $0 = $5 + 16 | 0;
                    }
                    if (!global$9 | ($10 | 0) == 12) {
                     $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $4, $9, 2);
                     $11 = 12;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!global$9) {
                     $1 = HEAP32[$4 >> 2];
                     $2 = $2 - 1 | 0;
                     if (!($1 & 4 | $2 >>> 0 > 11)) {
                      HEAP32[$0 >> 2] = $2;
                      break block25;
                     }
                     HEAP32[$4 >> 2] = $1 | 4;
                     break block25;
                    }
                   }
                   if (!global$9) {
                    $1 = $7 + 12 | 0;
                    $0 = $5 + 4 | 0;
                   }
                   if (!global$9 | ($10 | 0) == 13) {
                    $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $4, $9, 2);
                    $11 = 13;
                    if ((global$9 | 0) == 1) {
                     break block
                    }
                    $9 = $8;
                   }
                   if (!global$9) {
                    $1 = HEAP32[$4 >> 2];
                    if (!($1 & 4 | ($9 | 0) > 59)) {
                     HEAP32[$0 >> 2] = $9;
                     break block25;
                    }
                    HEAP32[$4 >> 2] = $1 | 4;
                    break block25;
                   }
                  }
                  if (!global$9) {
                   $1 = __stack_pointer - 16 | 0;
                   __stack_pointer = $1;
                   HEAP32[$1 + 12 >> 2] = $2;
                   $0 = $7 + 12 | 0;
                  }
                  while (1) {
                   block38 : {
                    $2 = global$9 ? $2 : $1 + 12 | 0;
                    if (!global$9 | ($10 | 0) == 14) {
                     $8 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $2);
                     $11 = 14;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!($2 ? global$9 : 1)) {
                     break block38
                    }
                    if (!global$9 | ($10 | 0) == 15) {
                     $8 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
                     $11 = 15;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!global$9) {
                     $2 = !std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($9, 1, $2);
                     if ($2) {
                      break block38
                     }
                    }
                    if (!global$9 | ($10 | 0) == 16) {
                     $8 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
                     $11 = 16;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!global$9) {
                     continue
                    }
                   }
                   break;
                  };
                  $2 = global$9 ? $2 : $1 + 12 | 0;
                  if (!global$9 | ($10 | 0) == 17) {
                   $8 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $2);
                   $11 = 17;
                   if ((global$9 | 0) == 1) {
                    break block
                   }
                   $0 = $8;
                  }
                  if (!global$9) {
                   if ($0) {
                    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
                   }
                   __stack_pointer = $1 + 16 | 0;
                   break block25;
                  }
                 }
                 if (!global$9) {
                  $1 = $5 + 8 | 0;
                  $3 = $7 + 12 | 0;
                  $5 = $0 + 8 | 0;
                  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2];
                 }
                 if (!global$9 | ($10 | 0) == 18) {
                  $8 = FUNCTION_TABLE[$0 | 0]($5) | 0;
                  $11 = 18;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                  $0 = $8;
                 }
                 if (!global$9) {
                  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
                  $6 = 0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 12 | 0) | 0;
                  $5 = ($5 | 0) == ($6 | 0);
                 }
                 block39 : {
                  if (!global$9) {
                   if ($5) {
                    $0 = HEAP32[$4 >> 2] | 4;
                    HEAP32[$4 >> 2] = $0;
                    break block39;
                   }
                   $5 = $0 + 24 | 0;
                  }
                  if (!global$9 | ($10 | 0) == 19) {
                   $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($3, $2, $0, $5, $9, $4, 0);
                   $11 = 19;
                   if ((global$9 | 0) == 1) {
                    break block
                   }
                   $4 = $8;
                  }
                  if (!global$9) {
                   $9 = HEAP32[$1 >> 2];
                   block40 : {
                    $2 = ($0 | 0) != ($4 | 0);
                    if ($2) {
                     break block40
                    }
                    $2 = ($9 | 0) != 12;
                    if ($2) {
                     break block40
                    }
                    HEAP32[$1 >> 2] = 0;
                    break block39;
                   }
                   $0 = ($4 - $0 | 0) != 12;
                   block41 : {
                    if ($0) {
                     break block41
                    }
                    $0 = ($9 | 0) > 11;
                    if ($0) {
                     break block41
                    }
                    $0 = $9 + 12 | 0;
                    HEAP32[$1 >> 2] = $0;
                   }
                  }
                 }
                 if (!global$9) {
                  break block25
                 }
                }
                if (!global$9) {
                 $6 = HEAPU8[33752] | HEAPU8[33753] << 8 | (HEAPU8[33754] << 16 | HEAPU8[33755] << 24);
                 HEAP8[$7 + 7 | 0] = $6;
                 HEAP8[$7 + 8 | 0] = $6 >>> 8;
                 HEAP8[$7 + 9 | 0] = $6 >>> 16;
                 HEAP8[$7 + 10 | 0] = $6 >>> 24;
                 $6 = HEAPU8[33749] | HEAPU8[33750] << 8 | (HEAPU8[33751] << 16 | HEAPU8[33752] << 24);
                 HEAP32[$7 >> 2] = HEAPU8[33745] | HEAPU8[33746] << 8 | (HEAPU8[33747] << 16 | HEAPU8[33748] << 24);
                 HEAP32[$7 + 4 >> 2] = $6;
                 $6 = $7 + 11 | 0;
                }
                if (!global$9 | ($10 | 0) == 20) {
                 $8 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
                 $11 = 20;
                 if ((global$9 | 0) == 1) {
                  break block
                 }
                 $0 = $8;
                }
                if (!global$9) {
                 HEAP32[$7 + 12 >> 2] = $0;
                 break block25;
                }
               }
               if (!global$9) {
                HEAP8[$7 + 4 | 0] = HEAPU8[33760];
                HEAP32[$7 >> 2] = HEAPU8[33756] | HEAPU8[33757] << 8 | (HEAPU8[33758] << 16 | HEAPU8[33759] << 24);
                $6 = $7 + 5 | 0;
               }
               if (!global$9 | ($10 | 0) == 21) {
                $8 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
                $11 = 21;
                if ((global$9 | 0) == 1) {
                 break block
                }
                $0 = $8;
               }
               if (!global$9) {
                HEAP32[$7 + 12 >> 2] = $0;
                break block25;
               }
              }
              $0 = global$9 ? $0 : $7 + 12 | 0;
              if (!global$9 | ($10 | 0) == 22) {
               $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($0, $2, $4, $9, 2);
               $11 = 22;
               if ((global$9 | 0) == 1) {
                break block
               }
               $9 = $8;
              }
              if (!global$9) {
               $0 = HEAP32[$4 >> 2];
               if (!($0 & 4 | ($9 | 0) > 60)) {
                HEAP32[$5 >> 2] = $9;
                break block25;
               }
               HEAP32[$4 >> 2] = $0 | 4;
               break block25;
              }
             }
             if (!global$9) {
              HEAP32[$7 >> 2] = 624576549;
              HEAP32[$7 + 4 >> 2] = 1394948685;
              $6 = $7 + 8 | 0;
             }
             if (!global$9 | ($10 | 0) == 23) {
              $8 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
              $11 = 23;
              if ((global$9 | 0) == 1) {
               break block
              }
              $0 = $8;
             }
             if (!global$9) {
              HEAP32[$7 + 12 >> 2] = $0;
              break block25;
             }
            }
            if (!global$9) {
             $1 = $7 + 12 | 0;
             $0 = $5 + 24 | 0;
            }
            if (!global$9 | ($10 | 0) == 24) {
             $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $4, $9, 1);
             $11 = 24;
             if ((global$9 | 0) == 1) {
              break block
             }
             $9 = $8;
            }
            if (!global$9) {
             $1 = HEAP32[$4 >> 2];
             if (!($1 & 4 | ($9 | 0) > 6)) {
              HEAP32[$0 >> 2] = $9;
              break block25;
             }
             HEAP32[$4 >> 2] = $1 | 4;
             break block25;
            }
           }
           $6 = global$9 ? $6 : HEAP32[HEAP32[$0 >> 2] + 20 >> 2];
           if (!global$9 | ($10 | 0) == 25) {
            $8 = FUNCTION_TABLE[$6 | 0]($0, $1, $2, $3, $4, $5) | 0;
            $11 = 25;
            if ((global$9 | 0) == 1) {
             break block
            }
            $4 = $8;
           }
           if (!global$9) {
            break block46
           }
          }
          if (!global$9) {
           $6 = HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2];
           $1 = $0 + 8 | 0;
          }
          if (!global$9 | ($10 | 0) == 26) {
           $8 = FUNCTION_TABLE[$6 | 0]($1) | 0;
           $11 = 26;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $8;
          }
          if (!global$9) {
           $6 = HEAP32[$7 + 12 >> 2];
           $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
           $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
           $1 = $12 + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1) | 0;
          }
          if (!global$9 | ($10 | 0) == 27) {
           $8 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $6, $2, $3, $4, $5, $9, $1);
           $11 = 27;
           if ((global$9 | 0) == 1) {
            break block
           }
           $0 = $8;
          }
          if (!global$9) {
           HEAP32[$7 + 12 >> 2] = $0;
           break block25;
          }
         }
         if (!global$9) {
          $1 = $7 + 12 | 0;
          $0 = $5 + 20 | 0;
         }
         if (!global$9 | ($10 | 0) == 28) {
          std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $4, $9);
          $11 = 28;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          break block25
         }
        }
        if (!global$9) {
         $1 = $7 + 12 | 0;
         $0 = $5 + 20 | 0;
        }
        if (!global$9 | ($10 | 0) == 29) {
         $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $4, $9, 4);
         $11 = 29;
         if ((global$9 | 0) == 1) {
          break block
         }
         $9 = $8;
        }
        if (!global$9) {
         if (!(HEAPU8[$4 | 0] & 4)) {
          HEAP32[$0 >> 2] = $9 - 1900
         }
         break block25;
        }
       }
       if (!global$9) {
        $0 = ($6 | 0) == 37;
        if ($0) {
         break block47
        }
       }
      }
      if (!global$9) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
       break block25;
      }
     }
     if (!global$9) {
      $0 = __stack_pointer - 16 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 12 >> 2] = $2;
      $2 = $0 + 12 | 0;
      $1 = $7 + 12 | 0;
     }
     if (!global$9 | ($10 | 0) == 30) {
      $8 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $2);
      $11 = 30;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $8;
     }
     $2 = global$9 ? $2 : 6;
     block49 : {
      block48 : {
       if (!($3 ? global$9 : 1)) {
        break block48
       }
       if (!global$9 | ($10 | 0) == 31) {
        $8 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($1);
        $11 = 31;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $8;
       }
       if (!global$9 | ($10 | 0) == 32) {
        $8 = std____2__ctype_char___narrow_5babi_nn190106_5d_28char_2c_20char_29_20const($9, $2);
        $11 = 32;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $8;
       }
       if (!global$9) {
        $3 = ($2 | 0) != 37;
        $2 = 4;
        if ($3) {
         break block48
        }
       }
       if (!global$9 | ($10 | 0) == 33) {
        $8 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($1);
        $11 = 33;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       $2 = global$9 ? $2 : $0 + 12 | 0;
       if (!global$9 | ($10 | 0) == 34) {
        $8 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $2);
        $11 = 34;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       if (!global$9) {
        if (!$1) {
         break block49
        }
        $2 = 2;
       }
      }
      if (!global$9) {
       HEAP32[$4 >> 2] = $2 | HEAP32[$4 >> 2]
      }
     }
     if (!global$9) {
      __stack_pointer = $0 + 16 | 0
     }
    }
    $4 = global$9 ? $4 : HEAP32[$7 + 12 >> 2];
   }
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0;
    return $4 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 56;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $10 = __stack_pointer;
   $9 = $10 - 16 | 0;
   __stack_pointer = $9;
   HEAP32[$9 + 8 >> 2] = $2;
   HEAP32[$9 + 12 >> 2] = $1;
   $1 = $9 + 4 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$11) {
    $8 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $8;
   }
   $1 = global$9 ? $1 : $9 + 4 | 0;
   if (!global$9 | ($11 | 0) == 1) {
    std____2__locale___locale_28_29($1);
    $12 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$4 >> 2] = 0;
    $1 = 0;
   }
   block1 : {
    while (1) {
     if (!global$9) {
      if ($1 | ($6 | 0) == ($7 | 0)) {
       break block1
      }
      $10 = $9 + 8 | 0;
      $1 = $9 + 12 | 0;
     }
     if (!global$9 | ($11 | 0) == 2) {
      $8 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $10);
      $12 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $8;
     }
     block2 : {
      if (!global$9) {
       if ($1) {
        break block2
       }
       $1 = HEAP32[$6 >> 2];
      }
      if (!global$9 | ($11 | 0) == 3) {
       $8 = std____2__ctype_wchar_t___narrow_5babi_nn190106_5d_28wchar_t_2c_20char_29_20const($2, $1);
       $12 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $1 = $8;
      }
      $1 = global$9 ? $1 : ($1 | 0) == 37;
      block5 : {
       if ($1 | (global$9 | 0) == 2) {
        if (!global$9) {
         $1 = $6 + 4 | 0;
         if (($7 | 0) == ($1 | 0)) {
          break block2
         }
         $10 = 0;
         $1 = HEAP32[$1 >> 2];
        }
        if (!global$9 | ($11 | 0) == 4) {
         $8 = std____2__ctype_wchar_t___narrow_5babi_nn190106_5d_28wchar_t_2c_20char_29_20const($2, $1);
         $12 = 4;
         if ((global$9 | 0) == 1) {
          break block
         }
         $1 = $8;
        }
        $13 = global$9 ? $13 : ($1 | 0) == 69;
        block4 : {
         if (!global$9) {
          block3 : {
           if ($13) {
            break block3
           }
           $14 = 4;
           if (($1 & 255) == 48) {
            break block3
           }
           $13 = $1;
           break block4;
          }
          $10 = $6 + 8 | 0;
          $13 = ($10 | 0) == ($7 | 0);
          if ($13) {
           break block2
          }
          $14 = 8;
          $10 = HEAP32[$10 >> 2];
         }
         if (!global$9 | ($11 | 0) == 5) {
          $8 = std____2__ctype_wchar_t___narrow_5babi_nn190106_5d_28wchar_t_2c_20char_29_20const($2, $10);
          $12 = 5;
          if ((global$9 | 0) == 1) {
           break block
          }
          $13 = $8;
         }
         $10 = global$9 ? $10 : $1;
        }
        if (!global$9) {
         $15 = HEAP32[$9 + 8 >> 2];
         $16 = HEAP32[HEAP32[$0 >> 2] + 36 >> 2];
         $1 = HEAP32[$9 + 12 >> 2];
        }
        if (!global$9 | ($11 | 0) == 6) {
         $8 = FUNCTION_TABLE[$16 | 0]($0, $1, $15, $3, $4, $5, $13, $10) | 0;
         $12 = 6;
         if ((global$9 | 0) == 1) {
          break block
         }
         $1 = $8;
        }
        if (!global$9) {
         HEAP32[$9 + 12 >> 2] = $1;
         $1 = $6 + $14 | 0;
         $6 = $1 + 4 | 0;
         break block5;
        }
       }
       $1 = global$9 ? $1 : HEAP32[$6 >> 2];
       if (!global$9 | ($11 | 0) == 7) {
        $8 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($2, 1, $1);
        $12 = 7;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       if ((global$9 | 0) == 2 | $1) {
        while (1) {
         if (!global$9) {
          $6 = $6 + 4 | 0;
          $1 = ($7 | 0) != ($6 | 0);
         }
         if ((global$9 | 0) == 2 | $1) {
          $1 = global$9 ? $1 : HEAP32[$6 >> 2];
          if (!global$9 | ($11 | 0) == 8) {
           $8 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($2, 1, $1);
           $12 = 8;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $8;
          }
          if (!($1 ? global$9 : 1)) {
           continue
          }
         }
         break;
        };
        while (1) {
         if (!global$9) {
          $10 = $9 + 8 | 0;
          $1 = $9 + 12 | 0;
         }
         if (!global$9 | ($11 | 0) == 9) {
          $8 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $10);
          $12 = 9;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $8;
         }
         if (!global$9) {
          if ($1) {
           break block5
          }
          $1 = $9 + 12 | 0;
         }
         if (!global$9 | ($11 | 0) == 10) {
          $8 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($1);
          $12 = 10;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $8;
         }
         if (!global$9 | ($11 | 0) == 11) {
          $8 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($2, 1, $1);
          $12 = 11;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $8;
         }
         if (!global$9) {
          $1 = !$1;
          if ($1) {
           break block5
          }
          $1 = $9 + 12 | 0;
         }
         if (!global$9 | ($11 | 0) == 12) {
          $8 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($1);
          $12 = 12;
          if ((global$9 | 0) == 1) {
           break block
          }
          $1 = $8;
         }
         if (!global$9) {
          continue
         }
         break;
        };
       }
       $1 = global$9 ? $1 : $9 + 12 | 0;
       if (!global$9 | ($11 | 0) == 13) {
        $8 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($1);
        $12 = 13;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       if (!global$9 | ($11 | 0) == 14) {
        $8 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($2, $1);
        $12 = 14;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       $10 = global$9 ? $10 : HEAP32[$6 >> 2];
       if (!global$9 | ($11 | 0) == 15) {
        $8 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($2, $10);
        $12 = 15;
        if ((global$9 | 0) == 1) {
         break block
        }
        $10 = $8;
       }
       $1 = global$9 ? $1 : ($1 | 0) == ($10 | 0);
       if ($1 | (global$9 | 0) == 2) {
        if (!global$9) {
         $6 = $6 + 4 | 0;
         $1 = $9 + 12 | 0;
        }
        if (!global$9 | ($11 | 0) == 16) {
         $8 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($1);
         $12 = 16;
         if ((global$9 | 0) == 1) {
          break block
         }
         $1 = $8;
        }
        if (!global$9) {
         break block5
        }
       }
       if (!global$9) {
        HEAP32[$4 >> 2] = 4
       }
      }
      if (!global$9) {
       $1 = HEAP32[$4 >> 2];
       continue;
      }
     }
     break;
    };
    if (!global$9) {
     HEAP32[$4 >> 2] = 4
    }
   }
   if (!global$9) {
    $1 = $9 + 8 | 0;
    $0 = $9 + 12 | 0;
   }
   if (!global$9 | ($11 | 0) == 17) {
    $8 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
    $12 = 17;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $8;
   }
   if (!global$9) {
    if ($0) {
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
    }
    __stack_pointer = $9 + 16 | 0;
    return HEAP32[$9 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $10;
  HEAP32[$8 + 40 >> 2] = $13;
  HEAP32[$8 + 44 >> 2] = $14;
  HEAP32[$8 + 48 >> 2] = $15;
  HEAP32[$8 + 52 >> 2] = $16;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 56;
  return 0;
 }
 
 function std____2__ctype_wchar_t___narrow_5babi_nn190106_5d_28wchar_t_2c_20char_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$0 >> 2] + 52 >> 2];
  block : {
   if (!global$9 | !$3) {
    $3 = FUNCTION_TABLE[$2 | 0]($0, $1, 0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $7 = HEAP32[$6 + 24 >> 2];
   $8 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = __stack_pointer - 32 | 0;
   __stack_pointer = $7;
   $6 = HEAP32[8487];
   HEAP32[$7 + 24 >> 2] = HEAP32[8486];
   HEAP32[$7 + 28 >> 2] = $6;
   $6 = HEAP32[8485];
   HEAP32[$7 + 16 >> 2] = HEAP32[8484];
   HEAP32[$7 + 20 >> 2] = $6;
   $6 = HEAP32[8483];
   HEAP32[$7 + 8 >> 2] = HEAP32[8482];
   HEAP32[$7 + 12 >> 2] = $6;
   $6 = HEAP32[8481];
   HEAP32[$7 >> 2] = HEAP32[8480];
   HEAP32[$7 + 4 >> 2] = $6;
   $8 = $7 + 32 | 0;
  }
  block : {
   if (!global$9 | !$9) {
    $6 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $8);
    if ((global$9 | 0) == 1) {
     break block
    }
    $5 = $6;
   }
   if (!global$9) {
    __stack_pointer = $7 + 32 | 0;
    return $5 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = $0;
   $7 = $0 + 8 | 0;
   $0 = HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2];
  }
  block : {
   if (!global$9 | !$9) {
    $6 = FUNCTION_TABLE[$0 | 0]($7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   if (!global$9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
    $0 = $6 + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0) << 2) | 0;
   }
   if (!global$9 | ($9 | 0) == 1) {
    $6 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($8, $1, $2, $3, $4, $5, $7, $0);
    $10 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   HEAP32[$6 + 12 >> 2] = $1;
   $1 = $6 + 8 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $3 = global$9 ? $3 : $6 + 8 | 0;
   if (!global$9 | ($8 | 0) == 1) {
    std____2__locale___locale_28_29($3);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = $5 + 24 | 0;
    $5 = $6 + 12 | 0;
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $3, $5, $2, $4, $1);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0;
    return HEAP32[$6 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = $0 + 8 | 0;
   $0 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$8) {
    $6 = FUNCTION_TABLE[$0 | 0]($7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   $7 = global$9 ? $7 : $0 + 168 | 0;
   if (!global$9 | ($8 | 0) == 1) {
    $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $7, $5, $4, 0);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    $0 = $2 - $0 | 0;
    if (($0 | 0) <= 167) {
     HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   HEAP32[$6 + 12 >> 2] = $1;
   $1 = $6 + 8 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$8) {
    $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   $3 = global$9 ? $3 : $6 + 8 | 0;
   if (!global$9 | ($8 | 0) == 1) {
    std____2__locale___locale_28_29($3);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = $5 + 16 | 0;
    $5 = $6 + 12 | 0;
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $3, $5, $2, $4, $1);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0;
    return HEAP32[$6 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = $0 + 8 | 0;
   $0 = HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2];
  }
  block : {
   if (!global$9 | !$8) {
    $6 = FUNCTION_TABLE[$0 | 0]($7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   $7 = global$9 ? $7 : $0 + 288 | 0;
   if (!global$9 | ($8 | 0) == 1) {
    $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $7, $5, $4, 0);
    $9 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $6;
   }
   if (!global$9) {
    $0 = $2 - $0 | 0;
    if (($0 | 0) <= 287) {
     HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $5 = HEAP32[$5 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 16 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 12 >> 2] = $1;
   $1 = $0 + 8 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $3);
  }
  block : {
   if (!global$9 | !$7) {
    $6 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   $3 = global$9 ? $3 : $0 + 8 | 0;
   if (!global$9 | ($7 | 0) == 1) {
    std____2__locale___locale_28_29($3);
    $8 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $3 = $5 + 20 | 0;
    $5 = $0 + 12 | 0;
   }
   if (!global$9 | ($7 | 0) == 2) {
    std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($3, $5, $2, $4, $1);
    $8 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 16 | 0;
    return HEAP32[$0 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
  }
  block : {
   $6 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $5 = 0
   }
   if ($6 | !$5) {
    $5 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 4);
    if ((global$9 | 0) == 1) {
     break block
    }
    $4 = $5;
   }
   if (!(global$9 | HEAPU8[$3 | 0] & 4)) {
    HEAP32[$0 >> 2] = (($4 | 0) < 69 ? $4 + 2e3 | 0 : $4 >>> 0 < 100 ? $4 + 1900 | 0 : $4) - 1900
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $10 = __stack_pointer - 16 | 0;
   __stack_pointer = $10;
   HEAP32[$10 + 12 >> 2] = $1;
   $6 = $10 + 12 | 0;
   $1 = 0;
  }
  block : {
   if (!global$9 | !$7) {
    $5 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
    $8 = $5;
   }
   $6 = global$9 ? $6 : 6;
   block3 : {
    block1 : {
     if (!($8 ? global$9 : 1)) {
      break block1
     }
     if (!global$9 | ($7 | 0) == 1) {
      $5 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
      $9 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $8 = $5;
     }
     if (!global$9 | ($7 | 0) == 2) {
      $5 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($3, 64, $8);
      $9 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $6 = $5;
     }
     if (!global$9) {
      $5 = !$6;
      $6 = 4;
      if ($5) {
       break block1
      }
     }
     if (!global$9 | ($7 | 0) == 3) {
      $5 = std____2__ctype_wchar_t___narrow_5babi_nn190106_5d_28wchar_t_2c_20char_29_20const($3, $8);
      $9 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $5;
     }
     while (1) {
      block2 : {
       if (!global$9 | ($7 | 0) == 4) {
        $5 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
        $9 = 4;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
       if (!global$9) {
        $6 = $10 + 12 | 0;
        $1 = $1 - 48 | 0;
       }
       if (!global$9 | ($7 | 0) == 5) {
        $5 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $6);
        $9 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
       if (!global$9) {
        if ($6) {
         break block2
        }
        $6 = ($4 | 0) < 2;
        if ($6) {
         break block2
        }
       }
       if (!global$9 | ($7 | 0) == 6) {
        $5 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
        $9 = 6;
        if ((global$9 | 0) == 1) {
         break block
        }
        $8 = $5;
       }
       if (!global$9 | ($7 | 0) == 7) {
        $5 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($3, 64, $8);
        $9 = 7;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
       if (!global$9) {
        $6 = !$6;
        if ($6) {
         break block3
        }
        $4 = $4 - 1 | 0;
       }
       if (!global$9 | ($7 | 0) == 8) {
        $5 = std____2__ctype_wchar_t___narrow_5babi_nn190106_5d_28wchar_t_2c_20char_29_20const($3, $8);
        $9 = 8;
        if ((global$9 | 0) == 1) {
         break block
        }
        $6 = $5;
       }
       if (!global$9) {
        $1 = Math_imul($1, 10) + $6 | 0;
        continue;
       }
      }
      break;
     };
     $3 = global$9 ? $3 : $10 + 12 | 0;
     if (!global$9 | ($7 | 0) == 9) {
      $5 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $3);
      $9 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $5;
     }
     if (!global$9) {
      if (!$0) {
       break block3
      }
      $6 = 2;
     }
    }
    if (!global$9) {
     HEAP32[$2 >> 2] = $6 | HEAP32[$2 >> 2]
    }
   }
   if (!global$9) {
    __stack_pointer = $10 + 16 | 0;
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $8;
  HEAP32[$5 + 28 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = __stack_pointer - 48 | 0;
   __stack_pointer = $7;
   HEAP32[$7 + 44 >> 2] = $1;
   HEAP32[$4 >> 2] = 0;
   std____2__ios_base__getloc_28_29_20const($7, $3);
  }
  block : {
   if (!global$9 | !$10) {
    $8 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($7);
    if ((global$9 | 0) == 1) {
     break block
    }
    $9 = $8;
   }
   if (!global$9 | ($10 | 0) == 1) {
    std____2__locale___locale_28_29($7);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $12 = global$9 ? $12 : $6 - 65 | 0;
   block46 : {
    block25 : {
     block47 : {
      block3 : {
       block24 : {
        block13 : {
         block23 : {
          block12 : {
           block22 : {
            block21 : {
             block11 : {
              block10 : {
               block9 : {
                block20 : {
                 block19 : {
                  block18 : {
                   block8 : {
                    block17 : {
                     block16 : {
                      block7 : {
                       block6 : {
                        block5 : {
                         block4 : {
                          block15 : {
                           block14 : {
                            block2 : {
                             if (!global$9) {
                              block1 : {
                               switch ($12 | 0) {
                               case 0:
                               case 32:
                                break block1;
                               case 18:
                                break block10;
                               case 19:
                                break block11;
                               case 23:
                                break block12;
                               case 24:
                                break block13;
                               case 34:
                                break block14;
                               case 35:
                               case 36:
                                break block15;
                               case 41:
                                break block16;
                               case 44:
                                break block17;
                               case 45:
                               case 51:
                                break block18;
                               case 47:
                                break block19;
                               case 1:
                               case 33:
                               case 39:
                                break block2;
                               case 49:
                                break block20;
                               case 54:
                                break block21;
                               case 55:
                                break block22;
                               case 56:
                                break block23;
                               case 2:
                               case 4:
                               case 6:
                               case 9:
                               case 10:
                               case 11:
                               case 13:
                               case 14:
                               case 15:
                               case 16:
                               case 20:
                               case 21:
                               case 22:
                               case 25:
                               case 26:
                               case 27:
                               case 28:
                               case 29:
                               case 30:
                               case 31:
                               case 37:
                               case 38:
                               case 40:
                               case 42:
                               case 43:
                               case 46:
                               case 48:
                               case 50:
                               case 52:
                               case 53:
                                break block3;
                               case 3:
                                break block4;
                               case 5:
                                break block5;
                               case 7:
                                break block6;
                               case 8:
                                break block7;
                               case 12:
                                break block8;
                               case 17:
                                break block9;
                               default:
                                break block24;
                               };
                              }
                              $3 = $7 + 44 | 0;
                              $1 = $5 + 24 | 0;
                             }
                             if (!global$9 | ($10 | 0) == 2) {
                              std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $3, $2, $4, $9);
                              $11 = 2;
                              if ((global$9 | 0) == 1) {
                               break block
                              }
                             }
                             if (!global$9) {
                              break block25
                             }
                            }
                            if (!global$9) {
                             $3 = $7 + 44 | 0;
                             $1 = $5 + 16 | 0;
                            }
                            if (!global$9 | ($10 | 0) == 3) {
                             std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $3, $2, $4, $9);
                             $11 = 3;
                             if ((global$9 | 0) == 1) {
                              break block
                             }
                            }
                            if (!global$9) {
                             break block25
                            }
                           }
                           if (!global$9) {
                            $6 = HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2];
                            $1 = $0 + 8 | 0;
                           }
                           if (!global$9 | ($10 | 0) == 4) {
                            $8 = FUNCTION_TABLE[$6 | 0]($1) | 0;
                            $11 = 4;
                            if ((global$9 | 0) == 1) {
                             break block
                            }
                            $1 = $8;
                           }
                           if (!global$9) {
                            $6 = HEAP32[$7 + 44 >> 2];
                            $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
                            $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
                            $1 = $12 + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1) << 2) | 0;
                           }
                           if (!global$9 | ($10 | 0) == 5) {
                            $8 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $6, $2, $3, $4, $5, $9, $1);
                            $11 = 5;
                            if ((global$9 | 0) == 1) {
                             break block
                            }
                            $0 = $8;
                           }
                           if (!global$9) {
                            HEAP32[$7 + 44 >> 2] = $0;
                            break block25;
                           }
                          }
                          if (!global$9) {
                           $1 = $7 + 44 | 0;
                           $0 = $5 + 12 | 0;
                          }
                          if (!global$9 | ($10 | 0) == 6) {
                           $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $4, $9, 2);
                           $11 = 6;
                           if ((global$9 | 0) == 1) {
                            break block
                           }
                           $9 = $8;
                          }
                          if (!global$9) {
                           $1 = HEAP32[$4 >> 2];
                           if (!($1 & 4 | $9 - 1 >>> 0 > 30)) {
                            HEAP32[$0 >> 2] = $9;
                            break block25;
                           }
                           HEAP32[$4 >> 2] = $1 | 4;
                           break block25;
                          }
                         }
                         if (!global$9) {
                          $6 = HEAP32[8451];
                          HEAP32[$7 + 24 >> 2] = HEAP32[8450];
                          HEAP32[$7 + 28 >> 2] = $6;
                          $6 = HEAP32[8449];
                          HEAP32[$7 + 16 >> 2] = HEAP32[8448];
                          HEAP32[$7 + 20 >> 2] = $6;
                          $6 = HEAP32[8447];
                          HEAP32[$7 + 8 >> 2] = HEAP32[8446];
                          HEAP32[$7 + 12 >> 2] = $6;
                          $6 = HEAP32[8445];
                          HEAP32[$7 >> 2] = HEAP32[8444];
                          HEAP32[$7 + 4 >> 2] = $6;
                          $6 = $7 + 32 | 0;
                         }
                         if (!global$9 | ($10 | 0) == 7) {
                          $8 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
                          $11 = 7;
                          if ((global$9 | 0) == 1) {
                           break block
                          }
                          $0 = $8;
                         }
                         if (!global$9) {
                          HEAP32[$7 + 44 >> 2] = $0;
                          break block25;
                         }
                        }
                        if (!global$9) {
                         $6 = HEAP32[8459];
                         HEAP32[$7 + 24 >> 2] = HEAP32[8458];
                         HEAP32[$7 + 28 >> 2] = $6;
                         $6 = HEAP32[8457];
                         HEAP32[$7 + 16 >> 2] = HEAP32[8456];
                         HEAP32[$7 + 20 >> 2] = $6;
                         $6 = HEAP32[8455];
                         HEAP32[$7 + 8 >> 2] = HEAP32[8454];
                         HEAP32[$7 + 12 >> 2] = $6;
                         $6 = HEAP32[8453];
                         HEAP32[$7 >> 2] = HEAP32[8452];
                         HEAP32[$7 + 4 >> 2] = $6;
                         $6 = $7 + 32 | 0;
                        }
                        if (!global$9 | ($10 | 0) == 8) {
                         $8 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
                         $11 = 8;
                         if ((global$9 | 0) == 1) {
                          break block
                         }
                         $0 = $8;
                        }
                        if (!global$9) {
                         HEAP32[$7 + 44 >> 2] = $0;
                         break block25;
                        }
                       }
                       if (!global$9) {
                        $1 = $7 + 44 | 0;
                        $0 = $5 + 8 | 0;
                       }
                       if (!global$9 | ($10 | 0) == 9) {
                        $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $4, $9, 2);
                        $11 = 9;
                        if ((global$9 | 0) == 1) {
                         break block
                        }
                        $9 = $8;
                       }
                       if (!global$9) {
                        $1 = HEAP32[$4 >> 2];
                        if (!($1 & 4 | ($9 | 0) > 23)) {
                         HEAP32[$0 >> 2] = $9;
                         break block25;
                        }
                        HEAP32[$4 >> 2] = $1 | 4;
                        break block25;
                       }
                      }
                      if (!global$9) {
                       $1 = $7 + 44 | 0;
                       $0 = $5 + 8 | 0;
                      }
                      if (!global$9 | ($10 | 0) == 10) {
                       $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $4, $9, 2);
                       $11 = 10;
                       if ((global$9 | 0) == 1) {
                        break block
                       }
                       $9 = $8;
                      }
                      if (!global$9) {
                       $1 = HEAP32[$4 >> 2];
                       if (!($1 & 4 | $9 - 1 >>> 0 > 11)) {
                        HEAP32[$0 >> 2] = $9;
                        break block25;
                       }
                       HEAP32[$4 >> 2] = $1 | 4;
                       break block25;
                      }
                     }
                     if (!global$9) {
                      $1 = $7 + 44 | 0;
                      $0 = $5 + 28 | 0;
                     }
                     if (!global$9 | ($10 | 0) == 11) {
                      $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $4, $9, 3);
                      $11 = 11;
                      if ((global$9 | 0) == 1) {
                       break block
                      }
                      $9 = $8;
                     }
                     if (!global$9) {
                      $1 = HEAP32[$4 >> 2];
                      if (!($1 & 4 | ($9 | 0) > 365)) {
                       HEAP32[$0 >> 2] = $9;
                       break block25;
                      }
                      HEAP32[$4 >> 2] = $1 | 4;
                      break block25;
                     }
                    }
                    if (!global$9) {
                     $1 = $7 + 44 | 0;
                     $0 = $5 + 16 | 0;
                    }
                    if (!global$9 | ($10 | 0) == 12) {
                     $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $4, $9, 2);
                     $11 = 12;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!global$9) {
                     $1 = HEAP32[$4 >> 2];
                     $2 = $2 - 1 | 0;
                     if (!($1 & 4 | $2 >>> 0 > 11)) {
                      HEAP32[$0 >> 2] = $2;
                      break block25;
                     }
                     HEAP32[$4 >> 2] = $1 | 4;
                     break block25;
                    }
                   }
                   if (!global$9) {
                    $1 = $7 + 44 | 0;
                    $0 = $5 + 4 | 0;
                   }
                   if (!global$9 | ($10 | 0) == 13) {
                    $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $4, $9, 2);
                    $11 = 13;
                    if ((global$9 | 0) == 1) {
                     break block
                    }
                    $9 = $8;
                   }
                   if (!global$9) {
                    $1 = HEAP32[$4 >> 2];
                    if (!($1 & 4 | ($9 | 0) > 59)) {
                     HEAP32[$0 >> 2] = $9;
                     break block25;
                    }
                    HEAP32[$4 >> 2] = $1 | 4;
                    break block25;
                   }
                  }
                  if (!global$9) {
                   $1 = __stack_pointer - 16 | 0;
                   __stack_pointer = $1;
                   HEAP32[$1 + 12 >> 2] = $2;
                   $0 = $7 + 44 | 0;
                  }
                  while (1) {
                   block38 : {
                    $2 = global$9 ? $2 : $1 + 12 | 0;
                    if (!global$9 | ($10 | 0) == 14) {
                     $8 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $2);
                     $11 = 14;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!($2 ? global$9 : 1)) {
                     break block38
                    }
                    if (!global$9 | ($10 | 0) == 15) {
                     $8 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
                     $11 = 15;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!global$9 | ($10 | 0) == 16) {
                     $8 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($9, 1, $2);
                     $11 = 16;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!global$9) {
                     $2 = !$2;
                     if ($2) {
                      break block38
                     }
                    }
                    if (!global$9 | ($10 | 0) == 17) {
                     $8 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
                     $11 = 17;
                     if ((global$9 | 0) == 1) {
                      break block
                     }
                     $2 = $8;
                    }
                    if (!global$9) {
                     continue
                    }
                   }
                   break;
                  };
                  $2 = global$9 ? $2 : $1 + 12 | 0;
                  if (!global$9 | ($10 | 0) == 18) {
                   $8 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $2);
                   $11 = 18;
                   if ((global$9 | 0) == 1) {
                    break block
                   }
                   $0 = $8;
                  }
                  if (!global$9) {
                   if ($0) {
                    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
                   }
                   __stack_pointer = $1 + 16 | 0;
                   break block25;
                  }
                 }
                 if (!global$9) {
                  $1 = $5 + 8 | 0;
                  $3 = $7 + 44 | 0;
                  $5 = $0 + 8 | 0;
                  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2];
                 }
                 if (!global$9 | ($10 | 0) == 19) {
                  $8 = FUNCTION_TABLE[$0 | 0]($5) | 0;
                  $11 = 19;
                  if ((global$9 | 0) == 1) {
                   break block
                  }
                  $0 = $8;
                 }
                 if (!global$9) {
                  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
                  $6 = 0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0 + 12 | 0) | 0;
                  $5 = ($5 | 0) == ($6 | 0);
                 }
                 block39 : {
                  if (!global$9) {
                   if ($5) {
                    $0 = HEAP32[$4 >> 2] | 4;
                    HEAP32[$4 >> 2] = $0;
                    break block39;
                   }
                   $5 = $0 + 24 | 0;
                  }
                  if (!global$9 | ($10 | 0) == 20) {
                   $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn190106_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($3, $2, $0, $5, $9, $4, 0);
                   $11 = 20;
                   if ((global$9 | 0) == 1) {
                    break block
                   }
                   $4 = $8;
                  }
                  if (!global$9) {
                   $9 = HEAP32[$1 >> 2];
                   block40 : {
                    $2 = ($0 | 0) != ($4 | 0);
                    if ($2) {
                     break block40
                    }
                    $2 = ($9 | 0) != 12;
                    if ($2) {
                     break block40
                    }
                    HEAP32[$1 >> 2] = 0;
                    break block39;
                   }
                   $0 = ($4 - $0 | 0) != 12;
                   block41 : {
                    if ($0) {
                     break block41
                    }
                    $0 = ($9 | 0) > 11;
                    if ($0) {
                     break block41
                    }
                    $0 = $9 + 12 | 0;
                    HEAP32[$1 >> 2] = $0;
                   }
                  }
                 }
                 if (!global$9) {
                  break block25
                 }
                }
                if (!global$9) {
                 wasm2js_memory_copy($7, 33840, 44);
                 $6 = $7 + 44 | 0;
                }
                if (!global$9 | ($10 | 0) == 21) {
                 $8 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
                 $11 = 21;
                 if ((global$9 | 0) == 1) {
                  break block
                 }
                 $0 = $8;
                }
                if (!global$9) {
                 HEAP32[$7 + 44 >> 2] = $0;
                 break block25;
                }
               }
               if (!global$9) {
                HEAP32[$7 + 16 >> 2] = HEAP32[8476];
                $6 = HEAP32[8475];
                HEAP32[$7 + 8 >> 2] = HEAP32[8474];
                HEAP32[$7 + 12 >> 2] = $6;
                $6 = HEAP32[8473];
                HEAP32[$7 >> 2] = HEAP32[8472];
                HEAP32[$7 + 4 >> 2] = $6;
                $6 = $7 + 20 | 0;
               }
               if (!global$9 | ($10 | 0) == 22) {
                $8 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
                $11 = 22;
                if ((global$9 | 0) == 1) {
                 break block
                }
                $0 = $8;
               }
               if (!global$9) {
                HEAP32[$7 + 44 >> 2] = $0;
                break block25;
               }
              }
              $0 = global$9 ? $0 : $7 + 44 | 0;
              if (!global$9 | ($10 | 0) == 23) {
               $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($0, $2, $4, $9, 2);
               $11 = 23;
               if ((global$9 | 0) == 1) {
                break block
               }
               $9 = $8;
              }
              if (!global$9) {
               $0 = HEAP32[$4 >> 2];
               if (!($0 & 4 | ($9 | 0) > 60)) {
                HEAP32[$5 >> 2] = $9;
                break block25;
               }
               HEAP32[$4 >> 2] = $0 | 4;
               break block25;
              }
             }
             if (!global$9) {
              $6 = HEAP32[8487];
              HEAP32[$7 + 24 >> 2] = HEAP32[8486];
              HEAP32[$7 + 28 >> 2] = $6;
              $6 = HEAP32[8485];
              HEAP32[$7 + 16 >> 2] = HEAP32[8484];
              HEAP32[$7 + 20 >> 2] = $6;
              $6 = HEAP32[8483];
              HEAP32[$7 + 8 >> 2] = HEAP32[8482];
              HEAP32[$7 + 12 >> 2] = $6;
              $6 = HEAP32[8481];
              HEAP32[$7 >> 2] = HEAP32[8480];
              HEAP32[$7 + 4 >> 2] = $6;
              $6 = $7 + 32 | 0;
             }
             if (!global$9 | ($10 | 0) == 24) {
              $8 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $6);
              $11 = 24;
              if ((global$9 | 0) == 1) {
               break block
              }
              $0 = $8;
             }
             if (!global$9) {
              HEAP32[$7 + 44 >> 2] = $0;
              break block25;
             }
            }
            if (!global$9) {
             $1 = $7 + 44 | 0;
             $0 = $5 + 24 | 0;
            }
            if (!global$9 | ($10 | 0) == 25) {
             $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $4, $9, 1);
             $11 = 25;
             if ((global$9 | 0) == 1) {
              break block
             }
             $9 = $8;
            }
            if (!global$9) {
             $1 = HEAP32[$4 >> 2];
             if (!($1 & 4 | ($9 | 0) > 6)) {
              HEAP32[$0 >> 2] = $9;
              break block25;
             }
             HEAP32[$4 >> 2] = $1 | 4;
             break block25;
            }
           }
           $6 = global$9 ? $6 : HEAP32[HEAP32[$0 >> 2] + 20 >> 2];
           if (!global$9 | ($10 | 0) == 26) {
            $8 = FUNCTION_TABLE[$6 | 0]($0, $1, $2, $3, $4, $5) | 0;
            $11 = 26;
            if ((global$9 | 0) == 1) {
             break block
            }
            $4 = $8;
           }
           if (!global$9) {
            break block46
           }
          }
          if (!global$9) {
           $6 = HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2];
           $1 = $0 + 8 | 0;
          }
          if (!global$9 | ($10 | 0) == 27) {
           $8 = FUNCTION_TABLE[$6 | 0]($1) | 0;
           $11 = 27;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $8;
          }
          if (!global$9) {
           $6 = HEAP32[$7 + 44 >> 2];
           $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
           $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
           $1 = $12 + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1) << 2) | 0;
          }
          if (!global$9 | ($10 | 0) == 28) {
           $8 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $6, $2, $3, $4, $5, $9, $1);
           $11 = 28;
           if ((global$9 | 0) == 1) {
            break block
           }
           $0 = $8;
          }
          if (!global$9) {
           HEAP32[$7 + 44 >> 2] = $0;
           break block25;
          }
         }
         if (!global$9) {
          $1 = $7 + 44 | 0;
          $0 = $5 + 20 | 0;
         }
         if (!global$9 | ($10 | 0) == 29) {
          std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $4, $9);
          $11 = 29;
          if ((global$9 | 0) == 1) {
           break block
          }
         }
         if (!global$9) {
          break block25
         }
        }
        if (!global$9) {
         $1 = $7 + 44 | 0;
         $0 = $5 + 20 | 0;
        }
        if (!global$9 | ($10 | 0) == 30) {
         $8 = int_20std____2____get_up_to_n_digits_5babi_nn190106_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $4, $9, 4);
         $11 = 30;
         if ((global$9 | 0) == 1) {
          break block
         }
         $9 = $8;
        }
        if (!global$9) {
         if (!(HEAPU8[$4 | 0] & 4)) {
          HEAP32[$0 >> 2] = $9 - 1900
         }
         break block25;
        }
       }
       if (!global$9) {
        $0 = ($6 | 0) == 37;
        if ($0) {
         break block47
        }
       }
      }
      if (!global$9) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
       break block25;
      }
     }
     if (!global$9) {
      $0 = __stack_pointer - 16 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 12 >> 2] = $2;
      $2 = $0 + 12 | 0;
      $1 = $7 + 44 | 0;
     }
     if (!global$9 | ($10 | 0) == 31) {
      $8 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $2);
      $11 = 31;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $8;
     }
     $2 = global$9 ? $2 : 6;
     block49 : {
      block48 : {
       if (!($3 ? global$9 : 1)) {
        break block48
       }
       if (!global$9 | ($10 | 0) == 32) {
        $8 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($1);
        $11 = 32;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $8;
       }
       if (!global$9 | ($10 | 0) == 33) {
        $8 = std____2__ctype_wchar_t___narrow_5babi_nn190106_5d_28wchar_t_2c_20char_29_20const($9, $2);
        $11 = 33;
        if ((global$9 | 0) == 1) {
         break block
        }
        $2 = $8;
       }
       if (!global$9) {
        $3 = ($2 | 0) != 37;
        $2 = 4;
        if ($3) {
         break block48
        }
       }
       if (!global$9 | ($10 | 0) == 34) {
        $8 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($1);
        $11 = 34;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       $2 = global$9 ? $2 : $0 + 12 | 0;
       if (!global$9 | ($10 | 0) == 35) {
        $8 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $2);
        $11 = 35;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $8;
       }
       if (!global$9) {
        if (!$1) {
         break block49
        }
        $2 = 2;
       }
      }
      if (!global$9) {
       HEAP32[$4 >> 2] = $2 | HEAP32[$4 >> 2]
      }
     }
     if (!global$9) {
      __stack_pointer = $0 + 16 | 0
     }
    }
    $4 = global$9 ? $4 : HEAP32[$7 + 44 >> 2];
   }
   if (!global$9) {
    __stack_pointer = $7 + 48 | 0;
    return $4 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $7 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$7 >> 2];
   $2 = HEAP32[$7 + 8 >> 2];
   $3 = HEAP32[$7 + 12 >> 2];
   $4 = HEAP32[$7 + 16 >> 2];
   $5 = HEAP32[$7 + 20 >> 2];
   $6 = HEAP32[$7 + 24 >> 2];
   $8 = HEAP32[$7 + 28 >> 2];
   $9 = HEAP32[$7 + 32 >> 2];
   $10 = HEAP32[$7 + 36 >> 2];
   $1 = HEAP32[$7 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 128 | 0;
   __stack_pointer = $2;
   HEAP32[$2 + 12 >> 2] = $2 + 116;
   $3 = $2 + 16 | 0;
   $8 = $2 + 12 | 0;
   $0 = $0 + 8 | 0;
  }
  block : {
   if (!global$9 | !$11) {
    std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $3, $8, $4, $5, $6);
    $7 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    $4 = __stack_pointer - 32 | 0;
    __stack_pointer = $4;
    $5 = $2 + 16 | 0;
    auto_20std____2____unwrap_range_5babi_nn190106_5d_char__2c_20char___28char__2c_20char__29($4 + 24 | 0, $5, HEAP32[$2 + 12 >> 2]);
    $9 = HEAP32[$4 + 28 >> 2];
    $8 = $1;
    $1 = __stack_pointer - 16 | 0;
    __stack_pointer = $1;
    $3 = HEAP32[$4 + 24 >> 2];
    HEAP32[$1 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $8;
    $6 = $4 + 16 | 0;
   }
   while (1) {
    $8 = global$9 ? $8 : ($3 | 0) != ($9 | 0);
    if ($8 | (global$9 | 0) == 2) {
     if (!global$9) {
      $10 = HEAP8[$3 | 0];
      $8 = $1 + 12 | 0;
     }
     if (!global$9 | ($11 | 0) == 1) {
      std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28char_29($8, $10);
      $7 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $3 = $3 + 1 | 0;
      HEAP32[$1 + 8 >> 2] = $3;
      continue;
     }
    }
    break;
   };
   if (!global$9) {
    std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($6, $1 + 8 | 0, $1 + 12 | 0);
    __stack_pointer = $1 + 16 | 0;
    (wasm2js_i32$0 = $4, wasm2js_i32$1 = char__20std____2____rewrap_range_5babi_nn190106_5d_char__2c_20char__2c_20char___28char__2c_20char__29($5, HEAP32[$4 + 16 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
    std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0 + 8 | 0, $4 + 12 | 0, $4 + 8 | 0);
    __stack_pointer = $4 + 32 | 0;
    __stack_pointer = $0 + 16 | 0;
    __stack_pointer = $2 + 128 | 0;
    return HEAP32[$0 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[$7 + 32 >> 2] = $9;
  HEAP32[$7 + 36 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $6 = HEAP32[$6 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   HEAP8[$6 + 15 | 0] = 0;
   HEAP8[$6 + 14 | 0] = $5;
   HEAP8[$6 + 13 | 0] = $4;
   HEAP8[$6 + 12 | 0] = 37;
   if ($5) {
    std____2__enable_if_is_move_constructible_char___value_20___20is_move_assignable_char___value_2c_20void___type_20std____2__swap_5babi_nn190106_5d_char__28char__2c_20char__29($6 + 13 | 0, $6 + 14 | 0)
   }
   $4 = std____2__iterator_traits_char____difference_type_20std____2____distance_5babi_nn190106_5d_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($1, HEAP32[$2 >> 2]);
   $5 = $6 + 12 | 0;
   $0 = HEAP32[$0 >> 2];
  }
  block : {
   if (!global$9 | !$7) {
    $7 = __strftime_l($1, $4, $5, $3, $0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $7;
   }
   if (!global$9) {
    HEAP32[$2 >> 2] = $0 + $1;
    __stack_pointer = $6 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__enable_if_is_move_constructible_char___value_20___20is_move_assignable_char___value_2c_20void___type_20std____2__swap_5babi_nn190106_5d_char__28char__2c_20char__29($0, $1) {
  var $2 = 0;
  $2 = HEAPU8[$0 | 0];
  HEAP8[$0 | 0] = HEAPU8[$1 | 0];
  HEAP8[$1 | 0] = $2;
 }
 
 function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $7 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$7 >> 2];
   $2 = HEAP32[$7 + 8 >> 2];
   $3 = HEAP32[$7 + 12 >> 2];
   $4 = HEAP32[$7 + 16 >> 2];
   $5 = HEAP32[$7 + 20 >> 2];
   $6 = HEAP32[$7 + 24 >> 2];
   $8 = HEAP32[$7 + 28 >> 2];
   $9 = HEAP32[$7 + 32 >> 2];
   $10 = HEAP32[$7 + 36 >> 2];
   $1 = HEAP32[$7 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 416 | 0;
   __stack_pointer = $2;
   HEAP32[$2 + 12 >> 2] = $2 + 416;
   $3 = __stack_pointer - 144 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 28 >> 2] = $3 + 132;
   $9 = $3 + 32 | 0;
   $8 = $3 + 28 | 0;
   $0 = $0 + 8 | 0;
  }
  block : {
   if (!global$9 | !$11) {
    std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $9, $8, $4, $5, $6);
    $7 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $3 + 32;
    $5 = $2 + 16 | 0;
    $6 = $2 + 12 | 0;
    $8 = unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($5, HEAP32[$6 >> 2]);
    $4 = __stack_pointer - 16 | 0;
    __stack_pointer = $4;
    HEAP32[$4 + 12 >> 2] = HEAP32[$0 >> 2];
    $7 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
    $10 = $3 + 16 | 0;
    $0 = mbsrtowcs($5, $3 + 12 | 0, $8, $10);
    std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($7);
    __stack_pointer = $4 + 16 | 0;
    if (($0 | 0) == -1) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
    HEAP32[$6 >> 2] = $5 + ($0 << 2);
    __stack_pointer = $3 + 144 | 0;
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    $4 = __stack_pointer - 32 | 0;
    __stack_pointer = $4;
    $5 = $2 + 16 | 0;
    auto_20std____2____unwrap_range_5babi_nn190106_5d_char__2c_20char___28char__2c_20char__29($4 + 24 | 0, $5, HEAP32[$2 + 12 >> 2]);
    $9 = HEAP32[$4 + 28 >> 2];
    $8 = $1;
    $1 = __stack_pointer - 16 | 0;
    __stack_pointer = $1;
    $3 = HEAP32[$4 + 24 >> 2];
    HEAP32[$1 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $8;
    $6 = $4 + 16 | 0;
   }
   while (1) {
    $8 = global$9 ? $8 : ($3 | 0) != ($9 | 0);
    if ($8 | (global$9 | 0) == 2) {
     if (!global$9) {
      $10 = HEAP32[$3 >> 2];
      $8 = $1 + 12 | 0;
     }
     if (!global$9 | ($11 | 0) == 1) {
      std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28wchar_t_29($8, $10);
      $7 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $3 = $3 + 4 | 0;
      HEAP32[$1 + 8 >> 2] = $3;
      continue;
     }
    }
    break;
   };
   if (!global$9) {
    std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($6, $1 + 8 | 0, $1 + 12 | 0);
    __stack_pointer = $1 + 16 | 0;
    (wasm2js_i32$0 = $4, wasm2js_i32$1 = char__20std____2____rewrap_range_5babi_nn190106_5d_char__2c_20char__2c_20char___28char__2c_20char__29($5, HEAP32[$4 + 16 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
    std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0 + 8 | 0, $4 + 12 | 0, $4 + 8 | 0);
    __stack_pointer = $4 + 32 | 0;
    __stack_pointer = $0 + 16 | 0;
    __stack_pointer = $2 + 416 | 0;
    return HEAP32[$0 + 12 >> 2];
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[$7 + 32 >> 2] = $9;
  HEAP32[$7 + 36 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1) {
  return $1 - $0 >> 2;
 }
 
 function std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return 127;
 }
 
 function std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = global$9;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28unsigned_20long_2c_20char_29($0, 1, 45);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 | 0] = 2;
  HEAP8[$0 + 1 | 0] = 3;
  HEAP8[$0 + 2 | 0] = 0;
  HEAP8[$0 + 3 | 0] = 4;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return 2147483647;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29($0, 1, 45);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $5 = HEAP32[$3 + 12 >> 2];
   $6 = HEAP32[$3 + 16 >> 2];
   $7 = HEAP32[$3 + 20 >> 2];
   $3 = HEAP32[$3 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $2 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($1);
  }
  block3 : {
   block : {
    if (!global$9) {
     if ($2) {
      HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      $2 = HEAP32[$1 + 4 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$0 + 4 >> 2] = $2;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn190106_5d_28_29_20const($0);
      break block;
     }
     $7 = HEAP32[$1 >> 2];
     $5 = __stack_pointer - 16 | 0;
     __stack_pointer = $5;
     $1 = HEAP32[$1 + 4 >> 2];
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($1);
    }
    block4 : {
     block2 : {
      block1 : {
       if (!global$9) {
        if ($2) {
         $2 = $0;
         std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1);
         break block1;
        }
        if ($1 >>> 0 > 2147483639) {
         break block2
        }
        $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn190106_5d_28unsigned_20long_29($1) + 1 | 0;
        $2 = $5 + 8 | 0;
       }
       if (!global$9 | !$4) {
        auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($2, $3);
        if ((global$9 | 0) == 1) {
         break block3
        }
       }
       if (!global$9) {
        $2 = HEAP32[$5 + 8 >> 2];
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $2);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$5 + 12 >> 2]);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1);
       }
      }
      if (!global$9) {
       std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($2, $7, $1 + 1 | 0);
       __stack_pointer = $5 + 16 | 0;
       break block4;
      }
     }
     if (!global$9) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
      wasm2js_trap();
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $6 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $5;
  HEAP32[$4 + 16 >> 2] = $6;
  HEAP32[$4 + 20 >> 2] = $7;
  HEAP32[$4 + 24 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 56;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 272 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 264 >> 2] = $2;
   HEAP32[$0 + 268 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = 283;
   $11 = $0 + 16 | 0;
   $1 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 152 | 0, $0 + 160 | 0, $11);
   $8 = $0 + 144 | 0;
   std____2__ios_base__getloc_28_29_20const($8, $4);
  }
  block : {
   if (!global$9 | !$9) {
    $7 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($8);
    if ((global$9 | 0) == 1) {
     break block
    }
    $8 = $7;
   }
   if (!global$9) {
    HEAP8[$0 + 143 | 0] = 0;
    $11 = $0 + 268 | 0;
    $13 = $0 + 144 | 0;
    $14 = $0 + 143 | 0;
    $15 = $0 + 148 | 0;
    $16 = $0 + 260 | 0;
    $4 = HEAP32[$4 + 4 >> 2];
   }
   if (!global$9 | ($9 | 0) == 1) {
    $7 = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($11, $2, $3, $13, $4, $5, $14, $8, $1, $15, $16);
    $10 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $7;
   }
   $2 = global$9 ? $2 : !$2;
   block1 : {
    if (!global$9) {
     if ($2) {
      break block1
     }
     $2 = HEAPU8[11444] | HEAPU8[11445] << 8 | (HEAPU8[11446] << 16 | HEAPU8[11447] << 24);
     HEAP8[$0 + 135 | 0] = $2;
     HEAP8[$0 + 136 | 0] = $2 >>> 8;
     HEAP8[$0 + 137 | 0] = $2 >>> 16;
     HEAP8[$0 + 138 | 0] = $2 >>> 24;
     $2 = HEAPU8[11441] | HEAPU8[11442] << 8 | (HEAPU8[11443] << 16 | HEAPU8[11444] << 24);
     HEAP32[$0 + 128 >> 2] = HEAPU8[11437] | HEAPU8[11438] << 8 | (HEAPU8[11439] << 16 | HEAPU8[11440] << 24);
     HEAP32[$0 + 132 >> 2] = $2;
     $3 = $0 + 138 | 0;
     $4 = $0 + 118 | 0;
     $2 = $0 + 128 | 0;
    }
    if (!global$9 | ($9 | 0) == 2) {
     std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($8, $2, $3, $4);
     $10 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAP32[$0 + 16 >> 2] = 282;
     $4 = $0 + 16 | 0;
     $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $4);
     $3 = HEAP32[$1 >> 2];
     $2 = (HEAP32[$0 + 148 >> 2] - $3 | 0) >= 99;
    }
    block2 : {
     if ((global$9 | 0) == 2 | $2) {
      if (!global$9) {
       $3 = HEAP32[$1 >> 2];
       $2 = (HEAP32[$0 + 148 >> 2] - $3 | 0) + 2 | 0;
      }
      if (!global$9 | ($9 | 0) == 3) {
       $7 = emscripten_builtin_malloc($2);
       $10 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $7;
      }
      if (!global$9 | ($9 | 0) == 4) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($8, $2);
       $10 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = !HEAP32[$8 >> 2];
       if ($2) {
        break block2
       }
       $4 = HEAP32[$8 >> 2];
      }
     }
     if (!global$9) {
      if (HEAPU8[$0 + 143 | 0] == 1) {
       HEAP8[$4 | 0] = 45;
       $4 = $4 + 1 | 0;
      }
      $2 = HEAP32[$1 >> 2];
     }
     while (1) {
      $3 = global$9 ? $3 : HEAPU32[$0 + 148 >> 2] <= $2 >>> 0;
      $12 = global$9 ? $12 : $3;
      if ($12 | (global$9 | 0) == 2) {
       block3 : {
        if (!global$9) {
         HEAP8[$4 | 0] = 0;
         HEAP32[$0 >> 2] = $6;
         $2 = $0 + 16 | 0;
        }
        if (!global$9 | ($9 | 0) == 5) {
         $7 = sscanf($2, $0);
         $10 = 5;
         if ((global$9 | 0) == 1) {
          break block
         }
         $2 = $7;
        }
        if (!global$9) {
         $2 = ($2 | 0) != 1;
         if ($2) {
          break block3
         }
        }
        if (!global$9 | ($9 | 0) == 6) {
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($8);
         $10 = 6;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         break block1
        }
       }
      }
      if (!global$9 & (!$12 | (global$9 | 0) == 2)) {
       $3 = HEAPU8[((char_20const__20std____2__find_5babi_nn190106_5d_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0 + 118 | 0, $0 + 128 | 0, $2) - $0 | 0) + $0 | 0) + 10 | 0];
       HEAP8[$4 | 0] = $3;
       $4 = $4 + 1 | 0;
       $2 = $2 + 1 | 0;
       continue;
      }
      break;
     };
     if (!global$9) {
      std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
      wasm2js_trap();
     }
    }
    if (!global$9) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    $3 = $0 + 264 | 0;
    $2 = $0 + 268 | 0;
   }
   if (!global$9 | ($9 | 0) == 7) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($2, $3);
    $10 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $7;
   }
   if (!global$9) {
    if ($2) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
    }
    $3 = $0 + 144 | 0;
    $2 = HEAP32[$0 + 268 >> 2];
   }
   if (!global$9 | ($9 | 0) == 8) {
    std____2__locale___locale_28_29($3);
    $10 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($9 | 0) == 9) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($1);
    $10 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 272 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[$7 + 36 >> 2] = $12;
  HEAP32[$7 + 40 >> 2] = $13;
  HEAP32[$7 + 44 >> 2] = $14;
  HEAP32[$7 + 48 >> 2] = $15;
  HEAP32[$7 + 52 >> 2] = $16;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 56;
  return 0;
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 84;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $9 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $20 = HEAP32[$1 + 64 >> 2];
   $23 = HEAP32[$1 + 68 >> 2];
   $21 = HEAP32[$1 + 72 >> 2];
   $22 = HEAP32[$1 + 76 >> 2];
   $19 = HEAP32[$1 + 80 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $14 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $12 = __stack_pointer - 528 | 0;
   __stack_pointer = $12;
   HEAP32[$12 + 520 >> 2] = $10;
   HEAP32[$12 + 524 >> 2] = $1;
   $1 = $12 + 524 | 0;
  }
  block : {
   if (!global$9 | !$14) {
    $11 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $11;
   }
   block1 : {
    if (!global$9) {
     if ($1) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $0 = 0;
      break block1;
     }
     HEAP32[$12 + 76 >> 2] = 283;
     $19 = $12 + 104 | 0;
     $10 = $12 + 76 | 0;
     $18 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($19, $12 + 112 | 0, $10);
     $1 = HEAP32[$18 >> 2];
     HEAP32[$12 + 100 >> 2] = $1;
     HEAP32[$12 + 96 >> 2] = $1 + 400;
     $21 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($10);
     $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($12 - -64 | 0);
     $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($12 + 52 | 0);
     $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($12 + 40 | 0);
     $20 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($12 + 28 | 0);
     $22 = $12 + 91 | 0;
     $23 = $12 + 90 | 0;
     $1 = __stack_pointer - 16 | 0;
     __stack_pointer = $1;
     $10 = $12 + 92 | 0;
    }
    block2 : {
     if ((global$9 | 0) == 2 | $2) {
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 1) {
       $11 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_char_2c_20true___28std____2__locale_20const__29($3);
       $13 = 1;
       if ((global$9 | 0) == 1) {
        break block
       }
       $3 = $11;
      }
      if (!global$9 | ($14 | 0) == 2) {
       std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 2;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = HEAP32[$1 + 4 >> 2];
       HEAP8[$10 | 0] = $2;
       HEAP8[$10 + 1 | 0] = $2 >>> 8;
       HEAP8[$10 + 2 | 0] = $2 >>> 16;
       HEAP8[$10 + 3 | 0] = $2 >>> 24;
       $2 = $1 + 4 | 0;
      }
      if (!global$9 | ($14 | 0) == 3) {
       std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 4) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($16, $2);
       $13 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 5) {
       $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
       $13 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 6) {
       std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 7) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($17, $2);
       $13 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 8) {
       $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
       $13 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9 | ($14 | 0) == 9) {
       $11 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($3);
       $13 = 9;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9) {
       HEAP8[$22 | 0] = $2
      }
      if (!global$9 | ($14 | 0) == 10) {
       $11 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($3);
       $13 = 10;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9) {
       HEAP8[$23 | 0] = $2;
       $2 = $1 + 4 | 0;
      }
      if (!global$9 | ($14 | 0) == 11) {
       std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 11;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 12) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($21, $2);
       $13 = 12;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 13) {
       $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
       $13 = 13;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 14) {
       std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 14;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 15) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($15, $2);
       $13 = 15;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 16) {
       $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
       $13 = 16;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9 | ($14 | 0) == 17) {
       $11 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($3);
       $13 = 17;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9) {
       break block2
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 18) {
      $11 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_char_2c_20false___28std____2__locale_20const__29($3);
      $13 = 18;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $11;
     }
     if (!global$9 | ($14 | 0) == 19) {
      std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 19;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = HEAP32[$1 + 4 >> 2];
      HEAP8[$10 | 0] = $2;
      HEAP8[$10 + 1 | 0] = $2 >>> 8;
      HEAP8[$10 + 2 | 0] = $2 >>> 16;
      HEAP8[$10 + 3 | 0] = $2 >>> 24;
      $2 = $1 + 4 | 0;
     }
     if (!global$9 | ($14 | 0) == 20) {
      std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 20;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 21) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($16, $2);
      $13 = 21;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 22) {
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
      $13 = 22;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 23) {
      std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 23;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 24) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($17, $2);
      $13 = 24;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 25) {
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
      $13 = 25;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     if (!global$9 | ($14 | 0) == 26) {
      $11 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($3);
      $13 = 26;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     if (!global$9) {
      HEAP8[$22 | 0] = $2
     }
     if (!global$9 | ($14 | 0) == 27) {
      $11 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($3);
      $13 = 27;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     if (!global$9) {
      HEAP8[$23 | 0] = $2;
      $2 = $1 + 4 | 0;
     }
     if (!global$9 | ($14 | 0) == 28) {
      std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 28;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 29) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($21, $2);
      $13 = 29;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 30) {
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
      $13 = 30;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 31) {
      std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 31;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 32) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($15, $2);
      $13 = 32;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 33) {
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
      $13 = 33;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     if (!global$9 | ($14 | 0) == 34) {
      $11 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($3);
      $13 = 34;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
    }
    if (!global$9) {
     HEAP32[$12 + 24 >> 2] = $2;
     __stack_pointer = $1 + 16 | 0;
     HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
     $22 = $4 & 512;
     $3 = 0;
     $1 = 0;
    }
    while (1) {
     if (!global$9) {
      $4 = ($3 | 0) == 4;
      $2 = $1;
     }
     block9 : {
      block10 : {
       block12 : {
        block3 : {
         if (!global$9) {
          if ($4) {
           break block3
          }
          $4 = $12 + 524 | 0;
         }
         if (!global$9 | ($14 | 0) == 35) {
          $11 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $4);
          $13 = 35;
          if ((global$9 | 0) == 1) {
           break block
          }
          $4 = $11;
         }
         if (!global$9) {
          if ($4) {
           break block3
          }
          $10 = 0;
          $4 = HEAPU8[($12 + 92 | 0) + $3 | 0];
         }
         block8 : {
          block6 : {
           block7 : {
            block11 : {
             block4 : {
              if (!global$9) {
               block5 : {
                switch ($4 | 0) {
                case 0:
                 break block4;
                case 1:
                 break block5;
                case 2:
                 break block6;
                case 3:
                 break block7;
                case 4:
                 break block8;
                default:
                 break block9;
                };
               }
               $1 = ($3 | 0) == 3;
               if ($1) {
                break block10
               }
              }
              if (!global$9 | ($14 | 0) == 36) {
               $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
               $13 = 36;
               if ((global$9 | 0) == 1) {
                break block
               }
               $1 = $11;
              }
              if (!global$9) {
               $1 = std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($7, 1, $1)
              }
              if ((global$9 | 0) == 2 | $1) {
               $1 = global$9 ? $1 : $12 + 16 | 0;
               if (!global$9 | ($14 | 0) == 37) {
                std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28int_29($1, $0);
                $13 = 37;
                if ((global$9 | 0) == 1) {
                 break block
                }
               }
               $1 = global$9 ? $1 : HEAP8[$12 + 16 | 0];
               if (!global$9 | ($14 | 0) == 38) {
                std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____push_back_28char_29($20, $1);
                $13 = 38;
                if ((global$9 | 0) == 1) {
                 break block
                }
               }
               if (!global$9) {
                break block11
               }
              }
              if (!global$9) {
               HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
               $0 = 0;
               break block12;
              }
             }
             if (!global$9) {
              $1 = ($3 | 0) == 3;
              if ($1) {
               break block10
              }
             }
            }
            while (1) {
             $1 = global$9 ? $1 : $12 + 524 | 0;
             if (!global$9 | ($14 | 0) == 39) {
              $11 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
              $13 = 39;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!($1 ? global$9 : 1)) {
              break block10
             }
             if (!global$9 | ($14 | 0) == 40) {
              $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
              $13 = 40;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!global$9) {
              $1 = !std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($7, 1, $1);
              if ($1) {
               break block10
              }
              $1 = $12 + 16 | 0;
             }
             if (!global$9 | ($14 | 0) == 41) {
              std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28int_29($1, $0);
              $13 = 41;
              if ((global$9 | 0) == 1) {
               break block
              }
             }
             $1 = global$9 ? $1 : HEAP8[$12 + 16 | 0];
             if (!global$9 | ($14 | 0) == 42) {
              std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____push_back_28char_29($20, $1);
              $13 = 42;
              if ((global$9 | 0) == 1) {
               break block
              }
             }
             if (!global$9) {
              continue
             }
             break;
            };
           }
           if (!global$9) {
            $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17)
           }
           block13 : {
            if (!($1 ? global$9 : 1)) {
             break block13
            }
            if (!global$9 | ($14 | 0) == 43) {
             $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 43;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             $4 = $1 & 255;
             $1 = ($4 | 0) != HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($17, 0) | 0];
             if ($1) {
              break block13
             }
            }
            if (!global$9 | ($14 | 0) == 44) {
             $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
             $13 = 44;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             HEAP8[$6 | 0] = 0;
             $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17) >>> 0 > 1 ? $17 : $2;
             break block9;
            }
           }
           if (!global$9) {
            $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16)
           }
           block14 : {
            if (!($1 ? global$9 : 1)) {
             break block14
            }
            if (!global$9 | ($14 | 0) == 45) {
             $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 45;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             $4 = $1 & 255;
             $1 = ($4 | 0) != HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($16, 0) | 0];
             if ($1) {
              break block14
             }
            }
            if (!global$9 | ($14 | 0) == 46) {
             $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
             $13 = 46;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             HEAP8[$6 | 0] = 1;
             $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16) >>> 0 > 1 ? $16 : $2;
             break block9;
            }
           }
           if (!global$9) {
            block15 : {
             if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17)) {
              break block15
             }
             $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16);
             if ($1) {
              break block15
             }
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break block12;
            }
            if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17)) {
             $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16);
             if ($1) {
              break block10
             }
            }
            $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16);
            HEAP8[$6 | 0] = $1;
            break block10;
           }
          }
          if (!global$9) {
           if (!($22 | ($3 >>> 0 < 2 | $2))) {
            $1 = 0;
            $10 = ($3 | 0) == 2;
            $4 = !($10 & HEAPU8[$12 + 95 | 0] != 0);
            if ($4) {
             break block9
            }
           }
           (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
           $4 = $12 + 16 | 0;
           $10 = std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_void_20_28__29_28void__29_2c_200__28void_20_28____29_28void__29_29($4, $12 + 12 | 0);
           block17 : {
            if (!$3 | HEAPU8[($3 + $12 | 0) + 91 | 0] > 1) {
             break block17
            }
            while (1) {
             block18 : {
              (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
              if (bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($10, $12 + 12 | 0)) {
               break block18
              }
              if (!std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($7, 1, HEAP8[HEAP32[$10 >> 2]])) {
               break block18
              }
              std____2____wrap_iter_char____operator___5babi_nn190106_5d_28_29($10);
              continue;
             }
             break;
            };
            (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
            $1 = HEAP32[$10 >> 2] - HEAP32[$12 + 12 >> 2] | 0;
            if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($20) >>> 0 >= $1 >>> 0) {
             (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($20)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
             $1 = std____2____wrap_iter_char____operator__5babi_nn190106_5d_28long_29_20const($12 + 12 | 0, 0 - $1 | 0);
             $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($20);
             $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($15);
             $13 = __stack_pointer - 16 | 0;
             __stack_pointer = $13;
             $1 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($1);
             $4 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($4);
             $19 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($11);
             $4 = $4 - $1 | 0;
             $23 = !memcmp($1, $19, $4);
             __stack_pointer = $13 + 16 | 0;
             if ($23) {
              break block17
             }
            }
            (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
            $4 = $12 + 12 | 0;
            (wasm2js_i32$0 = $10, wasm2js_i32$1 = HEAP32[std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_void_20_28__29_28void__29_2c_200__28void_20_28____29_28void__29_29($4, $12 + 8 | 0) >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           }
           $1 = HEAP32[$10 >> 2];
           HEAP32[$12 + 12 >> 2] = $1;
          }
          while (1) {
           block19 : {
            if (!global$9) {
             (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
             $4 = $12 + 12 | 0;
             $1 = bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($4, $12 + 8 | 0);
             if ($1) {
              break block19
             }
             $1 = $12 + 524 | 0;
            }
            if (!global$9 | ($14 | 0) == 47) {
             $11 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
             $13 = 47;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!($1 ? global$9 : 1)) {
             break block19
            }
            if (!global$9 | ($14 | 0) == 48) {
             $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 48;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             $4 = $1 & 255;
             $1 = ($4 | 0) != HEAPU8[HEAP32[$12 + 12 >> 2]];
             if ($1) {
              break block19
             }
            }
            if (!global$9 | ($14 | 0) == 49) {
             $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
             $13 = 49;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             $1 = $12 + 12 | 0;
             std____2____wrap_iter_char____operator___5babi_nn190106_5d_28_29($1);
             continue;
            }
           }
           break;
          };
          if (!global$9) {
           $1 = !$22;
           if ($1) {
            break block10
           }
           (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           $4 = $12 + 12 | 0;
           $1 = bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($4, $12 + 8 | 0);
           if ($1) {
            break block10
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break block12;
          }
         }
         while (1) {
          block20 : {
           $1 = global$9 ? $1 : $12 + 524 | 0;
           if (!global$9 | ($14 | 0) == 50) {
            $11 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
            $13 = 50;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           if (!($1 ? global$9 : 1)) {
            break block20
           }
           if (!global$9 | ($14 | 0) == 51) {
            $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
            $13 = 51;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           if (!global$9) {
            $4 = std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($7, 64, $1)
           }
           block21 : {
            if ((global$9 | 0) == 2 | $4) {
             if (!global$9) {
              $4 = HEAP32[$9 >> 2];
              $19 = ($4 | 0) == HEAP32[$12 + 520 >> 2];
             }
             if ((global$9 | 0) == 2 | $19) {
              $4 = global$9 ? $4 : $12 + 520 | 0;
              if (!global$9 | ($14 | 0) == 52) {
               void_20std____2____double_or_nothing_5babi_nn190106_5d_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $4);
               $13 = 52;
               if ((global$9 | 0) == 1) {
                break block
               }
              }
              if (!global$9) {
               $4 = HEAP32[$9 >> 2]
              }
             }
             if (!global$9) {
              $19 = $4 + 1 | 0;
              HEAP32[$9 >> 2] = $19;
              HEAP8[$4 | 0] = $1;
              $10 = $10 + 1 | 0;
              break block21;
             }
            }
            if (!global$9) {
             $4 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($21);
             if ($4) {
              break block20
             }
             $4 = !$10;
             if ($4) {
              break block20
             }
             $4 = HEAPU8[$12 + 90 | 0];
             $1 = ($4 | 0) != ($1 & 255);
             if ($1) {
              break block20
             }
             $1 = HEAP32[$12 + 100 >> 2];
             $4 = ($1 | 0) == HEAP32[$12 + 96 >> 2];
            }
            if ((global$9 | 0) == 2 | $4) {
             if (!global$9) {
              $4 = $12 + 100 | 0;
              $1 = $12 + 96 | 0;
             }
             if (!global$9 | ($14 | 0) == 53) {
              void_20std____2____double_or_nothing_5babi_nn190106_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($18, $4, $1);
              $13 = 53;
              if ((global$9 | 0) == 1) {
               break block
              }
             }
             if (!global$9) {
              $1 = HEAP32[$12 + 100 >> 2]
             }
            }
            if (!global$9) {
             $4 = $1 + 4 | 0;
             HEAP32[$12 + 100 >> 2] = $4;
             HEAP32[$1 >> 2] = $10;
             $10 = 0;
            }
           }
           if (!global$9 | ($14 | 0) == 54) {
            $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
            $13 = 54;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           if (!global$9) {
            continue
           }
          }
          break;
         };
         if (!global$9) {
          $1 = HEAP32[$12 + 100 >> 2];
          $4 = ($1 | 0) == HEAP32[$18 >> 2];
         }
         block22 : {
          if (!global$9) {
           if ($4) {
            break block22
           }
           $4 = !$10;
           if ($4) {
            break block22
           }
           $4 = HEAP32[$12 + 96 >> 2] == ($1 | 0);
          }
          if ((global$9 | 0) == 2 | $4) {
           if (!global$9) {
            $4 = $12 + 100 | 0;
            $1 = $12 + 96 | 0;
           }
           if (!global$9 | ($14 | 0) == 55) {
            void_20std____2____double_or_nothing_5babi_nn190106_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($18, $4, $1);
            $13 = 55;
            if ((global$9 | 0) == 1) {
             break block
            }
           }
           if (!global$9) {
            $1 = HEAP32[$12 + 100 >> 2]
           }
          }
          if (!global$9) {
           $4 = $1 + 4 | 0;
           HEAP32[$12 + 100 >> 2] = $4;
           HEAP32[$1 >> 2] = $10;
          }
         }
         $1 = global$9 ? $1 : HEAP32[$12 + 24 >> 2] <= 0;
         block23 : {
          if (!global$9) {
           if ($1) {
            break block23
           }
           $1 = $12 + 524 | 0;
          }
          if (!global$9 | ($14 | 0) == 56) {
           $11 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
           $13 = 56;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $11;
          }
          $1 = global$9 ? $1 : !$1;
          block24 : {
           if ($1 | (global$9 | 0) == 2) {
            if (!global$9 | ($14 | 0) == 57) {
             $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 57;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             $4 = $1 & 255;
             $1 = ($4 | 0) == HEAPU8[$12 + 91 | 0];
             if ($1) {
              break block24
             }
            }
           }
           if (!global$9) {
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
            $0 = 0;
            break block12;
           }
          }
          while (1) {
           if (!global$9 | ($14 | 0) == 58) {
            $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
            $13 = 58;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           if (!global$9) {
            $1 = HEAP32[$12 + 24 >> 2] <= 0;
            if ($1) {
             break block23
            }
            $1 = $12 + 524 | 0;
           }
           if (!global$9 | ($14 | 0) == 59) {
            $11 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
            $13 = 59;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           $1 = global$9 ? $1 : !$1;
           block25 : {
            if ($1 | (global$9 | 0) == 2) {
             if (!global$9 | ($14 | 0) == 60) {
              $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
              $13 = 60;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!global$9) {
              $1 = std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($7, 64, $1);
              if ($1) {
               break block25
              }
             }
            }
            if (!global$9) {
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break block12;
            }
           }
           if (!global$9) {
            $4 = HEAP32[$9 >> 2];
            $1 = ($4 | 0) == HEAP32[$12 + 520 >> 2];
           }
           if ((global$9 | 0) == 2 | $1) {
            $1 = global$9 ? $1 : $12 + 520 | 0;
            if (!global$9 | ($14 | 0) == 61) {
             void_20std____2____double_or_nothing_5babi_nn190106_5d_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $1);
             $13 = 61;
             if ((global$9 | 0) == 1) {
              break block
             }
            }
           }
           if (!global$9 | ($14 | 0) == 62) {
            $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
            $13 = 62;
            if ((global$9 | 0) == 1) {
             break block
            }
            $10 = $11;
           }
           if (!global$9) {
            $1 = HEAP32[$9 >> 2];
            $4 = $1 + 1 | 0;
            HEAP32[$9 >> 2] = $4;
            HEAP8[$1 | 0] = $10;
            $1 = HEAP32[$12 + 24 >> 2] - 1 | 0;
            HEAP32[$12 + 24 >> 2] = $1;
            continue;
           }
           break;
          };
         }
         if (!global$9) {
          $1 = $2;
          $4 = HEAP32[$8 >> 2];
          $2 = ($4 | 0) != HEAP32[$9 >> 2];
          if ($2) {
           break block9
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break block12;
         }
        }
        $1 = global$9 ? $1 : !$2;
        block26 : {
         if (!global$9) {
          if ($1) {
           break block26
          }
          $10 = 1;
         }
         while (1) {
          if (!global$9) {
           $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) >>> 0 <= $10 >>> 0;
           if ($1) {
            break block26
           }
           $1 = $12 + 524 | 0;
          }
          if (!global$9 | ($14 | 0) == 63) {
           $11 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1);
           $13 = 63;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $11;
          }
          $1 = global$9 ? $1 : !$1;
          block27 : {
           if ($1 | (global$9 | 0) == 2) {
            if (!global$9 | ($14 | 0) == 64) {
             $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 64;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             $3 = $1 & 255;
             $1 = ($3 | 0) == HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, $10) | 0];
             if ($1) {
              break block27
             }
            }
           }
           if (!global$9) {
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
            $0 = 0;
            break block12;
           }
          }
          if (!global$9 | ($14 | 0) == 65) {
           $11 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28_29($0);
           $13 = 65;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $11;
          }
          if (!global$9) {
           $10 = $10 + 1 | 0;
           continue;
          }
          break;
         };
        }
        if (!global$9) {
         $0 = 1;
         $2 = HEAP32[$18 >> 2];
         $1 = ($2 | 0) == HEAP32[$12 + 100 >> 2];
         if ($1) {
          break block12
         }
         $0 = 0;
         HEAP32[$12 + 16 >> 2] = 0;
         $3 = HEAP32[$18 >> 2];
         $2 = HEAP32[$12 + 100 >> 2];
         std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($21, $3, $2, $12 + 16 | 0);
         $1 = HEAP32[$12 + 16 >> 2];
         if ($1) {
          $1 = HEAP32[$5 >> 2] | 4;
          HEAP32[$5 >> 2] = $1;
          break block12;
         }
         $0 = 1;
        }
       }
       if (!global$9 | ($14 | 0) == 66) {
        $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($20);
        $13 = 66;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 67) {
        $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($16);
        $13 = 67;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 68) {
        $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($17);
        $13 = 68;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 69) {
        $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($15);
        $13 = 69;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 70) {
        $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($21);
        $13 = 70;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 71) {
        std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($18);
        $13 = 71;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        break block1
       }
      }
      $1 = global$9 ? $1 : $2;
     }
     if (!global$9) {
      $3 = $3 + 1 | 0;
      continue;
     }
     break;
    };
   }
   if (!global$9) {
    __stack_pointer = $12 + 528 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $11 = HEAP32[global$10 >> 2];
  HEAP32[$11 >> 2] = $0;
  HEAP32[$11 + 4 >> 2] = $1;
  HEAP32[$11 + 8 >> 2] = $2;
  HEAP32[$11 + 12 >> 2] = $3;
  HEAP32[$11 + 16 >> 2] = $4;
  HEAP32[$11 + 20 >> 2] = $5;
  HEAP32[$11 + 24 >> 2] = $6;
  HEAP32[$11 + 28 >> 2] = $7;
  HEAP32[$11 + 32 >> 2] = $8;
  HEAP32[$11 + 36 >> 2] = $9;
  HEAP32[$11 + 40 >> 2] = $10;
  HEAP32[$11 + 44 >> 2] = $12;
  HEAP32[$11 + 48 >> 2] = $15;
  HEAP32[$11 + 52 >> 2] = $16;
  HEAP32[$11 + 56 >> 2] = $17;
  HEAP32[$11 + 60 >> 2] = $18;
  HEAP32[$11 + 64 >> 2] = $20;
  HEAP32[$11 + 68 >> 2] = $23;
  HEAP32[$11 + 72 >> 2] = $21;
  HEAP32[$11 + 76 >> 2] = $22;
  HEAP32[$11 + 80 >> 2] = $19;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 84;
  return 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn190106_5d_28int_29($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[$1 >> 2];
  block : {
   if (!global$9 | !$3) {
    $3 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sbumpc_5babi_nn190106_5d_28_29($2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $3;
   }
   if (!global$9) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
    HEAP8[$0 | 0] = $2 << 24 >> 24;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function void_20std____2____double_or_nothing_5babi_nn190106_5d_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $4 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $5 = HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_5babi_nn190106_5d_28_29($0) >> 2];
   $4 = HEAP32[$2 >> 2] - HEAP32[$0 >> 2] | 0;
   block : {
    if ($4 >>> 0 < 2147483647) {
     $4 = $4 << 1;
     break block;
    }
    $4 = -1;
   }
   $7 = $4 >>> 0 <= 1 ? 1 : $4;
   $9 = HEAP32[$1 >> 2];
   $10 = HEAP32[$0 >> 2];
   $4 = ($5 | 0) != 283 ? HEAP32[$0 >> 2] : 0;
  }
  block1 : {
   if (!global$9 | !$11) {
    $3 = emscripten_builtin_realloc($4, $7);
    if ((global$9 | 0) == 1) {
     break block1
    }
    $8 = $3;
   }
   if ((global$9 | 0) == 2 | $8) {
    if (!global$9) {
     if (($5 | 0) != 283) {
      std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_5babi_nn190106_5d_28_29($0)
     }
     HEAP32[$6 + 4 >> 2] = 282;
     $5 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($6 + 8 | 0, $8, $6 + 4 | 0);
    }
    if (!global$9 | ($11 | 0) == 1) {
     std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__5babi_nn190106_5d_28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $5);
     $12 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($11 | 0) == 2) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($5);
     $12 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[$1 >> 2] = HEAP32[$0 >> 2] + ($9 - $10 | 0);
     HEAP32[$2 >> 2] = HEAP32[$0 >> 2] + $7;
     __stack_pointer = $6 + 16 | 0;
     return;
    }
   }
   if (!global$9) {
    std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $5;
  HEAP32[$3 + 16 >> 2] = $7;
  HEAP32[$3 + 20 >> 2] = $6;
  HEAP32[$3 + 24 >> 2] = $4;
  HEAP32[$3 + 28 >> 2] = $8;
  HEAP32[$3 + 32 >> 2] = $9;
  HEAP32[$3 + 36 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
 }
 
 function void_20std____2____double_or_nothing_5babi_nn190106_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $4 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $5 = HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_5babi_nn190106_5d_28_29($0) >> 2];
   $4 = HEAP32[$2 >> 2] - HEAP32[$0 >> 2] | 0;
   block : {
    if ($4 >>> 0 < 2147483647) {
     $4 = $4 << 1;
     break block;
    }
    $4 = -1;
   }
   $7 = $4 ? $4 : 4;
   $9 = HEAP32[$1 >> 2];
   $10 = HEAP32[$0 >> 2];
   $4 = ($5 | 0) != 283 ? HEAP32[$0 >> 2] : 0;
  }
  block1 : {
   if (!global$9 | !$11) {
    $3 = emscripten_builtin_realloc($4, $7);
    if ((global$9 | 0) == 1) {
     break block1
    }
    $8 = $3;
   }
   if ((global$9 | 0) == 2 | $8) {
    if (!global$9) {
     if (($5 | 0) != 283) {
      std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_5babi_nn190106_5d_28_29($0)
     }
     HEAP32[$6 + 4 >> 2] = 282;
     $5 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($6 + 8 | 0, $8, $6 + 4 | 0);
    }
    if (!global$9 | ($11 | 0) == 1) {
     std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__5babi_nn190106_5d_28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $5);
     $12 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($11 | 0) == 2) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($5);
     $12 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[$1 >> 2] = HEAP32[$0 >> 2] + ($9 - $10 | 0);
     HEAP32[$2 >> 2] = HEAP32[$0 >> 2] + ($7 & -4);
     __stack_pointer = $6 + 16 | 0;
     return;
    }
   }
   if (!global$9) {
    std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $5;
  HEAP32[$3 + 16 >> 2] = $7;
  HEAP32[$3 + 20 >> 2] = $6;
  HEAP32[$3 + 24 >> 2] = $4;
  HEAP32[$3 + 28 >> 2] = $8;
  HEAP32[$3 + 32 >> 2] = $9;
  HEAP32[$3 + 36 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
 }
 
 function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_5babi_nn190106_5d_28_29($0) {
  return $0 + 4 | 0;
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 52;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $9 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $12 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 144 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 136 >> 2] = $2;
   HEAP32[$0 + 140 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = 283;
   $9 = $0 + 32 | 0;
   $10 = $0 + 20 | 0;
   $14 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $9, $10);
   $1 = $0 + 16 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $4);
  }
  block : {
   if (!global$9 | !$12) {
    $7 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    HEAP8[$0 + 15 | 0] = 0;
    $9 = $0 + 140 | 0;
    $10 = $0 + 16 | 0;
    $8 = $0 + 15 | 0;
    $13 = $0 + 20 | 0;
    $15 = $0 + 132 | 0;
    $4 = HEAP32[$4 + 4 >> 2];
   }
   if (!global$9 | ($12 | 0) == 1) {
    $7 = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($9, $2, $3, $10, $4, $5, $8, $1, $14, $13, $15);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $7;
   }
   if ((global$9 | 0) == 2 | $2) {
    if (!global$9) {
     $2 = __stack_pointer - 16 | 0;
     __stack_pointer = $2;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6);
     block1 : {
      if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($6)) {
       $3 = HEAP32[$6 >> 2];
       HEAP8[$2 + 15 | 0] = 0;
       $4 = $2 + 15 | 0;
       std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($3, $4);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($6, 0);
       break block1;
      }
      HEAP8[$2 + 14 | 0] = 0;
      $3 = $2 + 14 | 0;
      std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($6, $3);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($6, 0);
     }
     __stack_pointer = $2 + 16 | 0;
     $2 = HEAPU8[$0 + 15 | 0] == 1;
    }
    if ((global$9 | 0) == 2 | $2) {
     if (!global$9 | ($12 | 0) == 2) {
      $7 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($1, 45);
      $11 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $7;
     }
     if (!global$9 | ($12 | 0) == 3) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____push_back_28char_29($6, $2);
      $11 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9 | ($12 | 0) == 4) {
     $7 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($1, 48);
     $11 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $7;
    }
    if (!global$9) {
     $2 = HEAP32[$14 >> 2];
     $3 = HEAP32[$0 + 20 >> 2];
     $4 = $3 - 1 | 0;
     $1 = $1 & 255;
     while (1) {
      if (!(($1 | 0) != HEAPU8[$2 | 0] | $2 >>> 0 >= $4 >>> 0)) {
       $2 = $2 + 1 | 0;
       continue;
      }
      break;
     };
     $4 = __stack_pointer - 16 | 0;
     __stack_pointer = $4;
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6);
     $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($6);
     $10 = std____2__iterator_traits_char____difference_type_20std____2__distance_5babi_nn190106_5d_char___28char__2c_20char__29($2, $3);
     $8 = !$10;
    }
    block3 : {
     if (!global$9) {
      if ($8) {
       break block3
      }
      $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($6);
      $13 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($6) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6) | 0) + 1 | 0;
      $8 = !bool_20std____2____is_pointer_in_range_5babi_nn190106_5d_char_2c_20char_2c_200__28char_20const__2c_20char_20const__2c_20char_20const__29($7, $13, $2);
     }
     $11 = (global$9 | 0) == 2;
     if ($11 | $8) {
      $8 = global$9 ? $8 : $9 - $1 >>> 0 < $10 >>> 0;
      if ($11 | $8) {
       $8 = global$9 ? $8 : ($1 - $9 | 0) + $10 | 0;
       if (!global$9 | ($12 | 0) == 5) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_without_replace_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($6, $9, $8, $1, $1);
        $11 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
      }
      if (!global$9) {
       $2 = char__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______copy_non_overlapping_range_5babi_nn190106_5d_char__2c_20char___28char__2c_20char__2c_20char__29($2, $3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($6) + $1 | 0);
       HEAP8[$4 + 15 | 0] = 0;
       std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($2, $4 + 15 | 0);
       $1 = $1 + $10 | 0;
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn190106_5d_28unsigned_20long_29($6, $1);
       break block3;
      }
     }
     if (!global$9) {
      $1 = __stack_pointer - 16 | 0;
      __stack_pointer = $1;
     }
     if (!global$9 | ($12 | 0) == 6) {
      void_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_char__2c_200__28char__2c_20char__29($4, $2, $3);
      $11 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      __stack_pointer = $1 + 16 | 0;
      $2 = $4;
      $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($2);
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2);
      $10 = __stack_pointer - 16 | 0;
      __stack_pointer = $10;
      $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($6);
      $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6);
      $13 = $9 - $3 >>> 0 >= $1 >>> 0;
     }
     block4 : {
      if (!global$9) {
       if ($13) {
        if (!$1) {
         break block4
        }
        $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($6);
        std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($9 + $3 | 0, $8, $1);
        $1 = $1 + $3 | 0;
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn190106_5d_28unsigned_20long_29($6, $1);
        HEAP8[$10 + 15 | 0] = 0;
        $1 = $1 + $9 | 0;
        std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($1, $10 + 15 | 0);
        break block4;
       }
       $13 = ($1 - $9 | 0) + $3 | 0;
      }
      if (!global$9 | ($12 | 0) == 7) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($6, $9, $13, $3, $3, 0, $1, $8);
       $11 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $1 = $10 + 16 | 0;
      __stack_pointer = $1;
     }
     if (!global$9 | ($12 | 0) == 8) {
      $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
      $11 = 8;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $7;
     }
    }
    if (!global$9) {
     $1 = $4 + 16 | 0;
     __stack_pointer = $1;
    }
   }
   if (!global$9) {
    $2 = $0 + 136 | 0;
    $1 = $0 + 140 | 0;
   }
   if (!global$9 | ($12 | 0) == 9) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $2);
    $11 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
    }
    $2 = HEAP32[$0 + 140 >> 2];
    $1 = $0 + 16 | 0;
   }
   if (!global$9 | ($12 | 0) == 10) {
    std____2__locale___locale_28_29($1);
    $11 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($12 | 0) == 11) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($14);
    $11 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 144 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[$7 + 32 >> 2] = $9;
  HEAP32[$7 + 36 >> 2] = $10;
  HEAP32[$7 + 40 >> 2] = $13;
  HEAP32[$7 + 44 >> 2] = $14;
  HEAP32[$7 + 48 >> 2] = $15;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 52;
  return 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_without_replace_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $3 = HEAP32[$5 + 8 >> 2];
   $4 = HEAP32[$5 + 12 >> 2];
   $6 = HEAP32[$5 + 16 >> 2];
   $7 = HEAP32[$5 + 20 >> 2];
   $8 = HEAP32[$5 + 24 >> 2];
   $5 = HEAP32[$5 + 28 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $8 = 2147483639 - $1 >>> 0 >= $2 >>> 0;
   $7 = 2147483639;
  }
  block : {
   block1 : {
    if ((global$9 | 0) == 2 | $8) {
     if (!global$9) {
      $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
      $5 = $6 + 4 | 0;
      if (($7 >>> 1 | 0) - 8 >>> 0 > $1 >>> 0) {
       HEAP32[$6 + 12 >> 2] = $1 << 1;
       HEAP32[$6 + 4 >> 2] = $1 + $2;
       $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn190106_5d_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($5, $6 + 12 | 0) >> 2]) + 1 | 0;
      }
     }
     if (!global$9 | !$9) {
      auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($5, $7);
      $2 = 0;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $7 = HEAP32[$6 + 4 >> 2];
      if ($4) {
       std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($7, $8, $4)
      }
      if (($3 | 0) != ($4 | 0)) {
       std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($4 + $7 | 0, $4 + $8 | 0, $3 - $4 | 0)
      }
      $1 = ($1 | 0) != 10;
     }
     if (!global$9 | ($9 | 0) == 1 ? (global$9 | 0) == 2 | $1 : 0) {
      std____2__allocator_traits_std____2__allocator_char____deallocate_5babi_nn190106_5d_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($8);
      $2 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $7);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$6 + 8 >> 2]);
      __stack_pointer = $6 + 16 | 0;
      break block1;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $3)
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $6;
  HEAP32[$2 + 20 >> 2] = $7;
  HEAP32[$2 + 24 >> 2] = $8;
  HEAP32[$2 + 28 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$9;
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  if ($3) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1);
   if ((global$9 | 0) != ($2 | 0)) {
    wasm2js_trap()
   }
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_char_2c_20true___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78488);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$1 >> 2] + 44 >> 2];
  block : {
   if (!global$9 | !$3) {
    FUNCTION_TABLE[$2 | 0]($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$1 >> 2] + 32 >> 2];
  block : {
   if (!global$9 | !$3) {
    FUNCTION_TABLE[$2 | 0]($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 36 >> 2];
  block : {
   if (!global$9 | !$2) {
    $2 = FUNCTION_TABLE[$1 | 0]($0) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_char_2c_20false___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78480);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2____wrap_iter_char____operator__5babi_nn190106_5d_28long_29_20const($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 >> 2];
  $0 = $2 + 12 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $1;
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  return $1;
 }
 
 function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__5babi_nn190106_5d_28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $1) {
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_5babi_nn190106_5d_28_29($1)
  }
  block : {
   if (!global$9 | !$3) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($0, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $1 = HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_5babi_nn190106_5d_28_29($1) >> 2];
    (wasm2js_i32$0 = std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_5babi_nn190106_5d_28_29($0), wasm2js_i32$1 = $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 56;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 624 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 616 >> 2] = $2;
   HEAP32[$0 + 620 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = 283;
   $11 = $0 + 16 | 0;
   $1 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 200 | 0, $0 + 208 | 0, $11);
   $8 = $0 + 192 | 0;
   std____2__ios_base__getloc_28_29_20const($8, $4);
  }
  block : {
   if (!global$9 | !$9) {
    $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($8);
    if ((global$9 | 0) == 1) {
     break block
    }
    $8 = $7;
   }
   if (!global$9) {
    HEAP8[$0 + 191 | 0] = 0;
    $11 = $0 + 620 | 0;
    $13 = $0 + 192 | 0;
    $14 = $0 + 191 | 0;
    $15 = $0 + 196 | 0;
    $16 = $0 + 608 | 0;
    $4 = HEAP32[$4 + 4 >> 2];
   }
   if (!global$9 | ($9 | 0) == 1) {
    $7 = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($11, $2, $3, $13, $4, $5, $14, $8, $1, $15, $16);
    $10 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $7;
   }
   $2 = global$9 ? $2 : !$2;
   block1 : {
    if (!global$9) {
     if ($2) {
      break block1
     }
     $2 = HEAPU8[11444] | HEAPU8[11445] << 8 | (HEAPU8[11446] << 16 | HEAPU8[11447] << 24);
     HEAP8[$0 + 183 | 0] = $2;
     HEAP8[$0 + 184 | 0] = $2 >>> 8;
     HEAP8[$0 + 185 | 0] = $2 >>> 16;
     HEAP8[$0 + 186 | 0] = $2 >>> 24;
     $2 = HEAPU8[11441] | HEAPU8[11442] << 8 | (HEAPU8[11443] << 16 | HEAPU8[11444] << 24);
     HEAP32[$0 + 176 >> 2] = HEAPU8[11437] | HEAPU8[11438] << 8 | (HEAPU8[11439] << 16 | HEAPU8[11440] << 24);
     HEAP32[$0 + 180 >> 2] = $2;
     $3 = $0 + 186 | 0;
     $4 = $0 + 128 | 0;
     $2 = $0 + 176 | 0;
    }
    if (!global$9 | ($9 | 0) == 2) {
     std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($8, $2, $3, $4);
     $10 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAP32[$0 + 16 >> 2] = 282;
     $4 = $0 + 16 | 0;
     $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $4);
     $3 = HEAP32[$1 >> 2];
     $2 = (HEAP32[$0 + 196 >> 2] - $3 | 0) >= 393;
    }
    block2 : {
     if ((global$9 | 0) == 2 | $2) {
      if (!global$9) {
       $3 = HEAP32[$1 >> 2];
       $2 = (HEAP32[$0 + 196 >> 2] - $3 >> 2) + 2 | 0;
      }
      if (!global$9 | ($9 | 0) == 3) {
       $7 = emscripten_builtin_malloc($2);
       $10 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $7;
      }
      if (!global$9 | ($9 | 0) == 4) {
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($8, $2);
       $10 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = !HEAP32[$8 >> 2];
       if ($2) {
        break block2
       }
       $4 = HEAP32[$8 >> 2];
      }
     }
     if (!global$9) {
      if (HEAPU8[$0 + 191 | 0] == 1) {
       HEAP8[$4 | 0] = 45;
       $4 = $4 + 1 | 0;
      }
      $2 = HEAP32[$1 >> 2];
     }
     while (1) {
      $3 = global$9 ? $3 : HEAPU32[$0 + 196 >> 2] <= $2 >>> 0;
      $12 = global$9 ? $12 : $3;
      if ($12 | (global$9 | 0) == 2) {
       block3 : {
        if (!global$9) {
         HEAP8[$4 | 0] = 0;
         HEAP32[$0 >> 2] = $6;
         $2 = $0 + 16 | 0;
        }
        if (!global$9 | ($9 | 0) == 5) {
         $7 = sscanf($2, $0);
         $10 = 5;
         if ((global$9 | 0) == 1) {
          break block
         }
         $2 = $7;
        }
        if (!global$9) {
         $2 = ($2 | 0) != 1;
         if ($2) {
          break block3
         }
        }
        if (!global$9 | ($9 | 0) == 6) {
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($8);
         $10 = 6;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         break block1
        }
       }
      }
      if (!global$9 & (!$12 | (global$9 | 0) == 2)) {
       $3 = $0 + 128 | 0;
       $3 = HEAPU8[($0 + 176 | 0) + (wchar_t_20const__20std____2__find_5babi_nn190106_5d_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($3, $0 + 168 | 0, $2) - $3 >> 2) | 0];
       HEAP8[$4 | 0] = $3;
       $4 = $4 + 1 | 0;
       $2 = $2 + 4 | 0;
       continue;
      }
      break;
     };
     if (!global$9) {
      std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
      wasm2js_trap();
     }
    }
    if (!global$9) {
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    $3 = $0 + 616 | 0;
    $2 = $0 + 620 | 0;
   }
   if (!global$9 | ($9 | 0) == 7) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($2, $3);
    $10 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $7;
   }
   if (!global$9) {
    if ($2) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
    }
    $3 = $0 + 192 | 0;
    $2 = HEAP32[$0 + 620 >> 2];
   }
   if (!global$9 | ($9 | 0) == 8) {
    std____2__locale___locale_28_29($3);
    $10 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($9 | 0) == 9) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($1);
    $10 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 624 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $8;
  HEAP32[$7 + 32 >> 2] = $11;
  HEAP32[$7 + 36 >> 2] = $12;
  HEAP32[$7 + 40 >> 2] = $13;
  HEAP32[$7 + 44 >> 2] = $14;
  HEAP32[$7 + 48 >> 2] = $15;
  HEAP32[$7 + 52 >> 2] = $16;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 56;
  return 0;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 84;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $9 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $20 = HEAP32[$1 + 64 >> 2];
   $23 = HEAP32[$1 + 68 >> 2];
   $21 = HEAP32[$1 + 72 >> 2];
   $22 = HEAP32[$1 + 76 >> 2];
   $19 = HEAP32[$1 + 80 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $14 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $12 = __stack_pointer - 528 | 0;
   __stack_pointer = $12;
   HEAP32[$12 + 520 >> 2] = $10;
   HEAP32[$12 + 524 >> 2] = $1;
   $1 = $12 + 524 | 0;
  }
  block : {
   if (!global$9 | !$14) {
    $11 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $11;
   }
   block1 : {
    if (!global$9) {
     if ($1) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $0 = 0;
      break block1;
     }
     HEAP32[$12 + 72 >> 2] = 283;
     $19 = $12 + 104 | 0;
     $10 = $12 + 72 | 0;
     $18 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($19, $12 + 112 | 0, $10);
     $1 = HEAP32[$18 >> 2];
     HEAP32[$12 + 100 >> 2] = $1;
     HEAP32[$12 + 96 >> 2] = $1 + 400;
     $21 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($10);
     $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($12 + 60 | 0);
     $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($12 + 48 | 0);
     $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($12 + 36 | 0);
     $20 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($12 + 24 | 0);
     $22 = $12 + 88 | 0;
     $23 = $12 + 84 | 0;
     $1 = __stack_pointer - 16 | 0;
     __stack_pointer = $1;
     $10 = $12 + 92 | 0;
    }
    block2 : {
     if ((global$9 | 0) == 2 | $2) {
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 1) {
       $11 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_wchar_t_2c_20true___28std____2__locale_20const__29($3);
       $13 = 1;
       if ((global$9 | 0) == 1) {
        break block
       }
       $3 = $11;
      }
      if (!global$9 | ($14 | 0) == 2) {
       std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 2;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $2 = HEAP32[$1 + 4 >> 2];
       HEAP8[$10 | 0] = $2;
       HEAP8[$10 + 1 | 0] = $2 >>> 8;
       HEAP8[$10 + 2 | 0] = $2 >>> 16;
       HEAP8[$10 + 3 | 0] = $2 >>> 24;
       $2 = $1 + 4 | 0;
      }
      if (!global$9 | ($14 | 0) == 3) {
       std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 4) {
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($16, $2);
       $13 = 4;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 5) {
       $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($2);
       $13 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 6) {
       std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 7) {
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($17, $2);
       $13 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 8) {
       $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($2);
       $13 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9 | ($14 | 0) == 9) {
       $11 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($3);
       $13 = 9;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9) {
       HEAP32[$22 >> 2] = $2
      }
      if (!global$9 | ($14 | 0) == 10) {
       $11 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($3);
       $13 = 10;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9) {
       HEAP32[$23 >> 2] = $2;
       $2 = $1 + 4 | 0;
      }
      if (!global$9 | ($14 | 0) == 11) {
       std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 11;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 12) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($21, $2);
       $13 = 12;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 13) {
       $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
       $13 = 13;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 14) {
       std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($2, $3);
       $13 = 14;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 15) {
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($15, $2);
       $13 = 15;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $2 = global$9 ? $2 : $1 + 4 | 0;
      if (!global$9 | ($14 | 0) == 16) {
       $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($2);
       $13 = 16;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9 | ($14 | 0) == 17) {
       $11 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($3);
       $13 = 17;
       if ((global$9 | 0) == 1) {
        break block
       }
       $2 = $11;
      }
      if (!global$9) {
       break block2
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 18) {
      $11 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_wchar_t_2c_20false___28std____2__locale_20const__29($3);
      $13 = 18;
      if ((global$9 | 0) == 1) {
       break block
      }
      $3 = $11;
     }
     if (!global$9 | ($14 | 0) == 19) {
      std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 19;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = HEAP32[$1 + 4 >> 2];
      HEAP8[$10 | 0] = $2;
      HEAP8[$10 + 1 | 0] = $2 >>> 8;
      HEAP8[$10 + 2 | 0] = $2 >>> 16;
      HEAP8[$10 + 3 | 0] = $2 >>> 24;
      $2 = $1 + 4 | 0;
     }
     if (!global$9 | ($14 | 0) == 20) {
      std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 20;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 21) {
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($16, $2);
      $13 = 21;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 22) {
      $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($2);
      $13 = 22;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 23) {
      std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 23;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 24) {
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($17, $2);
      $13 = 24;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 25) {
      $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($2);
      $13 = 25;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     if (!global$9 | ($14 | 0) == 26) {
      $11 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($3);
      $13 = 26;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     if (!global$9) {
      HEAP32[$22 >> 2] = $2
     }
     if (!global$9 | ($14 | 0) == 27) {
      $11 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($3);
      $13 = 27;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     if (!global$9) {
      HEAP32[$23 >> 2] = $2;
      $2 = $1 + 4 | 0;
     }
     if (!global$9 | ($14 | 0) == 28) {
      std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 28;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 29) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($21, $2);
      $13 = 29;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 30) {
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
      $13 = 30;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 31) {
      std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($2, $3);
      $13 = 31;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 32) {
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($15, $2);
      $13 = 32;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $2 = global$9 ? $2 : $1 + 4 | 0;
     if (!global$9 | ($14 | 0) == 33) {
      $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($2);
      $13 = 33;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
     if (!global$9 | ($14 | 0) == 34) {
      $11 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($3);
      $13 = 34;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $11;
     }
    }
    if (!global$9) {
     HEAP32[$12 + 20 >> 2] = $2;
     __stack_pointer = $1 + 16 | 0;
     HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
     $22 = $4 & 512;
     $3 = 0;
     $1 = 0;
    }
    while (1) {
     if (!global$9) {
      $4 = ($3 | 0) == 4;
      $2 = $1;
     }
     block9 : {
      block10 : {
       block12 : {
        block3 : {
         if (!global$9) {
          if ($4) {
           break block3
          }
          $4 = $12 + 524 | 0;
         }
         if (!global$9 | ($14 | 0) == 35) {
          $11 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $4);
          $13 = 35;
          if ((global$9 | 0) == 1) {
           break block
          }
          $4 = $11;
         }
         if (!global$9) {
          if ($4) {
           break block3
          }
          $10 = 0;
          $4 = HEAPU8[($12 + 92 | 0) + $3 | 0];
         }
         block8 : {
          block6 : {
           block7 : {
            block11 : {
             block4 : {
              if (!global$9) {
               block5 : {
                switch ($4 | 0) {
                case 0:
                 break block4;
                case 1:
                 break block5;
                case 2:
                 break block6;
                case 3:
                 break block7;
                case 4:
                 break block8;
                default:
                 break block9;
                };
               }
               $1 = ($3 | 0) == 3;
               if ($1) {
                break block10
               }
              }
              if (!global$9 | ($14 | 0) == 36) {
               $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
               $13 = 36;
               if ((global$9 | 0) == 1) {
                break block
               }
               $1 = $11;
              }
              if (!global$9 | ($14 | 0) == 37) {
               $11 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 1, $1);
               $13 = 37;
               if ((global$9 | 0) == 1) {
                break block
               }
               $1 = $11;
              }
              if ((global$9 | 0) == 2 | $1) {
               $1 = global$9 ? $1 : $12 + 12 | 0;
               if (!global$9 | ($14 | 0) == 38) {
                std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28int_29($1, $0);
                $13 = 38;
                if ((global$9 | 0) == 1) {
                 break block
                }
               }
               $1 = global$9 ? $1 : HEAP32[$12 + 12 >> 2];
               if (!global$9 | ($14 | 0) == 39) {
                std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____push_back_28wchar_t_29($20, $1);
                $13 = 39;
                if ((global$9 | 0) == 1) {
                 break block
                }
               }
               if (!global$9) {
                break block11
               }
              }
              if (!global$9) {
               HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
               $0 = 0;
               break block12;
              }
             }
             if (!global$9) {
              $1 = ($3 | 0) == 3;
              if ($1) {
               break block10
              }
             }
            }
            while (1) {
             $1 = global$9 ? $1 : $12 + 524 | 0;
             if (!global$9 | ($14 | 0) == 40) {
              $11 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
              $13 = 40;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!($1 ? global$9 : 1)) {
              break block10
             }
             if (!global$9 | ($14 | 0) == 41) {
              $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
              $13 = 41;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!global$9 | ($14 | 0) == 42) {
              $11 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 1, $1);
              $13 = 42;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!global$9) {
              $1 = !$1;
              if ($1) {
               break block10
              }
              $1 = $12 + 12 | 0;
             }
             if (!global$9 | ($14 | 0) == 43) {
              std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28int_29($1, $0);
              $13 = 43;
              if ((global$9 | 0) == 1) {
               break block
              }
             }
             $1 = global$9 ? $1 : HEAP32[$12 + 12 >> 2];
             if (!global$9 | ($14 | 0) == 44) {
              std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____push_back_28wchar_t_29($20, $1);
              $13 = 44;
              if ((global$9 | 0) == 1) {
               break block
              }
             }
             if (!global$9) {
              continue
             }
             break;
            };
           }
           if (!global$9) {
            $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17)
           }
           block13 : {
            if (!($1 ? global$9 : 1)) {
             break block13
            }
            if (!global$9 | ($14 | 0) == 45) {
             $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 45;
             if ((global$9 | 0) == 1) {
              break block
             }
             $4 = $11;
            }
            if (!global$9) {
             $1 = HEAP32[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($17) >> 2] != ($4 | 0);
             if ($1) {
              break block13
             }
            }
            if (!global$9 | ($14 | 0) == 46) {
             $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
             $13 = 46;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             HEAP8[$6 | 0] = 0;
             $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17) >>> 0 > 1 ? $17 : $2;
             break block9;
            }
           }
           if (!global$9) {
            $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16)
           }
           block14 : {
            if (!($1 ? global$9 : 1)) {
             break block14
            }
            if (!global$9 | ($14 | 0) == 47) {
             $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 47;
             if ((global$9 | 0) == 1) {
              break block
             }
             $4 = $11;
            }
            if (!global$9) {
             $1 = HEAP32[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($16) >> 2] != ($4 | 0);
             if ($1) {
              break block14
             }
            }
            if (!global$9 | ($14 | 0) == 48) {
             $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
             $13 = 48;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             HEAP8[$6 | 0] = 1;
             $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16) >>> 0 > 1 ? $16 : $2;
             break block9;
            }
           }
           if (!global$9) {
            block15 : {
             if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17)) {
              break block15
             }
             $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16);
             if ($1) {
              break block15
             }
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break block12;
            }
            if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17)) {
             $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16);
             if ($1) {
              break block10
             }
            }
            $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($16);
            HEAP8[$6 | 0] = $1;
            break block10;
           }
          }
          if (!global$9) {
           if (!($22 | ($3 >>> 0 < 2 | $2))) {
            $1 = 0;
            $10 = ($3 | 0) == 2;
            $4 = !($10 & HEAPU8[$12 + 95 | 0] != 0);
            if ($4) {
             break block9
            }
           }
           (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           $4 = $12 + 12 | 0;
           $10 = std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_void_20_28__29_28void__29_2c_200__28void_20_28____29_28void__29_29($4, $12 + 8 | 0);
           $1 = !$3;
          }
          block17 : {
           if (!global$9) {
            if ($1) {
             break block17
            }
            $1 = HEAPU8[($3 + $12 | 0) + 91 | 0] > 1;
            if ($1) {
             break block17
            }
           }
           while (1) {
            block18 : {
             if (!global$9) {
              (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
              $1 = bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($10, $12 + 8 | 0);
              if ($1) {
               break block18
              }
              $1 = HEAP32[HEAP32[$10 >> 2] >> 2];
             }
             if (!global$9 | ($14 | 0) == 49) {
              $11 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 1, $1);
              $13 = 49;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!global$9) {
              $1 = !$1;
              if ($1) {
               break block18
              }
              std____2____wrap_iter_wchar_t____operator___5babi_nn190106_5d_28_29($10);
              continue;
             }
            }
            break;
           };
           if (!global$9) {
            (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
            $1 = HEAP32[$10 >> 2] - HEAP32[$12 + 8 >> 2] >> 2;
            if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($20) >>> 0 >= $1 >>> 0) {
             (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($20)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
             $1 = std____2____wrap_iter_wchar_t____operator__5babi_nn190106_5d_28long_29_20const($12 + 8 | 0, 0 - $1 | 0);
             $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($20);
             $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($15);
             $13 = __stack_pointer - 16 | 0;
             __stack_pointer = $13;
             $1 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($1);
             $4 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($4);
             $19 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($11);
             $4 = $4 - $1 & -4;
             $23 = !memcmp($1, $19, $4);
             $1 = $13 + 16 | 0;
             __stack_pointer = $1;
             if ($23) {
              break block17
             }
            }
            (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
            $4 = $12 + 8 | 0;
            $1 = HEAP32[std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_void_20_28__29_28void__29_2c_200__28void_20_28____29_28void__29_29($4, $12 + 4 | 0) >> 2];
            HEAP32[$10 >> 2] = $1;
           }
          }
          if (!global$9) {
           $1 = HEAP32[$10 >> 2];
           HEAP32[$12 + 8 >> 2] = $1;
          }
          while (1) {
           block19 : {
            if (!global$9) {
             (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
             $4 = $12 + 8 | 0;
             $1 = bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($4, $12 + 4 | 0);
             if ($1) {
              break block19
             }
             $1 = $12 + 524 | 0;
            }
            if (!global$9 | ($14 | 0) == 50) {
             $11 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
             $13 = 50;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!($1 ? global$9 : 1)) {
             break block19
            }
            if (!global$9 | ($14 | 0) == 51) {
             $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 51;
             if ((global$9 | 0) == 1) {
              break block
             }
             $4 = $11;
            }
            if (!global$9) {
             $1 = HEAP32[HEAP32[$12 + 8 >> 2] >> 2] != ($4 | 0);
             if ($1) {
              break block19
             }
            }
            if (!global$9 | ($14 | 0) == 52) {
             $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
             $13 = 52;
             if ((global$9 | 0) == 1) {
              break block
             }
             $1 = $11;
            }
            if (!global$9) {
             $1 = $12 + 8 | 0;
             std____2____wrap_iter_wchar_t____operator___5babi_nn190106_5d_28_29($1);
             continue;
            }
           }
           break;
          };
          if (!global$9) {
           $1 = !$22;
           if ($1) {
            break block10
           }
           (wasm2js_i32$0 = $12, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($15)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
           $4 = $12 + 8 | 0;
           $1 = bool_20std____2__operator___5babi_nn190106_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($4, $12 + 4 | 0);
           if ($1) {
            break block10
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break block12;
          }
         }
         while (1) {
          block20 : {
           $1 = global$9 ? $1 : $12 + 524 | 0;
           if (!global$9 | ($14 | 0) == 53) {
            $11 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
            $13 = 53;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           if (!($1 ? global$9 : 1)) {
            break block20
           }
           if (!global$9 | ($14 | 0) == 54) {
            $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
            $13 = 54;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           if (!global$9 | ($14 | 0) == 55) {
            $11 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 64, $1);
            $13 = 55;
            if ((global$9 | 0) == 1) {
             break block
            }
            $4 = $11;
           }
           block21 : {
            if ((global$9 | 0) == 2 | $4) {
             if (!global$9) {
              $4 = HEAP32[$9 >> 2];
              $19 = ($4 | 0) == HEAP32[$12 + 520 >> 2];
             }
             if ((global$9 | 0) == 2 | $19) {
              $4 = global$9 ? $4 : $12 + 520 | 0;
              if (!global$9 | ($14 | 0) == 56) {
               void_20std____2____double_or_nothing_5babi_nn190106_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($8, $9, $4);
               $13 = 56;
               if ((global$9 | 0) == 1) {
                break block
               }
              }
              if (!global$9) {
               $4 = HEAP32[$9 >> 2]
              }
             }
             if (!global$9) {
              $19 = $4 + 4 | 0;
              HEAP32[$9 >> 2] = $19;
              HEAP32[$4 >> 2] = $1;
              $10 = $10 + 1 | 0;
              break block21;
             }
            }
            if (!global$9) {
             $4 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($21);
             if ($4) {
              break block20
             }
             $4 = !$10;
             if ($4) {
              break block20
             }
             $4 = HEAP32[$12 + 84 >> 2];
             $1 = ($4 | 0) != ($1 | 0);
             if ($1) {
              break block20
             }
             $1 = HEAP32[$12 + 100 >> 2];
             $4 = ($1 | 0) == HEAP32[$12 + 96 >> 2];
            }
            if ((global$9 | 0) == 2 | $4) {
             if (!global$9) {
              $4 = $12 + 100 | 0;
              $1 = $12 + 96 | 0;
             }
             if (!global$9 | ($14 | 0) == 57) {
              void_20std____2____double_or_nothing_5babi_nn190106_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($18, $4, $1);
              $13 = 57;
              if ((global$9 | 0) == 1) {
               break block
              }
             }
             if (!global$9) {
              $1 = HEAP32[$12 + 100 >> 2]
             }
            }
            if (!global$9) {
             $4 = $1 + 4 | 0;
             HEAP32[$12 + 100 >> 2] = $4;
             HEAP32[$1 >> 2] = $10;
             $10 = 0;
            }
           }
           if (!global$9 | ($14 | 0) == 58) {
            $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
            $13 = 58;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           if (!global$9) {
            continue
           }
          }
          break;
         };
         if (!global$9) {
          $1 = HEAP32[$12 + 100 >> 2];
          $4 = ($1 | 0) == HEAP32[$18 >> 2];
         }
         block22 : {
          if (!global$9) {
           if ($4) {
            break block22
           }
           $4 = !$10;
           if ($4) {
            break block22
           }
           $4 = HEAP32[$12 + 96 >> 2] == ($1 | 0);
          }
          if ((global$9 | 0) == 2 | $4) {
           if (!global$9) {
            $4 = $12 + 100 | 0;
            $1 = $12 + 96 | 0;
           }
           if (!global$9 | ($14 | 0) == 59) {
            void_20std____2____double_or_nothing_5babi_nn190106_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($18, $4, $1);
            $13 = 59;
            if ((global$9 | 0) == 1) {
             break block
            }
           }
           if (!global$9) {
            $1 = HEAP32[$12 + 100 >> 2]
           }
          }
          if (!global$9) {
           $4 = $1 + 4 | 0;
           HEAP32[$12 + 100 >> 2] = $4;
           HEAP32[$1 >> 2] = $10;
          }
         }
         $1 = global$9 ? $1 : HEAP32[$12 + 20 >> 2] <= 0;
         block23 : {
          if (!global$9) {
           if ($1) {
            break block23
           }
           $1 = $12 + 524 | 0;
          }
          if (!global$9 | ($14 | 0) == 60) {
           $11 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
           $13 = 60;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $11;
          }
          $1 = global$9 ? $1 : !$1;
          block24 : {
           if ($1 | (global$9 | 0) == 2) {
            if (!global$9 | ($14 | 0) == 61) {
             $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 61;
             if ((global$9 | 0) == 1) {
              break block
             }
             $4 = $11;
            }
            if (!global$9) {
             $1 = HEAP32[$12 + 88 >> 2] == ($4 | 0);
             if ($1) {
              break block24
             }
            }
           }
           if (!global$9) {
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
            $0 = 0;
            break block12;
           }
          }
          while (1) {
           if (!global$9 | ($14 | 0) == 62) {
            $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
            $13 = 62;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           if (!global$9) {
            $1 = HEAP32[$12 + 20 >> 2] <= 0;
            if ($1) {
             break block23
            }
            $1 = $12 + 524 | 0;
           }
           if (!global$9 | ($14 | 0) == 63) {
            $11 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
            $13 = 63;
            if ((global$9 | 0) == 1) {
             break block
            }
            $1 = $11;
           }
           $1 = global$9 ? $1 : !$1;
           block25 : {
            if ($1 | (global$9 | 0) == 2) {
             if (!global$9 | ($14 | 0) == 64) {
              $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
              $13 = 64;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!global$9 | ($14 | 0) == 65) {
              $11 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 64, $1);
              $13 = 65;
              if ((global$9 | 0) == 1) {
               break block
              }
              $1 = $11;
             }
             if (!($1 ? global$9 : 1)) {
              break block25
             }
            }
            if (!global$9) {
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break block12;
            }
           }
           if (!global$9) {
            $4 = HEAP32[$9 >> 2];
            $1 = ($4 | 0) == HEAP32[$12 + 520 >> 2];
           }
           if ((global$9 | 0) == 2 | $1) {
            $1 = global$9 ? $1 : $12 + 520 | 0;
            if (!global$9 | ($14 | 0) == 66) {
             void_20std____2____double_or_nothing_5babi_nn190106_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($8, $9, $1);
             $13 = 66;
             if ((global$9 | 0) == 1) {
              break block
             }
            }
           }
           if (!global$9 | ($14 | 0) == 67) {
            $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
            $13 = 67;
            if ((global$9 | 0) == 1) {
             break block
            }
            $10 = $11;
           }
           if (!global$9) {
            $1 = HEAP32[$9 >> 2];
            $4 = $1 + 4 | 0;
            HEAP32[$9 >> 2] = $4;
            HEAP32[$1 >> 2] = $10;
            $1 = HEAP32[$12 + 20 >> 2] - 1 | 0;
            HEAP32[$12 + 20 >> 2] = $1;
            continue;
           }
           break;
          };
         }
         if (!global$9) {
          $1 = $2;
          $4 = HEAP32[$8 >> 2];
          $2 = ($4 | 0) != HEAP32[$9 >> 2];
          if ($2) {
           break block9
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break block12;
         }
        }
        $1 = global$9 ? $1 : !$2;
        block26 : {
         if (!global$9) {
          if ($1) {
           break block26
          }
          $10 = 1;
         }
         while (1) {
          if (!global$9) {
           $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($2) >>> 0 <= $10 >>> 0;
           if ($1) {
            break block26
           }
           $1 = $12 + 524 | 0;
          }
          if (!global$9 | ($14 | 0) == 68) {
           $11 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1);
           $13 = 68;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $11;
          }
          $1 = global$9 ? $1 : !$1;
          block27 : {
           if ($1 | (global$9 | 0) == 2) {
            if (!global$9 | ($14 | 0) == 69) {
             $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn190106_5d_28_29_20const($0);
             $13 = 69;
             if ((global$9 | 0) == 1) {
              break block
             }
             $3 = $11;
            }
            if (!global$9) {
             $1 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($2, $10) >> 2] == ($3 | 0);
             if ($1) {
              break block27
             }
            }
           }
           if (!global$9) {
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
            $0 = 0;
            break block12;
           }
          }
          if (!global$9 | ($14 | 0) == 70) {
           $11 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28_29($0);
           $13 = 70;
           if ((global$9 | 0) == 1) {
            break block
           }
           $1 = $11;
          }
          if (!global$9) {
           $10 = $10 + 1 | 0;
           continue;
          }
          break;
         };
        }
        if (!global$9) {
         $0 = 1;
         $2 = HEAP32[$18 >> 2];
         $1 = ($2 | 0) == HEAP32[$12 + 100 >> 2];
         if ($1) {
          break block12
         }
         $0 = 0;
         HEAP32[$12 + 12 >> 2] = 0;
         $3 = HEAP32[$18 >> 2];
         $2 = HEAP32[$12 + 100 >> 2];
         std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($21, $3, $2, $12 + 12 | 0);
         $1 = HEAP32[$12 + 12 >> 2];
         if ($1) {
          $1 = HEAP32[$5 >> 2] | 4;
          HEAP32[$5 >> 2] = $1;
          break block12;
         }
         $0 = 1;
        }
       }
       if (!global$9 | ($14 | 0) == 71) {
        $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($20);
        $13 = 71;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 72) {
        $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($16);
        $13 = 72;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 73) {
        $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($17);
        $13 = 73;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 74) {
        $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($15);
        $13 = 74;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 75) {
        $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($21);
        $13 = 75;
        if ((global$9 | 0) == 1) {
         break block
        }
        $1 = $11;
       }
       if (!global$9 | ($14 | 0) == 76) {
        std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($18);
        $13 = 76;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        break block1
       }
      }
      $1 = global$9 ? $1 : $2;
     }
     if (!global$9) {
      $3 = $3 + 1 | 0;
      continue;
     }
     break;
    };
   }
   if (!global$9) {
    __stack_pointer = $12 + 528 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $11 = HEAP32[global$10 >> 2];
  HEAP32[$11 >> 2] = $0;
  HEAP32[$11 + 4 >> 2] = $1;
  HEAP32[$11 + 8 >> 2] = $2;
  HEAP32[$11 + 12 >> 2] = $3;
  HEAP32[$11 + 16 >> 2] = $4;
  HEAP32[$11 + 20 >> 2] = $5;
  HEAP32[$11 + 24 >> 2] = $6;
  HEAP32[$11 + 28 >> 2] = $7;
  HEAP32[$11 + 32 >> 2] = $8;
  HEAP32[$11 + 36 >> 2] = $9;
  HEAP32[$11 + 40 >> 2] = $10;
  HEAP32[$11 + 44 >> 2] = $12;
  HEAP32[$11 + 48 >> 2] = $15;
  HEAP32[$11 + 52 >> 2] = $16;
  HEAP32[$11 + 56 >> 2] = $17;
  HEAP32[$11 + 60 >> 2] = $18;
  HEAP32[$11 + 64 >> 2] = $20;
  HEAP32[$11 + 68 >> 2] = $23;
  HEAP32[$11 + 72 >> 2] = $21;
  HEAP32[$11 + 76 >> 2] = $22;
  HEAP32[$11 + 80 >> 2] = $19;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 84;
  return 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn190106_5d_28int_29($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[$1 >> 2];
  block : {
   if (!global$9 | !$3) {
    $3 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sbumpc_5babi_nn190106_5d_28_29($2);
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $3;
   }
   if (!global$9) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 >> 2] = $2;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 52;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $12 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 448 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 440 >> 2] = $2;
   HEAP32[$0 + 444 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = 283;
   $8 = $0 + 32 | 0;
   $10 = $0 + 20 | 0;
   $14 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $8, $10);
   $1 = $0 + 16 | 0;
   std____2__ios_base__getloc_28_29_20const($1, $4);
  }
  block : {
   if (!global$9 | !$12) {
    $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    HEAP8[$0 + 15 | 0] = 0;
    $8 = $0 + 444 | 0;
    $10 = $0 + 16 | 0;
    $9 = $0 + 15 | 0;
    $13 = $0 + 20 | 0;
    $15 = $0 + 432 | 0;
    $4 = HEAP32[$4 + 4 >> 2];
   }
   if (!global$9 | ($12 | 0) == 1) {
    $7 = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($8, $2, $3, $10, $4, $5, $9, $1, $14, $13, $15);
    $11 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $7;
   }
   if ((global$9 | 0) == 2 | $2) {
    if (!global$9) {
     $2 = __stack_pointer - 16 | 0;
     __stack_pointer = $2;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6);
     block1 : {
      if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($6)) {
       $3 = HEAP32[$6 >> 2];
       HEAP32[$2 + 12 >> 2] = 0;
       $4 = $2 + 12 | 0;
       std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($3, $4);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($6, 0);
       break block1;
      }
      HEAP32[$2 + 8 >> 2] = 0;
      $3 = $2 + 8 | 0;
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($6, $3);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($6, 0);
     }
     __stack_pointer = $2 + 16 | 0;
     $2 = HEAPU8[$0 + 15 | 0] == 1;
    }
    if ((global$9 | 0) == 2 | $2) {
     if (!global$9 | ($12 | 0) == 2) {
      $7 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($1, 45);
      $11 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $7;
     }
     if (!global$9 | ($12 | 0) == 3) {
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____push_back_28wchar_t_29($6, $2);
      $11 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9 | ($12 | 0) == 4) {
     $7 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($1, 48);
     $11 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $7;
    }
    if (!global$9) {
     $2 = HEAP32[$14 >> 2];
     $3 = HEAP32[$0 + 20 >> 2];
     $4 = $3 - 4 | 0;
     while (1) {
      if (!(HEAP32[$2 >> 2] != ($1 | 0) | $2 >>> 0 >= $4 >>> 0)) {
       $2 = $2 + 4 | 0;
       continue;
      }
      break;
     };
     $4 = __stack_pointer - 16 | 0;
     __stack_pointer = $4;
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6);
     $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____capacity_5babi_nn190106_5d_28_29_20const($6);
     $10 = std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_5babi_nn190106_5d_wchar_t___28wchar_t__2c_20wchar_t__29($2, $3);
     $9 = !$10;
    }
    block3 : {
     if (!global$9) {
      if ($9) {
       break block3
      }
      $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($6);
      $13 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($6) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6) << 2) | 0) + 4 | 0;
      $9 = !bool_20std____2____is_pointer_in_range_5babi_nn190106_5d_char_2c_20char_2c_200__28char_20const__2c_20char_20const__2c_20char_20const__29($7, $13, $2);
     }
     $11 = (global$9 | 0) == 2;
     if ($11 | $9) {
      $9 = global$9 ? $9 : $8 - $1 >>> 0 < $10 >>> 0;
      if ($11 | $9) {
       $9 = global$9 ? $9 : ($1 - $8 | 0) + $10 | 0;
       if (!global$9 | ($12 | 0) == 5) {
        std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_without_replace_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($6, $8, $9, $1, $1);
        $11 = 5;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
      }
      if (!global$9) {
       $2 = wchar_t__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______copy_non_overlapping_range_5babi_nn190106_5d_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__2c_20wchar_t__29($2, $3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($6) + ($1 << 2) | 0);
       HEAP32[$4 + 4 >> 2] = 0;
       std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($2, $4 + 4 | 0);
       $1 = $1 + $10 | 0;
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn190106_5d_28unsigned_20long_29($6, $1);
       break block3;
      }
     }
     if (!global$9) {
      $8 = __stack_pointer - 16 | 0;
      __stack_pointer = $8;
      $1 = $4 + 4 | 0;
     }
     if (!global$9 | ($12 | 0) == 6) {
      void_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______init_wchar_t_20const__2c_200__28wchar_t_20const__2c_20wchar_t_20const__29($1, $2, $3);
      $11 = 6;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      __stack_pointer = $8 + 16 | 0;
      $2 = $1;
      $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($1);
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1);
      $10 = __stack_pointer - 16 | 0;
      __stack_pointer = $10;
      $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____capacity_5babi_nn190106_5d_28_29_20const($6);
      $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($6);
      $13 = $8 - $3 >>> 0 >= $1 >>> 0;
     }
     block4 : {
      if (!global$9) {
       if ($13) {
        if (!$1) {
         break block4
        }
        $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($6);
        std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($8 + ($3 << 2) | 0, $9, $1);
        $1 = $1 + $3 | 0;
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn190106_5d_28unsigned_20long_29($6, $1);
        HEAP32[$10 + 12 >> 2] = 0;
        $1 = ($1 << 2) + $8 | 0;
        std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($1, $10 + 12 | 0);
        break block4;
       }
       $13 = ($1 - $8 | 0) + $3 | 0;
      }
      if (!global$9 | ($12 | 0) == 7) {
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($6, $8, $13, $3, $3, 0, $1, $9);
       $11 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $1 = $10 + 16 | 0;
      __stack_pointer = $1;
     }
     if (!global$9 | ($12 | 0) == 8) {
      $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($2);
      $11 = 8;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $7;
     }
    }
    if (!global$9) {
     $1 = $4 + 16 | 0;
     __stack_pointer = $1;
    }
   }
   if (!global$9) {
    $2 = $0 + 440 | 0;
    $1 = $0 + 444 | 0;
   }
   if (!global$9 | ($12 | 0) == 9) {
    $7 = bool_20std____2__operator___5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $2);
    $11 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $7;
   }
   if (!global$9) {
    if ($1) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
    }
    $2 = HEAP32[$0 + 444 >> 2];
    $1 = $0 + 16 | 0;
   }
   if (!global$9 | ($12 | 0) == 10) {
    std____2__locale___locale_28_29($1);
    $11 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($12 | 0) == 11) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($14);
    $11 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 448 | 0;
    return $2 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[$7 + 28 >> 2] = $9;
  HEAP32[$7 + 32 >> 2] = $8;
  HEAP32[$7 + 36 >> 2] = $10;
  HEAP32[$7 + 40 >> 2] = $13;
  HEAP32[$7 + 44 >> 2] = $14;
  HEAP32[$7 + 48 >> 2] = $15;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 52;
  return 0;
 }
 
 function std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____capacity_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  if ($2) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
   $0 = $0 - 1 | 0;
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_5babi_nn190106_5d_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $0 = unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_without_replace_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $3 = HEAP32[$5 + 8 >> 2];
   $4 = HEAP32[$5 + 12 >> 2];
   $6 = HEAP32[$5 + 16 >> 2];
   $7 = HEAP32[$5 + 20 >> 2];
   $8 = HEAP32[$5 + 24 >> 2];
   $5 = HEAP32[$5 + 28 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $8 = 1073741815 - $1 >>> 0 >= $2 >>> 0;
   $7 = 1073741815;
  }
  block : {
   block1 : {
    if ((global$9 | 0) == 2 | $8) {
     if (!global$9) {
      $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
      $5 = $6 + 4 | 0;
      if (($7 >>> 1 | 0) - 8 >>> 0 > $1 >>> 0) {
       HEAP32[$6 + 12 >> 2] = $1 << 1;
       HEAP32[$6 + 4 >> 2] = $1 + $2;
       $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn190106_5d_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($5, $6 + 12 | 0) >> 2]) + 1 | 0;
      }
     }
     if (!global$9 | !$9) {
      auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_wchar_t___28std____2__allocator_wchar_t___2c_20unsigned_20long_29($5, $7);
      $2 = 0;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $7 = HEAP32[$6 + 4 >> 2];
      if ($4) {
       std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($7, $8, $4)
      }
      $2 = $4;
      if (($2 | 0) != ($3 | 0)) {
       $4 = $2 << 2;
       std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($7 + $4 | 0, $4 + $8 | 0, $3 - $2 | 0);
      }
      $1 = ($1 | 0) != 1;
     }
     if (!global$9 | ($9 | 0) == 1 ? (global$9 | 0) == 2 | $1 : 0) {
      std____2__allocator_wchar_t___deallocate_5babi_nn190106_5d_28wchar_t__2c_20unsigned_20long_29($8);
      $2 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $7);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$6 + 8 >> 2]);
      __stack_pointer = $6 + 16 | 0;
      break block1;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $3)
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $6;
  HEAP32[$2 + 20 >> 2] = $7;
  HEAP32[$2 + 24 >> 2] = $8;
  HEAP32[$2 + 28 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
 }
 
 function wchar_t__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______copy_non_overlapping_range_5babi_nn190106_5d_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$9;
  $4 = $0;
  $0 = $1 - $0 | 0;
  std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($2, $4, $0 >> 2);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  return $0 + $2 | 0;
 }
 
 function std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_wchar_t_2c_20true___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78504);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   $2 = HEAP32[$2 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
  }
  block : {
   if ((global$9 | 0) == 2 | $4) {
    if (!global$9) {
     $4 = HEAP32[$0 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0);
    }
    if (!global$9 | !$3) {
     std____2__allocator_wchar_t___deallocate_5babi_nn190106_5d_28wchar_t__2c_20unsigned_20long_29($4);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($1);
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    $3 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $3;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($1, 0);
    HEAP32[$2 + 12 >> 2] = 0;
    std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($1, $2 + 12 | 0);
    $1 = ($0 | 0) == ($1 | 0);
    if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0) | $1)) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn190106_5d_28_29_20const($0)
    }
    __stack_pointer = $2 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_wchar_t_2c_20false___28std____2__locale_20const__29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 78496);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2____wrap_iter_wchar_t____operator__5babi_nn190106_5d_28long_29_20const($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 >> 2];
  $0 = $2 + 12 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 108;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $19 = HEAP32[$1 + 64 >> 2];
   $20 = HEAP32[$1 + 68 >> 2];
   $21 = HEAP32[$1 + 72 >> 2];
   $22 = HEAP32[$1 + 76 >> 2];
   $23 = HEAP32[$1 + 80 >> 2];
   $24 = HEAP32[$1 + 84 >> 2];
   $25 = HEAP32[$1 + 88 >> 2];
   $26 = HEAP32[$1 + 92 >> 2];
   $27 = HEAP32[$1 + 96 >> 2];
   $28 = HEAP32[$1 + 100 >> 2];
   $29 = HEAP32[$1 + 104 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 448 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 16 >> 2] = $5;
   HEAP32[$0 + 20 >> 2] = $6;
   HEAP32[$0 + 24 >> 2] = $7;
   HEAP32[$0 + 28 >> 2] = $8;
   $14 = $0 + 336 | 0;
   HEAP32[$0 + 332 >> 2] = $14;
   $10 = $0 + 16 | 0;
  }
  block : {
   if (!global$9 | !$11) {
    $9 = snprintf($14, 7258, $10);
    if ((global$9 | 0) == 1) {
     break block
    }
    $13 = $9;
   }
   if (!global$9) {
    HEAP32[$0 + 224 >> 2] = 282;
    $16 = $0 + 224 | 0;
    $25 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 216 | 0, 0, $16);
    HEAP32[$0 + 224 >> 2] = 282;
    $14 = $0 + 208 | 0;
    $18 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($14, 0, $16);
    $10 = $13 >>> 0 >= 100;
   }
   block1 : {
    if ((global$9 | 0) == 2 | $10) {
     if (!global$9 | ($11 | 0) == 1) {
      $9 = std____2____cloc_28_29();
      $12 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $13 = $9;
     }
     if (!global$9) {
      HEAP32[$0 >> 2] = $5;
      HEAP32[$0 + 4 >> 2] = $6;
      HEAP32[$0 + 8 >> 2] = $7;
      HEAP32[$0 + 12 >> 2] = $8;
      $10 = $0 + 332 | 0;
     }
     if (!global$9 | ($11 | 0) == 2) {
      $9 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($10, $13, 7258, $0);
      $12 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $13 = $9;
     }
     if (!global$9) {
      if (($13 | 0) == -1) {
       break block1
      }
      $10 = HEAP32[$0 + 332 >> 2];
     }
     if (!global$9 | ($11 | 0) == 3) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($25, $10);
      $12 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9 | ($11 | 0) == 4) {
      $9 = emscripten_builtin_malloc($13);
      $12 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $10 = $9;
     }
     if (!global$9 | ($11 | 0) == 5) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($18, $10);
      $12 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $10 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($18);
      if ($10) {
       break block1
      }
      $16 = HEAP32[$18 >> 2];
     }
    }
    if (!global$9) {
     $10 = $0 + 204 | 0;
     std____2__ios_base__getloc_28_29_20const($10, $3);
    }
    if (!global$9 | ($11 | 0) == 6) {
     $9 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($10);
     $12 = 6;
     if ((global$9 | 0) == 1) {
      break block
     }
     $26 = $9;
    }
    if (!global$9) {
     $15 = HEAP32[$0 + 332 >> 2];
     $10 = $15 + $13 | 0;
    }
    if (!global$9 | ($11 | 0) == 7) {
     std____2__ctype_char___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($26, $15, $10, $16);
     $12 = 7;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $19 = ($13 | 0) > 0 ? HEAPU8[HEAP32[$0 + 332 >> 2]] == 45 : $19;
     $20 = $0 + 204 | 0;
     $21 = $0 + 200 | 0;
     $22 = $0 + 199 | 0;
     $14 = $0 + 198 | 0;
     $23 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 184 | 0);
     $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 172 | 0);
     $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 160 | 0);
     $10 = $0 + 156 | 0;
    }
    if (!global$9 | ($11 | 0) == 8) {
     std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20int__29($2, $19, $20, $21, $22, $14, $23, $15, $17, $10);
     $12 = 8;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAP32[$0 + 48 >> 2] = 282;
     $24 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 40 | 0, 0, $0 + 48 | 0);
     $2 = HEAP32[$0 + 156 >> 2];
     block2 : {
      if (($2 | 0) < ($13 | 0)) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17) + ($13 - $2 << 1) | 0;
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($15) + $2 | 0;
       $10 = ($2 + HEAP32[$0 + 156 >> 2] | 0) + 1 | 0;
       break block2;
      }
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17);
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($15) + $2 | 0;
      $10 = ($2 + HEAP32[$0 + 156 >> 2] | 0) + 2 | 0;
     }
     $14 = $10 >>> 0 >= 101;
     $2 = $0 + 48 | 0;
    }
    if ((global$9 | 0) == 2 | $14) {
     if (!global$9 | ($11 | 0) == 9) {
      $9 = emscripten_builtin_malloc($10);
      $12 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $9;
     }
     if (!global$9 | ($11 | 0) == 10) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($24, $2);
      $12 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = HEAP32[$24 >> 2];
      $10 = !$2;
      if ($10) {
       break block1
      }
     }
    }
    if (!global$9) {
     $27 = $0 + 36 | 0;
     $28 = $0 + 32 | 0;
     $29 = HEAP32[$3 + 4 >> 2];
     $20 = $13 + $16 | 0;
     $21 = $0 + 200 | 0;
     $22 = HEAP8[$0 + 199 | 0];
     $14 = HEAP8[$0 + 198 | 0];
     $10 = HEAP32[$0 + 156 >> 2];
    }
    if (!global$9 | ($11 | 0) == 11) {
     std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($2, $27, $28, $29, $16, $20, $26, $19, $21, $22, $14, $23, $15, $17, $10);
     $12 = 11;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $14 = HEAP32[$0 + 36 >> 2];
     $10 = HEAP32[$0 + 32 >> 2];
    }
    if (!global$9 | ($11 | 0) == 12) {
     $9 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, $14, $10, $3, $4);
     $12 = 12;
     if ((global$9 | 0) == 1) {
      break block
     }
     $13 = $9;
    }
    if (!global$9 | ($11 | 0) == 13) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($24);
     $12 = 13;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($11 | 0) == 14) {
     $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($17);
     $12 = 14;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $9;
    }
    if (!global$9 | ($11 | 0) == 15) {
     $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($15);
     $12 = 15;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $9;
    }
    if (!global$9 | ($11 | 0) == 16) {
     $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($23);
     $12 = 16;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $9;
    }
    $1 = global$9 ? $1 : $0 + 204 | 0;
    if (!global$9 | ($11 | 0) == 17) {
     std____2__locale___locale_28_29($1);
     $12 = 17;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($11 | 0) == 18) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($18);
     $12 = 18;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($11 | 0) == 19) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($25);
     $12 = 19;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     __stack_pointer = $0 + 448 | 0;
     return $13 | 0;
    }
   }
   if (!global$9) {
    std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
    wasm2js_trap();
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $9 = HEAP32[global$10 >> 2];
  HEAP32[$9 >> 2] = $0;
  HEAP32[$9 + 4 >> 2] = $1;
  HEAP32[$9 + 8 >> 2] = $2;
  HEAP32[$9 + 12 >> 2] = $3;
  HEAP32[$9 + 16 >> 2] = $4;
  HEAP32[$9 + 20 >> 2] = $5;
  HEAP32[$9 + 24 >> 2] = $6;
  HEAP32[$9 + 28 >> 2] = $7;
  HEAP32[$9 + 32 >> 2] = $8;
  HEAP32[$9 + 36 >> 2] = $10;
  HEAP32[$9 + 40 >> 2] = $13;
  HEAP32[$9 + 44 >> 2] = $14;
  HEAP32[$9 + 48 >> 2] = $15;
  HEAP32[$9 + 52 >> 2] = $16;
  HEAP32[$9 + 56 >> 2] = $17;
  HEAP32[$9 + 60 >> 2] = $18;
  HEAP32[$9 + 64 >> 2] = $19;
  HEAP32[$9 + 68 >> 2] = $20;
  HEAP32[$9 + 72 >> 2] = $21;
  HEAP32[$9 + 76 >> 2] = $22;
  HEAP32[$9 + 80 >> 2] = $23;
  HEAP32[$9 + 84 >> 2] = $24;
  HEAP32[$9 + 88 >> 2] = $25;
  HEAP32[$9 + 92 >> 2] = $26;
  HEAP32[$9 + 96 >> 2] = $27;
  HEAP32[$9 + 100 >> 2] = $28;
  HEAP32[$9 + 104 >> 2] = $29;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 108;
  return 0;
 }
 
 function bool_20std____2__operator___5babi_nn190106_5d_char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($0) {
  return !HEAP32[$0 >> 2];
 }
 
 function std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $9 = HEAP32[$1 + 36 >> 2];
   $11 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $12 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $11 = __stack_pointer - 16 | 0;
   __stack_pointer = $11;
  }
  block : {
   block2 : {
    if ((global$9 | 0) == 2 | $0) {
     if (!global$9 | !$12) {
      $10 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_char_2c_20true___28std____2__locale_20const__29($2);
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $10;
     }
     block1 : {
      if ((global$9 | 0) == 2 | $1) {
       $0 = global$9 ? $0 : $11 + 4 | 0;
       if (!global$9 | ($12 | 0) == 1) {
        std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($0, $2);
        $13 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $0 = HEAP32[$11 + 4 >> 2];
        HEAP8[$3 | 0] = $0;
        HEAP8[$3 + 1 | 0] = $0 >>> 8;
        HEAP8[$3 + 2 | 0] = $0 >>> 16;
        HEAP8[$3 + 3 | 0] = $0 >>> 24;
        $0 = $11 + 4 | 0;
       }
       if (!global$9 | ($12 | 0) == 2) {
        std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($0, $2);
        $13 = 2;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       $0 = global$9 ? $0 : $11 + 4 | 0;
       if (!global$9 | ($12 | 0) == 3) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($8, $0);
        $13 = 3;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       $0 = global$9 ? $0 : $11 + 4 | 0;
       if (!global$9 | ($12 | 0) == 4) {
        $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
        $13 = 4;
        if ((global$9 | 0) == 1) {
         break block
        }
        $0 = $10;
       }
       if (!global$9) {
        break block1
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 5) {
       std____2__moneypunct_char_2c_20true___pos_format_5babi_nn190106_5d_28_29_20const($0, $2);
       $13 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = HEAP32[$11 + 4 >> 2];
       HEAP8[$3 | 0] = $0;
       HEAP8[$3 + 1 | 0] = $0 >>> 8;
       HEAP8[$3 + 2 | 0] = $0 >>> 16;
       HEAP8[$3 + 3 | 0] = $0 >>> 24;
       $0 = $11 + 4 | 0;
      }
      if (!global$9 | ($12 | 0) == 6) {
       std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $2);
       $13 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 7) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($8, $0);
       $13 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 8) {
       $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
       $13 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $10;
      }
     }
     if (!global$9 | ($12 | 0) == 9) {
      $10 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($2);
      $13 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     if (!global$9) {
      HEAP8[$4 | 0] = $0
     }
     if (!global$9 | ($12 | 0) == 10) {
      $10 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($2);
      $13 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     if (!global$9) {
      HEAP8[$5 | 0] = $0;
      $0 = $11 + 4 | 0;
     }
     if (!global$9 | ($12 | 0) == 11) {
      std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $2);
      $13 = 11;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 12) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($6, $0);
      $13 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 13) {
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      $13 = 13;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 14) {
      std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($0, $2);
      $13 = 14;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 15) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($7, $0);
      $13 = 15;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 16) {
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      $13 = 16;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     if (!global$9 | ($12 | 0) == 17) {
      $10 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($2);
      $13 = 17;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     if (!global$9) {
      break block2
     }
    }
    if (!global$9 | ($12 | 0) == 18) {
     $10 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_char_2c_20false___28std____2__locale_20const__29($2);
     $13 = 18;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $10;
    }
    block3 : {
     if ((global$9 | 0) == 2 | $1) {
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 19) {
       std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($0, $2);
       $13 = 19;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = HEAP32[$11 + 4 >> 2];
       HEAP8[$3 | 0] = $0;
       HEAP8[$3 + 1 | 0] = $0 >>> 8;
       HEAP8[$3 + 2 | 0] = $0 >>> 16;
       HEAP8[$3 + 3 | 0] = $0 >>> 24;
       $0 = $11 + 4 | 0;
      }
      if (!global$9 | ($12 | 0) == 20) {
       std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($0, $2);
       $13 = 20;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 21) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($8, $0);
       $13 = 21;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 22) {
       $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
       $13 = 22;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $10;
      }
      if (!global$9) {
       break block3
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 23) {
      std____2__moneypunct_char_2c_20true___pos_format_5babi_nn190106_5d_28_29_20const($0, $2);
      $13 = 23;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $0 = HEAP32[$11 + 4 >> 2];
      HEAP8[$3 | 0] = $0;
      HEAP8[$3 + 1 | 0] = $0 >>> 8;
      HEAP8[$3 + 2 | 0] = $0 >>> 16;
      HEAP8[$3 + 3 | 0] = $0 >>> 24;
      $0 = $11 + 4 | 0;
     }
     if (!global$9 | ($12 | 0) == 24) {
      std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $2);
      $13 = 24;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 25) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($8, $0);
      $13 = 25;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 26) {
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      $13 = 26;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
    }
    if (!global$9 | ($12 | 0) == 27) {
     $10 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($2);
     $13 = 27;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
    if (!global$9) {
     HEAP8[$4 | 0] = $0
    }
    if (!global$9 | ($12 | 0) == 28) {
     $10 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($2);
     $13 = 28;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
    if (!global$9) {
     HEAP8[$5 | 0] = $0;
     $0 = $11 + 4 | 0;
    }
    if (!global$9 | ($12 | 0) == 29) {
     std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $2);
     $13 = 29;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 30) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($6, $0);
     $13 = 30;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 31) {
     $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
     $13 = 31;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 32) {
     std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($0, $2);
     $13 = 32;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 33) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($7, $0);
     $13 = 33;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 34) {
     $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
     $13 = 34;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
    if (!global$9 | ($12 | 0) == 35) {
     $10 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($2);
     $13 = 35;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
   }
   if (!global$9) {
    HEAP32[$9 >> 2] = $0;
    __stack_pointer = $11 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $10 = HEAP32[global$10 >> 2];
  HEAP32[$10 >> 2] = $0;
  HEAP32[$10 + 4 >> 2] = $1;
  HEAP32[$10 + 8 >> 2] = $2;
  HEAP32[$10 + 12 >> 2] = $3;
  HEAP32[$10 + 16 >> 2] = $4;
  HEAP32[$10 + 20 >> 2] = $5;
  HEAP32[$10 + 24 >> 2] = $6;
  HEAP32[$10 + 28 >> 2] = $7;
  HEAP32[$10 + 32 >> 2] = $8;
  HEAP32[$10 + 36 >> 2] = $9;
  HEAP32[$10 + 40 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
 }
 
 function std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
  var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 100;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $9 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $11 = HEAP32[$1 + 44 >> 2];
   $12 = HEAP32[$1 + 48 >> 2];
   $13 = HEAP32[$1 + 52 >> 2];
   $14 = HEAP32[$1 + 56 >> 2];
   $15 = HEAP32[$1 + 60 >> 2];
   $17 = HEAP32[$1 + 64 >> 2];
   $18 = HEAP32[$1 + 68 >> 2];
   $19 = HEAP32[$1 + 72 >> 2];
   $21 = HEAP32[$1 + 76 >> 2];
   $22 = HEAP32[$1 + 80 >> 2];
   $25 = HEAP32[$1 + 84 >> 2];
   $23 = HEAP32[$1 + 88 >> 2];
   $24 = HEAP32[$1 + 92 >> 2];
   $26 = HEAP32[$1 + 96 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $27 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $15 = __stack_pointer;
   $21 = $15 - 16 | 0;
   __stack_pointer = $21;
   HEAP32[$2 >> 2] = $0;
   $25 = $3 & 512;
  }
  block6 : {
   while (1) {
    $15 = global$9 ? $15 : ($22 | 0) == 4;
    $23 = global$9 ? $23 : $15;
    if (global$9 ? 0 : $23 | (global$9 | 0) == 2) {
     $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($13) >>> 0 > 1;
     if ($4) {
      (wasm2js_i32$0 = $21, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($13)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
      $4 = std____2____wrap_iter_char____operator__5babi_nn190106_5d_28long_29_20const($21 + 12 | 0, 1);
      $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($13);
      $6 = HEAP32[$2 >> 2];
      $4 = char__20std____2__copy_5babi_nn190106_5d_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($4, $5, $6);
      HEAP32[$2 >> 2] = $4;
     }
     $17 = $3 & 176;
     $3 = ($17 | 0) != 16;
     if ($3) {
      $3 = ($17 | 0) == 32;
      if ($3) {
       $0 = HEAP32[$2 >> 2]
      }
      HEAP32[$1 >> 2] = $0;
     }
     $0 = $21 + 16 | 0;
     __stack_pointer = $0;
    }
    if (!$23 | (global$9 | 0) == 2) {
     $15 = global$9 ? $15 : HEAPU8[$8 + $22 | 0];
     block5 : {
      block4 : {
       block2 : {
        block3 : {
         if (!global$9) {
          block1 : {
           switch ($15 | 0) {
           case 0:
            $15 = HEAP32[$2 >> 2];
            HEAP32[$1 >> 2] = $15;
            break block5;
           case 1:
            break block1;
           case 2:
            break block2;
           case 3:
            break block3;
           case 4:
            break block4;
           default:
            break block5;
           };
          }
          $15 = HEAP32[$2 >> 2];
          HEAP32[$1 >> 2] = $15;
         }
         if (!global$9 | !$27) {
          $16 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($6, 32);
          $20 = 0;
          if ((global$9 | 0) == 1) {
           break block6
          }
          $17 = $16;
         }
         if (!global$9) {
          $15 = HEAP32[$2 >> 2];
          $18 = $15 + 1 | 0;
          HEAP32[$2 >> 2] = $18;
          HEAP8[$15 | 0] = $17;
          break block5;
         }
        }
        if (!global$9) {
         $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($13);
         if ($15) {
          break block5
         }
         $17 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($13, 0) | 0];
         $15 = HEAP32[$2 >> 2];
         $18 = $15 + 1 | 0;
         HEAP32[$2 >> 2] = $18;
         HEAP8[$15 | 0] = $17;
         break block5;
        }
       }
       if (!global$9) {
        $15 = !$25;
        $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($12);
        if ($15 | $17) {
         break block5
        }
        $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($12);
        $18 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn190106_5d_28_29($12);
        $17 = HEAP32[$2 >> 2];
        $15 = char__20std____2__copy_5babi_nn190106_5d_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($16, $18, $17);
        HEAP32[$2 >> 2] = $15;
        break block5;
       }
      }
      if (!global$9) {
       $26 = HEAP32[$2 >> 2];
       $4 = $4 + $7 | 0;
       $17 = $4;
       while (1) {
        block7 : {
         if ($5 >>> 0 <= $17 >>> 0) {
          break block7
         }
         if (!std____2__ctype_char___is_5babi_nn190106_5d_28unsigned_20long_2c_20char_29_20const($6, 64, HEAP8[$17 | 0])) {
          break block7
         }
         $17 = $17 + 1 | 0;
         continue;
        }
        break;
       };
       $15 = $14;
       $18 = ($15 | 0) > 0;
      }
      if ((global$9 | 0) == 2 | $18) {
       if (!global$9) {
        while (1) {
         block8 : {
          $18 = $4 >>> 0 >= $17 >>> 0;
          if ($18) {
           break block8
          }
          $18 = !$15;
          if ($18) {
           break block8
          }
          $15 = $15 - 1 | 0;
          $17 = $17 - 1 | 0;
          $18 = HEAPU8[$17 | 0];
          $19 = HEAP32[$2 >> 2];
          HEAP32[$2 >> 2] = $19 + 1;
          HEAP8[$19 | 0] = $18;
          continue;
         }
         break;
        }
       }
       $24 = global$9 ? $24 : $15;
       if (!global$9 | ($27 | 0) == 1 ? $24 | (global$9 | 0) == 2 : 0) {
        $16 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($6, 48);
        $20 = 1;
        if ((global$9 | 0) == 1) {
         break block6
        }
        $19 = $16;
       }
       $19 = !global$9 & (!$24 | (global$9 | 0) == 2) ? 0 : $19;
       if (!global$9) {
        while (1) {
         $16 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $16 + 1;
         $18 = ($15 | 0) > 0;
         if ($18) {
          HEAP8[$16 | 0] = $19;
          $15 = $15 - 1 | 0;
          continue;
         }
         break;
        };
        HEAP8[$16 | 0] = $9;
       }
      }
      $15 = global$9 ? $15 : ($4 | 0) == ($17 | 0);
      block9 : {
       if ($15 | (global$9 | 0) == 2) {
        if (!global$9 | ($27 | 0) == 2) {
         $16 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($6, 48);
         $20 = 2;
         if ((global$9 | 0) == 1) {
          break block6
         }
         $17 = $16;
        }
        if (!global$9) {
         $15 = HEAP32[$2 >> 2];
         $18 = $15 + 1 | 0;
         HEAP32[$2 >> 2] = $18;
         HEAP8[$15 | 0] = $17;
         break block9;
        }
       }
       if (!global$9) {
        if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($11)) {
         $18 = -1
        } else {
         $18 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, 0) | 0]
        }
        $15 = 0;
        $20 = 0;
        while (1) {
         if (($4 | 0) == ($17 | 0)) {
          break block9
         }
         block10 : {
          if (($15 | 0) != ($18 | 0)) {
           $16 = $15;
           break block10;
          }
          $19 = HEAP32[$2 >> 2];
          HEAP32[$2 >> 2] = $19 + 1;
          HEAP8[$19 | 0] = $10;
          $16 = 0;
          $20 = $20 + 1 | 0;
          if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($11) >>> 0 <= $20 >>> 0) {
           $18 = $15;
           break block10;
          }
          if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, $20) | 0] == 127) {
           $18 = -1;
           break block10;
          }
          $18 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, $20) | 0];
         }
         $17 = $17 - 1 | 0;
         $15 = HEAPU8[$17 | 0];
         $19 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $19 + 1;
         HEAP8[$19 | 0] = $15;
         $15 = $16 + 1 | 0;
         continue;
        };
       }
      }
      if (!global$9) {
       $15 = HEAP32[$2 >> 2];
       void_20std____2__reverse_5babi_nn190106_5d_char___28char__2c_20char__29($26, $15);
      }
     }
     if (!global$9) {
      $22 = $22 + 1 | 0;
      continue;
     }
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $20;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $16 = HEAP32[global$10 >> 2];
  HEAP32[$16 >> 2] = $0;
  HEAP32[$16 + 4 >> 2] = $1;
  HEAP32[$16 + 8 >> 2] = $2;
  HEAP32[$16 + 12 >> 2] = $3;
  HEAP32[$16 + 16 >> 2] = $4;
  HEAP32[$16 + 20 >> 2] = $5;
  HEAP32[$16 + 24 >> 2] = $6;
  HEAP32[$16 + 28 >> 2] = $7;
  HEAP32[$16 + 32 >> 2] = $8;
  HEAP32[$16 + 36 >> 2] = $9;
  HEAP32[$16 + 40 >> 2] = $10;
  HEAP32[$16 + 44 >> 2] = $11;
  HEAP32[$16 + 48 >> 2] = $12;
  HEAP32[$16 + 52 >> 2] = $13;
  HEAP32[$16 + 56 >> 2] = $14;
  HEAP32[$16 + 60 >> 2] = $15;
  HEAP32[$16 + 64 >> 2] = $17;
  HEAP32[$16 + 68 >> 2] = $18;
  HEAP32[$16 + 72 >> 2] = $19;
  HEAP32[$16 + 76 >> 2] = $21;
  HEAP32[$16 + 80 >> 2] = $22;
  HEAP32[$16 + 84 >> 2] = $25;
  HEAP32[$16 + 88 >> 2] = $23;
  HEAP32[$16 + 92 >> 2] = $24;
  HEAP32[$16 + 96 >> 2] = $26;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 100;
 }
 
 function std____2__moneypunct_char_2c_20true___pos_format_5babi_nn190106_5d_28_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $2 = global$9 ? $2 : HEAP32[HEAP32[$1 >> 2] + 40 >> 2];
  block : {
   if (!global$9 | !$3) {
    FUNCTION_TABLE[$2 | 0]($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function char__20std____2__copy_5babi_nn190106_5d_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$9;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  auto_20std____2____unwrap_range_5babi_nn190106_5d_std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const____28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___29($3 + 24 | 0, $0, $1);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  $4 = HEAP32[$3 + 24 >> 2];
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $7 = HEAP32[$3 + 28 >> 2];
  HEAP32[$1 + 12 >> 2] = $7;
  $8 = $4;
  $4 = $7 - $4 | 0;
  char__20std____2____constexpr_memmove_5babi_nn190106_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2, $8, $4);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$1 + 8 >> 2] = $2 + $4;
  std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($3 + 16 | 0, $1 + 12 | 0, $1 + 8 | 0);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $1 + 16 | 0;
  $1 = HEAP32[$3 + 16 >> 2];
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  $0 = $4 + 12 | 0;
  $7 = std____2____to_address_helper_std____2____wrap_iter_char___2c_20void_____call_5babi_nn190106_5d_28std____2____wrap_iter_char___20const__29($0);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  $0 = std____2____wrap_iter_char____operator__5babi_nn190106_5d_28long_29_20const($0, $1 - $7 | 0);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $4 + 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  $0 = char__20std____2____rewrap_iter_5babi_nn190106_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($2, HEAP32[$3 + 20 >> 2]);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$3 + 8 >> 2] = $0;
  std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($6 + 8 | 0, $3 + 12 | 0, $3 + 8 | 0);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $3 + 32 | 0;
  __stack_pointer = $6 + 16 | 0;
  return HEAP32[$6 + 12 >> 2];
 }
 
 function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 76;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $17 = HEAP32[$1 + 48 >> 2];
   $15 = HEAP32[$1 + 52 >> 2];
   $16 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $19 = HEAP32[$1 + 64 >> 2];
   $20 = HEAP32[$1 + 68 >> 2];
   $21 = HEAP32[$1 + 72 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 176 | 0;
   __stack_pointer = $0;
   $7 = $0 + 172 | 0;
   std____2__ios_base__getloc_28_29_20const($7, $3);
  }
  block : {
   if (!global$9 | !$8) {
    $6 = std____2__ctype_char__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_char___28std____2__locale_20const__29($7);
    if ((global$9 | 0) == 1) {
     break block
    }
    $18 = $6;
   }
   if (!global$9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($5)
   }
   if ((global$9 | 0) == 2 | $7) {
    if (!global$9) {
     $7 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($5, 0) | 0]
    }
    if (!global$9 | ($8 | 0) == 1) {
     $6 = std____2__ctype_char___widen_5babi_nn190106_5d_28char_29_20const($18, 45);
     $10 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $9 = $6;
    }
    if (!global$9) {
     $9 = $9 & 255;
     $17 = ($9 | 0) == ($7 | 0);
    }
   }
   if (!global$9) {
    $11 = $0 + 168 | 0;
    $12 = $0 + 167 | 0;
    $15 = $0 + 166 | 0;
    $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 152 | 0);
    $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 140 | 0);
    $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 128 | 0);
    $14 = $0 + 124 | 0;
    $7 = $0 + 172 | 0;
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20int__29($2, $17, $7, $11, $12, $15, $16, $9, $13, $14);
    $10 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$0 + 16 >> 2] = 282;
    $11 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
    block1 : {
     if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($5) | 0) > HEAP32[$0 + 124 >> 2]) {
      $7 = ((((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($5) - HEAP32[$0 + 124 >> 2] << 1) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($13) | 0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($9) | 0) + HEAP32[$0 + 124 >> 2] | 0) + 1 | 0;
      break block1;
     }
     $7 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($13) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($9) | 0) + HEAP32[$0 + 124 >> 2] | 0) + 2 | 0;
    }
    $12 = $7 >>> 0 < 101;
    $2 = $0 + 16 | 0;
   }
   block2 : {
    if (!($12 ? global$9 : 1)) {
     break block2
    }
    if (!global$9 | ($8 | 0) == 3) {
     $6 = emscripten_builtin_malloc($7);
     $10 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $6;
    }
    if (!global$9 | ($8 | 0) == 4) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($11, $2);
     $10 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $2 = HEAP32[$11 >> 2];
     if ($2) {
      break block2
     }
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    $12 = HEAP32[$3 + 4 >> 2];
    $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($5);
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($5);
    $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($5) + $7 | 0;
    $14 = $0 + 168 | 0;
    $19 = HEAP8[$0 + 167 | 0];
    $20 = HEAP8[$0 + 166 | 0];
    $21 = HEAP32[$0 + 124 >> 2];
    $7 = $0 + 4 | 0;
   }
   if (!global$9 | ($8 | 0) == 5) {
    std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($2, $7, $0, $12, $15, $5, $18, $17, $14, $19, $20, $16, $9, $13, $21);
    $10 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $7 = HEAP32[$0 >> 2];
    $5 = HEAP32[$0 + 4 >> 2];
   }
   if (!global$9 | ($8 | 0) == 6) {
    $6 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn190106_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, $5, $7, $3, $4);
    $10 = 6;
    if ((global$9 | 0) == 1) {
     break block
    }
    $5 = $6;
   }
   if (!global$9 | ($8 | 0) == 7) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($11);
    $10 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($8 | 0) == 8) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($13);
    $10 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   if (!global$9 | ($8 | 0) == 9) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($9);
    $10 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   if (!global$9 | ($8 | 0) == 10) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($16);
    $10 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   $1 = global$9 ? $1 : $0 + 172 | 0;
   if (!global$9 | ($8 | 0) == 11) {
    std____2__locale___locale_28_29($1);
    $10 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 176 | 0;
    return $5 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $9;
  HEAP32[$6 + 32 >> 2] = $11;
  HEAP32[$6 + 36 >> 2] = $12;
  HEAP32[$6 + 40 >> 2] = $13;
  HEAP32[$6 + 44 >> 2] = $14;
  HEAP32[$6 + 48 >> 2] = $17;
  HEAP32[$6 + 52 >> 2] = $15;
  HEAP32[$6 + 56 >> 2] = $16;
  HEAP32[$6 + 60 >> 2] = $18;
  HEAP32[$6 + 64 >> 2] = $19;
  HEAP32[$6 + 68 >> 2] = $20;
  HEAP32[$6 + 72 >> 2] = $21;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 76;
  return 0;
 }
 
 function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 108;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $19 = HEAP32[$1 + 64 >> 2];
   $20 = HEAP32[$1 + 68 >> 2];
   $21 = HEAP32[$1 + 72 >> 2];
   $22 = HEAP32[$1 + 76 >> 2];
   $23 = HEAP32[$1 + 80 >> 2];
   $24 = HEAP32[$1 + 84 >> 2];
   $25 = HEAP32[$1 + 88 >> 2];
   $26 = HEAP32[$1 + 92 >> 2];
   $27 = HEAP32[$1 + 96 >> 2];
   $28 = HEAP32[$1 + 100 >> 2];
   $29 = HEAP32[$1 + 104 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 1056 | 0;
   __stack_pointer = $0;
   HEAP32[$0 + 16 >> 2] = $5;
   HEAP32[$0 + 20 >> 2] = $6;
   HEAP32[$0 + 24 >> 2] = $7;
   HEAP32[$0 + 28 >> 2] = $8;
   $14 = $0 + 944 | 0;
   HEAP32[$0 + 940 >> 2] = $14;
   $10 = $0 + 16 | 0;
  }
  block : {
   if (!global$9 | !$11) {
    $9 = snprintf($14, 7258, $10);
    if ((global$9 | 0) == 1) {
     break block
    }
    $13 = $9;
   }
   if (!global$9) {
    HEAP32[$0 + 528 >> 2] = 282;
    $16 = $0 + 528 | 0;
    $25 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 520 | 0, 0, $16);
    HEAP32[$0 + 528 >> 2] = 282;
    $14 = $0 + 512 | 0;
    $18 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($14, 0, $16);
    $10 = $13 >>> 0 >= 100;
   }
   block1 : {
    if ((global$9 | 0) == 2 | $10) {
     if (!global$9 | ($11 | 0) == 1) {
      $9 = std____2____cloc_28_29();
      $12 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
      $13 = $9;
     }
     if (!global$9) {
      HEAP32[$0 >> 2] = $5;
      HEAP32[$0 + 4 >> 2] = $6;
      HEAP32[$0 + 8 >> 2] = $7;
      HEAP32[$0 + 12 >> 2] = $8;
      $10 = $0 + 940 | 0;
     }
     if (!global$9 | ($11 | 0) == 2) {
      $9 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($10, $13, 7258, $0);
      $12 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $13 = $9;
     }
     if (!global$9) {
      if (($13 | 0) == -1) {
       break block1
      }
      $10 = HEAP32[$0 + 940 >> 2];
     }
     if (!global$9 | ($11 | 0) == 3) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($25, $10);
      $12 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $10 = global$9 ? $10 : $13 << 2;
     if (!global$9 | ($11 | 0) == 4) {
      $9 = emscripten_builtin_malloc($10);
      $12 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
      $10 = $9;
     }
     if (!global$9 | ($11 | 0) == 5) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($18, $10);
      $12 = 5;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $10 = bool_20std____2__operator___5babi_nn190106_5d_char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($18);
      if ($10) {
       break block1
      }
      $16 = HEAP32[$18 >> 2];
     }
    }
    if (!global$9) {
     $10 = $0 + 508 | 0;
     std____2__ios_base__getloc_28_29_20const($10, $3);
    }
    if (!global$9 | ($11 | 0) == 6) {
     $9 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($10);
     $12 = 6;
     if ((global$9 | 0) == 1) {
      break block
     }
     $26 = $9;
    }
    if (!global$9) {
     $15 = HEAP32[$0 + 940 >> 2];
     $10 = $15 + $13 | 0;
    }
    if (!global$9 | ($11 | 0) == 7) {
     std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($26, $15, $10, $16);
     $12 = 7;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $19 = ($13 | 0) > 0 ? HEAPU8[HEAP32[$0 + 940 >> 2]] == 45 : $19;
     $20 = $0 + 508 | 0;
     $21 = $0 + 504 | 0;
     $22 = $0 + 500 | 0;
     $14 = $0 + 496 | 0;
     $23 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 484 | 0);
     $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 472 | 0);
     $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 460 | 0);
     $10 = $0 + 456 | 0;
    }
    if (!global$9 | ($11 | 0) == 8) {
     std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20int__29($2, $19, $20, $21, $22, $14, $23, $15, $17, $10);
     $12 = 8;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     HEAP32[$0 + 48 >> 2] = 282;
     $24 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 40 | 0, 0, $0 + 48 | 0);
     $2 = HEAP32[$0 + 456 >> 2];
     block2 : {
      if (($2 | 0) < ($13 | 0)) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17) + ($13 - $2 << 1) | 0;
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($15) + $2 | 0;
       $10 = ($2 + HEAP32[$0 + 456 >> 2] | 0) + 1 | 0;
       break block2;
      }
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($17);
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($15) + $2 | 0;
      $10 = ($2 + HEAP32[$0 + 456 >> 2] | 0) + 2 | 0;
     }
     $14 = $10 >>> 0 >= 101;
     $2 = $0 + 48 | 0;
    }
    if ((global$9 | 0) == 2 | $14) {
     $2 = global$9 ? $2 : $10 << 2;
     if (!global$9 | ($11 | 0) == 9) {
      $9 = emscripten_builtin_malloc($2);
      $12 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $9;
     }
     if (!global$9 | ($11 | 0) == 10) {
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($24, $2);
      $12 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $2 = HEAP32[$24 >> 2];
      $10 = !$2;
      if ($10) {
       break block1
      }
     }
    }
    if (!global$9) {
     $27 = $0 + 36 | 0;
     $28 = $0 + 32 | 0;
     $29 = HEAP32[$3 + 4 >> 2];
     $20 = ($13 << 2) + $16 | 0;
     $21 = $0 + 504 | 0;
     $22 = HEAP32[$0 + 500 >> 2];
     $14 = HEAP32[$0 + 496 >> 2];
     $10 = HEAP32[$0 + 456 >> 2];
    }
    if (!global$9 | ($11 | 0) == 11) {
     std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20int_29($2, $27, $28, $29, $16, $20, $26, $19, $21, $22, $14, $23, $15, $17, $10);
     $12 = 11;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $14 = HEAP32[$0 + 36 >> 2];
     $10 = HEAP32[$0 + 32 >> 2];
    }
    if (!global$9 | ($11 | 0) == 12) {
     $9 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, $14, $10, $3, $4);
     $12 = 12;
     if ((global$9 | 0) == 1) {
      break block
     }
     $13 = $9;
    }
    if (!global$9 | ($11 | 0) == 13) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($24);
     $12 = 13;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($11 | 0) == 14) {
     $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($17);
     $12 = 14;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $9;
    }
    if (!global$9 | ($11 | 0) == 15) {
     $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($15);
     $12 = 15;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $9;
    }
    if (!global$9 | ($11 | 0) == 16) {
     $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($23);
     $12 = 16;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $9;
    }
    $1 = global$9 ? $1 : $0 + 508 | 0;
    if (!global$9 | ($11 | 0) == 17) {
     std____2__locale___locale_28_29($1);
     $12 = 17;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($11 | 0) == 18) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($18);
     $12 = 18;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9 | ($11 | 0) == 19) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($25);
     $12 = 19;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     __stack_pointer = $0 + 1056 | 0;
     return $13 | 0;
    }
   }
   if (!global$9) {
    std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
    wasm2js_trap();
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $9 = HEAP32[global$10 >> 2];
  HEAP32[$9 >> 2] = $0;
  HEAP32[$9 + 4 >> 2] = $1;
  HEAP32[$9 + 8 >> 2] = $2;
  HEAP32[$9 + 12 >> 2] = $3;
  HEAP32[$9 + 16 >> 2] = $4;
  HEAP32[$9 + 20 >> 2] = $5;
  HEAP32[$9 + 24 >> 2] = $6;
  HEAP32[$9 + 28 >> 2] = $7;
  HEAP32[$9 + 32 >> 2] = $8;
  HEAP32[$9 + 36 >> 2] = $10;
  HEAP32[$9 + 40 >> 2] = $13;
  HEAP32[$9 + 44 >> 2] = $14;
  HEAP32[$9 + 48 >> 2] = $15;
  HEAP32[$9 + 52 >> 2] = $16;
  HEAP32[$9 + 56 >> 2] = $17;
  HEAP32[$9 + 60 >> 2] = $18;
  HEAP32[$9 + 64 >> 2] = $19;
  HEAP32[$9 + 68 >> 2] = $20;
  HEAP32[$9 + 72 >> 2] = $21;
  HEAP32[$9 + 76 >> 2] = $22;
  HEAP32[$9 + 80 >> 2] = $23;
  HEAP32[$9 + 84 >> 2] = $24;
  HEAP32[$9 + 88 >> 2] = $25;
  HEAP32[$9 + 92 >> 2] = $26;
  HEAP32[$9 + 96 >> 2] = $27;
  HEAP32[$9 + 100 >> 2] = $28;
  HEAP32[$9 + 104 >> 2] = $29;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 108;
  return 0;
 }
 
 function std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $9 = HEAP32[$1 + 36 >> 2];
   $11 = HEAP32[$1 + 40 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $12 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $11 = __stack_pointer - 16 | 0;
   __stack_pointer = $11;
  }
  block : {
   block2 : {
    if ((global$9 | 0) == 2 | $0) {
     if (!global$9 | !$12) {
      $10 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_wchar_t_2c_20true___28std____2__locale_20const__29($2);
      if ((global$9 | 0) == 1) {
       break block
      }
      $2 = $10;
     }
     block1 : {
      if ((global$9 | 0) == 2 | $1) {
       $0 = global$9 ? $0 : $11 + 4 | 0;
       if (!global$9 | ($12 | 0) == 1) {
        std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($0, $2);
        $13 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        $0 = HEAP32[$11 + 4 >> 2];
        HEAP8[$3 | 0] = $0;
        HEAP8[$3 + 1 | 0] = $0 >>> 8;
        HEAP8[$3 + 2 | 0] = $0 >>> 16;
        HEAP8[$3 + 3 | 0] = $0 >>> 24;
        $0 = $11 + 4 | 0;
       }
       if (!global$9 | ($12 | 0) == 2) {
        std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($0, $2);
        $13 = 2;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       $0 = global$9 ? $0 : $11 + 4 | 0;
       if (!global$9 | ($12 | 0) == 3) {
        std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($8, $0);
        $13 = 3;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       $0 = global$9 ? $0 : $11 + 4 | 0;
       if (!global$9 | ($12 | 0) == 4) {
        $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
        $13 = 4;
        if ((global$9 | 0) == 1) {
         break block
        }
        $0 = $10;
       }
       if (!global$9) {
        break block1
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 5) {
       std____2__moneypunct_char_2c_20true___pos_format_5babi_nn190106_5d_28_29_20const($0, $2);
       $13 = 5;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = HEAP32[$11 + 4 >> 2];
       HEAP8[$3 | 0] = $0;
       HEAP8[$3 + 1 | 0] = $0 >>> 8;
       HEAP8[$3 + 2 | 0] = $0 >>> 16;
       HEAP8[$3 + 3 | 0] = $0 >>> 24;
       $0 = $11 + 4 | 0;
      }
      if (!global$9 | ($12 | 0) == 6) {
       std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $2);
       $13 = 6;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 7) {
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($8, $0);
       $13 = 7;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 8) {
       $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
       $13 = 8;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $10;
      }
     }
     if (!global$9 | ($12 | 0) == 9) {
      $10 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($2);
      $13 = 9;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     if (!global$9) {
      HEAP32[$4 >> 2] = $0
     }
     if (!global$9 | ($12 | 0) == 10) {
      $10 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($2);
      $13 = 10;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     if (!global$9) {
      HEAP32[$5 >> 2] = $0;
      $0 = $11 + 4 | 0;
     }
     if (!global$9 | ($12 | 0) == 11) {
      std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $2);
      $13 = 11;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 12) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($6, $0);
      $13 = 12;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 13) {
      $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      $13 = 13;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 14) {
      std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($0, $2);
      $13 = 14;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 15) {
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($7, $0);
      $13 = 15;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 16) {
      $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
      $13 = 16;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     if (!global$9 | ($12 | 0) == 17) {
      $10 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($2);
      $13 = 17;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
     if (!global$9) {
      break block2
     }
    }
    if (!global$9 | ($12 | 0) == 18) {
     $10 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__moneypunct_wchar_t_2c_20false___28std____2__locale_20const__29($2);
     $13 = 18;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $10;
    }
    block3 : {
     if ((global$9 | 0) == 2 | $1) {
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 19) {
       std____2__moneypunct_char_2c_20true___neg_format_5babi_nn190106_5d_28_29_20const($0, $2);
       $13 = 19;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = HEAP32[$11 + 4 >> 2];
       HEAP8[$3 | 0] = $0;
       HEAP8[$3 + 1 | 0] = $0 >>> 8;
       HEAP8[$3 + 2 | 0] = $0 >>> 16;
       HEAP8[$3 + 3 | 0] = $0 >>> 24;
       $0 = $11 + 4 | 0;
      }
      if (!global$9 | ($12 | 0) == 20) {
       std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn190106_5d_28_29_20const($0, $2);
       $13 = 20;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 21) {
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($8, $0);
       $13 = 21;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      $0 = global$9 ? $0 : $11 + 4 | 0;
      if (!global$9 | ($12 | 0) == 22) {
       $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
       $13 = 22;
       if ((global$9 | 0) == 1) {
        break block
       }
       $0 = $10;
      }
      if (!global$9) {
       break block3
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 23) {
      std____2__moneypunct_char_2c_20true___pos_format_5babi_nn190106_5d_28_29_20const($0, $2);
      $13 = 23;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $0 = HEAP32[$11 + 4 >> 2];
      HEAP8[$3 | 0] = $0;
      HEAP8[$3 + 1 | 0] = $0 >>> 8;
      HEAP8[$3 + 2 | 0] = $0 >>> 16;
      HEAP8[$3 + 3 | 0] = $0 >>> 24;
      $0 = $11 + 4 | 0;
     }
     if (!global$9 | ($12 | 0) == 24) {
      std____2__numpunct_char___falsename_5babi_nn190106_5d_28_29_20const($0, $2);
      $13 = 24;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 25) {
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($8, $0);
      $13 = 25;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     $0 = global$9 ? $0 : $11 + 4 | 0;
     if (!global$9 | ($12 | 0) == 26) {
      $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
      $13 = 26;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $10;
     }
    }
    if (!global$9 | ($12 | 0) == 27) {
     $10 = std____2__numpunct_char___decimal_point_5babi_nn190106_5d_28_29_20const($2);
     $13 = 27;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
    if (!global$9) {
     HEAP32[$4 >> 2] = $0
    }
    if (!global$9 | ($12 | 0) == 28) {
     $10 = std____2__numpunct_char___thousands_sep_5babi_nn190106_5d_28_29_20const($2);
     $13 = 28;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
    if (!global$9) {
     HEAP32[$5 >> 2] = $0;
     $0 = $11 + 4 | 0;
    }
    if (!global$9 | ($12 | 0) == 29) {
     std____2__numpunct_char___grouping_5babi_nn190106_5d_28_29_20const($0, $2);
     $13 = 29;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 30) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($6, $0);
     $13 = 30;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 31) {
     $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
     $13 = 31;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 32) {
     std____2__numpunct_char___truename_5babi_nn190106_5d_28_29_20const($0, $2);
     $13 = 32;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 33) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($7, $0);
     $13 = 33;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    $0 = global$9 ? $0 : $11 + 4 | 0;
    if (!global$9 | ($12 | 0) == 34) {
     $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
     $13 = 34;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
    if (!global$9 | ($12 | 0) == 35) {
     $10 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn190106_5d_28_29_20const($2);
     $13 = 35;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $10;
    }
   }
   if (!global$9) {
    HEAP32[$9 >> 2] = $0;
    __stack_pointer = $11 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $10 = HEAP32[global$10 >> 2];
  HEAP32[$10 >> 2] = $0;
  HEAP32[$10 + 4 >> 2] = $1;
  HEAP32[$10 + 8 >> 2] = $2;
  HEAP32[$10 + 12 >> 2] = $3;
  HEAP32[$10 + 16 >> 2] = $4;
  HEAP32[$10 + 20 >> 2] = $5;
  HEAP32[$10 + 24 >> 2] = $6;
  HEAP32[$10 + 28 >> 2] = $7;
  HEAP32[$10 + 32 >> 2] = $8;
  HEAP32[$10 + 36 >> 2] = $9;
  HEAP32[$10 + 40 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
 }
 
 function std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
  var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 96;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   $7 = HEAP32[$1 + 28 >> 2];
   $8 = HEAP32[$1 + 32 >> 2];
   $9 = HEAP32[$1 + 36 >> 2];
   $10 = HEAP32[$1 + 40 >> 2];
   $11 = HEAP32[$1 + 44 >> 2];
   $12 = HEAP32[$1 + 48 >> 2];
   $13 = HEAP32[$1 + 52 >> 2];
   $14 = HEAP32[$1 + 56 >> 2];
   $15 = HEAP32[$1 + 60 >> 2];
   $17 = HEAP32[$1 + 64 >> 2];
   $19 = HEAP32[$1 + 68 >> 2];
   $20 = HEAP32[$1 + 72 >> 2];
   $24 = HEAP32[$1 + 76 >> 2];
   $21 = HEAP32[$1 + 80 >> 2];
   $22 = HEAP32[$1 + 84 >> 2];
   $25 = HEAP32[$1 + 88 >> 2];
   $26 = HEAP32[$1 + 92 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $23 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $15 = __stack_pointer;
   $19 = $15 - 16 | 0;
   __stack_pointer = $19;
   HEAP32[$2 >> 2] = $0;
   $25 = $3 & 512;
   $24 = $7 ? 4 : 0;
  }
  block6 : {
   while (1) {
    $7 = global$9 ? $7 : ($20 | 0) == 4;
    $21 = global$9 ? $21 : $7;
    if (global$9 ? 0 : $21 | (global$9 | 0) == 2) {
     $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($13) >>> 0 > 1;
     if ($4) {
      (wasm2js_i32$0 = $19, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($13)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
      $4 = std____2____wrap_iter_wchar_t____operator__5babi_nn190106_5d_28long_29_20const($19 + 12 | 0, 1);
      $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($13);
      $6 = HEAP32[$2 >> 2];
      $4 = wchar_t__20std____2__copy_5babi_nn190106_5d_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($4, $5, $6);
      HEAP32[$2 >> 2] = $4;
     }
     $7 = $3 & 176;
     $3 = ($7 | 0) != 16;
     if ($3) {
      $3 = ($7 | 0) == 32;
      if ($3) {
       $0 = HEAP32[$2 >> 2]
      }
      HEAP32[$1 >> 2] = $0;
     }
     $0 = $19 + 16 | 0;
     __stack_pointer = $0;
    }
    if (!$21 | (global$9 | 0) == 2) {
     $7 = global$9 ? $7 : HEAPU8[$8 + $20 | 0];
     block5 : {
      block4 : {
       block2 : {
        block3 : {
         if (!global$9) {
          block1 : {
           switch ($7 | 0) {
           case 0:
            $7 = HEAP32[$2 >> 2];
            HEAP32[$1 >> 2] = $7;
            break block5;
           case 1:
            break block1;
           case 2:
            break block2;
           case 3:
            break block3;
           case 4:
            break block4;
           default:
            break block5;
           };
          }
          $7 = HEAP32[$2 >> 2];
          HEAP32[$1 >> 2] = $7;
         }
         if (!global$9 | !$23) {
          $16 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($6, 32);
          $18 = 0;
          if ((global$9 | 0) == 1) {
           break block6
          }
          $7 = $16;
         }
         if (!global$9) {
          $17 = HEAP32[$2 >> 2];
          $15 = $17 + 4 | 0;
          HEAP32[$2 >> 2] = $15;
          HEAP32[$17 >> 2] = $7;
          break block5;
         }
        }
        if (!global$9) {
         $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($13);
         if ($7) {
          break block5
         }
         $7 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($13, 0) >> 2];
         $17 = HEAP32[$2 >> 2];
         $15 = $17 + 4 | 0;
         HEAP32[$2 >> 2] = $15;
         HEAP32[$17 >> 2] = $7;
         break block5;
        }
       }
       if (!global$9) {
        $15 = !$25;
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($12);
        if ($15 | $7) {
         break block5
        }
        $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn190106_5d_28_29($12);
        $15 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn190106_5d_28_29($12);
        $7 = wchar_t__20std____2__copy_5babi_nn190106_5d_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($7, $15, HEAP32[$2 >> 2]);
        HEAP32[$2 >> 2] = $7;
        break block5;
       }
      }
      if (!global$9) {
       $26 = HEAP32[$2 >> 2];
       $4 = $4 + $24 | 0;
       $7 = $4;
      }
      while (1) {
       block7 : {
        if (!global$9) {
         $15 = $5 >>> 0 <= $7 >>> 0;
         if ($15) {
          break block7
         }
         $15 = HEAP32[$7 >> 2];
        }
        if (!global$9 | ($23 | 0) == 1) {
         $16 = std____2__ctype_wchar_t___is_5babi_nn190106_5d_28unsigned_20long_2c_20wchar_t_29_20const($6, 64, $15);
         $18 = 1;
         if ((global$9 | 0) == 1) {
          break block6
         }
         $15 = $16;
        }
        if (!global$9) {
         $15 = !$15;
         if ($15) {
          break block7
         }
         $7 = $7 + 4 | 0;
         continue;
        }
       }
       break;
      };
      $15 = global$9 ? $15 : ($14 | 0) > 0;
      if ($15 | (global$9 | 0) == 2) {
       if (!global$9) {
        $16 = HEAP32[$2 >> 2];
        $17 = $14;
        while (1) {
         block8 : {
          $15 = $4 >>> 0 >= $7 >>> 0;
          if ($15) {
           break block8
          }
          $15 = !$17;
          if ($15) {
           break block8
          }
          $17 = $17 - 1 | 0;
          $7 = $7 - 4 | 0;
          $18 = HEAP32[$7 >> 2];
          $15 = $16 + 4 | 0;
          HEAP32[$2 >> 2] = $15;
          HEAP32[$16 >> 2] = $18;
          $16 = $15;
          continue;
         }
         break;
        };
       }
       $22 = global$9 ? $22 : $17;
       if (!global$9 | ($23 | 0) == 2 ? $22 | (global$9 | 0) == 2 : 0) {
        $16 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($6, 48);
        $18 = 2;
        if ((global$9 | 0) == 1) {
         break block6
        }
        $15 = $16;
       }
       $15 = !global$9 & (!$22 | (global$9 | 0) == 2) ? 0 : $15;
       if (!global$9) {
        $16 = HEAP32[$2 >> 2];
        while (1) {
         if (($17 | 0) > 0) {
          $18 = $16 + 4 | 0;
          HEAP32[$2 >> 2] = $18;
          HEAP32[$16 >> 2] = $15;
          $17 = $17 - 1 | 0;
          $16 = $18;
          continue;
         }
         break;
        };
        $17 = HEAP32[$2 >> 2];
        $15 = $17 + 4 | 0;
        HEAP32[$2 >> 2] = $15;
        HEAP32[$17 >> 2] = $9;
       }
      }
      $15 = global$9 ? $15 : ($4 | 0) == ($7 | 0);
      block9 : {
       if ($15 | (global$9 | 0) == 2) {
        if (!global$9 | ($23 | 0) == 3) {
         $16 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($6, 48);
         $18 = 3;
         if ((global$9 | 0) == 1) {
          break block6
         }
         $7 = $16;
        }
        if (!global$9) {
         $17 = HEAP32[$2 >> 2];
         $15 = $17 + 4 | 0;
         HEAP32[$2 >> 2] = $15;
         HEAP32[$17 >> 2] = $7;
         break block9;
        }
       }
       if (!global$9) {
        if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn190106_5d_28_29_20const($11)) {
         $15 = -1
        } else {
         $15 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, 0) | 0]
        }
        $17 = 0;
        $18 = 0;
        while (1) {
         if (($4 | 0) == ($7 | 0)) {
          break block9
         }
         block10 : {
          if (($15 | 0) != ($17 | 0)) {
           $16 = $17;
           break block10;
          }
          $15 = HEAP32[$2 >> 2];
          HEAP32[$2 >> 2] = $15 + 4;
          HEAP32[$15 >> 2] = $10;
          $16 = 0;
          $18 = $18 + 1 | 0;
          if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($11) >>> 0 <= $18 >>> 0) {
           $15 = $17;
           break block10;
          }
          if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, $18) | 0] == 127) {
           $15 = -1;
           break block10;
          }
          $15 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($11, $18) | 0];
         }
         $7 = $7 - 4 | 0;
         $17 = HEAP32[$7 >> 2];
         $27 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $27 + 4;
         HEAP32[$27 >> 2] = $17;
         $17 = $16 + 1 | 0;
         continue;
        };
       }
      }
      if (!global$9) {
       $7 = HEAP32[$2 >> 2];
       void_20std____2__reverse_5babi_nn190106_5d_wchar_t___28wchar_t__2c_20wchar_t__29($26, $7);
      }
     }
     if (!global$9) {
      $20 = $20 + 1 | 0;
      continue;
     }
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $18;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $16 = HEAP32[global$10 >> 2];
  HEAP32[$16 >> 2] = $0;
  HEAP32[$16 + 4 >> 2] = $1;
  HEAP32[$16 + 8 >> 2] = $2;
  HEAP32[$16 + 12 >> 2] = $3;
  HEAP32[$16 + 16 >> 2] = $4;
  HEAP32[$16 + 20 >> 2] = $5;
  HEAP32[$16 + 24 >> 2] = $6;
  HEAP32[$16 + 28 >> 2] = $7;
  HEAP32[$16 + 32 >> 2] = $8;
  HEAP32[$16 + 36 >> 2] = $9;
  HEAP32[$16 + 40 >> 2] = $10;
  HEAP32[$16 + 44 >> 2] = $11;
  HEAP32[$16 + 48 >> 2] = $12;
  HEAP32[$16 + 52 >> 2] = $13;
  HEAP32[$16 + 56 >> 2] = $14;
  HEAP32[$16 + 60 >> 2] = $15;
  HEAP32[$16 + 64 >> 2] = $17;
  HEAP32[$16 + 68 >> 2] = $19;
  HEAP32[$16 + 72 >> 2] = $20;
  HEAP32[$16 + 76 >> 2] = $24;
  HEAP32[$16 + 80 >> 2] = $21;
  HEAP32[$16 + 84 >> 2] = $22;
  HEAP32[$16 + 88 >> 2] = $25;
  HEAP32[$16 + 92 >> 2] = $26;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 96;
 }
 
 function wchar_t__20std____2__copy_5babi_nn190106_5d_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$9;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  auto_20std____2____unwrap_range_5babi_nn190106_5d_std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const____28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___29($3 + 24 | 0, $0, $1);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  $4 = HEAP32[$3 + 24 >> 2];
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $7 = HEAP32[$3 + 28 >> 2];
  HEAP32[$1 + 12 >> 2] = $7;
  $8 = $4;
  $4 = $7 - $4 | 0;
  wchar_t__20std____2____constexpr_memmove_5babi_nn190106_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($2, $8, $4 >> 2);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$1 + 8 >> 2] = $2 + $4;
  std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($3 + 16 | 0, $1 + 12 | 0, $1 + 8 | 0);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $1 + 16 | 0;
  $1 = HEAP32[$3 + 16 >> 2];
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  $0 = $4 + 12 | 0;
  $7 = std____2____to_address_helper_std____2____wrap_iter_char___2c_20void_____call_5babi_nn190106_5d_28std____2____wrap_iter_char___20const__29($0);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  $0 = std____2____wrap_iter_wchar_t____operator__5babi_nn190106_5d_28long_29_20const($0, $1 - $7 >> 2);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $4 + 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  $0 = char__20std____2____rewrap_iter_5babi_nn190106_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($2, HEAP32[$3 + 20 >> 2]);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$3 + 8 >> 2] = $0;
  std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($6 + 8 | 0, $3 + 12 | 0, $3 + 8 | 0);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $3 + 32 | 0;
  __stack_pointer = $6 + 16 | 0;
  return HEAP32[$6 + 12 >> 2];
 }
 
 function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 76;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $12 = HEAP32[$1 + 36 >> 2];
   $13 = HEAP32[$1 + 40 >> 2];
   $14 = HEAP32[$1 + 44 >> 2];
   $15 = HEAP32[$1 + 48 >> 2];
   $16 = HEAP32[$1 + 52 >> 2];
   $17 = HEAP32[$1 + 56 >> 2];
   $18 = HEAP32[$1 + 60 >> 2];
   $19 = HEAP32[$1 + 64 >> 2];
   $20 = HEAP32[$1 + 68 >> 2];
   $21 = HEAP32[$1 + 72 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = __stack_pointer - 480 | 0;
   __stack_pointer = $0;
   $7 = $0 + 476 | 0;
   std____2__ios_base__getloc_28_29_20const($7, $3);
  }
  block : {
   if (!global$9 | !$8) {
    $6 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn190106_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($7);
    if ((global$9 | 0) == 1) {
     break block
    }
    $18 = $6;
   }
   if (!global$9) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($5)
   }
   if ((global$9 | 0) == 2 | $7) {
    if (!global$9) {
     $7 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29_20const($5, 0) >> 2]
    }
    if (!global$9 | ($8 | 0) == 1) {
     $6 = std____2__ctype_wchar_t___widen_5babi_nn190106_5d_28char_29_20const($18, 45);
     $9 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
     $10 = $6;
    }
    $15 = global$9 ? $15 : ($7 | 0) == ($10 | 0);
   }
   if (!global$9) {
    $11 = $0 + 472 | 0;
    $12 = $0 + 468 | 0;
    $16 = $0 + 464 | 0;
    $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 452 | 0);
    $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 440 | 0);
    $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($0 + 428 | 0);
    $14 = $0 + 424 | 0;
    $7 = $0 + 476 | 0;
   }
   if (!global$9 | ($8 | 0) == 2) {
    std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20int__29($2, $15, $7, $11, $12, $16, $17, $10, $13, $14);
    $9 = 2;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$0 + 16 >> 2] = 282;
    $11 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn190106_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
    block1 : {
     if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($5) | 0) > HEAP32[$0 + 424 >> 2]) {
      $7 = ((((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($5) - HEAP32[$0 + 424 >> 2] << 1) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($13) | 0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($10) | 0) + HEAP32[$0 + 424 >> 2] | 0) + 1 | 0;
      break block1;
     }
     $7 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($13) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($10) | 0) + HEAP32[$0 + 424 >> 2] | 0) + 2 | 0;
    }
    $12 = $7 >>> 0 < 101;
    $2 = $0 + 16 | 0;
   }
   block2 : {
    if (!global$9) {
     if ($12) {
      break block2
     }
     $2 = $7 << 2;
    }
    if (!global$9 | ($8 | 0) == 3) {
     $6 = emscripten_builtin_malloc($2);
     $9 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $2 = $6;
    }
    if (!global$9 | ($8 | 0) == 4) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn190106_5d_28unsigned_20char__29($11, $2);
     $9 = 4;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $2 = HEAP32[$11 >> 2];
     if ($2) {
      break block2
     }
     std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    $12 = HEAP32[$3 + 4 >> 2];
    $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($5);
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($5);
    $5 = $7 + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($5) << 2) | 0;
    $14 = $0 + 472 | 0;
    $19 = HEAP32[$0 + 468 >> 2];
    $20 = HEAP32[$0 + 464 >> 2];
    $21 = HEAP32[$0 + 424 >> 2];
    $7 = $0 + 4 | 0;
   }
   if (!global$9 | ($8 | 0) == 5) {
    std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20int_29($2, $7, $0, $12, $16, $5, $18, $15, $14, $19, $20, $17, $10, $13, $21);
    $9 = 5;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $7 = HEAP32[$0 >> 2];
    $5 = HEAP32[$0 + 4 >> 2];
   }
   if (!global$9 | ($8 | 0) == 6) {
    $6 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn190106_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, $5, $7, $3, $4);
    $9 = 6;
    if ((global$9 | 0) == 1) {
     break block
    }
    $5 = $6;
   }
   if (!global$9 | ($8 | 0) == 7) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn190106_5d_28_29($11);
    $9 = 7;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($8 | 0) == 8) {
    $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($13);
    $9 = 8;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   if (!global$9 | ($8 | 0) == 9) {
    $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($10);
    $9 = 9;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   if (!global$9 | ($8 | 0) == 10) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($17);
    $9 = 10;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $6;
   }
   $1 = global$9 ? $1 : $0 + 476 | 0;
   if (!global$9 | ($8 | 0) == 11) {
    std____2__locale___locale_28_29($1);
    $9 = 11;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    __stack_pointer = $0 + 480 | 0;
    return $5 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[$6 + 32 >> 2] = $11;
  HEAP32[$6 + 36 >> 2] = $12;
  HEAP32[$6 + 40 >> 2] = $13;
  HEAP32[$6 + 44 >> 2] = $14;
  HEAP32[$6 + 48 >> 2] = $15;
  HEAP32[$6 + 52 >> 2] = $16;
  HEAP32[$6 + 56 >> 2] = $17;
  HEAP32[$6 + 60 >> 2] = $18;
  HEAP32[$6 + 64 >> 2] = $19;
  HEAP32[$6 + 68 >> 2] = $20;
  HEAP32[$6 + 72 >> 2] = $21;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 76;
  return 0;
 }
 
 function std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__locale_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return -1;
 }
 
 function std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $5 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $5);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $6 = HEAP32[$6 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
   $1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($5);
  }
  block3 : {
   block : {
    if (!global$9) {
     if ($1) {
      HEAP32[$0 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $1 = HEAP32[$5 + 4 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$0 + 4 >> 2] = $1;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn190106_5d_28_29_20const($0);
      break block;
     }
     $3 = HEAP32[$5 >> 2];
     $2 = __stack_pointer - 16 | 0;
     __stack_pointer = $2;
     $5 = HEAP32[$5 + 4 >> 2];
     $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($5);
    }
    block4 : {
     block2 : {
      block1 : {
       if (!global$9) {
        if ($1) {
         $1 = $0;
         std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $5);
         break block1;
        }
        if ($5 >>> 0 > 1073741815) {
         break block2
        }
        $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn190106_5d_28unsigned_20long_29($5) + 1 | 0;
        $1 = $2 + 8 | 0;
       }
       if (!global$9 | !$7) {
        auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_wchar_t___28std____2__allocator_wchar_t___2c_20unsigned_20long_29($1, $6);
        if ((global$9 | 0) == 1) {
         break block3
        }
       }
       if (!global$9) {
        $1 = HEAP32[$2 + 8 >> 2];
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $1);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$2 + 12 >> 2]);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $5);
       }
      }
      if (!global$9) {
       std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($1, $3, $5 + 1 | 0);
       __stack_pointer = $2 + 16 | 0;
       break block4;
      }
     }
     if (!global$9) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
      wasm2js_trap();
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 35064;
   $1 = HEAP32[$0 + 8 >> 2];
  }
  block : {
   if (!global$9 | !$4) {
    $3 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $3;
   }
   $1 = global$9 ? $1 : ($1 | 0) != ($2 | 0);
   if ($1 | (global$9 | 0) == 2) {
    $1 = global$9 ? $1 : HEAP32[$0 + 8 >> 2];
    if (!global$9 | ($4 | 0) == 1) {
     freelocale($1);
     $5 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29($0, $1) {
  HEAP32[$0 + 4 >> 2] = $1 - 1;
  HEAP32[$0 >> 2] = 40640;
  HEAP32[$0 >> 2] = 35440;
  return $0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn190106_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($0, $1) {
  HEAP32[$0 >> 2] = $1;
  return $0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $5 = global$9;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $2 = $4 + 4 | 0;
  HEAP32[$2 >> 2] = $0;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$2 + 8 >> 2] = $3 + ($1 << 2);
  $1 = HEAP32[$2 + 4 >> 2];
  $3 = HEAP32[$2 + 8 >> 2];
  while (1) {
   if (($1 | 0) == ($3 | 0)) {
    HEAP32[HEAP32[$2 >> 2] + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    __stack_pointer = $4 + 16 | 0;
   } else {
    std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______alloc_5babi_nn190106_5d_28_29($0);
    if ((global$9 | 0) != ($5 | 0)) {
     wasm2js_trap()
    }
    std____2__locale__facet___20std____2____construct_at_5babi_nn190106_5d_std____2__locale__facet__2c_20std____2__locale__facet____28std____2__locale__facet___29($1);
    if ((global$9 | 0) != ($5 | 0)) {
     wasm2js_trap()
    }
    $1 = $1 + 4 | 0;
    HEAP32[$2 + 4 >> 2] = $1;
    continue;
   }
   break;
  };
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($0) {
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______clear_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = global$9;
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______base_destruct_at_end_5babi_nn190106_5d_28std____2__locale__facet___29($0, HEAP32[$0 >> 2]);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__locale__id____get_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $5 = HEAP32[$1 + 4 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 12 >> 2] = $0;
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
   $5 = (Atomics.load(HEAP32, $0 >> 2) | 0) != -1;
  }
  block : {
   if ((global$9 | 0) == 2 | $5) {
    block1 : {
     if (!global$9) {
      $1 = std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2__locale__id____get_28_29__$_0_______tuple_impl_5babi_nn190106_5d_0ul_2c_20std____2__locale__id____get_28_29__$_0___2c_20std____2__locale__id____get_28_29__$_0__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2__locale__id____get_28_29__$_0____2c_20std____2____tuple_indices______2c_20std____2____tuple_types___2c_20std____2__locale__id____get_28_29__$_0___29($4 + 12 | 0, $3 + 12 | 0);
      $5 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn190106_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($4 + 8 | 0, $1);
     }
     if (!global$9 | !$6) {
      $2 = __pthread_mutex_lock(78324);
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $2;
     }
     while (1) {
      $1 = global$9 ? $1 : HEAP32[$0 >> 2] == 1;
      if ($1 | (global$9 | 0) == 2) {
       if (!global$9 | ($6 | 0) == 1) {
        std____2____libcpp_condvar_wait_5babi_nn190106_5d_28pthread_cond_t__2c_20pthread_mutex_t__29(78348, 78324);
        $7 = 1;
        if ((global$9 | 0) == 1) {
         break block
        }
       }
       if (!global$9) {
        continue
       }
      }
      break;
     };
     if ((global$9 | 0) == 2 | (global$9 ? $1 : !HEAP32[$0 >> 2])) {
      if (!global$9) {
       Atomics.store(HEAP32, $0 >> 2, 1);
       __pthread_mutex_unlock(78324);
       void_20std____2____call_once_proxy_5babi_nn190106_5d_std____2__tuple_std____2__locale__id____get_28_29__$_0_____28void__29($5);
      }
      if (!global$9 | ($6 | 0) == 2) {
       __pthread_mutex_lock(78324);
       $7 = 2;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       Atomics.store(HEAP32, $0 >> 2, -1);
       __pthread_mutex_unlock(78324);
      }
      if (!global$9 | ($6 | 0) == 3) {
       pthread_cond_broadcast(78348);
       $7 = 3;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       break block1
      }
     }
     if (!global$9) {
      __pthread_mutex_unlock(78324)
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $4 + 16 | 0;
    __stack_pointer = $3 + 16 | 0;
    return HEAP32[$0 + 4 >> 2] - 1 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $5;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $3;
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 56;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $9 = HEAP32[$1 + 24 >> 2];
   $8 = HEAP32[$1 + 28 >> 2];
   $7 = HEAP32[$1 + 32 >> 2];
   $10 = HEAP32[$1 + 36 >> 2];
   $11 = HEAP32[$1 + 40 >> 2];
   $12 = HEAP32[$1 + 44 >> 2];
   $13 = HEAP32[$1 + 48 >> 2];
   $15 = HEAP32[$1 + 52 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $14 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $11 = __stack_pointer - 16 | 0;
   __stack_pointer = $11;
   std____2____shared_count____add_shared_5babi_nn190106_5d_28_29($1);
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 12 >> 2] = $1;
   $10 = std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_void_20_28__29_28void__29_2c_200__28void_20_28____29_28void__29_29($11 + 12 | 0, $3 + 12 | 0);
   $3 = $3 + 16 | 0;
   __stack_pointer = $3;
   $1 = $0 + 8 | 0;
   $0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($1) >>> 0 <= $2 >>> 0;
  }
  block2 : {
   if ((global$9 | 0) == 2 | $0) {
    block3 : {
     if (!global$9) {
      $0 = $2 + 1 | 0;
      $3 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($1);
      $5 = $0 >>> 0 > $3 >>> 0;
     }
     if ((global$9 | 0) == 2 | $5) {
      if (!global$9) {
       $5 = __stack_pointer;
       $12 = $5 - 32 | 0;
       __stack_pointer = $12;
       $9 = $0 - $3 | 0;
       $6 = $1;
       $0 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______end_cap_5babi_nn190106_5d_28_29($1) >> 2];
       $3 = HEAP32[$1 + 4 >> 2];
       $0 = $9 >>> 0 <= $0 - $3 >> 2 >>> 0;
      }
      block : {
       if (!global$9) {
        if ($0) {
         std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______construct_at_end_28unsigned_20long_29($6, $9);
         break block;
        }
        $4 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______alloc_5babi_nn190106_5d_28_29($6);
        $3 = $12 + 12 | 0;
        $5 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($6) + $9 | 0;
        $0 = __stack_pointer - 16 | 0;
        __stack_pointer = $0;
        HEAP32[$0 + 12 >> 2] = $5;
        block1 : {
         $7 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____max_size_28_29_20const($6);
         if ($5 >>> 0 <= $7 >>> 0) {
          $5 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____capacity_5babi_nn190106_5d_28_29_20const($6);
          if ($5 >>> 0 < $7 >>> 1 >>> 0) {
           HEAP32[$0 + 8 >> 2] = $5 << 1;
           $7 = HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0 + 8 | 0, $0 + 12 | 0) >> 2];
          }
          __stack_pointer = $0 + 16 | 0;
          $5 = $7;
          break block1;
         }
         std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
         wasm2js_trap();
        }
        $15 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($6);
        $7 = 0;
        $8 = __stack_pointer - 16 | 0;
        __stack_pointer = $8;
        HEAP32[$8 + 12 >> 2] = 0;
        $0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn190106_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29(std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_std__nullptr_t_2c_200__28std__nullptr_t___29($3 + 12 | 0) + 4 | 0, $4);
       }
       $13 = global$9 ? $13 : $5;
       if ($13 | (global$9 | 0) == 2) {
        if (!global$9) {
         $7 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_5babi_nn190106_5d_28_29($3);
         $0 = $8 + 4 | 0;
        }
        if (!global$9 | !$14) {
         auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29($0, $7, $5);
         $4 = 0;
         if ((global$9 | 0) == 1) {
          break block2
         }
        }
        if (!global$9) {
         $7 = HEAP32[$8 + 4 >> 2];
         $5 = HEAP32[$8 + 8 >> 2];
        }
       }
       $5 = !global$9 & (!$13 | (global$9 | 0) == 2) ? 0 : $5;
       if (!global$9) {
        HEAP32[$3 >> 2] = $7;
        $0 = ($15 << 2) + $7 | 0;
        HEAP32[$3 + 8 >> 2] = $0;
        HEAP32[$3 + 4 >> 2] = $0;
        (wasm2js_i32$0 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_5babi_nn190106_5d_28_29($3), wasm2js_i32$1 = ($5 << 2) + $7 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        __stack_pointer = $8 + 16 | 0;
        $8 = __stack_pointer - 16 | 0;
        __stack_pointer = $8;
        $0 = $3;
        $7 = $0 + 8 | 0;
        $5 = HEAP32[$7 >> 2];
        $4 = $8 + 4 | 0;
        HEAP32[$4 + 8 >> 2] = $7;
        HEAP32[$4 >> 2] = $5;
        HEAP32[$4 + 4 >> 2] = ($9 << 2) + $5;
        $3 = HEAP32[$4 >> 2];
        while (1) {
         if (HEAP32[$4 + 4 >> 2] != ($3 | 0)) {
          std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_5babi_nn190106_5d_28_29($0);
          std____2__locale__facet___20std____2____construct_at_5babi_nn190106_5d_std____2__locale__facet__2c_20std____2__locale__facet____28std____2__locale__facet___29(HEAP32[$4 >> 2]);
          $3 = HEAP32[$4 >> 2] + 4 | 0;
          HEAP32[$4 >> 2] = $3;
          continue;
         }
         break;
        };
        HEAP32[HEAP32[$4 + 8 >> 2] >> 2] = HEAP32[$4 >> 2];
        __stack_pointer = $8 + 16 | 0;
        $3 = HEAP32[$6 + 4 >> 2];
        $4 = HEAP32[$6 >> 2];
        $9 = HEAP32[$0 + 4 >> 2];
        std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______alloc_5babi_nn190106_5d_28_29($6);
        $9 = $9 + ($4 - $3 | 0) | 0;
        $8 = HEAP32[$6 >> 2];
        $3 = HEAP32[$6 + 4 >> 2] - $8 | 0;
        if ($3) {
         wasm2js_memory_copy($9, $8, $3)
        }
        HEAP32[$0 + 4 >> 2] = $9;
        HEAP32[$6 + 4 >> 2] = HEAP32[$6 >> 2];
        std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn190106_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($6, $0 + 4 | 0);
        std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn190106_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($6 + 4 | 0, $0 + 8 | 0);
        std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn190106_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29(std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______end_cap_5babi_nn190106_5d_28_29($6), std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_5babi_nn190106_5d_28_29($0));
        HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
        std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($6);
        $3 = HEAP32[$0 + 4 >> 2];
        while (1) {
         if (($3 | 0) != HEAP32[$0 + 8 >> 2]) {
          std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_5babi_nn190106_5d_28_29($0);
          HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] - 4;
          continue;
         }
         break;
        };
        $3 = HEAP32[$0 >> 2];
       }
       if ((global$9 | 0) == 2 | $3) {
        if (!global$9) {
         $6 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_5babi_nn190106_5d_28_29($0);
         $9 = HEAP32[$0 >> 2];
         $3 = HEAP32[std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_5babi_nn190106_5d_28_29($0) >> 2];
         $0 = HEAP32[$0 >> 2];
        }
        if (!global$9 | ($14 | 0) == 1) {
         std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____deallocate_5babi_nn190106_5d_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29($6, $9);
         $4 = 1;
         if ((global$9 | 0) == 1) {
          break block2
         }
        }
       }
      }
      if (!global$9) {
       $0 = $12 + 32 | 0;
       __stack_pointer = $0;
       break block3;
      }
     }
     if (!global$9 & $0 >>> 0 < $3 >>> 0) {
      $0 = HEAP32[$1 >> 2] + ($0 << 2) | 0;
      std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($1);
      std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______base_destruct_at_end_5babi_nn190106_5d_28std____2__locale__facet___29($1, $0);
     }
    }
   }
   if (!global$9) {
    $0 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29($1, $2) >> 2]
   }
   if ((global$9 | 0) == 2 | $0) {
    if (!global$9) {
     $0 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29($1, $2) >> 2]
    }
    if (!global$9 | ($14 | 0) == 2) {
     std____2____shared_count____release_shared_5babi_nn190106_5d_28_29($0);
     $4 = 2;
     if ((global$9 | 0) == 1) {
      break block2
     }
    }
   }
   if (!global$9) {
    $0 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_5babi_nn190106_5d_28_29($10);
    (wasm2js_i32$0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29($1, $2), wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$10 >> 2];
    HEAP32[$10 >> 2] = 0;
   }
   if (!global$9 | ($14 | 0) == 3 ? (global$9 | 0) == 2 | $0 : 0) {
    std____2____shared_count____release_shared_5babi_nn190106_5d_28_29($0);
    $4 = 3;
    if ((global$9 | 0) == 1) {
     break block2
    }
   }
   if (!global$9) {
    __stack_pointer = $11 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $9;
  HEAP32[$4 + 28 >> 2] = $8;
  HEAP32[$4 + 32 >> 2] = $7;
  HEAP32[$4 + 36 >> 2] = $10;
  HEAP32[$4 + 40 >> 2] = $11;
  HEAP32[$4 + 44 >> 2] = $12;
  HEAP32[$4 + 48 >> 2] = $13;
  HEAP32[$4 + 52 >> 2] = $15;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 56;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29($0, $1) {
  return HEAP32[$0 >> 2] + ($1 << 2) | 0;
 }
 
 function std____2____shared_count____add_shared_5babi_nn190106_5d_28_29($0) {
  Atomics.add(HEAP32, $0 + 4 >> 2, 1);
 }
 
 function std____2____shared_count____release_shared_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = (long_20std____2____libcpp_atomic_refcount_decrement_5babi_nn190106_5d_long__28long__29($0 + 4 | 0) | 0) == -1
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 8 >> 2];
    if (!global$9 | !$2) {
     FUNCTION_TABLE[$1 | 0]($0);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__locale____imp_____imp_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   $5 = HEAP32[$2 + 16 >> 2];
   $1 = HEAP32[$2 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 33960;
   $3 = $0 + 8 | 0;
  }
  block : {
   while (1) {
    if (!global$9) {
     $4 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($3) >>> 0 > $1 >>> 0
    }
    if ((global$9 | 0) == 2 | $4) {
     if (!global$9) {
      $4 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29($3, $1) >> 2]
     }
     if ((global$9 | 0) == 2 | $4) {
      if (!global$9) {
       $4 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn190106_5d_28unsigned_20long_29($3, $1) >> 2]
      }
      if (!global$9 | !$6) {
       std____2____shared_count____release_shared_5babi_nn190106_5d_28_29($4);
       if ((global$9 | 0) == 1) {
        break block
       }
      }
     }
     if (!global$9) {
      $1 = $1 + 1 | 0;
      continue;
     }
    }
    break;
   };
   $1 = global$9 ? $1 : $0 + 144 | 0;
   if (!global$9 | ($6 | 0) == 1) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    $7 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    $1 = __stack_pointer - 16 | 0;
    __stack_pointer = $1;
    $3 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn190106_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($1 + 12 | 0, $3);
    $4 = HEAP32[$3 >> 2];
    $5 = HEAP32[$4 >> 2];
   }
   if ((global$9 | 0) == 2 | $5) {
    if (!global$9) {
     std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______clear_5babi_nn190106_5d_28_29($4);
     $4 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______alloc_5babi_nn190106_5d_28_29(HEAP32[$3 >> 2]);
     $3 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 >> 2];
     std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____capacity_5babi_nn190106_5d_28_29_20const($3);
    }
    if (!global$9 | ($6 | 0) == 2) {
     std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____deallocate_5babi_nn190106_5d_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29($4, $5);
     $7 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $1 + 16 | 0;
    return $0 | 0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $4;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function long_20std____2____libcpp_atomic_refcount_decrement_5babi_nn190106_5d_long__28long__29($0) {
  return Atomics.add(HEAP32, $0 >> 2, -1) - 1 | 0;
 }
 
 function std____2__locale____imp_____imp_28_29_1762($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__locale____imp_____imp_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__locale__locale_28std____2__locale_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$9;
  $3 = $0;
  $0 = HEAP32[$1 >> 2];
  HEAP32[$3 >> 2] = $0;
  std____2__locale____imp__acquire_28_29($0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__locale____imp__acquire_28_29($0) {
  var $1 = 0;
  $1 = global$9;
  if (($0 | 0) != 78568) {
   std____2____shared_count____add_shared_5babi_nn190106_5d_28_29($0);
   if ((global$9 | 0) != ($1 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function std____2__locale__locale_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $5 = HEAP32[$1 + 8 >> 2];
   $6 = HEAP32[$1 + 12 >> 2];
   $10 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 28 >> 2];
   $11 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = Atomics.load(HEAPU8, 78736) & 1
  }
  block1 : {
   block : {
    if (!($1 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$3) {
     $2 = __cxa_guard_acquire(78736);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $1 = $2;
    }
    if (!global$9) {
     if (!$1) {
      break block
     }
     $8 = __stack_pointer - 16 | 0;
     __stack_pointer = $8;
     $1 = Atomics.load(HEAPU8, 78728) & 1;
    }
    block2 : {
     if (!($1 ? global$9 : 1)) {
      break block2
     }
     if (!global$9 | ($3 | 0) == 1) {
      $2 = __cxa_guard_acquire(78728);
      $4 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9) {
      if (!$1) {
       break block2
      }
      $9 = __stack_pointer - 16 | 0;
      __stack_pointer = $9;
      HEAP32[$9 + 12 >> 2] = 1;
      $5 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(78568, HEAP32[$9 + 12 >> 2]);
      HEAP32[$5 >> 2] = 33960;
      $6 = __stack_pointer - 16 | 0;
      __stack_pointer = $6;
      $1 = $5 + 8 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$6 + 12 >> 2] = 0;
      (wasm2js_i32$0 = std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_std__nullptr_t_2c_200__28std__nullptr_t___29($1 + 8 | 0), wasm2js_i32$1 = 0), HEAP8[wasm2js_i32$0 + 124 | 0] = wasm2js_i32$1;
      std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn190106_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($6 + 4 | 0, $1);
      HEAP8[$6 + 10 | 0] = 0;
      $7 = __stack_pointer - 16 | 0;
      __stack_pointer = $7;
      if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____max_size_28_29_20const($1) >>> 0 < 30) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
       wasm2js_trap();
      }
      $11 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______alloc_5babi_nn190106_5d_28_29($1);
      $10 = $7 + 8 | 0;
     }
     if (!global$9 | ($3 | 0) == 2) {
      auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29($10, $11, 30);
      $4 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $2 = HEAP32[$7 + 8 >> 2];
      HEAP32[$1 + 4 >> 2] = $2;
      HEAP32[$1 >> 2] = $2;
      $10 = $2 + (HEAP32[$7 + 12 >> 2] << 2) | 0;
      (wasm2js_i32$0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______end_cap_5babi_nn190106_5d_28_29($1), wasm2js_i32$1 = $10), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      __stack_pointer = $7 + 16 | 0;
      std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______construct_at_end_28unsigned_20long_29($1, 30);
      HEAP8[$6 + 10 | 0] = 1;
      __stack_pointer = $6 + 16 | 0;
      $6 = $5 + 144 | 0;
     }
     if (!global$9 | ($3 | 0) == 3) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_0__28char_20const__29($6, 11066);
      $4 = 3;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $6 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____size_5babi_nn190106_5d_28_29_20const($1);
      std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______clear_5babi_nn190106_5d_28_29($1);
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(79996, 1);
      HEAP32[$1 >> 2] = 36552;
     }
     if (!global$9 | ($3 | 0) == 4) {
      $2 = std____2__locale__id____get_28_29(78400);
      $4 = 4;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 5) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 79996, $1);
      $4 = 5;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80004, 1);
      HEAP32[$1 >> 2] = 36584;
     }
     if (!global$9 | ($3 | 0) == 6) {
      $2 = std____2__locale__id____get_28_29(78408);
      $4 = 6;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 7) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80004, $1);
      $4 = 7;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80012, 1);
      HEAP8[$1 + 12 | 0] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 >> 2] = 33980;
      HEAP32[$1 + 8 >> 2] = 34032;
     }
     if (!global$9 | ($3 | 0) == 8) {
      $2 = std____2__locale__id____get_28_29(78752);
      $4 = 8;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 9) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80012, $1);
      $4 = 9;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80028, 1);
      HEAP32[$1 >> 2] = 35496;
     }
     if (!global$9 | ($3 | 0) == 10) {
      $2 = std____2__locale__id____get_28_29(78744);
      $4 = 10;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 11) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80028, $1);
      $4 = 11;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80036, 1);
      HEAP32[$1 >> 2] = 35648;
     }
     if (!global$9 | ($3 | 0) == 12) {
      $2 = std____2__locale__id____get_28_29(78760);
      $4 = 12;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 13) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80036, $1);
      $4 = 13;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80044, 1);
      HEAP32[$1 >> 2] = 35064;
     }
     if (!global$9 | ($3 | 0) == 14) {
      $2 = std____2____cloc_28_29();
      $4 = 14;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $6 = $2;
     }
     if (!global$9) {
      HEAP32[$1 + 8 >> 2] = $6
     }
     if (!global$9 | ($3 | 0) == 15) {
      $2 = std____2__locale__id____get_28_29(78768);
      $4 = 15;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 16) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80044, $1);
      $4 = 16;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80056, 1);
      HEAP32[$1 >> 2] = 35796;
     }
     if (!global$9 | ($3 | 0) == 17) {
      $2 = std____2__locale__id____get_28_29(78776);
      $4 = 17;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 18) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80056, $1);
      $4 = 18;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80064, 1);
      HEAP32[$1 >> 2] = 36028;
     }
     if (!global$9 | ($3 | 0) == 19) {
      $2 = std____2__locale__id____get_28_29(78792);
      $4 = 19;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 20) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80064, $1);
      $4 = 20;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80072, 1);
      HEAP32[$1 >> 2] = 35912;
     }
     if (!global$9 | ($3 | 0) == 21) {
      $2 = std____2__locale__id____get_28_29(78784);
      $4 = 21;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 22) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80072, $1);
      $4 = 22;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80080, 1);
      HEAP32[$1 >> 2] = 36144;
     }
     if (!global$9 | ($3 | 0) == 23) {
      $2 = std____2__locale__id____get_28_29(78800);
      $4 = 23;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 24) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80080, $1);
      $4 = 24;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80088, 1);
      HEAP16[$1 + 8 >> 1] = 11310;
      HEAP32[$1 >> 2] = 35112;
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($1 + 12 | 0);
     }
     if (!global$9 | ($3 | 0) == 25) {
      $2 = std____2__locale__id____get_28_29(78808);
      $4 = 25;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 26) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80088, $1);
      $4 = 26;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80112, 1);
      HEAP32[$1 + 8 >> 2] = 46;
      HEAP32[$1 + 12 >> 2] = 44;
      HEAP32[$1 >> 2] = 35152;
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_28_29($1 + 16 | 0);
     }
     if (!global$9 | ($3 | 0) == 27) {
      $2 = std____2__locale__id____get_28_29(78816);
      $4 = 27;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 28) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80112, $1);
      $4 = 28;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80140, 1);
      HEAP32[$1 >> 2] = 36616;
     }
     if (!global$9 | ($3 | 0) == 29) {
      $2 = std____2__locale__id____get_28_29(78416);
      $4 = 29;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 30) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80140, $1);
      $4 = 30;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80148, 1);
      HEAP32[$1 >> 2] = 36864;
     }
     if (!global$9 | ($3 | 0) == 31) {
      $2 = std____2__locale__id____get_28_29(78424);
      $4 = 31;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 32) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80148, $1);
      $4 = 32;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80156, 1);
      HEAP32[$1 >> 2] = 37076;
     }
     if (!global$9 | ($3 | 0) == 33) {
      $2 = std____2__locale__id____get_28_29(78432);
      $4 = 33;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 34) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80156, $1);
      $4 = 34;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80164, 1);
      HEAP32[$1 >> 2] = 37312;
     }
     if (!global$9 | ($3 | 0) == 35) {
      $2 = std____2__locale__id____get_28_29(78440);
      $4 = 35;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 36) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80164, $1);
      $4 = 36;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80172, 1);
      HEAP32[$1 >> 2] = 38308;
     }
     if (!global$9 | ($3 | 0) == 37) {
      $2 = std____2__locale__id____get_28_29(78480);
      $4 = 37;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 38) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80172, $1);
      $4 = 38;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80180, 1);
      HEAP32[$1 >> 2] = 38456;
     }
     if (!global$9 | ($3 | 0) == 39) {
      $2 = std____2__locale__id____get_28_29(78488);
      $4 = 39;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 40) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80180, $1);
      $4 = 40;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80188, 1);
      HEAP32[$1 >> 2] = 38572;
     }
     if (!global$9 | ($3 | 0) == 41) {
      $2 = std____2__locale__id____get_28_29(78496);
      $4 = 41;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 42) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80188, $1);
      $4 = 42;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80196, 1);
      HEAP32[$1 >> 2] = 38688;
     }
     if (!global$9 | ($3 | 0) == 43) {
      $2 = std____2__locale__id____get_28_29(78504);
      $4 = 43;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 44) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80196, $1);
      $4 = 44;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80204, 1);
      HEAP32[$1 >> 2] = 38804;
     }
     if (!global$9 | ($3 | 0) == 45) {
      $2 = std____2__locale__id____get_28_29(78512);
      $4 = 45;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 46) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80204, $1);
      $4 = 46;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80212, 1);
      HEAP32[$1 >> 2] = 38972;
     }
     if (!global$9 | ($3 | 0) == 47) {
      $2 = std____2__locale__id____get_28_29(78520);
      $4 = 47;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 48) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80212, $1);
      $4 = 48;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80220, 1);
      HEAP32[$1 >> 2] = 39140;
     }
     if (!global$9 | ($3 | 0) == 49) {
      $2 = std____2__locale__id____get_28_29(78528);
      $4 = 49;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 50) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80220, $1);
      $4 = 50;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80228, 1);
      HEAP32[$1 >> 2] = 39308;
     }
     if (!global$9 | ($3 | 0) == 51) {
      $2 = std____2__locale__id____get_28_29(78536);
      $4 = 51;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 52) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80228, $1);
      $4 = 52;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80236, 1);
      $6 = $1 + 8 | 0;
      HEAP32[$6 >> 2] = 40568;
      HEAP32[$1 >> 2] = 37512;
      HEAP32[$6 >> 2] = 37560;
     }
     if (!global$9 | ($3 | 0) == 53) {
      $2 = std____2__locale__id____get_28_29(78448);
      $4 = 53;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 54) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80236, $1);
      $4 = 54;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80248, 1);
      $6 = $1 + 8 | 0;
      HEAP32[$6 >> 2] = 40604;
      HEAP32[$1 >> 2] = 37780;
      HEAP32[$6 >> 2] = 37828;
     }
     if (!global$9 | ($3 | 0) == 55) {
      $2 = std____2__locale__id____get_28_29(78456);
      $4 = 55;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 56) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80248, $1);
      $4 = 56;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80260, 1);
      $6 = $1 + 8 | 0;
     }
     if (!global$9 | ($3 | 0) == 57) {
      std____2____time_put____time_put_5babi_nn190106_5d_28_29($6);
      $4 = 57;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      HEAP32[$1 >> 2] = 38020
     }
     if (!global$9 | ($3 | 0) == 58) {
      $2 = std____2__locale__id____get_28_29(78464);
      $4 = 58;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 59) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80260, $1);
      $4 = 59;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80272, 1);
      $6 = $1 + 8 | 0;
     }
     if (!global$9 | ($3 | 0) == 60) {
      std____2____time_put____time_put_5babi_nn190106_5d_28_29($6);
      $4 = 60;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      HEAP32[$1 >> 2] = 38180
     }
     if (!global$9 | ($3 | 0) == 61) {
      $2 = std____2__locale__id____get_28_29(78472);
      $4 = 61;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 62) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80272, $1);
      $4 = 62;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80284, 1);
      HEAP32[$1 >> 2] = 39476;
     }
     if (!global$9 | ($3 | 0) == 63) {
      $2 = std____2__locale__id____get_28_29(78544);
      $4 = 63;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 64) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80284, $1);
      $4 = 64;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      $1 = std____2__locale__facet__facet_5babi_nn190106_5d_28unsigned_20long_29(80292, 1);
      HEAP32[$1 >> 2] = 39596;
     }
     if (!global$9 | ($3 | 0) == 65) {
      $2 = std____2__locale__id____get_28_29(78552);
      $4 = 65;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $1 = $2;
     }
     if (!global$9 | ($3 | 0) == 66) {
      std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($5, 80292, $1);
      $4 = 66;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
     if (!global$9) {
      __stack_pointer = $9 + 16 | 0;
      HEAP32[$8 + 8 >> 2] = 78568;
      std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn190106_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29(78724, HEAP32[$8 + 8 >> 2]);
     }
     if (!global$9 | ($3 | 0) == 67) {
      __cxa_guard_release(78728);
      $4 = 67;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9) {
     __stack_pointer = $8 + 16 | 0;
     std____2__locale__locale_28std____2__locale_20const__29(78732, 78724);
    }
    if (!global$9 | ($3 | 0) == 68) {
     __cxa_guard_release(78736);
     $4 = 68;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    $2 = $0;
    $0 = HEAP32[19683];
    HEAP32[$2 >> 2] = $0;
    std____2__locale____imp__acquire_28_29($0);
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $5;
  HEAP32[$2 + 12 >> 2] = $6;
  HEAP32[$2 + 16 >> 2] = $10;
  HEAP32[$2 + 20 >> 2] = $7;
  HEAP32[$2 + 24 >> 2] = $8;
  HEAP32[$2 + 28 >> 2] = $9;
  HEAP32[$2 + 32 >> 2] = $11;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
 }
 
 function std____2__locale__facet____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $1 = global$9 ? $1 : HEAP32[HEAP32[$0 >> 2] + 4 >> 2];
  block : {
   if (!global$9 | !$2) {
    FUNCTION_TABLE[$1 | 0]($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function void_20std____2____call_once_proxy_5babi_nn190106_5d_std____2__tuple_std____2__locale__id____get_28_29__$_0_____28void__29($0) {
  $0 = $0 | 0;
  HEAP32[HEAP32[HEAP32[HEAP32[$0 >> 2] >> 2] >> 2] + 4 >> 2] = Atomics.add(HEAP32, 0 + 78740 >> 2, 1) + 1;
 }
 
 function std____2__ctype_wchar_t___do_is_28unsigned_20long_2c_20wchar_t_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if ($2 >>> 0 <= 127) {
   $0 = (HEAP32[($2 << 2) + 34032 >> 2] & $1) != 0
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20long__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[($0 << 2) + 34032 >> 2]
    } else {
     $0 = 0
    }
    HEAP32[$3 >> 2] = $0;
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_scan_is_28unsigned_20long_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   block : {
    if (($2 | 0) == ($3 | 0)) {
     break block
    }
    $0 = HEAP32[$2 >> 2];
    if (HEAP32[($0 << 2) + 34032 >> 2] & $1 ? $0 >>> 0 <= 127 : 0) {
     break block
    }
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_wchar_t___do_scan_not_28unsigned_20long_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   block : {
    if (($2 | 0) == ($3 | 0)) {
     break block
    }
    $0 = HEAP32[$2 >> 2];
    if ($0 >>> 0 > 127 | !(HEAP32[($0 << 2) + 34032 >> 2] & $1)) {
     break block
    }
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if ($1 >>> 0 <= 127) {
   $1 = HEAP32[HEAP32[7653] + ($1 << 2) >> 2]
  }
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[HEAP32[7653] + (HEAP32[$1 >> 2] << 2) >> 2]
    }
    HEAP32[$1 >> 2] = $0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if ($1 >>> 0 <= 127) {
   $1 = HEAP32[HEAP32[8040] + ($1 << 2) >> 2]
  }
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[HEAP32[8040] + (HEAP32[$1 >> 2] << 2) >> 2]
    }
    HEAP32[$1 >> 2] = $0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_widen_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP32[$3 >> 2] = HEAP8[$1 | 0];
    $3 = $3 + 4 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return ($1 >>> 0 < 128 ? $1 : $2) << 24 >> 24;
 }
 
 function std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$1 >> 2];
    HEAP8[$4 | 0] = $0 >>> 0 < 128 ? $0 : $3;
    $4 = $4 + 1 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_char____ctype_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 33980;
   $1 = HEAP32[$0 + 8 >> 2];
   $3 = !$1;
  }
  block1 : {
   if (!(!global$9 & (HEAPU8[$0 + 12 | 0] != 1 | $3))) {
    if (!global$9 | !$2) {
     emscripten_builtin_free($1);
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__ctype_char____ctype_28_29_1802($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__ctype_char____ctype_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__ctype_char___do_toupper_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (($1 | 0) >= 0) {
   $1 = HEAP32[HEAP32[7653] + ($1 << 2) >> 2]
  }
  return $1 << 24 >> 24;
 }
 
 function std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP8[$1 | 0];
    if (($0 | 0) >= 0) {
     $0 = HEAP32[HEAP32[7653] + (HEAP8[$1 | 0] << 2) >> 2]
    }
    HEAP8[$1 | 0] = $0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_char___do_tolower_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (($1 | 0) >= 0) {
   $1 = HEAP32[HEAP32[8040] + ($1 << 2) >> 2]
  }
  return $1 << 24 >> 24;
 }
 
 function std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP8[$1 | 0];
    if (($0 | 0) >= 0) {
     $0 = HEAP32[HEAP32[8040] + (HEAP8[$1 | 0] << 2) >> 2]
    }
    HEAP8[$1 | 0] = $0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP8[$3 | 0] = HEAPU8[$1 | 0];
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_char___do_narrow_28char_2c_20char_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return (($1 | 0) < 0 ? $2 : $1) | 0;
 }
 
 function std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP8[$1 | 0];
    HEAP8[$4 | 0] = ($0 | 0) < 0 ? $3 : $0;
    $4 = $4 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  HEAP32[$4 >> 2] = $2;
  HEAP32[$7 >> 2] = $5;
  return 3;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  HEAP32[$4 >> 2] = $2;
  return 3;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
  $0 = $0 | 0;
  return 1;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $1 = global$9;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $3 - $2;
  $2 = unsigned_20long_20const__20std____2__min_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0 + 12 | 0, $0 + 8 | 0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$2 >> 2];
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1820($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  $12 = global$9;
  $13 = __stack_pointer - 16 | 0;
  __stack_pointer = $13;
  $8 = $2;
  while (1) {
   block : {
    if (($3 | 0) == ($8 | 0)) {
     $8 = $3;
     break block;
    }
    if (!HEAP32[$8 >> 2]) {
     break block
    }
    $8 = $8 + 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7 >> 2] = $5;
  HEAP32[$4 >> 2] = $2;
  block4 : {
   while (1) {
    block8 : {
     block9 : {
      if (!(($2 | 0) == ($3 | 0) | ($5 | 0) == ($6 | 0))) {
       $9 = HEAP32[$1 + 4 >> 2];
       HEAP32[$13 + 8 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$13 + 12 >> 2] = $9;
       $19 = 1;
       $14 = __stack_pointer - 16 | 0;
       __stack_pointer = $14;
       HEAP32[$14 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
       $9 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($14 + 8 | 0, $14 + 12 | 0);
       if ((global$9 | 0) != ($12 | 0)) {
        wasm2js_trap()
       }
       $20 = $9;
       $9 = $5;
       $10 = $6 - $5 | 0;
       $15 = 0;
       $17 = __stack_pointer - 16 | 0;
       __stack_pointer = $17;
       $11 = HEAP32[$4 >> 2];
       $18 = $8 - $2 >> 2;
       block2 : {
        if (!$11 | !$18) {
         break block2
        }
        $16 = $5 ? $10 : 0;
        while (1) {
         $10 = wcrtomb($16 >>> 0 < 4 ? $17 + 12 | 0 : $9, HEAP32[$11 >> 2]);
         if ((global$9 | 0) != ($12 | 0)) {
          wasm2js_trap()
         }
         if (($10 | 0) == -1) {
          $15 = -1;
          break block2;
         }
         if ($9) {
          if ($16 >>> 0 <= 3) {
           if ($10 >>> 0 > $16 >>> 0) {
            break block2
           }
           __memcpy($9, $17 + 12 | 0, $10);
           if ((global$9 | 0) != ($12 | 0)) {
            wasm2js_trap()
           }
          }
          $16 = $16 - $10 | 0;
          $9 = $9 + $10 | 0;
         } else {
          $9 = 0
         }
         if (!HEAP32[$11 >> 2]) {
          $11 = 0;
          break block2;
         }
         $15 = $10 + $15 | 0;
         $11 = $11 + 4 | 0;
         $18 = $18 - 1 | 0;
         if ($18) {
          continue
         }
         break;
        };
       }
       if ($9) {
        HEAP32[$4 >> 2] = $11
       }
       __stack_pointer = $17 + 16 | 0;
       std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($20);
       if ((global$9 | 0) != ($12 | 0)) {
        wasm2js_trap()
       }
       __stack_pointer = $14 + 16 | 0;
       block7 : {
        block6 : {
         block5 : {
          switch ($15 + 1 | 0) {
          case 0:
           HEAP32[$7 >> 2] = $5;
           while (1) {
            if (HEAP32[$4 >> 2] == ($2 | 0)) {
             break block6
            }
            $1 = std____2____libcpp_wcrtomb_l_5babi_nn190106_5d_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5, HEAP32[$2 >> 2], HEAP32[$0 + 8 >> 2]);
            if ((global$9 | 0) != ($12 | 0)) {
             wasm2js_trap()
            }
            if (($1 | 0) == -1) {
             break block6
            }
            $5 = $1 + HEAP32[$7 >> 2] | 0;
            HEAP32[$7 >> 2] = $5;
            $2 = $2 + 4 | 0;
            continue;
           };
          case 1:
           break block4;
          default:
           break block5;
          };
         }
         $5 = $15 + HEAP32[$7 >> 2] | 0;
         HEAP32[$7 >> 2] = $5;
         if (($5 | 0) == ($6 | 0)) {
          break block7
         }
         if (($3 | 0) == ($8 | 0)) {
          $2 = HEAP32[$4 >> 2];
          $8 = $3;
          continue;
         }
         $8 = std____2____libcpp_wcrtomb_l_5babi_nn190106_5d_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($13 + 4 | 0, 0, HEAP32[$0 + 8 >> 2]);
         if ((global$9 | 0) != ($12 | 0)) {
          wasm2js_trap()
         }
         if (($8 | 0) == -1) {
          break block8
         }
         $2 = $13 + 4 | 0;
         if ($6 - HEAP32[$7 >> 2] >>> 0 < $8 >>> 0) {
          break block4
         }
         while (1) {
          if ($8) {
           $5 = HEAPU8[$2 | 0];
           $9 = HEAP32[$7 >> 2];
           HEAP32[$7 >> 2] = $9 + 1;
           HEAP8[$9 | 0] = $5;
           $8 = $8 - 1 | 0;
           $2 = $2 + 1 | 0;
           continue;
          }
          break;
         };
         $2 = HEAP32[$4 >> 2] + 4 | 0;
         HEAP32[$4 >> 2] = $2;
         $8 = $2;
         while (1) {
          if (($3 | 0) == ($8 | 0)) {
           $8 = $3;
           break block9;
          }
          if (!HEAP32[$8 >> 2]) {
           break block9
          }
          $8 = $8 + 4 | 0;
          continue;
         };
        }
        HEAP32[$4 >> 2] = $2;
        break block8;
       }
       $2 = HEAP32[$4 >> 2];
      }
      $19 = ($2 | 0) != ($3 | 0);
      break block4;
     }
     $5 = HEAP32[$7 >> 2];
     continue;
    }
    break;
   };
   $19 = 2;
  }
  __stack_pointer = $13 + 16 | 0;
  return $19 | 0;
 }
 
 function std____2____libcpp_wcrtomb_l_5babi_nn190106_5d_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $2;
  $2 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($3 + 8 | 0, $3 + 12 | 0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  $0 = wcrtomb($0, $1);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($2);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $16 = global$9;
  $17 = __stack_pointer - 16 | 0;
  __stack_pointer = $17;
  $9 = $2;
  while (1) {
   block : {
    if (($3 | 0) == ($9 | 0)) {
     $9 = $3;
     break block;
    }
    if (!HEAPU8[$9 | 0]) {
     break block
    }
    $9 = $9 + 1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7 >> 2] = $5;
  HEAP32[$4 >> 2] = $2;
  label4 : while (1) {
   block17 : {
    block19 : {
     block1 : {
      if (($2 | 0) == ($3 | 0) | ($5 | 0) == ($6 | 0)) {
       break block1
      }
      $8 = HEAP32[$1 + 4 >> 2];
      HEAP32[$17 + 8 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$17 + 12 >> 2] = $8;
      $18 = __stack_pointer - 16 | 0;
      __stack_pointer = $18;
      HEAP32[$18 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
      $21 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($18 + 8 | 0, $18 + 12 | 0);
      if ((global$9 | 0) != ($16 | 0)) {
       wasm2js_trap()
      }
      $14 = $9 - $2 | 0;
      $8 = 0;
      $12 = __stack_pointer - 1040 | 0;
      __stack_pointer = $12;
      $13 = HEAP32[$4 >> 2];
      HEAP32[$12 + 12 >> 2] = $13;
      $15 = $5 ? $5 : $12 + 16 | 0;
      $11 = $5 ? $6 - $5 >> 2 : 256;
      block6 : {
       block4 : {
        block5 : {
         if (!(!$13 | !$11)) {
          while (1) {
           $10 = $14 >>> 2 | 0;
           if (!($14 >>> 0 > 131 | $10 >>> 0 >= $11 >>> 0)) {
            $10 = $13;
            break block4;
           }
           $19 = mbsrtowcs($15, $12 + 12 | 0, $10 >>> 0 < $11 >>> 0 ? $10 : $11, $1);
           if ((global$9 | 0) != ($16 | 0)) {
            wasm2js_trap()
           }
           $10 = HEAP32[$12 + 12 >> 2];
           if (($19 | 0) == -1) {
            $11 = 0;
            $8 = -1;
            break block5;
           }
           $20 = ($12 + 16 | 0) != ($15 | 0) ? $19 : 0;
           $11 = $11 - $20 | 0;
           $15 = ($20 << 2) + $15 | 0;
           $14 = $10 ? ($13 + $14 | 0) - $10 | 0 : 0;
           $8 = $8 + $19 | 0;
           if (!$10) {
            break block5
           }
           $13 = $10;
           if ($11) {
            continue
           }
           break;
          };
          break block5;
         }
         $10 = $13;
        }
        if (!$10) {
         break block6
        }
       }
       if (!$11 | !$14) {
        break block6
       }
       $13 = $8;
       while (1) {
        $8 = mbrtowc($15, $10, $14, $1);
        if ((global$9 | 0) != ($16 | 0)) {
         wasm2js_trap()
        }
        block10 : {
         block9 : {
          if ($8 + 2 >>> 0 <= 2) {
           block8 : {
            switch ($8 + 1 | 0) {
            case 1:
             HEAP32[$12 + 12 >> 2] = 0;
             break block9;
            case 0:
             break block6;
            default:
             break block8;
            };
           }
           HEAP32[$1 >> 2] = 0;
           break block9;
          }
          $10 = HEAP32[$12 + 12 >> 2] + $8 | 0;
          HEAP32[$12 + 12 >> 2] = $10;
          $13 = $13 + 1 | 0;
          $11 = $11 - 1 | 0;
          if ($11) {
           break block10
          }
         }
         $8 = $13;
         break block6;
        }
        $15 = $15 + 4 | 0;
        $14 = $14 - $8 | 0;
        $8 = $13;
        if ($14) {
         continue
        }
        break;
       };
      }
      if ($5) {
       HEAP32[$4 >> 2] = HEAP32[$12 + 12 >> 2]
      }
      __stack_pointer = $12 + 1040 | 0;
      std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($21);
      if ((global$9 | 0) != ($16 | 0)) {
       wasm2js_trap()
      }
      __stack_pointer = $18 + 16 | 0;
      block16 : {
       block11 : {
        block18 : {
         block15 : {
          if (($8 | 0) == -1) {
           while (1) {
            HEAP32[$7 >> 2] = $5;
            if (HEAP32[$4 >> 2] == ($2 | 0)) {
             break block1
            }
            $6 = 1;
            $1 = std____2____libcpp_mbrtowc_l_5babi_nn190106_5d_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, $9 - $2 | 0, $17 + 8 | 0, HEAP32[$0 + 8 >> 2]);
            if ((global$9 | 0) != ($16 | 0)) {
             wasm2js_trap()
            }
            block13 : {
             switch ($1 + 2 | 0) {
             case 1:
              HEAP32[$4 >> 2] = $2;
              break block15;
             default:
              $6 = $1;
              break;
             case 0:
              break block11;
             case 2:
              break block13;
             };
            }
            $2 = $2 + $6 | 0;
            $5 = HEAP32[$7 >> 2] + 4 | 0;
            continue;
           }
          }
          $5 = HEAP32[$7 >> 2] + ($8 << 2) | 0;
          HEAP32[$7 >> 2] = $5;
          if (($5 | 0) == ($6 | 0)) {
           break block16
          }
          $2 = HEAP32[$4 >> 2];
          if (($3 | 0) == ($9 | 0)) {
           break block17
          }
          $2 = std____2____libcpp_mbrtowc_l_5babi_nn190106_5d_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, 1, $1, HEAP32[$0 + 8 >> 2]);
          if ((global$9 | 0) != ($16 | 0)) {
           wasm2js_trap()
          }
          if (!$2) {
           break block18
          }
         }
         $0 = 2;
         break block19;
        }
        $5 = HEAP32[$7 >> 2] + 4 | 0;
        HEAP32[$7 >> 2] = $5;
        $2 = HEAP32[$4 >> 2] + 1 | 0;
        HEAP32[$4 >> 2] = $2;
        $9 = $2;
        while (1) {
         if (($3 | 0) == ($9 | 0)) {
          break block17
         }
         if (!HEAPU8[$9 | 0]) {
          continue label4
         }
         $9 = $9 + 1 | 0;
         continue;
        };
       }
       HEAP32[$4 >> 2] = $2;
       $0 = 1;
       break block19;
      }
      $2 = HEAP32[$4 >> 2];
     }
     $0 = ($2 | 0) != ($3 | 0);
    }
    __stack_pointer = $17 + 16 | 0;
    return $0 | 0;
   }
   $9 = $3;
   continue;
  };
 }
 
 function std____2____libcpp_mbrtowc_l_5babi_nn190106_5d_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $6 = global$9;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $4;
  $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
  if ((global$9 | 0) != ($6 | 0)) {
   wasm2js_trap()
  }
  $0 = mbrtowc($0, $1, $2, $3);
  if ((global$9 | 0) != ($6 | 0)) {
   wasm2js_trap()
  }
  std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($4);
  if ((global$9 | 0) != ($6 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $1 = global$9;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$4 >> 2] = $2;
  $0 = std____2____libcpp_wcrtomb_l_5babi_nn190106_5d_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5 + 12 | 0, 0, HEAP32[$0 + 8 >> 2]);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  $1 = 2;
  block : {
   if ($0 + 1 >>> 0 < 2) {
    break block
   }
   $2 = $0 - 1 | 0;
   $1 = 1;
   if ($2 >>> 0 > $3 - HEAP32[$4 >> 2] >>> 0) {
    break block
   }
   $3 = $5 + 12 | 0;
   while (1) {
    if ($2) {
     $0 = HEAPU8[$3 | 0];
     $1 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = $0;
     $2 = $2 - 1 | 0;
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   };
   $1 = 0;
  }
  __stack_pointer = $5 + 16 | 0;
  return $1 | 0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = global$9;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  $4 = mbtowc(0, 0, 4);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($3);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $1 + 16 | 0;
  if ($4) {
   return -1
  }
  $0 = HEAP32[$0 + 8 >> 2];
  if (!$0) {
   return 1
  }
  $0 = std____2____libcpp_mb_cur_max_l_5babi_nn190106_5d_28__locale_struct__29($0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return ($0 | 0) == 1 | 0;
 }
 
 function std____2____libcpp_mb_cur_max_l_5babi_nn190106_5d_28__locale_struct__29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$9;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  $3 = HEAP32[HEAP32[thread_ptr + 96 >> 2] >> 2] ? 4 : 1;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $1 + 16 | 0;
  return $3;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = global$9;
  while (1) {
   block : {
    if (($2 | 0) == ($3 | 0) | $4 >>> 0 <= $8 >>> 0) {
     break block
    }
    $7 = 1;
    $5 = __stack_pointer - 16 | 0;
    __stack_pointer = $5;
    HEAP32[$5 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
    $11 = std____2____libcpp_locale_guard____libcpp_locale_guard_5babi_nn190106_5d_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
    if ((global$9 | 0) != ($6 | 0)) {
     wasm2js_trap()
    }
    $9 = mbrtowc(0, $2, $3 - $2 | 0, $1 ? $1 : 78396);
    if ((global$9 | 0) != ($6 | 0)) {
     wasm2js_trap()
    }
    std____2____libcpp_locale_guard_____libcpp_locale_guard_5babi_nn190106_5d_28_29($11);
    if ((global$9 | 0) != ($6 | 0)) {
     wasm2js_trap()
    }
    __stack_pointer = $5 + 16 | 0;
    block1 : {
     switch ($9 + 2 | 0) {
     default:
      $7 = $9;
      break;
     case 0:
     case 1:
      break block;
     case 2:
      break block1;
     };
    }
    $8 = $8 + 1 | 0;
    $10 = $7 + $10 | 0;
    $2 = $2 + $7 | 0;
    continue;
   }
   break;
  };
  return $10 | 0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$9;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!$0) {
   return 1
  }
  $0 = std____2____libcpp_mb_cur_max_l_5babi_nn190106_5d_28__locale_struct__29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $0 | 0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  $9 = $0 + 12 | 0;
  HEAP32[$9 >> 2] = $2;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = $5;
  block4 : {
   block2 : {
    while (1) {
     if ($2 >>> 0 >= $3 >>> 0) {
      $5 = 0;
      break block4;
     }
     $5 = 2;
     block3 : {
      $8 = HEAPU16[$2 >> 1];
      block1 : {
       if ($8 >>> 0 <= 127) {
        $5 = 1;
        $2 = HEAP32[$1 >> 2];
        if (($6 - $2 | 0) <= 0) {
         break block4
        }
        HEAP32[$1 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $8;
        break block1;
       }
       if ($8 >>> 0 <= 2047) {
        $2 = HEAP32[$1 >> 2];
        if (($6 - $2 | 0) < 2) {
         break block2
        }
        HEAP32[$1 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $8 >>> 6 | 192;
        $2 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $8 & 63 | 128;
        break block1;
       }
       if ($8 >>> 0 <= 55295) {
        $2 = HEAP32[$1 >> 2];
        if (($6 - $2 | 0) < 3) {
         break block2
        }
        HEAP32[$1 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $8 >>> 12 | 224;
        $2 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $8 >>> 6 & 63 | 128;
        $2 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $8 & 63 | 128;
        break block1;
       }
       if ($8 >>> 0 <= 56319) {
        $5 = 1;
        if (($3 - $2 | 0) < 3) {
         break block4
        }
        $10 = HEAPU16[$2 + 2 >> 1];
        if (($10 & 64512) != 56320) {
         break block3
        }
        $11 = HEAP32[$1 >> 2];
        if (($6 - $11 | 0) < 4) {
         break block4
        }
        $5 = $8 & 960;
        if (($10 & 1023 | ($8 << 10 & 64512 | $5 << 10)) >>> 0 > 1048575) {
         break block3
        }
        HEAP32[$9 >> 2] = $2 + 2;
        HEAP32[$1 >> 2] = $11 + 1;
        $2 = ($5 >>> 6 | 0) + 1 | 0;
        HEAP8[$11 | 0] = $2 >>> 2 | 240;
        $5 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $5 + 1;
        HEAP8[$5 | 0] = $2 << 4 & 48 | $8 >>> 2 & 15 | 128;
        $2 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $10 >>> 6 & 15 | $8 << 4 & 48 | 128;
        $2 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $10 & 63 | 128;
        break block1;
       }
       if ($8 >>> 0 < 57344) {
        break block4
       }
       $2 = HEAP32[$1 >> 2];
       if (($6 - $2 | 0) < 3) {
        break block2
       }
       HEAP32[$1 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $8 >>> 12 | 224;
       $2 = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $8 >>> 6 & 191;
       $2 = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $8 & 63 | 128;
      }
      $2 = HEAP32[$9 >> 2] + 2 | 0;
      HEAP32[$9 >> 2] = $2;
      continue;
     }
     break;
    };
    $5 = 2;
    break block4;
   }
   $5 = 1;
  }
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  $12 = $0 + 12 | 0;
  HEAP32[$12 >> 2] = $2;
  $13 = $0 + 8 | 0;
  HEAP32[$13 >> 2] = $5;
  block : {
   if (($3 - $2 | 0) < 3) {
    break block
   }
  }
  block4 : {
   block3 : {
    block5 : {
     while (1) {
      if (!($2 >>> 0 >= $3 >>> 0 | $5 >>> 0 >= $6 >>> 0)) {
       $1 = 2;
       $14 = $2;
       $9 = HEAPU8[$2 | 0];
       block2 : {
        if ($9 << 24 >> 24 >= 0) {
         HEAP16[$5 >> 1] = $9;
         $1 = 1;
         break block2;
        }
        if ($9 >>> 0 < 194) {
         break block3
        }
        if ($9 >>> 0 <= 223) {
         $8 = 1;
         if (($3 - $2 | 0) < 2) {
          break block4
         }
         $8 = HEAPU8[$2 + 1 | 0];
         if (($8 & 192) != 128) {
          break block5
         }
         HEAP16[$5 >> 1] = $8 & 63 | $9 << 6 & 1984;
         $1 = 2;
         break block2;
        }
        if ($9 >>> 0 <= 239) {
         $1 = 1;
         $10 = $3 - $2 | 0;
         if (($10 | 0) < 2) {
          break block5
         }
         $8 = HEAP8[$2 + 1 | 0];
         block7 : {
          block6 : {
           if (($9 | 0) != 237) {
            if (($9 | 0) != 224) {
             break block6
            }
            if (($8 & -32) != -96) {
             break block3
            }
            break block7;
           }
           if (($8 | 0) >= -96) {
            break block3
           }
           break block7;
          }
          if (($8 | 0) > -65) {
           break block3
          }
         }
         if (($10 | 0) == 2) {
          break block5
         }
         $1 = HEAPU8[$2 + 2 | 0];
         if (($1 & 192) != 128) {
          break block3
         }
         HEAP16[$5 >> 1] = $1 & 63 | (($8 & 63) << 6 | $9 << 12);
         $1 = 3;
         break block2;
        }
        if ($9 >>> 0 > 244) {
         break block3
        }
        $1 = 1;
        $10 = $3 - $2 | 0;
        if (($10 | 0) < 2) {
         break block5
        }
        $11 = HEAPU8[$2 + 1 | 0];
        $8 = $11 << 24 >> 24;
        block11 : {
         block9 : {
          switch ($9 - 240 | 0) {
          case 0:
           if (($8 + 112 & 255) >>> 0 >= 48) {
            break block3
           }
           break block11;
          case 4:
           if (($8 | 0) >= -112) {
            break block3
           }
           break block11;
          default:
           break block9;
          };
         }
         if (($8 | 0) > -65) {
          break block3
         }
        }
        if (($10 | 0) == 2) {
         break block5
        }
        $8 = HEAPU8[$2 + 2 | 0];
        if (($8 & 192) != 128) {
         break block3
        }
        if (($10 | 0) == 3) {
         break block5
        }
        $10 = HEAPU8[$2 + 3 | 0];
        if (($10 & 192) != 128) {
         break block3
        }
        if (($6 - $5 | 0) < 3) {
         break block5
        }
        $1 = 2;
        $10 = $10 & 63;
        $2 = $8 << 6;
        $9 = $9 & 7;
        if (($10 | ($2 & 4032 | ($11 << 12 & 258048 | $9 << 18))) >>> 0 > 1114111) {
         break block5
        }
        HEAP16[$5 + 2 >> 1] = $10 | $2 & 960 | 56320;
        $1 = $11 << 2;
        HEAP16[$5 >> 1] = ($8 >>> 4 & 3 | ($1 & 192 | $9 << 8 | $1 & 60)) + 16320 | 55296;
        $5 = $5 + 2 | 0;
        $1 = 4;
       }
       $2 = $14 + $1 | 0;
       HEAP32[$12 >> 2] = $2;
       $5 = $5 + 2 | 0;
       HEAP32[$13 >> 2] = $5;
       continue;
      }
      break;
     };
     $1 = $2 >>> 0 < $3 >>> 0;
    }
    $8 = $1;
    break block4;
   }
   $8 = 2;
  }
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = $2;
  block : {
   if (($3 - $0 | 0) < 3) {
    break block
   }
  }
  while (1) {
   block1 : {
    if ($4 >>> 0 <= $6 >>> 0 | $0 >>> 0 >= $3 >>> 0) {
     break block1
    }
    $1 = HEAPU8[$0 | 0];
    $5 = $0 + 1 | 0;
    block2 : {
     if ($1 << 24 >> 24 >= 0) {
      break block2
     }
     if ($1 >>> 0 < 194) {
      break block1
     }
     if ($1 >>> 0 <= 223) {
      if ((HEAPU8[$0 + 1 | 0] & 192) != 128 | ($3 - $0 | 0) < 2) {
       break block1
      }
      $5 = $0 + 2 | 0;
      break block2;
     }
     if ($1 >>> 0 <= 239) {
      if (($3 - $0 | 0) < 3) {
       break block1
      }
      $7 = HEAPU8[$0 + 2 | 0];
      $5 = HEAP8[$0 + 1 | 0];
      block4 : {
       block3 : {
        if (($1 | 0) != 237) {
         if (($1 | 0) != 224) {
          break block3
         }
         if (($5 & -32) == -96) {
          break block4
         }
         break block1;
        }
        if (($5 | 0) >= -96) {
         break block1
        }
        break block4;
       }
       if (($5 | 0) > -65) {
        break block1
       }
      }
      if (($7 & 192) != 128) {
       break block1
      }
      $5 = $0 + 3 | 0;
      break block2;
     }
     if (($3 - $0 | 0) < 4 | $1 >>> 0 > 244 | $4 - $6 >>> 0 < 2) {
      break block1
     }
     $7 = HEAPU8[$0 + 3 | 0];
     $8 = HEAPU8[$0 + 2 | 0];
     $5 = HEAP8[$0 + 1 | 0];
     block8 : {
      block6 : {
       switch ($1 - 240 | 0) {
       case 0:
        if (($5 + 112 & 255) >>> 0 >= 48) {
         break block1
        }
        break block8;
       case 4:
        if (($5 | 0) >= -112) {
         break block1
        }
        break block8;
       default:
        break block6;
       };
      }
      if (($5 | 0) > -65) {
       break block1
      }
     }
     if (($8 & 192) != 128 | ($7 & 192) != 128 | ($7 & 63 | ($8 << 6 & 4032 | ($1 << 18 & 1835008 | ($5 & 63) << 12))) >>> 0 > 1114111) {
      break block1
     }
     $6 = $6 + 1 | 0;
     $5 = $0 + 4 | 0;
    }
    $0 = $5;
    $6 = $6 + 1 | 0;
    continue;
   }
   break;
  };
  return $0 - $2 | 0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
  $0 = $0 | 0;
  return 4;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  $9 = $0 + 12 | 0;
  HEAP32[$9 >> 2] = $2;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = $5;
  block3 : {
   block2 : {
    while (1) {
     block : {
      if ($2 >>> 0 >= $3 >>> 0) {
       $5 = 0;
       break block;
      }
      $5 = 2;
      $2 = HEAP32[$2 >> 2];
      if ($2 >>> 0 > 1114111 | ($2 & -2048) == 55296) {
       break block
      }
      block1 : {
       if ($2 >>> 0 <= 127) {
        $5 = 1;
        $8 = HEAP32[$1 >> 2];
        if (($6 - $8 | 0) <= 0) {
         break block
        }
        HEAP32[$1 >> 2] = $8 + 1;
        HEAP8[$8 | 0] = $2;
        break block1;
       }
       if ($2 >>> 0 <= 2047) {
        $5 = HEAP32[$1 >> 2];
        if (($6 - $5 | 0) < 2) {
         break block2
        }
        HEAP32[$1 >> 2] = $5 + 1;
        HEAP8[$5 | 0] = $2 >>> 6 | 192;
        $5 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $5 + 1;
        HEAP8[$5 | 0] = $2 & 63 | 128;
        break block1;
       }
       $5 = HEAP32[$1 >> 2];
       $8 = $6 - $5 | 0;
       if ($2 >>> 0 <= 65535) {
        if (($8 | 0) < 3) {
         break block2
        }
        HEAP32[$1 >> 2] = $5 + 1;
        HEAP8[$5 | 0] = $2 >>> 12 | 224;
        $5 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $5 + 1;
        HEAP8[$5 | 0] = $2 >>> 6 & 63 | 128;
        $5 = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $5 + 1;
        HEAP8[$5 | 0] = $2 & 63 | 128;
        break block1;
       }
       if (($8 | 0) < 4) {
        break block2
       }
       HEAP32[$1 >> 2] = $5 + 1;
       HEAP8[$5 | 0] = $2 >>> 18 | 240;
       $5 = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $5 + 1;
       HEAP8[$5 | 0] = $2 >>> 12 & 63 | 128;
       $5 = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $5 + 1;
       HEAP8[$5 | 0] = $2 >>> 6 & 63 | 128;
       $5 = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $5 + 1;
       HEAP8[$5 | 0] = $2 & 63 | 128;
      }
      $2 = HEAP32[$9 >> 2] + 4 | 0;
      HEAP32[$9 >> 2] = $2;
      continue;
     }
     break;
    };
    break block3;
   }
   $5 = 1;
  }
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  $11 = $0 + 12 | 0;
  HEAP32[$11 >> 2] = $2;
  $12 = $0 + 8 | 0;
  HEAP32[$12 >> 2] = $5;
  block : {
   if (($3 - $2 | 0) < 3) {
    break block
   }
  }
  block4 : {
   block2 : {
    while (1) {
     if (!($2 >>> 0 >= $3 >>> 0 | $5 >>> 0 >= $6 >>> 0)) {
      $1 = HEAP8[$2 | 0];
      $8 = $1 & 255;
      block3 : {
       if (($1 | 0) >= 0) {
        if ($8 >>> 0 > 1114111) {
         break block2
        }
        $1 = 1;
        break block3;
       }
       if ($1 >>> 0 < 4294967234) {
        break block2
       }
       if ($1 >>> 0 <= 4294967263) {
        $1 = 1;
        if (($3 - $2 | 0) < 2) {
         break block4
        }
        $1 = 2;
        $9 = HEAPU8[$2 + 1 | 0];
        if (($9 & 192) != 128) {
         break block4
        }
        $8 = $9 & 63 | $8 << 6 & 1984;
        $1 = 2;
        break block3;
       }
       if ($1 >>> 0 <= 4294967279) {
        $1 = 1;
        $10 = $3 - $2 | 0;
        if (($10 | 0) < 2) {
         break block4
        }
        $9 = HEAP8[$2 + 1 | 0];
        block7 : {
         block6 : {
          if (($8 | 0) != 237) {
           if (($8 | 0) != 224) {
            break block6
           }
           if (($9 & -32) == -96) {
            break block7
           }
           break block2;
          }
          if (($9 | 0) < -96) {
           break block7
          }
          break block2;
         }
         if (($9 | 0) > -65) {
          break block2
         }
        }
        if (($10 | 0) == 2) {
         break block4
        }
        $1 = HEAPU8[$2 + 2 | 0];
        if (($1 & 192) != 128) {
         break block2
        }
        $8 = $1 & 63 | ($8 << 12 & 61440 | ($9 & 63) << 6);
        $1 = 3;
        break block3;
       }
       if ($1 >>> 0 > 4294967284) {
        break block2
       }
       $1 = 1;
       $10 = $3 - $2 | 0;
       if (($10 | 0) < 2) {
        break block4
       }
       $9 = HEAP8[$2 + 1 | 0];
       block11 : {
        block9 : {
         switch ($8 - 240 | 0) {
         case 0:
          if (($9 + 112 & 255) >>> 0 >= 48) {
           break block2
          }
          break block11;
         case 4:
          if (($9 | 0) >= -112) {
           break block2
          }
          break block11;
         default:
          break block9;
         };
        }
        if (($9 | 0) > -65) {
         break block2
        }
       }
       if (($10 | 0) == 2) {
        break block4
       }
       $13 = HEAPU8[$2 + 2 | 0];
       if (($13 & 192) != 128) {
        break block2
       }
       if (($10 | 0) == 3) {
        break block4
       }
       $10 = HEAPU8[$2 + 3 | 0];
       if (($10 & 192) != 128) {
        break block2
       }
       $1 = 2;
       $8 = $10 & 63 | ($13 << 6 & 4032 | ($8 << 18 & 1835008 | ($9 & 63) << 12));
       if ($8 >>> 0 > 1114111) {
        break block4
       }
       $1 = 4;
      }
      HEAP32[$5 >> 2] = $8;
      $2 = $1 + $2 | 0;
      HEAP32[$11 >> 2] = $2;
      $5 = $5 + 4 | 0;
      HEAP32[$12 >> 2] = $5;
      continue;
     }
     break;
    };
    $1 = $2 >>> 0 < $3 >>> 0;
    break block4;
   }
   $1 = 2;
  }
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
  return $1 | 0;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = $2;
  block : {
   if (($3 - $1 | 0) < 3) {
    break block
   }
  }
  while (1) {
   block1 : {
    if ($4 >>> 0 <= $7 >>> 0 | $1 >>> 0 >= $3 >>> 0) {
     break block1
    }
    $0 = HEAP8[$1 | 0];
    $6 = $0 & 255;
    $5 = 1;
    block2 : {
     if (($0 | 0) >= 0) {
      break block2
     }
     if ($0 >>> 0 < 4294967234) {
      break block1
     }
     if ($0 >>> 0 <= 4294967263) {
      if ((HEAPU8[$1 + 1 | 0] & 192) != 128 | ($3 - $1 | 0) < 2) {
       break block1
      }
      $5 = 2;
      break block2;
     }
     if ($0 >>> 0 <= 4294967279) {
      if (($3 - $1 | 0) < 3) {
       break block1
      }
      $5 = HEAPU8[$1 + 2 | 0];
      $0 = HEAP8[$1 + 1 | 0];
      block4 : {
       block3 : {
        if (($6 | 0) != 237) {
         if (($6 | 0) != 224) {
          break block3
         }
         if (($0 & -32) == -96) {
          break block4
         }
         break block1;
        }
        if (($0 | 0) >= -96) {
         break block1
        }
        break block4;
       }
       if (($0 | 0) > -65) {
        break block1
       }
      }
      if (($5 & 192) != 128) {
       break block1
      }
      $5 = 3;
      break block2;
     }
     if (($3 - $1 | 0) < 4 | $0 >>> 0 > 4294967284) {
      break block1
     }
     $5 = HEAPU8[$1 + 3 | 0];
     $8 = HEAPU8[$1 + 2 | 0];
     $0 = HEAP8[$1 + 1 | 0];
     block8 : {
      block6 : {
       switch ($6 - 240 | 0) {
       case 0:
        if (($0 + 112 & 255) >>> 0 >= 48) {
         break block1
        }
        break block8;
       case 4:
        if (($0 | 0) >= -112) {
         break block1
        }
        break block8;
       default:
        break block6;
       };
      }
      if (($0 | 0) > -65) {
       break block1
      }
     }
     if (($8 & 192) != 128 | ($5 & 192) != 128 | ($5 & 63 | ($8 << 6 & 4032 | ($6 << 18 & 1835008 | ($0 & 63) << 12))) >>> 0 > 1114111) {
      break block1
     }
     $5 = 4;
    }
    $7 = $7 + 1 | 0;
    $1 = $1 + $5 | 0;
    continue;
   }
   break;
  };
  return $1 - $2 | 0;
 }
 
 function std____2__numpunct_char____numpunct_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 35112;
   $1 = $0 + 12 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__numpunct_char____numpunct_28_29_1874($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__numpunct_char____numpunct_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__numpunct_wchar_t____numpunct_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   HEAP32[$0 >> 2] = 35152;
   $1 = $0 + 16 | 0;
  }
  block : {
   if (!global$9 | !$2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__numpunct_wchar_t____numpunct_28_29_1876($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__numpunct_wchar_t____numpunct_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__numpunct_char___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 8 | 0];
 }
 
 function std____2__numpunct_char___do_thousands_sep_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 9 | 0];
 }
 
 function std____2__numpunct_char___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  $1 = global$9 ? $1 : $1 + 12 | 0;
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__numpunct_wchar_t___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  $1 = global$9 ? $1 : $1 + 16 | 0;
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2__numpunct_char___do_truename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_0__28char_20const__29($0, 7384);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__numpunct_wchar_t___do_truename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_0__28wchar_t_20const__29($0, 35184);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_0__28wchar_t_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $4 = HEAP32[$3 + 12 >> 2];
   $5 = HEAP32[$3 + 16 >> 2];
   $7 = HEAP32[$3 + 20 >> 2];
   $3 = HEAP32[$3 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = __stack_pointer - 16 | 0;
   __stack_pointer = $7;
   $4 = std____2____constexpr_wcslen_5babi_nn190106_5d_28wchar_t_20const__29($1);
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $2 = $4 >>> 0 <= 1073741815;
  }
  block1 : {
   block2 : {
    if ((global$9 | 0) == 2 | $2) {
     if (!global$9) {
      $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($4)
     }
     block : {
      if (!global$9) {
       if ($2) {
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $4);
        $2 = $0;
        break block;
       }
       $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn190106_5d_28unsigned_20long_29($4) + 1 | 0;
       $2 = $5 + 8 | 0;
      }
      if (!global$9 | !$6) {
       auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_wchar_t___28std____2__allocator_wchar_t___2c_20unsigned_20long_29($2, $3);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $2 = HEAP32[$5 + 8 >> 2];
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $2);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$5 + 12 >> 2]);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $4);
      }
     }
     if (!global$9) {
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($2, $1, $4);
      HEAP32[$5 + 4 >> 2] = 0;
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29(($4 << 2) + $2 | 0, $5 + 4 | 0);
      __stack_pointer = $5 + 16 | 0;
      break block2;
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
     wasm2js_trap();
    }
   }
   if (!global$9) {
    __stack_pointer = $7 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 16 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = $7;
  HEAP32[$6 + 24 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function std____2__numpunct_char___do_falsename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_0__28char_20const__29($0, 7543);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__numpunct_wchar_t___do_falsename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_0__28wchar_t_20const__29($0, 35204);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $4 = HEAP32[$3 + 8 >> 2];
   $5 = HEAP32[$3 + 12 >> 2];
   $6 = HEAP32[$3 + 16 >> 2];
   $3 = HEAP32[$3 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   block : {
    if (!global$9) {
     $4 = strlen($1);
     $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn190106_5d_28_29_20const($0);
     $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
     if ($4 >>> 0 <= $5 >>> 0) {
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
      char__20std____2____constexpr_memmove_5babi_nn190106_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2, $1, $4);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______null_terminate_at_5babi_nn190106_5d_28char__2c_20unsigned_20long_29($0, $2, $4);
      break block;
     }
     $3 = $4 - $5 | 0;
    }
    if (!global$9 | !$2) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $5, $3, $6, 0, $6, $4, $1);
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $5;
  HEAP32[$2 + 16 >> 2] = $6;
  HEAP32[$2 + 20 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function std____2____time_get_c_storage_char_____weeks_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78828) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78828);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!global$9) {
     if (!$0) {
      break block
     }
     $0 = Atomics.load(HEAPU8, 79144) & 1;
    }
    block2 : {
     if (!($0 ? global$9 : 1)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 1) {
      $3 = __cxa_guard_acquire(79144);
      $2 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $0 = $3;
     }
     if (!(global$9 | $0)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 2) {
      __cxa_guard_release(79144);
      $2 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9 | ($1 | 0) == 3) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(78976, 2011);
     $2 = 3;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 4) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(78988, 2018);
     $2 = 4;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 5) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79e3, 1984);
     $2 = 5;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 6) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79012, 1992);
     $2 = 6;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 7) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79024, 1975);
     $2 = 7;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 8) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79036, 2025);
     $2 = 8;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79048, 2002);
     $2 = 9;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 10) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79060, 4942);
     $2 = 10;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 11) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79072, 5058);
     $2 = 11;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 12) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79084, 7420);
     $2 = 12;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 13) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79096, 9184);
     $2 = 13;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 14) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79108, 2933);
     $2 = 14;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 15) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79120, 5624);
     $2 = 15;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 16) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79132, 3257);
     $2 = 16;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[19706] = 78976
    }
    if (!global$9 | ($1 | 0) == 17) {
     __cxa_guard_release(78828);
     $2 = 17;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return HEAP32[19706]
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_55($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : 79144;
  block : {
   while (1) {
    $0 = global$9 ? $0 : $0 - 12 | 0;
    if (!global$9 | !$1) {
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    if (!global$9 & ($0 | 0) != 78976) {
     continue
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78836) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78836);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!global$9) {
     if (!$0) {
      break block
     }
     $0 = Atomics.load(HEAPU8, 79320) & 1;
    }
    block2 : {
     if (!($0 ? global$9 : 1)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 1) {
      $3 = __cxa_guard_acquire(79320);
      $2 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $0 = $3;
     }
     if (!(global$9 | $0)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 2) {
      __cxa_guard_release(79320);
      $2 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9 | ($1 | 0) == 3) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79152, 39676);
     $2 = 3;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 4) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79164, 39704);
     $2 = 4;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 5) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79176, 39732);
     $2 = 5;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 6) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79188, 39764);
     $2 = 6;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 7) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79200, 39804);
     $2 = 7;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 8) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79212, 39840);
     $2 = 8;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 9) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79224, 39868);
     $2 = 9;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 10) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79236, 39904);
     $2 = 10;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 11) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79248, 39920);
     $2 = 11;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 12) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79260, 39936);
     $2 = 12;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 13) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79272, 39952);
     $2 = 13;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 14) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79284, 39968);
     $2 = 14;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 15) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79296, 39984);
     $2 = 15;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 16) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79308, 4e4);
     $2 = 16;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[19708] = 79152
    }
    if (!global$9 | ($1 | 0) == 17) {
     __cxa_guard_release(78836);
     $2 = 17;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return HEAP32[19708]
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_70($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : 79320;
  block : {
   while (1) {
    $0 = global$9 ? $0 : $0 - 12 | 0;
    if (!global$9 | !$1) {
     $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    if (!global$9 & ($0 | 0) != 79152) {
     continue
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $4 = HEAP32[$3 + 8 >> 2];
   $5 = HEAP32[$3 + 12 >> 2];
   $6 = HEAP32[$3 + 16 >> 2];
   $3 = HEAP32[$3 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   block : {
    if (!global$9) {
     $4 = std____2____constexpr_wcslen_5babi_nn190106_5d_28wchar_t_20const__29($1);
     $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____capacity_5babi_nn190106_5d_28_29_20const($0);
     $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
     if ($4 >>> 0 <= $5 >>> 0) {
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($2, $1, $4);
      $1 = __stack_pointer - 16 | 0;
      __stack_pointer = $1;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn190106_5d_28unsigned_20long_29($0, $4);
      HEAP32[$1 + 12 >> 2] = 0;
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($2 + ($4 << 2) | 0, $1 + 12 | 0);
      __stack_pointer = $1 + 16 | 0;
      break block;
     }
     $3 = $4 - $5 | 0;
    }
    if (!global$9 | !$2) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $5, $3, $6, 0, $6, $4, $1);
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $5;
  HEAP32[$2 + 16 >> 2] = $6;
  HEAP32[$2 + 20 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function std____2____time_get_c_storage_char_____months_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78844) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78844);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!global$9) {
     if (!$0) {
      break block
     }
     $0 = Atomics.load(HEAPU8, 79616) & 1;
    }
    block2 : {
     if (!($0 ? global$9 : 1)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 1) {
      $3 = __cxa_guard_acquire(79616);
      $2 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $0 = $3;
     }
     if (!(global$9 | $0)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 2) {
      __cxa_guard_release(79616);
      $2 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9 | ($1 | 0) == 3) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79328, 1126);
     $2 = 3;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 4) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79340, 1117);
     $2 = 4;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 5) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79352, 6966);
     $2 = 5;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 6) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79364, 5414);
     $2 = 6;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 7) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79376, 2032);
     $2 = 7;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 8) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79388, 7824);
     $2 = 8;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79400, 1171);
     $2 = 9;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 10) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79412, 2975);
     $2 = 10;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 11) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79424, 4677);
     $2 = 11;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 12) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79436, 4660);
     $2 = 12;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 13) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79448, 4668);
     $2 = 13;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 14) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79460, 4687);
     $2 = 14;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 15) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79472, 5122);
     $2 = 15;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 16) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79484, 10005);
     $2 = 16;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 17) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79496, 4756);
     $2 = 17;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 18) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79508, 4160);
     $2 = 18;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 19) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79520, 2032);
     $2 = 19;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 20) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79532, 4946);
     $2 = 20;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 21) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79544, 5407);
     $2 = 21;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 22) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79556, 7001);
     $2 = 22;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 23) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79568, 4861);
     $2 = 23;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 24) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79580, 3179);
     $2 = 24;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 25) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79592, 2309);
     $2 = 25;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 26) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79604, 9493);
     $2 = 26;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[19710] = 79328
    }
    if (!global$9 | ($1 | 0) == 27) {
     __cxa_guard_release(78844);
     $2 = 27;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return HEAP32[19710]
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_85($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : 79616;
  block : {
   while (1) {
    $0 = global$9 ? $0 : $0 - 12 | 0;
    if (!global$9 | !$1) {
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    if (!global$9 & ($0 | 0) != 79328) {
     continue
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_wchar_t_____months_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78852) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78852);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!global$9) {
     if (!$0) {
      break block
     }
     $0 = Atomics.load(HEAPU8, 79920) & 1;
    }
    block2 : {
     if (!($0 ? global$9 : 1)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 1) {
      $3 = __cxa_guard_acquire(79920);
      $2 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $0 = $3;
     }
     if (!(global$9 | $0)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 2) {
      __cxa_guard_release(79920);
      $2 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9 | ($1 | 0) == 3) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79632, 40016);
     $2 = 3;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 4) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79644, 40048);
     $2 = 4;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 5) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79656, 40084);
     $2 = 5;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 6) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79668, 40108);
     $2 = 6;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 7) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79680, 40132);
     $2 = 7;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 8) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79692, 40148);
     $2 = 8;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 9) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79704, 40168);
     $2 = 9;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 10) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79716, 40188);
     $2 = 10;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 11) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79728, 40216);
     $2 = 11;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 12) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79740, 40256);
     $2 = 12;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 13) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79752, 40288);
     $2 = 13;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 14) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79764, 40324);
     $2 = 14;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 15) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79776, 40360);
     $2 = 15;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 16) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79788, 40376);
     $2 = 16;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 17) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79800, 40392);
     $2 = 17;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 18) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79812, 40408);
     $2 = 18;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 19) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79824, 40132);
     $2 = 19;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 20) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79836, 40424);
     $2 = 20;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 21) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79848, 40440);
     $2 = 21;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 22) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79860, 40456);
     $2 = 22;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 23) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79872, 40472);
     $2 = 23;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 24) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79884, 40488);
     $2 = 24;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 25) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79896, 40504);
     $2 = 25;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 26) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79908, 40520);
     $2 = 26;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[19712] = 79632
    }
    if (!global$9 | ($1 | 0) == 27) {
     __cxa_guard_release(78852);
     $2 = 27;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return HEAP32[19712]
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_109($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : 79920;
  block : {
   while (1) {
    $0 = global$9 ? $0 : $0 - 12 | 0;
    if (!global$9 | !$1) {
     $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    if (!global$9 & ($0 | 0) != 79632) {
     continue
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_char_____am_pm_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78860) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78860);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!global$9) {
     if (!$0) {
      break block
     }
     $0 = Atomics.load(HEAPU8, 79960) & 1;
    }
    block2 : {
     if (!($0 ? global$9 : 1)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 1) {
      $3 = __cxa_guard_acquire(79960);
      $2 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $0 = $3;
     }
     if (!(global$9 | $0)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 2) {
      __cxa_guard_release(79960);
      $2 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9 | ($1 | 0) == 3) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79936, 10637);
     $2 = 3;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 4) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn190106_5d_28char_20const__29(79948, 10634);
     $2 = 4;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[19714] = 79936
    }
    if (!global$9 | ($1 | 0) == 5) {
     __cxa_guard_release(78860);
     $2 = 5;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return HEAP32[19714]
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_133($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : 79960;
  block : {
   while (1) {
    $0 = global$9 ? $0 : $0 - 12 | 0;
    if (!global$9 | !$1) {
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    if (!global$9 & ($0 | 0) != 79936) {
     continue
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78868) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78868);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!global$9) {
     if (!$0) {
      break block
     }
     $0 = Atomics.load(HEAPU8, 79992) & 1;
    }
    block2 : {
     if (!($0 ? global$9 : 1)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 1) {
      $3 = __cxa_guard_acquire(79992);
      $2 = 1;
      if ((global$9 | 0) == 1) {
       break block1
      }
      $0 = $3;
     }
     if (!(global$9 | $0)) {
      break block2
     }
     if (!global$9 | ($1 | 0) == 2) {
      __cxa_guard_release(79992);
      $2 = 2;
      if ((global$9 | 0) == 1) {
       break block1
      }
     }
    }
    if (!global$9 | ($1 | 0) == 3) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79968, 40536);
     $2 = 3;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 4) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn190106_5d_28wchar_t_20const__29(79980, 40548);
     $2 = 4;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[19716] = 79968
    }
    if (!global$9 | ($1 | 0) == 5) {
     __cxa_guard_release(78868);
     $2 = 5;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return HEAP32[19716]
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_136($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  $0 = global$9 ? $0 : 79992;
  block : {
   while (1) {
    $0 = global$9 ? $0 : $0 - 12 | 0;
    if (!global$9 | !$1) {
     $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    if (!global$9 & ($0 | 0) != 79968) {
     continue
    }
    break;
   };
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_char_____x_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78872) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $2 = __cxa_guard_acquire(78872);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $2;
    }
    if (!(global$9 | $0)) {
     break block
    }
    if (!global$9 | ($1 | 0) == 1) {
     __cxa_guard_release(78872);
     $3 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return 52376
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(52376);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_wchar_t_____x_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78888) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78888);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!(global$9 | $0)) {
     break block
    }
    if (!global$9 | ($1 | 0) == 1) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_0__28wchar_t_20const__29(78876, 35228);
     $2 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 2) {
     __cxa_guard_release(78888);
     $2 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return 78876
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_31($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29(78876);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_char_____X_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78892) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $2 = __cxa_guard_acquire(78892);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $2;
    }
    if (!(global$9 | $0)) {
     break block
    }
    if (!global$9 | ($1 | 0) == 1) {
     __cxa_guard_release(78892);
     $3 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return 52388
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_32($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(52388);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_wchar_t_____X_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78908) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78908);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!(global$9 | $0)) {
     break block
    }
    if (!global$9 | ($1 | 0) == 1) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_0__28wchar_t_20const__29(78896, 35264);
     $2 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 2) {
     __cxa_guard_release(78908);
     $2 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return 78896
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_34($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29(78896);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_char_____c_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78924) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78924);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!(global$9 | $0)) {
     break block
    }
    if (!global$9 | ($1 | 0) == 1) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_0__28char_20const__29(78912, 10071);
     $2 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 2) {
     __cxa_guard_release(78924);
     $2 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return 78912
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_36($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(78912);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_wchar_t_____c_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78940) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78940);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!(global$9 | $0)) {
     break block
    }
    if (!global$9 | ($1 | 0) == 1) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_0__28wchar_t_20const__29(78928, 35300);
     $2 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 2) {
     __cxa_guard_release(78940);
     $2 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return 78928
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_38($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29(78928);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_char_____r_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78956) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78956);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!(global$9 | $0)) {
     break block
    }
    if (!global$9 | ($1 | 0) == 1) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn190106_5d_0__28char_20const__29(78944, 4894);
     $2 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 2) {
     __cxa_guard_release(78956);
     $2 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return 78944
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_40($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(78944);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2____time_get_c_storage_wchar_t_____r_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $0 = Atomics.load(HEAPU8, 78972) & 1
  }
  block1 : {
   block : {
    if (!($0 ? global$9 : 1)) {
     break block
    }
    if (!global$9 | !$1) {
     $3 = __cxa_guard_acquire(78972);
     if ((global$9 | 0) == 1) {
      break block1
     }
     $0 = $3;
    }
    if (!(global$9 | $0)) {
     break block
    }
    if (!global$9 | ($1 | 0) == 1) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn190106_5d_0__28wchar_t_20const__29(78960, 35384);
     $2 = 1;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
    if (!global$9 | ($1 | 0) == 2) {
     __cxa_guard_release(78972);
     $2 = 2;
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    return 78960
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function __cxx_global_array_dtor_42($0) {
  $0 = $0 | 0;
  var $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29(78960);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    $2 = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29_1940($0);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $3 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29_1940($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
   $4 = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = $0 + 8 | 0;
   $4 = HEAP32[$2 >> 2];
  }
  block : {
   if (!global$9 | !$5) {
    $3 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   if ((global$9 | 0) == 2 | (global$9 ? $4 : ($1 | 0) != ($4 | 0))) {
    $2 = global$9 ? $2 : HEAP32[$2 >> 2];
    if (!global$9 | ($5 | 0) == 1) {
     freelocale($2);
     $6 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn190106_5d_28unsigned_20long_29($0) {
  return $0 >>> 0 < 2;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn190106_5d_28unsigned_20long_29($0) {
  var $1 = 0;
  if ($0 >>> 0 >= 2) {
   $1 = $0 + 2 & -2;
   $0 = $1 - 1 | 0;
   $0 = ($0 | 0) == 2 ? $1 : $0;
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_wchar_t___28std____2__allocator_wchar_t___2c_20unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $4 = 0
   }
   if ($2 | !$4) {
    $2 = std____2__allocator_wchar_t___allocate_5babi_nn190106_5d_28unsigned_20long_29($1);
    if ((global$9 | 0) == 1) {
     break block
    }
    $3 = $2;
   }
   if (!global$9) {
    HEAP32[$0 + 4 >> 2] = $1;
    HEAP32[$0 >> 2] = $3;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function std____2__allocator_wchar_t___allocate_5babi_nn190106_5d_28unsigned_20long_29($0) {
  var $1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   if ($0 >>> 0 > 1073741823) {
    std____2____throw_bad_cast_5babi_nn190106_5d_28_29();
    wasm2js_trap();
   }
   $0 = $0 << 2;
  }
  block : {
   if (!global$9 | !$1) {
    $1 = std____2____libcpp_allocate_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_29($0, 4);
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______null_terminate_at_5babi_nn190106_5d_28char__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn190106_5d_28_29_20const($0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn190106_5d_28unsigned_20long_29($0, $2);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  HEAP8[$3 + 15 | 0] = 0;
  std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($1 + $2 | 0, $3 + 15 | 0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2__allocator_wchar_t___deallocate_5babi_nn190106_5d_28wchar_t__2c_20unsigned_20long_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    std____2____libcpp_deallocate_5babi_nn190106_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, 4);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function auto_20std____2____unwrap_range_5babi_nn190106_5d_char__2c_20char___28char__2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0, $3 + 12 | 0, $3 + 8 | 0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function char__20std____2____rewrap_range_5babi_nn190106_5d_char__2c_20char__2c_20char___28char__2c_20char__29($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $0 = char__20std____2____rewrap_iter_5babi_nn190106_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_char____type_2c_20std____2____unwrap_ref_decay_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____type__20std____2__make_pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0, $1, $2) {
  var $3 = 0;
  $3 = global$9;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0, $1, $2);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
 }
 
 function std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0, $1, $2) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
 }
 
 function bool_20std____2____is_pointer_in_range_5babi_nn190106_5d_char_2c_20char_2c_200__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = 0;
  $0 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn190106_5d_unsigned_20long_2c_20unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($3 + 4 | 0, $3 + 12 | 0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  if (!$0) {
   $1 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn190106_5d_unsigned_20long_2c_20unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($3 + 4 | 0, $3 + 8 | 0);
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
  }
  __stack_pointer = $3 + 16 | 0;
  return $1;
 }
 
 function std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($0) {
  var $1 = 0, $2 = 0;
  $2 = global$9;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = std____2____to_address_helper_std____2____wrap_iter_char___2c_20void_____call_5babi_nn190106_5d_28std____2____wrap_iter_char___20const__29($1 + 12 | 0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function std____2____to_address_helper_std____2____wrap_iter_char___2c_20void_____call_5babi_nn190106_5d_28std____2____wrap_iter_char___20const__29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 >> 2];
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function auto_20std____2____unwrap_range_5babi_nn190106_5d_std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const____28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$9;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $1 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($1);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$3 + 12 >> 2] = $1;
  $1 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn190106_5d_28std____2____wrap_iter_char___29($2);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$3 + 8 >> 2] = $1;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn190106_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0, $3 + 12 | 0, $3 + 8 | 0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_5babi_nn190106_5d_std__nullptr_t_2c_200__28std__nullptr_t___29($0) {
  HEAP32[$0 >> 2] = 0;
  return $0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____max_size_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $2 = global$9;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______alloc_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  HEAP32[$1 + 12 >> 2] = 1073741823;
  HEAP32[$1 + 8 >> 2] = 2147483647;
  $0 = unsigned_20long_20const__20std____2__min_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($1 + 12 | 0, $1 + 8 | 0);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$0 >> 2];
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______alloc_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = global$9;
  $0 = std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_5babi_nn190106_5d_28_29($0 + 8 | 0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   $4 = $2 >>> 0 > 30;
  }
  block2 : {
   block1 : {
    if (!(global$9 | (HEAP8[$1 + 120 | 0] & 1 | $4))) {
     HEAP8[$1 + 120 | 0] = 1;
     break block1;
    }
    if (!global$9 | !$5) {
     $4 = std____2__allocator_wchar_t___allocate_5babi_nn190106_5d_28unsigned_20long_29($2);
     if ((global$9 | 0) == 1) {
      break block2
     }
     $1 = $4;
    }
   }
   if (!global$9) {
    __stack_pointer = $3 + 16 | 0;
    HEAP32[$0 + 4 >> 2] = $2;
    HEAP32[$0 >> 2] = $1;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______end_cap_5babi_nn190106_5d_28_29($0) {
  return $0 + 8 | 0;
 }
 
 function std____2__locale__facet___20std____2____construct_at_5babi_nn190106_5d_std____2__locale__facet__2c_20std____2__locale__facet____28std____2__locale__facet___29($0) {
  HEAP32[$0 >> 2] = 0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______base_destruct_at_end_5babi_nn190106_5d_28std____2__locale__facet___29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$9;
  $2 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______alloc_5babi_nn190106_5d_28_29($0);
    if ((global$9 | 0) != ($3 | 0)) {
     wasm2js_trap()
    }
    $2 = $2 - 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____capacity_5babi_nn190106_5d_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$9;
  $2 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______end_cap_5babi_nn190106_5d_28_29($0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return HEAP32[$2 >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____deallocate_5babi_nn190106_5d_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $2 = HEAP32[global$10 >> 2];
   $1 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   $5 = global$9;
   if (global$9) {
    $3 = $2
   } else {
    $2 = __stack_pointer - 16 | 0;
    __stack_pointer = $2;
    $3 = ($0 | 0) == ($1 | 0);
   }
   block : {
    if (!($3 ? $5 : 1)) {
     HEAP8[$0 + 120 | 0] = 0;
     break block;
    }
    if (!global$9 | !$4) {
     std____2__allocator_wchar_t___deallocate_5babi_nn190106_5d_28wchar_t__2c_20unsigned_20long_29($1);
     if ((global$9 | 0) == 1) {
      break block1
     }
    }
   }
   if (!global$9) {
    __stack_pointer = $2 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $0 = HEAP32[global$10 >> 2];
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_5babi_nn190106_5d_28_29($0) {
  var $1 = 0;
  $1 = global$9;
  $0 = std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____second_5babi_nn190106_5d_28_29($0 + 12 | 0);
  if ((global$9 | 0) != ($1 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_5babi_nn190106_5d_28_29($0) {
  return $0 + 12 | 0;
 }
 
 function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____second_5babi_nn190106_5d_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function std____2____constexpr_wcslen_5babi_nn190106_5d_28wchar_t_20const__29($0) {
  var $1 = 0, $2 = 0;
  $2 = $0;
  while (1) {
   $1 = $2;
   $2 = $1 + 4 | 0;
   if (HEAP32[$1 >> 2]) {
    continue
   }
   break;
  };
  return $1 - $0 >> 2;
 }
 
 function std____2____time_put____time_put_5babi_nn190106_5d_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $3 = 0
   }
   if ($1 | !$3) {
    $1 = std____2____cloc_28_29();
    if ((global$9 | 0) == 1) {
     break block
    }
    $2 = $1;
   }
   if (!global$9) {
    HEAP32[$0 >> 2] = $2
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2__locale__id____get_28_29__$_0_______tuple_impl_5babi_nn190106_5d_0ul_2c_20std____2__locale__id____get_28_29__$_0___2c_20std____2__locale__id____get_28_29__$_0__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2__locale__id____get_28_29__$_0____2c_20std____2____tuple_indices______2c_20std____2____tuple_types___2c_20std____2__locale__id____get_28_29__$_0___29($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn190106_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  return $0;
 }
 
 function std____2____shared_count_____shared_count_28_29_2234($0) {
  $0 = $0 | 0;
  wasm2js_trap();
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = $0 >>> 0 <= 1;
   $3 = $1 ? 1 : $0;
  }
  block : {
   while (1) {
    block1 : {
     if (!global$9 | !$4) {
      $2 = emscripten_builtin_malloc($3);
      $5 = 0;
      if ((global$9 | 0) == 1) {
       break block
      }
      $1 = $2;
     }
     if (!global$9) {
      if ($1) {
       break block1
      }
      $0 = Atomics.load(HEAP32, 20093);
      if (!$0) {
       break block1
      }
     }
     if (!global$9 | ($4 | 0) == 1) {
      FUNCTION_TABLE[$0 | 0]();
      $5 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      continue
     }
    }
    break;
   };
   if (!global$9) {
    if (!$1) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const()
    }
    return $1;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function strerror($0) {
  $0 = $0 | 0;
  return HEAPU16[(($0 >>> 0 <= 153 ? $0 : 0) << 1) + 42608 >> 1] + 40685 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 48;
   $8 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$8 >> 2];
   $2 = HEAP32[$8 + 8 >> 2];
   $3 = HEAP32[$8 + 12 >> 2];
   $4 = HEAP32[$8 + 16 >> 2];
   $5 = HEAP32[$8 + 20 >> 2];
   $6 = HEAP32[$8 + 24 >> 2];
   $7 = HEAP32[$8 + 28 >> 2];
   $9 = HEAP32[$8 + 32 >> 2];
   $10 = HEAP32[$8 + 36 >> 2];
   $11 = HEAP32[$8 + 40 >> 2];
   $12 = HEAP32[$8 + 44 >> 2];
   $1 = HEAP32[$8 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $9 = __stack_pointer - 16 | 0;
   __stack_pointer = $9;
   $11 = ($1 ^ -1) + 2147483639 >>> 0 >= $2 >>> 0;
   $10 = 2147483639;
  }
  block : {
   if ((global$9 | 0) == 2 | $11) {
    if (!global$9) {
     $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
     $12 = $9 + 4 | 0;
     if (($10 >>> 1 | 0) - 8 >>> 0 > $1 >>> 0) {
      HEAP32[$9 + 12 >> 2] = $1 << 1;
      HEAP32[$9 + 4 >> 2] = $1 + $2;
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn190106_5d_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($12, $9 + 12 | 0) >> 2]);
      $10 = $2 + 1 | 0;
     }
    }
    if (!global$9 | !$13) {
     auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($12, $10);
     $8 = 0;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $10 = HEAP32[$9 + 4 >> 2];
     if ($4) {
      std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($10, $11, $4)
     }
     if ($6) {
      std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29($4 + $10 | 0, $7, $6)
     }
     $7 = $4 + $5 | 0;
     $2 = $3 - $7 | 0;
     if (($3 | 0) != ($7 | 0)) {
      std____2__char_traits_char___copy_5babi_nn190106_5d_28char__2c_20char_20const__2c_20unsigned_20long_29(($4 + $10 | 0) + $6 | 0, ($4 + $11 | 0) + $5 | 0, $2)
     }
     $1 = ($1 | 0) != 10;
    }
    if (!global$9 | ($13 | 0) == 1 ? (global$9 | 0) == 2 | $1 : 0) {
     std____2__allocator_traits_std____2__allocator_char____deallocate_5babi_nn190106_5d_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($11);
     $8 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $10);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$9 + 8 >> 2]);
     $1 = $0;
     $0 = ($4 + $6 | 0) + $2 | 0;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($1, $0);
     HEAP8[$9 + 12 | 0] = 0;
     std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($0 + $10 | 0, $9 + 12 | 0);
     __stack_pointer = $9 + 16 | 0;
     return;
    }
   }
   if (!global$9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $10;
  HEAP32[$8 + 40 >> 2] = $11;
  HEAP32[$8 + 44 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 48;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0)
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9) {
     $1 = HEAP32[$0 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0);
    }
    if (!global$9 | !$2) {
     std____2__allocator_traits_std____2__allocator_char____deallocate_5babi_nn190106_5d_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($1);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20unsigned_20long_2c_20char_29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 15 | 0] = $2;
  $2 = $3 + 15 | 0;
  while (1) {
   if ($1) {
    HEAP8[$0 | 0] = HEAPU8[$2 | 0];
    $1 = $1 - 1 | 0;
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____push_back_28char_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $4 = HEAP32[$3 + 12 >> 2];
   $3 = HEAP32[$3 + 16 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   if (!global$9) {
    $4 = __stack_pointer - 16 | 0;
    __stack_pointer = $4;
    HEAP8[$4 + 15 | 0] = $1;
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
    block : {
     if (!$3) {
      $2 = 10;
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn190106_5d_28_29_20const($0);
      break block;
     }
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0) - 1 | 0;
     $1 = HEAP32[$0 + 4 >> 2];
    }
    $5 = ($1 | 0) == ($2 | 0);
   }
   block3 : {
    block2 : {
     if ($5 | (global$9 | 0) == 2) {
      if (!global$9 | !$6) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_without_replace_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
       break block2;
      }
     }
     if (!global$9) {
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
      if ($3) {
       break block2
      }
      $2 = $0;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1 + 1 | 0);
      break block3;
     }
    }
    if (!global$9) {
     $2 = HEAP32[$0 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1 + 1 | 0);
    }
   }
   if (!global$9) {
    $0 = $1 + $2 | 0;
    std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($0, $4 + 15 | 0);
    HEAP8[$4 + 14 | 0] = 0;
    std____2__char_traits_char___assign_5babi_nn190106_5d_28char__2c_20char_20const__29($0 + 1 | 0, $4 + 14 | 0);
    __stack_pointer = $4 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $4;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 48;
   $8 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$8 >> 2];
   $2 = HEAP32[$8 + 8 >> 2];
   $3 = HEAP32[$8 + 12 >> 2];
   $4 = HEAP32[$8 + 16 >> 2];
   $5 = HEAP32[$8 + 20 >> 2];
   $6 = HEAP32[$8 + 24 >> 2];
   $7 = HEAP32[$8 + 28 >> 2];
   $9 = HEAP32[$8 + 32 >> 2];
   $10 = HEAP32[$8 + 36 >> 2];
   $11 = HEAP32[$8 + 40 >> 2];
   $12 = HEAP32[$8 + 44 >> 2];
   $1 = HEAP32[$8 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $9 = __stack_pointer - 16 | 0;
   __stack_pointer = $9;
   $11 = ($1 ^ -1) + 1073741815 >>> 0 >= $2 >>> 0;
   $10 = 1073741815;
  }
  block : {
   if ((global$9 | 0) == 2 | $11) {
    if (!global$9) {
     $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
     $12 = $9 + 4 | 0;
     if (($10 >>> 1 | 0) - 8 >>> 0 > $1 >>> 0) {
      HEAP32[$9 + 12 >> 2] = $1 << 1;
      HEAP32[$9 + 4 >> 2] = $1 + $2;
      $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn190106_5d_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn190106_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($12, $9 + 12 | 0) >> 2]);
      $10 = $2 + 1 | 0;
     }
    }
    if (!global$9 | !$13) {
     auto_20std____2____allocate_at_least_5babi_nn190106_5d_std____2__allocator_wchar_t___28std____2__allocator_wchar_t___2c_20unsigned_20long_29($12, $10);
     $8 = 0;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     $10 = HEAP32[$9 + 4 >> 2];
     if ($4) {
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($10, $11, $4)
     }
     if ($6) {
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($4 << 2) + $10 | 0, $7, $6)
     }
     $7 = $4 + $5 | 0;
     $2 = $3 - $7 | 0;
     if (($3 | 0) != ($7 | 0)) {
      $3 = $4 << 2;
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___copy_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($10 + $3 | 0) + ($6 << 2) | 0, ($3 + $11 | 0) + ($5 << 2) | 0, $2);
     }
     $1 = ($1 | 0) != 1;
    }
    if (!global$9 | ($13 | 0) == 1 ? (global$9 | 0) == 2 | $1 : 0) {
     std____2__allocator_wchar_t___deallocate_5babi_nn190106_5d_28wchar_t__2c_20unsigned_20long_29($11);
     $8 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_nn190106_5d_28char__29($0, $10);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn190106_5d_28unsigned_20long_29($0, HEAP32[$9 + 8 >> 2]);
     $1 = $0;
     $0 = ($4 + $6 | 0) + $2 | 0;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($1, $0);
     HEAP32[$9 + 12 >> 2] = 0;
     std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29(($0 << 2) + $10 | 0, $9 + 12 | 0);
     __stack_pointer = $9 + 16 | 0;
     return;
    }
   }
   if (!global$9) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn190106_5d_28_29_20const();
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[$8 + 32 >> 2] = $9;
  HEAP32[$8 + 36 >> 2] = $10;
  HEAP32[$8 + 40 >> 2] = $11;
  HEAP32[$8 + 44 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 48;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0) {
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0)
  }
  block : {
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9) {
     $1 = HEAP32[$0 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0);
    }
    if (!global$9 | !$2) {
     std____2__allocator_wchar_t___deallocate_5babi_nn190106_5d_28wchar_t__2c_20unsigned_20long_29($1);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
   }
   if (!global$9) {
    return $0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____push_back_28wchar_t_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $4 = HEAP32[$3 + 12 >> 2];
   $3 = HEAP32[$3 + 16 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   if (!global$9) {
    $4 = __stack_pointer - 16 | 0;
    __stack_pointer = $4;
    HEAP32[$4 + 12 >> 2] = $1;
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn190106_5d_28_29_20const($0);
    block : {
     if (!$3) {
      $2 = 1;
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn190106_5d_28_29_20const($0);
      break block;
     }
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn190106_5d_28_29_20const($0) - 1 | 0;
     $1 = HEAP32[$0 + 4 >> 2];
    }
    $5 = ($1 | 0) == ($2 | 0);
   }
   block3 : {
    block2 : {
     if ($5 | (global$9 | 0) == 2) {
      if (!global$9 | !$6) {
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_without_replace_5babi_nn190106_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2);
       if ((global$9 | 0) == 1) {
        break block1
       }
      }
      if (!global$9) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
       break block2;
      }
     }
     if (!global$9) {
      $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn190106_5d_28_29($0);
      if ($3) {
       break block2
      }
      $2 = $0;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1 + 1 | 0);
      break block3;
     }
    }
    if (!global$9) {
     $2 = HEAP32[$0 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_nn190106_5d_28unsigned_20long_29($0, $1 + 1 | 0);
    }
   }
   if (!global$9) {
    $0 = ($1 << 2) + $2 | 0;
    std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($0, $4 + 12 | 0);
    HEAP32[$4 + 8 >> 2] = 0;
    std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn190106_5d_28wchar_t__2c_20wchar_t_20const__29($0 + 4 | 0, $4 + 8 | 0);
    __stack_pointer = $4 + 16 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $4;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function abort_message($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $2 = HEAP32[7171];
  }
  block : {
   if (!global$9 | !$4) {
    fwrite(13304, 11, 1, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    HEAP32[$5 + 12 >> 2] = $1
   }
   if (!global$9 | ($4 | 0) == 1) {
    $3 = vfprintf($2, $0, $1);
    $6 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    $1 = HEAP32[$2 + 76 >> 2];
    $0 = ($1 | 0) >= 0;
   }
   block3 : {
    block1 : {
     if (!global$9) {
      if ($0) {
       $0 = !$1;
       if ($0) {
        break block1
       }
       $1 = $1 & 1073741823;
       $0 = ($1 | 0) != HEAP32[thread_ptr + 24 >> 2];
       if ($0) {
        break block1
       }
      }
      block2 : {
       $0 = HEAP32[$2 + 80 >> 2] == 10;
       if ($0) {
        break block2
       }
       $1 = HEAP32[$2 + 20 >> 2];
       $0 = ($1 | 0) == HEAP32[$2 + 16 >> 2];
       if ($0) {
        break block2
       }
       HEAP32[$2 + 20 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = 10;
       break block3;
      }
     }
     if (!global$9 | ($4 | 0) == 2) {
      $3 = __overflow($2, 10);
      $6 = 2;
      if ((global$9 | 0) == 1) {
       break block
      }
      $0 = $3;
     }
     if (!global$9) {
      break block3
     }
    }
    if (!global$9) {
     $0 = $2 + 76 | 0;
     $1 = a_cas_1013($0);
    }
    if (!global$9 | ($4 | 0) == 3 ? (global$9 | 0) == 2 | $1 : 0) {
     $3 = __lockfile($2);
     $6 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
     $1 = $3;
    }
    $1 = global$9 ? $1 : HEAP32[$2 + 80 >> 2] == 10;
    block5 : {
     if (!global$9) {
      block4 : {
       if ($1) {
        break block4
       }
       $1 = HEAP32[$2 + 20 >> 2];
       if (($1 | 0) == HEAP32[$2 + 16 >> 2]) {
        break block4
       }
       HEAP32[$2 + 20 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = 10;
       break block5;
      }
     }
     if (!global$9 | ($4 | 0) == 4) {
      __overflow($2, 10);
      $6 = 4;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     if (a_swap($0) & 1073741824) {
      __wake($0)
     }
    }
   }
   if (!global$9) {
    abort();
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function __cxa_guard_acquire($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $5 = __stack_pointer - 32 | 0;
   __stack_pointer = $5;
   $0 = __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290____GuardObject_28unsigned_20int__29($5 + 8 | 0, $0);
   $2 = Atomics.load(HEAPU8, HEAP32[$0 >> 2]);
  }
  $4 = (global$9 | 0) == 2;
  $1 = global$9 ? 0 : $2;
  $0 = (global$9 ? 0 : $4 | $1) ? 0 : $0;
  block : {
   if ($4 | !$1) {
    if (!global$9) {
     $6 = __stack_pointer - 16 | 0;
     __stack_pointer = $6;
     $2 = $6 + 12 | 0;
    }
    if (!global$9 | !$7) {
     $1 = __cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290___LockGuard__LockGuard_28char_20const__29($2, 7804);
     $4 = 0;
     if ((global$9 | 0) == 1) {
      break block
     }
     $9 = $1;
    }
    if (!global$9) {
     $0 = $0 + 4 | 0;
     $2 = !HEAPU8[$0 + 8 | 0];
    }
    block3 : {
     block2 : {
      if (!global$9) {
       block1 : {
        if ($2) {
         break block1
        }
        $2 = !(HEAPU8[HEAP32[$0 >> 2]] & 2);
        if ($2) {
         break block1
        }
        $3 = HEAP32[$0 + 12 >> 2];
        $2 = ($3 | 0) == HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
        if ($2) {
         break block2
        }
       }
      }
      while (1) {
       if (!global$9) {
        $3 = HEAP32[$0 >> 2];
        $2 = HEAPU8[$3 | 0];
        $8 = $2 & 2;
       }
       if ((global$9 | 0) == 2 | $8) {
        if (!global$9) {
         $2 = $2 | 4;
         HEAP8[$3 | 0] = $2;
        }
        if (!global$9 | ($7 | 0) == 1) {
         std____2____libcpp_condvar_wait_5babi_nn190106_5d_28pthread_cond_t__2c_20pthread_mutex_t__29(80324, 80300);
         $4 = 1;
         if ((global$9 | 0) == 1) {
          break block
         }
        }
        if (!global$9) {
         continue
        }
       }
       break;
      };
      if (!global$9) {
       $2 = ($2 | 0) == 1;
       if (!$2) {
        if (HEAPU8[$0 + 8 | 0] == 1) {
         $1 = HEAP32[$0 + 4 >> 2];
         $0 = HEAP32[$0 + 12 >> 2];
         HEAP32[$1 >> 2] = $0;
        }
        HEAP8[$3 | 0] = 2;
       }
      }
      if (!global$9 | ($7 | 0) == 2) {
       __cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290___LockGuard___LockGuard_28_29($9);
       $4 = 2;
       if ((global$9 | 0) == 1) {
        break block
       }
      }
      if (!global$9) {
       $0 = $6 + 16 | 0;
       __stack_pointer = $0;
       break block3;
      }
     }
     if (!global$9 | ($7 | 0) == 3) {
      abort_message(11233, 0);
      $4 = 3;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      wasm2js_trap()
     }
    }
    $0 = global$9 ? $0 : $2 ^ 1;
   }
   if (!global$9) {
    __stack_pointer = $5 + 32 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $5;
  HEAP32[$1 + 16 >> 2] = $6;
  HEAP32[$1 + 20 >> 2] = $9;
  HEAP32[$1 + 24 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290____GuardObject_28unsigned_20int__29($0, $1) {
  var $2 = 0;
  $2 = global$9;
  $0 = std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2__locale__id____get_28_29__$_0_______tuple_impl_5babi_nn190106_5d_0ul_2c_20std____2__locale__id____get_28_29__$_0___2c_20std____2__locale__id____get_28_29__$_0__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2__locale__id____get_28_29__$_0____2c_20std____2____tuple_indices______2c_20std____2____tuple_types___2c_20std____2__locale__id____get_28_29__$_0___29($0, $1);
  if ((global$9 | 0) != ($2 | 0)) {
   wasm2js_trap()
  }
  $2 = $0 + 4 | 0;
  HEAP8[$2 + 8 | 0] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = $1 + 1;
  HEAP8[($2 + 12 | 0) + 4 | 0] = 0;
  return $0;
 }
 
 function __cxa_guard_release($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 4 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = __stack_pointer - 32 | 0;
   __stack_pointer = $4;
   $0 = __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290____GuardObject_28unsigned_20int__29($4 + 8 | 0, $0);
   Atomics.store(HEAP8, HEAP32[$0 >> 2], 1);
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   $1 = $3 + 12 | 0;
  }
  block : {
   if (!global$9 | !$5) {
    $2 = __cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290___LockGuard__LockGuard_28char_20const__29($1, 7549);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $2;
   }
   if (!global$9) {
    $0 = HEAP32[$0 + 4 >> 2];
    $6 = HEAPU8[$0 | 0];
    HEAP8[$0 | 0] = 1;
   }
   if (!global$9 | ($5 | 0) == 1) {
    __cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290___LockGuard___LockGuard_28_29($1);
    $7 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $0 = global$9 ? $0 : !($6 & 4);
   block1 : {
    if (!($0 ? global$9 : 1)) {
     break block1
    }
    if (!global$9 | ($5 | 0) == 2) {
     $2 = pthread_cond_broadcast(80324);
     $7 = 2;
     if ((global$9 | 0) == 1) {
      break block
     }
     $0 = $2;
    }
    if (!global$9) {
     if (!$0) {
      break block1
     }
     HEAP32[$3 >> 2] = 7549;
    }
    if (!global$9 | ($5 | 0) == 3) {
     abort_message(2982, $3);
     $7 = 3;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     wasm2js_trap()
    }
   }
   if (!global$9) {
    __stack_pointer = $3 + 16 | 0;
    __stack_pointer = $4 + 32 | 0;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function __cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290___LockGuard__LockGuard_28char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   HEAP32[$0 >> 2] = $1;
  }
  block : {
   if (!global$9 | !$4) {
    $3 = __pthread_mutex_lock(80300);
    if ((global$9 | 0) == 1) {
     break block
    }
    $1 = $3;
   }
   if ((global$9 | 0) == 2 | $1) {
    if (!global$9) {
     $0 = HEAP32[$0 >> 2];
     HEAP32[$2 >> 2] = $0;
    }
    if (!global$9 | ($4 | 0) == 1) {
     abort_message(2162, $2);
     $5 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     wasm2js_trap()
    }
   }
   if (!global$9) {
    __stack_pointer = $2 + 16 | 0;
    return $0;
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function __cxxabiv1___28anonymous_20namespace_29__InitByteGlobalMutex___cxxabiv1___28anonymous_20namespace_29__LibcppMutex_2c_20__cxxabiv1___28anonymous_20namespace_29__LibcppCondVar_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppMutex___instance_2c_20__cxxabiv1___28anonymous_20namespace_29__GlobalStatic___cxxabiv1___28anonymous_20namespace_29__LibcppCondVar___instance_2c_20_28unsigned_20int_20_28__29_28_29_290___LockGuard___LockGuard_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9) {
    $1 = __stack_pointer - 16 | 0;
    __stack_pointer = $1;
    $3 = __pthread_mutex_unlock(80300);
   }
   if ($3 | (global$9 | 0) == 2) {
    if (!global$9) {
     HEAP32[$1 >> 2] = HEAP32[$0 >> 2]
    }
    if (!global$9 | !$2) {
     abort_message(2135, $1);
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     wasm2js_trap()
    }
   }
   if (!global$9) {
    __stack_pointer = $1 + 16 | 0
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function __cxa_pure_virtual() {
  var $0 = 0, $1 = 0;
  block : {
   $1 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $0 = 0
   }
   if ($1 | !$0) {
    abort_message(13274, 0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    wasm2js_trap()
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  var $3 = 0;
  $3 = global$9;
  if (!$2) {
   return HEAP32[$0 + 4 >> 2] == HEAP32[$1 + 4 >> 2]
  }
  if (($0 | 0) == ($1 | 0)) {
   return 1
  }
  $0 = strcmp(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 4 >> 2]);
  if ((global$9 | 0) != ($3 | 0)) {
   wasm2js_trap()
  }
  return !$0;
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 44;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   $6 = HEAP32[$4 + 20 >> 2];
   $10 = HEAP32[$4 + 24 >> 2];
   $9 = HEAP32[$4 + 28 >> 2];
   $7 = HEAP32[$4 + 32 >> 2];
   $8 = HEAP32[$4 + 36 >> 2];
   $12 = HEAP32[$4 + 40 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $11 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = __stack_pointer - 80 | 0;
   __stack_pointer = $6;
   $5 = 1;
   $3 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0);
  }
  block2 : {
   block6 : {
    block : {
     if (!global$9) {
      if ($3) {
       break block
      }
      $5 = 0;
      if (!$1) {
       break block
      }
      $5 = __stack_pointer - 16 | 0;
      __stack_pointer = $5;
      $3 = $5 + 4 | 0;
      $4 = HEAP32[$1 >> 2];
      $7 = HEAP32[$4 - 8 >> 2];
      HEAP32[$3 + 8 >> 2] = $7;
      HEAP32[$3 >> 2] = $1 + $7;
      $7 = HEAP32[$4 - 4 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
      $9 = HEAP32[$5 + 8 >> 2];
      $3 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($9, 42964, 0);
      $10 = HEAP32[$5 + 4 >> 2];
     }
     block1 : {
      if (!global$9) {
       if ($3) {
        $1 = __stack_pointer + -64 | 0;
        __stack_pointer = $1;
        __stack_pointer = $1 - -64 | 0;
        $1 = HEAP32[$5 + 12 >> 2];
        $3 = $1 ? 0 : $10;
        break block1;
       }
       $3 = __stack_pointer + -64 | 0;
       __stack_pointer = $3;
       $7 = ($1 | 0) >= ($10 | 0);
      }
      if ((global$9 | 0) == 2 | $7) {
       if (!global$9) {
        $8 = $3 + 28 | 0;
        HEAP32[$8 >> 2] = 0;
        HEAP32[$8 + 4 >> 2] = 0;
        HEAP32[$3 + 36 >> 2] = 0;
        HEAP32[$3 + 40 >> 2] = 0;
        HEAP32[$3 + 44 >> 2] = 0;
        HEAP32[$3 + 48 >> 2] = 0;
        HEAP32[$3 + 20 >> 2] = 0;
        HEAP32[$3 + 24 >> 2] = 0;
        HEAP32[$3 + 16 >> 2] = 0;
        HEAP32[$3 + 12 >> 2] = 42964;
        HEAP32[$3 + 4 >> 2] = $9;
        HEAP32[$3 + 60 >> 2] = 0;
        HEAP32[$3 + 52 >> 2] = 1;
        HEAP32[$3 + 56 >> 2] = 16777216;
        HEAP32[$3 + 8 >> 2] = $1;
        $12 = $3 + 4 | 0;
        $7 = HEAP32[HEAP32[$9 >> 2] + 20 >> 2];
       }
       if (!global$9 | !$11) {
        FUNCTION_TABLE[$7 | 0]($9, $12, $10, $10, 1, 0);
        $4 = 0;
        if ((global$9 | 0) == 1) {
         break block2
        }
       }
       if (!global$9) {
        $8 = HEAP32[$8 >> 2] ? $1 : 0
       }
      }
      if (!global$9) {
       __stack_pointer = $3 - -64 | 0;
       $3 = $8;
       if ($3) {
        break block1
       }
       $3 = __stack_pointer + -64 | 0;
       __stack_pointer = $3;
       HEAP32[$3 + 16 >> 2] = 0;
       HEAP32[$3 + 12 >> 2] = 42916;
       HEAP32[$3 + 8 >> 2] = $1;
       HEAP32[$3 + 4 >> 2] = 42964;
       wasm2js_memory_fill($3 + 20 | 0, 0, 39);
       HEAP32[$3 + 60 >> 2] = 0;
       HEAP8[$3 + 59 | 0] = 1;
       $7 = $3 + 4 | 0;
       $8 = HEAP32[HEAP32[$9 >> 2] + 24 >> 2];
       $1 = 0;
      }
      if (!global$9 | ($11 | 0) == 1) {
       FUNCTION_TABLE[$8 | 0]($9, $7, $10, 1, 0);
       $4 = 1;
       if ((global$9 | 0) == 1) {
        break block2
       }
      }
      if (!global$9) {
       block5 : {
        block4 : {
         switch (HEAP32[$3 + 40 >> 2]) {
         case 0:
          $1 = HEAP32[$3 + 44 >> 2] == 1 ? (HEAP32[$3 + 32 >> 2] == 1 ? (HEAP32[$3 + 36 >> 2] == 1 ? HEAP32[$3 + 24 >> 2] : 0) : 0) : 0;
          break block5;
         case 1:
          break block4;
         default:
          break block5;
         };
        }
        if (HEAP32[$3 + 28 >> 2] != 1) {
         if (HEAP32[$3 + 44 >> 2] | HEAP32[$3 + 32 >> 2] != 1 | HEAP32[$3 + 36 >> 2] != 1) {
          break block5
         }
        }
        $1 = HEAP32[$3 + 20 >> 2];
       }
       __stack_pointer = $3 - -64 | 0;
       $3 = $1;
      }
     }
     if (!global$9) {
      __stack_pointer = $5 + 16 | 0;
      $5 = 0;
      if (!$3) {
       break block
      }
      $5 = HEAP32[$2 >> 2];
      if (!$5) {
       break block6
      }
      wasm2js_memory_fill($6 + 24 | 0, 0, 56);
      HEAP8[$6 + 75 | 0] = 1;
      HEAP32[$6 + 32 >> 2] = -1;
      HEAP32[$6 + 28 >> 2] = $0;
      HEAP32[$6 + 20 >> 2] = $3;
      HEAP32[$6 + 68 >> 2] = 1;
      $1 = $6 + 20 | 0;
      $0 = HEAP32[HEAP32[$3 >> 2] + 28 >> 2];
     }
     if (!global$9 | ($11 | 0) == 2) {
      FUNCTION_TABLE[$0 | 0]($3, $1, $5, 1);
      $4 = 2;
      if ((global$9 | 0) == 1) {
       break block2
      }
     }
     if (!global$9) {
      $5 = HEAP32[$6 + 44 >> 2];
      if (($5 | 0) == 1) {
       HEAP32[$2 >> 2] = HEAP32[$6 + 36 >> 2]
      }
      $5 = ($5 | 0) == 1;
     }
    }
    if (!global$9) {
     __stack_pointer = $6 + 80 | 0;
     return $5 | 0;
    }
   }
   if (!global$9) {
    HEAP32[$6 + 8 >> 2] = 11197;
    HEAP32[$6 + 4 >> 2] = 485;
    HEAP32[$6 >> 2] = 4764;
   }
   if (!global$9 | ($11 | 0) == 3) {
    abort_message(4093, $6);
    $4 = 3;
    if ((global$9 | 0) == 1) {
     break block2
    }
   }
   if (!global$9) {
    wasm2js_trap()
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $10;
  HEAP32[$4 + 28 >> 2] = $9;
  HEAP32[$4 + 32 >> 2] = $7;
  HEAP32[$4 + 36 >> 2] = $8;
  HEAP32[$4 + 40 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 44;
  return 0;
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2) {
  var $3 = 0;
  $3 = HEAP32[$0 + 36 >> 2];
  if (!$3) {
   HEAP32[$0 + 24 >> 2] = $2;
   HEAP32[$0 + 16 >> 2] = $1;
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 56 >> 2];
   return;
  }
  block1 : {
   if (!(HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 56 >> 2] | HEAP32[$0 + 16 >> 2] != ($1 | 0))) {
    if (HEAP32[$0 + 24 >> 2] != 2) {
     break block1
    }
    HEAP32[$0 + 24 >> 2] = $2;
    return;
   }
   HEAP8[$0 + 54 | 0] = 1;
   HEAP32[$0 + 24 >> 2] = 2;
   HEAP32[$0 + 36 >> 2] = $3 + 1;
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = global$9;
  $0 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0);
  if ((global$9 | 0) != ($4 | 0)) {
   wasm2js_trap()
  }
  if ($0) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
   if ((global$9 | 0) != ($4 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
    __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
    return;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   $4 = HEAP32[HEAP32[$0 >> 2] + 28 >> 2];
  }
  block : {
   if (!global$9 | !$5) {
    FUNCTION_TABLE[$4 | 0]($0, $1, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $4 = HEAP32[$0 + 4 >> 2];
   $6 = $4 & 1;
   block : {
    if (HEAPU8[$1 + 55 | 0] == 1) {
     $5 = $4 >> 8;
     if (!$6) {
      break block
     }
     $5 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$2 >> 2], $5);
     break block;
    }
    $5 = $4 >> 8;
    if (!$6) {
     break block
    }
    HEAP32[$1 + 56 >> 2] = HEAP32[HEAP32[$0 >> 2] + 4 >> 2];
    $4 = HEAP32[$0 + 4 >> 2];
    $2 = 0;
    $5 = 0;
   }
   $2 = $2 + $5 | 0;
   $0 = HEAP32[$0 >> 2];
   $5 = HEAP32[HEAP32[$0 >> 2] + 28 >> 2];
   $3 = $4 & 2 ? $3 : 2;
  }
  block1 : {
   if (!global$9 | !$7) {
    FUNCTION_TABLE[$5 | 0]($0, $1, $2, $3);
    if ((global$9 | 0) == 1) {
     break block1
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function update_offset_to_base_28char_20const__2c_20long_29($0, $1) {
  return HEAP32[$0 + $1 >> 2];
 }
 
 function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   $6 = HEAP32[$4 + 20 >> 2];
   $7 = HEAP32[$4 + 24 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
    __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
    return;
   }
   $6 = $0 + 16 | 0;
   $5 = HEAP32[$0 + 12 >> 2];
  }
  block : {
   if (!global$9 | !$8) {
    __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($6, $1, $2, $3);
    $4 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   $7 = global$9 ? $7 : $5 >>> 0 < 2;
   block1 : {
    if (!global$9) {
     if ($7) {
      break block1
     }
     $5 = ($5 << 3) + $6 | 0;
     $0 = $0 + 24 | 0;
    }
    while (1) {
     if (!global$9 | ($8 | 0) == 1) {
      __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
      $4 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      if (HEAPU8[$1 + 54 | 0]) {
       break block1
      }
      $0 = $0 + 8 | 0;
      if ($5 >>> 0 > $0 >>> 0) {
       continue
      }
     }
     break;
    };
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $5;
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  HEAP8[$0 + 53 | 0] = 1;
  block : {
   if (HEAP32[$0 + 4 >> 2] != ($2 | 0)) {
    break block
   }
   HEAP8[$0 + 52 | 0] = 1;
   $2 = HEAP32[$0 + 16 >> 2];
   block1 : {
    if (!$2) {
     HEAP32[$0 + 36 >> 2] = 1;
     HEAP32[$0 + 24 >> 2] = $3;
     HEAP32[$0 + 16 >> 2] = $1;
     if (($3 | 0) != 1) {
      break block
     }
     if (HEAP32[$0 + 48 >> 2] == 1) {
      break block1
     }
     break block;
    }
    if (($1 | 0) == ($2 | 0)) {
     $2 = HEAP32[$0 + 24 >> 2];
     if (($2 | 0) == 2) {
      HEAP32[$0 + 24 >> 2] = $3;
      $2 = $3;
     }
     if (HEAP32[$0 + 48 >> 2] != 1) {
      break block
     }
     if (($2 | 0) == 1) {
      break block1
     }
     break block;
    }
    HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
   }
   HEAP8[$0 + 54 | 0] = 1;
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2) {
  if (!(HEAP32[$0 + 28 >> 2] == 1 | HEAP32[$0 + 4 >> 2] != ($1 | 0))) {
   HEAP32[$0 + 28 >> 2] = $2
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $6 = HEAP32[$5 + 20 >> 2];
   $7 = HEAP32[$5 + 24 >> 2];
   $8 = HEAP32[$5 + 28 >> 2];
   $10 = HEAP32[$5 + 32 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
    __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
    return;
   }
   $6 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4);
  }
  block4 : {
   block1 : {
    block2 : {
     if ((global$9 | 0) == 2 | $6) {
      if (!global$9) {
       if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
        if (($3 | 0) != 1) {
         break block1
        }
        HEAP32[$1 + 32 >> 2] = 1;
        return;
       }
       HEAP32[$1 + 32 >> 2] = $3;
       if (HEAP32[$1 + 44 >> 2] == 4) {
        break block2
       }
       $6 = $0 + 16 | 0;
       $3 = $6 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
      }
      while (1) {
       $8 = global$9 ? $8 : $3 >>> 0 <= $6 >>> 0;
       block5 : {
        block6 : {
         block7 : {
          block3 : {
           if (!global$9) {
            if ($8) {
             break block3
            }
            HEAP16[$1 + 52 >> 1] = 0;
           }
           if (!global$9 | !$9) {
            __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $2, 1, $4);
            $5 = 0;
            if ((global$9 | 0) == 1) {
             break block4
            }
           }
           if (!global$9) {
            $8 = HEAPU8[$1 + 54 | 0];
            if ($8) {
             break block3
            }
            $8 = HEAPU8[$1 + 53 | 0] != 1;
            if ($8) {
             break block5
            }
            if (HEAPU8[$1 + 52 | 0] == 1) {
             $7 = HEAP32[$1 + 24 >> 2] == 1;
             if ($7) {
              break block6
             }
             $7 = 1;
             $10 = 1;
             $8 = !(HEAPU8[$0 + 8 | 0] & 2);
             if ($8) {
              break block6
             }
             break block5;
            }
            $7 = 1;
            $8 = HEAP8[$0 + 8 | 0] & 1;
            if ($8) {
             break block5
            }
            $0 = 3;
            break block7;
           }
          }
          if (!global$9) {
           $0 = $7 & 1 ? 3 : 4
          }
         }
         if (!global$9) {
          HEAP32[$1 + 44 >> 2] = $0;
          if ($10) {
           break block1
          }
          break block2;
         }
        }
        if (!global$9) {
         HEAP32[$1 + 44 >> 2] = 3;
         break block1;
        }
       }
       if (!global$9) {
        $6 = $6 + 8 | 0;
        continue;
       }
       break;
      };
     }
     if (!global$9) {
      $7 = $0 + 16 | 0;
      $6 = HEAP32[$0 + 12 >> 2];
     }
     if (!global$9 | ($9 | 0) == 1) {
      __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($7, $1, $2, $3, $4);
      $5 = 1;
      if ((global$9 | 0) == 1) {
       break block4
      }
     }
     $11 = global$9;
     if (global$9) {
      $5 = $8
     } else {
      if ($6 >>> 0 < 2) {
       break block1
      }
      $7 = ($6 << 3) + $7 | 0;
      $6 = $0 + 24 | 0;
      $0 = HEAP32[$0 + 8 >> 2];
      $5 = !($0 & 2);
     }
     if (!(!($5 ? $11 : 1) & HEAP32[$1 + 36 >> 2] != 1)) {
      while (1) {
       if (!global$9) {
        $0 = HEAPU8[$1 + 54 | 0];
        if ($0) {
         break block1
        }
       }
       if (!global$9 | ($9 | 0) == 2) {
        __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4);
        $5 = 2;
        if ((global$9 | 0) == 1) {
         break block4
        }
       }
       if (!global$9) {
        $6 = $6 + 8 | 0;
        $0 = $7 >>> 0 > $6 >>> 0;
        if ($0) {
         continue
        }
       }
       break;
      };
      if (!global$9) {
       break block1
      }
     }
     if ((global$9 | 0) == 2 | (global$9 ? $0 : !($0 & 1))) {
      while (1) {
       if (!(HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1 ? global$9 : 1)) {
        break block1
       }
       if (!global$9 | ($9 | 0) == 3) {
        __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4);
        $5 = 3;
        if ((global$9 | 0) == 1) {
         break block4
        }
       }
       if (!global$9) {
        $6 = $6 + 8 | 0;
        if ($7 >>> 0 > $6 >>> 0) {
         continue
        }
       }
       break;
      };
      if (!global$9) {
       break block1
      }
     }
     while (1) {
      if (!global$9) {
       if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1 & HEAP32[$1 + 24 >> 2] == 1) {
        break block1
       }
      }
      if (!global$9 | ($9 | 0) == 4) {
       __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4);
       $5 = 4;
       if ((global$9 | 0) == 1) {
        break block4
       }
      }
      if (!global$9) {
       $6 = $6 + 8 | 0;
       if ($7 >>> 0 > $6 >>> 0) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      break block1
     }
    }
    if (!global$9) {
     HEAP32[$1 + 20 >> 2] = $2;
     HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
     if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
      break block1
     }
     HEAP8[$1 + 54 | 0] = 1;
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = $7;
  HEAP32[$5 + 28 >> 2] = $8;
  HEAP32[$5 + 32 >> 2] = $10;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
 }
 
 function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $7 = HEAP32[$6 + 24 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $7 = HEAP32[$0 + 4 >> 2];
   $6 = $7 >> 8;
   if ($7 & 1) {
    $6 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$3 >> 2], $6)
   }
   $4 = $7 & 2 ? $4 : 2;
   $0 = HEAP32[$0 >> 2];
   $7 = HEAP32[HEAP32[$0 >> 2] + 20 >> 2];
   $3 = $3 + $6 | 0;
  }
  block : {
   if (!global$9 | !$8) {
    FUNCTION_TABLE[$7 | 0]($0, $1, $2, $3, $4, $5);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $6 = HEAP32[$5 + 20 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = HEAP32[$0 + 4 >> 2];
   $5 = $6 >> 8;
   if ($6 & 1) {
    $5 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$2 >> 2], $5)
   }
   $3 = $6 & 2 ? $3 : 2;
   $0 = HEAP32[$0 >> 2];
   $6 = HEAP32[HEAP32[$0 >> 2] + 24 >> 2];
   $2 = $2 + $5 | 0;
  }
  block : {
   if (!global$9 | !$7) {
    FUNCTION_TABLE[$6 | 0]($0, $1, $2, $3, $4);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $5 = HEAP32[$5 + 20 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
    __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
    return;
   }
   $5 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4);
  }
  block3 : {
   block1 : {
    if ((global$9 | 0) == 2 | $5) {
     if (!global$9) {
      block : {
       if (HEAP32[$1 + 16 >> 2] != ($2 | 0)) {
        $5 = HEAP32[$1 + 20 >> 2] != ($2 | 0);
        if ($5) {
         break block
        }
       }
       if (($3 | 0) != 1) {
        break block1
       }
       HEAP32[$1 + 32 >> 2] = 1;
       return;
      }
      HEAP32[$1 + 32 >> 2] = $3;
      $3 = HEAP32[$1 + 44 >> 2] == 4;
     }
     block2 : {
      if (!global$9) {
       if ($3) {
        break block2
       }
       HEAP16[$1 + 52 >> 1] = 0;
       $0 = HEAP32[$0 + 8 >> 2];
       $3 = HEAP32[HEAP32[$0 >> 2] + 20 >> 2];
      }
      if (!global$9 | !$6) {
       FUNCTION_TABLE[$3 | 0]($0, $1, $2, $2, 1, $4);
       if ((global$9 | 0) == 1) {
        break block3
       }
      }
      if (!global$9) {
       $0 = HEAPU8[$1 + 53 | 0] == 1;
       if ($0) {
        HEAP32[$1 + 44 >> 2] = 3;
        $0 = !HEAPU8[$1 + 52 | 0];
        if ($0) {
         break block2
        }
        break block1;
       }
       HEAP32[$1 + 44 >> 2] = 4;
      }
     }
     if (!global$9) {
      HEAP32[$1 + 20 >> 2] = $2;
      HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
      if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
       break block1
      }
      HEAP8[$1 + 54 | 0] = 1;
      return;
     }
    }
    if (!global$9) {
     $0 = HEAP32[$0 + 8 >> 2];
     $5 = HEAP32[HEAP32[$0 >> 2] + 24 >> 2];
    }
    if (!global$9 | ($6 | 0) == 1) {
     FUNCTION_TABLE[$5 | 0]($0, $1, $2, $3, $4);
     $7 = 1;
     if ((global$9 | 0) == 1) {
      break block3
     }
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = global$9;
  $6 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  if ($6) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   if ((global$9 | 0) != ($5 | 0)) {
    wasm2js_trap()
   }
   return;
  }
  $0 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4);
  if ((global$9 | 0) != ($5 | 0)) {
   wasm2js_trap()
  }
  block : {
   if (!$0) {
    break block
   }
   if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
    if (($3 | 0) != 1) {
     break block
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 32 >> 2] = $3;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
    HEAP8[$1 + 54 | 0] = 1
   }
   HEAP32[$1 + 44 >> 2] = 4;
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 52;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $7 = HEAP32[$6 + 24 >> 2];
   $8 = HEAP32[$6 + 28 >> 2];
   $9 = HEAP32[$6 + 32 >> 2];
   $10 = HEAP32[$6 + 36 >> 2];
   $11 = HEAP32[$6 + 40 >> 2];
   $12 = HEAP32[$6 + 44 >> 2];
   $13 = HEAP32[$6 + 48 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $14 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
    __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
    return;
   }
   $8 = HEAPU8[$1 + 53 | 0];
   $7 = HEAP32[$0 + 12 >> 2];
   HEAP8[$1 + 53 | 0] = 0;
   $9 = HEAPU8[$1 + 52 | 0];
   HEAP8[$1 + 52 | 0] = 0;
   $10 = $0 + 16 | 0;
  }
  block : {
   if (!global$9 | !$14) {
    __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($10, $1, $2, $3, $4, $5);
    $6 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    $11 = HEAPU8[$1 + 52 | 0];
    $9 = $11 | $9;
    $13 = $7 >>> 0 < 2;
    $12 = HEAPU8[$1 + 53 | 0];
    $8 = $12 | $8;
   }
   block1 : {
    if (!global$9) {
     if ($13) {
      break block1
     }
     $10 = ($7 << 3) + $10 | 0;
     $7 = $0 + 24 | 0;
    }
    while (1) {
     if (!global$9) {
      if (HEAPU8[$1 + 54 | 0]) {
       break block1
      }
      block2 : {
       if ($11 & 1) {
        if (HEAP32[$1 + 24 >> 2] == 1) {
         break block1
        }
        if (HEAPU8[$0 + 8 | 0] & 2) {
         break block2
        }
        break block1;
       }
       if (!($12 & 1)) {
        break block2
       }
       if (!(HEAP8[$0 + 8 | 0] & 1)) {
        break block1
       }
      }
      HEAP16[$1 + 52 >> 1] = 0;
     }
     if (!global$9 | ($14 | 0) == 1) {
      __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($7, $1, $2, $3, $4, $5);
      $6 = 1;
      if ((global$9 | 0) == 1) {
       break block
      }
     }
     if (!global$9) {
      $12 = HEAPU8[$1 + 53 | 0];
      $8 = ($12 | $8) & 1;
      $11 = HEAPU8[$1 + 52 | 0];
      $9 = ($11 | $9) & 1;
      $7 = $7 + 8 | 0;
      if ($10 >>> 0 > $7 >>> 0) {
       continue
      }
     }
     break;
    };
   }
   if (!global$9) {
    HEAP8[$1 + 53 | 0] = $8 & 1;
    HEAP8[$1 + 52 | 0] = $9 & 1;
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $7;
  HEAP32[$6 + 28 >> 2] = $8;
  HEAP32[$6 + 32 >> 2] = $9;
  HEAP32[$6 + 36 >> 2] = $10;
  HEAP32[$6 + 40 >> 2] = $11;
  HEAP32[$6 + 44 >> 2] = $12;
  HEAP32[$6 + 48 >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 52;
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $6 = HEAP32[$6 + 24 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
    __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
    return;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   $6 = HEAP32[HEAP32[$0 >> 2] + 20 >> 2];
  }
  block : {
   if (!global$9 | !$7) {
    FUNCTION_TABLE[$6 | 0]($0, $1, $2, $3, $4, $5);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = global$9;
  $0 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5);
  if ((global$9 | 0) != ($6 | 0)) {
   wasm2js_trap()
  }
  if ($0) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
   if ((global$9 | 0) != ($6 | 0)) {
    wasm2js_trap()
   }
  }
 }
 
 function std__exception__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 4950;
 }
 
 function std__logic_error___logic_error_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9) {
    HEAP32[$0 >> 2] = 43288;
    $1 = HEAP32[$0 + 4 >> 2] - 12 | 0;
    $3 = (long_20std____2____libcpp_atomic_refcount_decrement_5babi_nn190106_5d_long__28long__29($1 + 8 | 0) | 0) >= 0;
   }
   if (!($3 & !global$9) & (!global$9 | !$2)) {
    emscripten_builtin_free($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function std__logic_error___logic_error_28_29_2359($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$1) {
    std__logic_error___logic_error_28_29($0);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($1 | 0) == 1) {
    emscripten_builtin_free($0);
    $2 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function _emscripten_thread_free_data($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $1 = global$9 ? $1 : (thread_ptr | 0) != ($0 | 0);
   if ($1 | (global$9 | 0) == 2) {
    if (!global$9) {
     $1 = Atomics.load(HEAP32, $0 + 112 >> 2)
    }
    if ((global$9 | 0) == 2 | $1) {
     if (!global$9) {
      $1 = Atomics.load(HEAP32, $0 + 112 >> 2)
     }
     if (!global$9 | !$2) {
      emscripten_builtin_free($1);
      if ((global$9 | 0) == 1) {
       break block
      }
     }
    }
    if (!global$9) {
     $0 = HEAP32[$0 + 44 >> 2];
     __memset($0, 0, 132);
    }
    if (!global$9 | ($2 | 0) == 1) {
     emscripten_builtin_free($0);
     $3 = 1;
     if ((global$9 | 0) == 1) {
      break block
     }
    }
    if (!global$9) {
     return
    }
   }
   if (!global$9) {
    __assert_fail(12923, 9814, 282, 10013);
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function _emscripten_thread_exit($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 12 >> 2];
   $5 = HEAP32[$2 + 16 >> 2];
   $8 = HEAP32[$2 + 20 >> 2];
   $9 = HEAP32[$2 + 24 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block1 : {
   $2 = global$9 ? $3 : thread_ptr;
   block9 : {
    if ($2 | (global$9 | 0) == 2) {
     if (!global$9) {
      HEAP8[$2 + 40 | 0] = 1;
      HEAP32[$2 + 64 >> 2] = $0;
      HEAP8[$2 + 41 | 0] = 0;
      $0 = $2;
      $1 = ($0 | 0) == (thread_ptr | 0);
     }
     block4 : {
      block : {
       if ((global$9 | 0) == 2 | $1) {
        if (!global$9) {
         $1 = (Atomics.load(HEAP32, $0 + 124 >> 2) | 0) <= 0;
         if ($1) {
          break block
         }
         $1 = $0 + 124 | 0;
         $4 = Atomics.sub(HEAP32, $1 >> 2, 1) - 1 | 0;
        }
        if ((global$9 | 0) == 2 | $4) {
         while (1) {
          if (!global$9 | !$6) {
           $3 = emscripten_futex_wait($1, $4, Infinity);
           if ((global$9 | 0) == 1) {
            break block1
           }
           $4 = $3;
          }
          if (!global$9) {
           $4 = Atomics.load(HEAP32, $1 >> 2);
           if ($4) {
            continue
           }
          }
          break;
         }
        }
        $1 = global$9 ? $1 : HEAP32[$0 + 120 >> 2];
        if (!global$9 | ($6 | 0) == 1) {
         em_task_queue_cancel($1);
         $7 = 1;
         if ((global$9 | 0) == 1) {
          break block1
         }
        }
        if (!global$9) {
         $0 = HEAP32[$0 + 120 >> 2];
         $1 = HEAP32[$0 + 56 >> 2];
        }
        block3 : {
         block2 : {
          if (!global$9) {
           if ($1) {
            break block2
           }
           $1 = HEAP32[$0 + 52 >> 2];
           if ($1) {
            break block2
           }
           $1 = !Atomics.load(HEAP32, $0 >> 2);
          }
          if ((global$9 | 0) == 2 | $1) {
           if (!global$9 | ($6 | 0) == 2) {
            em_task_queue_free($0);
            $7 = 2;
            if ((global$9 | 0) == 1) {
             break block1
            }
           }
           if (!global$9) {
            break block3
           }
          }
          if (!global$9 | ($6 | 0) == 3) {
           $3 = __pthread_mutex_lock(51872);
           $7 = 3;
           if ((global$9 | 0) == 1) {
            break block1
           }
           $1 = $3;
          }
          if (!global$9) {
           HEAP32[$0 + 56 >> 2] = 51868;
           HEAP32[$0 + 52 >> 2] = HEAP32[12980];
           HEAP32[12980] = $0;
           $1 = HEAP32[$0 + 52 >> 2];
           HEAP32[$1 + 56 >> 2] = $0;
           $0 = __pthread_mutex_unlock(51872);
           break block3;
          }
         }
         if (!global$9) {
          __assert_fail(10646, 9761, 119, 1149);
          wasm2js_trap();
         }
        }
        if (!global$9) {
         break block4
        }
       }
       if (!global$9) {
        __assert_fail(12898, 9497, 48, 4906);
        wasm2js_trap();
       }
      }
      if (!global$9) {
       __assert_fail(11818, 9497, 51, 4906);
       wasm2js_trap();
      }
     }
     $4 = global$9 ? $4 : thread_ptr;
     while (1) {
      $0 = global$9 ? $0 : HEAP32[$4 + 68 >> 2];
      if ($0 | (global$9 | 0) == 2) {
       if (!global$9) {
        $1 = HEAP32[$0 + 4 >> 2];
        $5 = HEAP32[$0 >> 2];
        $0 = HEAP32[$0 + 8 >> 2];
        HEAP32[$4 + 68 >> 2] = $0;
       }
       if (!global$9 | ($6 | 0) == 4) {
        FUNCTION_TABLE[$5 | 0]($1);
        $7 = 4;
        if ((global$9 | 0) == 1) {
         break block1
        }
       }
       if (!global$9) {
        continue
       }
      }
      break;
     };
     if (!global$9) {
      $5 = thread_ptr;
      $0 = !(HEAP8[$5 + 42 | 0] & 1);
     }
     block5 : {
      if (!($0 ? global$9 : 1)) {
       break block5
      }
      while (1) {
       if (!global$9 | ($6 | 0) == 5) {
        __pthread_rwlock_timedrdlock();
        $7 = 5;
        if ((global$9 | 0) == 1) {
         break block1
        }
       }
       if (!global$9) {
        HEAP8[$5 + 42 | 0] = HEAPU8[$5 + 42 | 0] & 254;
        $0 = 0;
       }
       while (1) {
        if (!global$9) {
         $3 = $0 << 2;
         $4 = HEAP32[$3 + 73920 >> 2];
         $3 = $3 + HEAP32[$5 + 72 >> 2] | 0;
         $1 = HEAP32[$3 >> 2];
         HEAP32[$3 >> 2] = 0;
         $8 = !$1;
        }
        block6 : {
         if (!global$9) {
          if ($8) {
           break block6
          }
          $8 = !$4;
          if ($8) {
           break block6
          }
          $8 = ($4 | 0) == 203;
          if ($8) {
           break block6
          }
          __pthread_rwlock_unlock();
         }
         if (!global$9 | ($6 | 0) == 6) {
          FUNCTION_TABLE[$4 | 0]($1);
          $7 = 6;
          if ((global$9 | 0) == 1) {
           break block1
          }
         }
         if (!global$9 | ($6 | 0) == 7) {
          __pthread_rwlock_timedrdlock();
          $7 = 7;
          if ((global$9 | 0) == 1) {
           break block1
          }
         }
        }
        if (!global$9) {
         $0 = $0 + 1 | 0;
         $1 = ($0 | 0) != 128;
         if ($1) {
          continue
         }
        }
        break;
       };
       if (!global$9) {
        __pthread_rwlock_unlock();
        $0 = !(HEAP8[$5 + 42 | 0] & 1);
        if ($0) {
         break block5
        }
        $0 = $9 >>> 0 < 3;
        $9 = $9 + 1 | 0;
        if ($0) {
         continue
        }
       }
       break;
      };
     }
     if (!global$9) {
      $0 = HEAP32[18277] - 1 | 0;
      HEAP32[18277] = $0;
      if (!$0) {
       HEAP8[73107] = 0
      }
      $1 = HEAP32[thread_ptr + 24 >> 2];
      $0 = ($1 | 0) != HEAP32[20094];
     }
     block7 : {
      if ((global$9 | 0) == 2 | $0) {
       if (!global$9) {
        $0 = a_cas(80376, 0, $1)
       }
       if ((global$9 | 0) == 2 | $0) {
        while (1) {
         if (!global$9 | ($6 | 0) == 8) {
          __wait(80376, 80384, $0);
          $7 = 8;
          if ((global$9 | 0) == 1) {
           break block1
          }
         }
         if (!global$9) {
          $0 = a_cas(80376, 0, $1);
          if ($0) {
           continue
          }
         }
         break;
        }
       }
       if (!global$9) {
        break block7
       }
      }
      if (!global$9) {
       HEAP32[20095] = HEAP32[20095] + 1
      }
     }
     if (!global$9) {
      $3 = HEAP32[$2 + 12 >> 2];
      $0 = HEAP32[$2 + 8 >> 2];
      HEAP32[$3 + 8 >> 2] = $0;
      HEAP32[$0 + 12 >> 2] = $3;
      HEAP32[$2 + 8 >> 2] = $2;
      HEAP32[$2 + 12 >> 2] = $2;
      $0 = HEAP32[20095];
      block8 : {
       if ($0) {
        HEAP32[20095] = $0 - 1;
        break block8;
       }
       a_store(80376);
       if (HEAP32[20096]) {
        __wake(80376)
       }
      }
      if (is_runtime_thread) {
       break block9
      }
      __set_thread_state(0, 0, 0, 1);
      $0 = $2 + 32 | 0;
      if ((a_cas($0, 2, 1) | 0) == 3) {
       _emscripten_thread_cleanup($2 | 0);
       return;
      }
      a_store($0);
      __wake($0);
      return;
     }
    }
    if (!global$9) {
     __assert_fail(7172, 9814, 301, 3057);
     wasm2js_trap();
    }
   }
   if (!global$9) {
    exit(0);
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $8;
  HEAP32[$3 + 24 >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function _emscripten_thread_init($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0.0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   __set_thread_state($0, $1, $2, $3);
   $0 = !$2;
   block : {
    if ($0) {
     break block
    }
    $0 = !$4;
    if ($0) {
     break block
    }
    HEAP32[13100] = $4;
   }
  }
  block1 : {
   if ((global$9 | 0) == 2 | $5) {
    if (!global$9) {
     HEAP8[75480] = 1;
     $0 = thread_ptr;
    }
    block2 : {
     if ((global$9 | 0) == 2 | $0) {
      $1 = global$9 ? $1 : HEAPU8[75480];
      if ($1 | (global$9 | 0) == 2) {
       if (!global$9 | !$6) {
        $2 = emscripten_builtin_malloc(104);
        if ((global$9 | 0) == 1) {
         break block1
        }
        $1 = $2;
       }
       if (!global$9) {
        Atomics.store(HEAP32, $0 + 112 >> 2, $1);
        __memset(Atomics.load(HEAP32, $0 + 112 >> 2), 0, 104);
        $7 = +emscripten_get_now();
        HEAPF64[Atomics.load(HEAP32, $0 + 112 >> 2) + 8 >> 3] = $7;
       }
      }
      if (!global$9) {
       break block2
      }
     }
     if (!global$9) {
      __assert_fail(9267, 9612, 20, 3081);
      wasm2js_trap();
     }
    }
    if (!(HEAPU8[75480] ? global$9 : 1)) {
     strncpy(Atomics.load(HEAP32, $0 + 112 >> 2) + 72 | 0, 9254, 31)
    }
   }
   if (!global$9) {
    set_status_conditional(-1, 1)
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function _emscripten_stack_restore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function _emscripten_stack_alloc($0) {
  $0 = $0 | 0;
  $0 = __stack_pointer - $0 & -16;
  __stack_pointer = $0;
  return $0 | 0;
 }
 
 function emscripten_stack_get_current() {
  return __stack_pointer | 0;
 }
 
 function _emscripten_run_callback_on_thread($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   if (!global$9 | !$7) {
    $5 = emscripten_builtin_malloc(16);
    if ((global$9 | 0) == 1) {
     break block
    }
    $6 = $5;
   }
   if (!global$9) {
    HEAP32[$6 + 12 >> 2] = $4;
    HEAP32[$6 + 8 >> 2] = $3;
    HEAP32[$6 + 4 >> 2] = $2;
    HEAP32[$6 >> 2] = $1;
   }
   if (!global$9 | ($7 | 0) == 1) {
    $5 = emscripten_proxy_async($0, 565, $6);
    $8 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $5;
   }
   if (!(global$9 | $0)) {
    __assert_fail(13077, 9667, 40, 9219);
    wasm2js_trap();
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function do_callback($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $2 = HEAP32[$0 + 8 >> 2];
   $3 = HEAP32[$0 + 12 >> 2];
   $4 = HEAP32[$0 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
  }
  block : {
   if (!global$9 | !$6) {
    FUNCTION_TABLE[$4 | 0]($5, $2, $3) | 0;
    $1 = 0;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   if (!global$9 | ($6 | 0) == 1) {
    emscripten_builtin_free($0);
    $1 = 1;
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $1 = HEAP32[global$10 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $5;
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = $3;
  HEAP32[$1 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function dynCall_v($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    FUNCTION_TABLE[$0 | 0]();
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
 }
 
 function dynCall_ii($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    $2 = FUNCTION_TABLE[$0 | 0]($1) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $2;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
  return 0;
 }
 
 function dynCall_vii($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  block : {
   $4 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $3 = 0
   }
   if ($4 | !$3) {
    FUNCTION_TABLE[$0 | 0]($1, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function dynCall_viii($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  block : {
   $5 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $4 = 0
   }
   if ($5 | !$4) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function dynCall_viff($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAPF32[$1 + 8 >> 2];
   $3 = HEAPF32[$1 + 12 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $5 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $4 = 0
   }
   if ($5 | !$4) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAPF32[$4 + 8 >> 2] = $2;
  HEAPF32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function dynCall_viiiii($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $5 = HEAP32[$5 + 20 >> 2];
  }
  block : {
   $7 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $6 = 0
   }
   if ($7 | !$6) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function dynCall_viiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
  }
  block : {
   $6 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $5 = 0
   }
   if ($6 | !$5) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function dynCall_vidd($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 8 >> 2];
   wasm2js_scratch_store_i32(0, $5 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $2 = +wasm2js_scratch_load_f64();
   $4 = HEAP32[$1 + 20 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   wasm2js_scratch_store_i32(0, $5 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $3 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $5 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $4 = 0
   }
   if ($5 | !$4) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  wasm2js_scratch_store_f64(+$2);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 12 >> 2] = $0;
  wasm2js_scratch_store_f64(+$3);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 20 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function dynCall_iiii($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = HEAP32[$3 + 8 >> 2];
   $3 = HEAP32[$3 + 12 >> 2];
  }
  block : {
   $5 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $4 = 0
   }
   if ($5 | !$4) {
    $4 = FUNCTION_TABLE[$0 | 0]($1, $2, $3) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $4;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
  return 0;
 }
 
 function dynCall_vi($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    FUNCTION_TABLE[$0 | 0]($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function dynCall_vffff($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $2 = HEAPF32[$5 + 8 >> 2];
   $3 = HEAPF32[$5 + 12 >> 2];
   $4 = HEAPF32[$5 + 16 >> 2];
   $1 = HEAPF32[$5 + 4 >> 2];
  }
  block : {
   $6 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $5 = 0
   }
   if ($6 | !$5) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAPF32[$5 + 4 >> 2] = $1;
  HEAPF32[$5 + 8 >> 2] = $2;
  HEAPF32[$5 + 12 >> 2] = $3;
  HEAPF32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function dynCall_vf($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 8;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAPF32[$2 + 4 >> 2];
  }
  block : {
   $3 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $2 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $2 = 0
   }
   if ($3 | !$2) {
    FUNCTION_TABLE[$0 | 0]($1);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAPF32[$2 + 4 >> 2] = $1;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 8;
 }
 
 function dynCall_viiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $8 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$8 >> 2];
   $1 = HEAP32[$8 + 4 >> 2];
   $2 = HEAP32[$8 + 8 >> 2];
   $3 = HEAP32[$8 + 12 >> 2];
   $4 = HEAP32[$8 + 16 >> 2];
   $5 = HEAP32[$8 + 20 >> 2];
   $6 = HEAP32[$8 + 24 >> 2];
   $7 = HEAP32[$8 + 28 >> 2];
   $8 = HEAP32[$8 + 32 >> 2];
  }
  block : {
   $10 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $9 = 0
   }
   if ($10 | !$9) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6, $7, $8);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $9 = HEAP32[global$10 >> 2];
  HEAP32[$9 >> 2] = $0;
  HEAP32[$9 + 4 >> 2] = $1;
  HEAP32[$9 + 8 >> 2] = $2;
  HEAP32[$9 + 12 >> 2] = $3;
  HEAP32[$9 + 16 >> 2] = $4;
  HEAP32[$9 + 20 >> 2] = $5;
  HEAP32[$9 + 24 >> 2] = $6;
  HEAP32[$9 + 28 >> 2] = $7;
  HEAP32[$9 + 32 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
 }
 
 function dynCall_viiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $9 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$9 >> 2];
   $1 = HEAP32[$9 + 4 >> 2];
   $2 = HEAP32[$9 + 8 >> 2];
   $3 = HEAP32[$9 + 12 >> 2];
   $4 = HEAP32[$9 + 16 >> 2];
   $5 = HEAP32[$9 + 20 >> 2];
   $6 = HEAP32[$9 + 24 >> 2];
   $7 = HEAP32[$9 + 28 >> 2];
   $8 = HEAP32[$9 + 32 >> 2];
   $9 = HEAP32[$9 + 36 >> 2];
  }
  block : {
   $11 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $10 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $10 = 0
   }
   if ($11 | !$10) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6, $7, $8, $9);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $10 = HEAP32[global$10 >> 2];
  HEAP32[$10 >> 2] = $0;
  HEAP32[$10 + 4 >> 2] = $1;
  HEAP32[$10 + 8 >> 2] = $2;
  HEAP32[$10 + 12 >> 2] = $3;
  HEAP32[$10 + 16 >> 2] = $4;
  HEAP32[$10 + 20 >> 2] = $5;
  HEAP32[$10 + 24 >> 2] = $6;
  HEAP32[$10 + 28 >> 2] = $7;
  HEAP32[$10 + 32 >> 2] = $8;
  HEAP32[$10 + 36 >> 2] = $9;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
 }
 
 function dynCall_i($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $0 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  block : {
   $2 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $1 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $1 = 0
   }
   if ($2 | !$1) {
    $1 = FUNCTION_TABLE[$0 | 0]() | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $1;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  HEAP32[HEAP32[global$10 >> 2] >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  return 0;
 }
 
 function dynCall_vff($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $3 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$3 >> 2];
   $2 = HEAPF32[$3 + 8 >> 2];
   $1 = HEAPF32[$3 + 4 >> 2];
  }
  block : {
   $4 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $3 = 0
   }
   if ($4 | !$3) {
    FUNCTION_TABLE[$0 | 0]($1, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAPF32[$3 + 4 >> 2] = $1;
  HEAPF32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function dynCall_viiiiiii($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $7 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$7 >> 2];
   $1 = HEAP32[$7 + 4 >> 2];
   $2 = HEAP32[$7 + 8 >> 2];
   $3 = HEAP32[$7 + 12 >> 2];
   $4 = HEAP32[$7 + 16 >> 2];
   $5 = HEAP32[$7 + 20 >> 2];
   $6 = HEAP32[$7 + 24 >> 2];
   $7 = HEAP32[$7 + 28 >> 2];
  }
  block : {
   $9 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $8 = 0
   }
   if ($9 | !$8) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6, $7);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
 }
 
 function dynCall_iii($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  block : {
   $4 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $3 = 0
   }
   if ($4 | !$3) {
    $3 = FUNCTION_TABLE[$0 | 0]($1, $2) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $3;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
  return 0;
 }
 
 function dynCall_vfi($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $2 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$2 >> 2];
   $1 = HEAPF32[$2 + 4 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
  }
  block : {
   $4 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $3 = 0
   }
   if ($4 | !$3) {
    FUNCTION_TABLE[$0 | 0]($1, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAPF32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function dynCall_viif($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAPF32[$1 + 12 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $5 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $4 = 0
   }
   if ($5 | !$4) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAPF32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function dynCall_vif($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 12;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAPF32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $4 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $3 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $3 = 0
   }
   if ($4 | !$3) {
    FUNCTION_TABLE[$0 | 0]($1, $2);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAPF32[$3 + 8 >> 2] = $2;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 12;
 }
 
 function dynCall_vifff($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAPF32[$1 + 8 >> 2];
   $3 = HEAPF32[$1 + 12 >> 2];
   $4 = HEAPF32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $6 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $5 = 0
   }
   if ($6 | !$5) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAPF32[$5 + 8 >> 2] = $2;
  HEAPF32[$5 + 12 >> 2] = $3;
  HEAPF32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
 }
 
 function dynCall_viffff($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = Math_fround($5);
  var $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAPF32[$1 + 8 >> 2];
   $3 = HEAPF32[$1 + 12 >> 2];
   $4 = HEAPF32[$1 + 16 >> 2];
   $5 = HEAPF32[$1 + 20 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $7 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $6 = 0
   }
   if ($7 | !$6) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAPF32[$6 + 8 >> 2] = $2;
  HEAPF32[$6 + 12 >> 2] = $3;
  HEAPF32[$6 + 16 >> 2] = $4;
  HEAPF32[$6 + 20 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
 }
 
 function dynCall_viiiiii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $6 = HEAP32[$6 + 24 >> 2];
  }
  block : {
   $8 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $7 = 0
   }
   if ($8 | !$7) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function dynCall_vfff($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 16;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $2 = HEAPF32[$4 + 8 >> 2];
   $3 = HEAPF32[$4 + 12 >> 2];
   $1 = HEAPF32[$4 + 4 >> 2];
  }
  block : {
   $5 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $4 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $4 = 0
   }
   if ($5 | !$4) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $3);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $4 = HEAP32[global$10 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAPF32[$4 + 4 >> 2] = $1;
  HEAPF32[$4 + 8 >> 2] = $2;
  HEAPF32[$4 + 12 >> 2] = $3;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 16;
 }
 
 function dynCall_iidiiii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 8 >> 2];
   wasm2js_scratch_store_i32(0, $4 | 0);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $2 = +wasm2js_scratch_load_f64();
   $3 = HEAP32[$6 + 16 >> 2];
   $4 = HEAP32[$6 + 20 >> 2];
   $5 = HEAP32[$6 + 24 >> 2];
   $6 = HEAP32[$6 + 28 >> 2];
  }
  block : {
   $8 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $7 = 0
   }
   if ($8 | !$7) {
    $7 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $7;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  wasm2js_scratch_store_f64(+$2);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $7, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  HEAP32[$7 + 12 >> 2] = $0;
  HEAP32[$7 + 16 >> 2] = $3;
  HEAP32[$7 + 20 >> 2] = $4;
  HEAP32[$7 + 24 >> 2] = $5;
  HEAP32[$7 + 28 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function dynCall_iiiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $4 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
  }
  block : {
   $6 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $5 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $5 = 0
   }
   if ($6 | !$5) {
    $5 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $5;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function dynCall_iiiiii($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 24;
   $5 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   $3 = HEAP32[$5 + 12 >> 2];
   $4 = HEAP32[$5 + 16 >> 2];
   $5 = HEAP32[$5 + 20 >> 2];
  }
  block : {
   $7 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $6 = 0
   }
   if ($7 | !$6) {
    $6 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 24;
  return 0;
 }
 
 function dynCall_iiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $8 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$8 >> 2];
   $1 = HEAP32[$8 + 4 >> 2];
   $2 = HEAP32[$8 + 8 >> 2];
   $3 = HEAP32[$8 + 12 >> 2];
   $4 = HEAP32[$8 + 16 >> 2];
   $5 = HEAP32[$8 + 20 >> 2];
   $6 = HEAP32[$8 + 24 >> 2];
   $7 = HEAP32[$8 + 28 >> 2];
   $8 = HEAP32[$8 + 32 >> 2];
  }
  block : {
   $10 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $9 = 0
   }
   if ($10 | !$9) {
    $9 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6, $7, $8) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $9;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $9 = HEAP32[global$10 >> 2];
  HEAP32[$9 >> 2] = $0;
  HEAP32[$9 + 4 >> 2] = $1;
  HEAP32[$9 + 8 >> 2] = $2;
  HEAP32[$9 + 12 >> 2] = $3;
  HEAP32[$9 + 16 >> 2] = $4;
  HEAP32[$9 + 20 >> 2] = $5;
  HEAP32[$9 + 24 >> 2] = $6;
  HEAP32[$9 + 28 >> 2] = $7;
  HEAP32[$9 + 32 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function dynCall_iiiiiii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $6 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$6 >> 2];
   $1 = HEAP32[$6 + 4 >> 2];
   $2 = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$6 + 12 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   $5 = HEAP32[$6 + 20 >> 2];
   $6 = HEAP32[$6 + 24 >> 2];
  }
  block : {
   $8 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $7 = 0
   }
   if ($8 | !$7) {
    $7 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $7;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $7 = HEAP32[global$10 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $1;
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $3;
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP32[$7 + 24 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function dynCall_iiiiid($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = +$5;
  var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   wasm2js_scratch_store_i32(0, HEAP32[$1 + 20 >> 2]);
   wasm2js_scratch_store_i32(1, $6 | 0);
   $5 = +wasm2js_scratch_load_f64();
   $1 = HEAP32[$1 + 4 >> 2];
  }
  block : {
   $7 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $6 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $6 = 0
   }
   if ($7 | !$6) {
    $6 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  wasm2js_scratch_store_f64(+$5);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  (wasm2js_i32$0 = $6, wasm2js_i32$1 = wasm2js_scratch_load_i32(0) | 0), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
  HEAP32[$6 + 24 >> 2] = $0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function dynCall_iiiiiiii($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 32;
   $7 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$7 >> 2];
   $1 = HEAP32[$7 + 4 >> 2];
   $2 = HEAP32[$7 + 8 >> 2];
   $3 = HEAP32[$7 + 12 >> 2];
   $4 = HEAP32[$7 + 16 >> 2];
   $5 = HEAP32[$7 + 20 >> 2];
   $6 = HEAP32[$7 + 24 >> 2];
   $7 = HEAP32[$7 + 28 >> 2];
  }
  block : {
   $9 = !global$9;
   if ((global$9 | 0) == 2) {
    HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
    $8 = HEAP32[HEAP32[global$10 >> 2] >> 2];
   } else {
    $8 = 0
   }
   if ($9 | !$8) {
    $8 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6, $7) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $8;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $8 = HEAP32[global$10 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 24 >> 2] = $6;
  HEAP32[$8 + 28 >> 2] = $7;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 32;
  return 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 20;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $7 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $6 = $3;
   $5 = $2;
  }
  block : {
   if (!global$9 | !$7) {
    $2 = FUNCTION_TABLE[$0 | 0]($1, $5, $6, $4) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $5 = $2;
   }
   if (!global$9) {
    return $5 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $2 = HEAP32[global$10 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $5;
  HEAP32[$2 + 16 >> 2] = $6;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 20;
  return 0;
 }
 
 function legalstub$dynCall_viijii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = $4;
   $7 = $3;
  }
  block : {
   if (!global$9 | !$9) {
    FUNCTION_TABLE[$0 | 0]($1, $2, $7, $8, $5, $6);
    if ((global$9 | 0) == 1) {
     break block
    }
   }
   return;
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $3 = HEAP32[global$10 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $5;
  HEAP32[$3 + 16 >> 2] = $6;
  HEAP32[$3 + 20 >> 2] = $7;
  HEAP32[$3 + 24 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
 }
 
 function legalstub$dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 28;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $8 = HEAP32[$1 + 24 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $9 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $8 = $6;
   $7 = $5;
  }
  block : {
   if (!global$9 | !$9) {
    $5 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $7, $8) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $5;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $7;
  HEAP32[$5 + 24 >> 2] = $8;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 28;
  return 0;
 }
 
 function legalstub$dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 36;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $10 = HEAP32[$1 + 20 >> 2];
   $9 = HEAP32[$1 + 24 >> 2];
   $11 = HEAP32[$1 + 28 >> 2];
   $12 = HEAP32[$1 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $13 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $9 = $5;
   $5 = 0;
   $11 = $9 | $5;
   $12 = $6;
   $9 = $8;
   $10 = $5 | $7;
  }
  block : {
   if (!global$9 | !$13) {
    $5 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $11, $12, $10, $9) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $5;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $5 = HEAP32[global$10 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 16 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = $10;
  HEAP32[$5 + 24 >> 2] = $9;
  HEAP32[$5 + 28 >> 2] = $11;
  HEAP32[$5 + 32 >> 2] = $12;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 36;
  return 0;
 }
 
 function legalstub$dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 40;
   $1 = HEAP32[global$10 >> 2];
   $0 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $11 = HEAP32[$1 + 24 >> 2];
   $10 = HEAP32[$1 + 28 >> 2];
   $12 = HEAP32[$1 + 32 >> 2];
   $13 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
  }
  if ((global$9 | 0) == 2) {
   HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] - 4;
   $14 = HEAP32[HEAP32[global$10 >> 2] >> 2];
  }
  if (!global$9) {
   $10 = $6;
   $6 = 0;
   $12 = $10 | $6;
   $13 = $7;
   $10 = $9;
   $11 = $6 | $8;
  }
  block : {
   if (!global$9 | !$14) {
    $6 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $12, $13, $11, $10) | 0;
    if ((global$9 | 0) == 1) {
     break block
    }
    $0 = $6;
   }
   if (!global$9) {
    return $0 | 0
   }
   wasm2js_trap();
  }
  HEAP32[HEAP32[global$10 >> 2] >> 2] = 0;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 4;
  $6 = HEAP32[global$10 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 16 >> 2] = $4;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $11;
  HEAP32[$6 + 28 >> 2] = $10;
  HEAP32[$6 + 32 >> 2] = $12;
  HEAP32[$6 + 36 >> 2] = $13;
  HEAP32[global$10 >> 2] = HEAP32[global$10 >> 2] + 40;
  return 0;
 }
 
 function $832($0) {
  $0 = $0 | 0;
  global$9 = 1;
  global$10 = $0;
  if (HEAPU32[global$10 >> 2] > HEAPU32[global$10 + 4 >> 2]) {
   wasm2js_trap()
  }
 }
 
 function $833() {
  global$9 = 0;
  if (HEAPU32[global$10 >> 2] > HEAPU32[global$10 + 4 >> 2]) {
   wasm2js_trap()
  }
 }
 
 function $834($0) {
  $0 = $0 | 0;
  global$9 = 2;
  global$10 = $0;
  if (HEAPU32[global$10 >> 2] > HEAPU32[global$10 + 4 >> 2]) {
   wasm2js_trap()
  }
 }
 
 function $836() {
  return global$9 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$9 : {
          label$11 : {
           if ($1) {
            if (!$2) {
             break label$11
            }
            break label$9;
           }
           $1 = $0;
           $0 = ($0 >>> 0) / ($2 >>> 0) | 0;
           __wasm_intrinsics_temp_i64 = $1 - Math_imul($0, $2) | 0;
           __wasm_intrinsics_temp_i64$hi = 0;
           i64toi32_i32$HIGH_BITS = 0;
           return $0;
          }
          if (!$0) {
           break label$7
          }
          break label$6;
         }
         $3 = $2 - 1 | 0;
         if (!($3 & $2)) {
          break label$5
         }
         $6 = (Math_clz32($2) + 33 | 0) - Math_clz32($1) | 0;
         $5 = 0 - $6 | 0;
         break label$3;
        }
        __wasm_intrinsics_temp_i64 = 0;
        $0 = ($1 >>> 0) / 0 | 0;
        __wasm_intrinsics_temp_i64$hi = $1 - Math_imul($0, 0) | 0;
        i64toi32_i32$HIGH_BITS = 0;
        return $0;
       }
       $3 = 32 - Math_clz32($1) | 0;
       if ($3 >>> 0 < 31) {
        break label$4
       }
       break label$2;
      }
      __wasm_intrinsics_temp_i64 = $0 & $3;
      __wasm_intrinsics_temp_i64$hi = 0;
      if (($2 | 0) == 1) {
       break label$1
      }
      $3 = __wasm_ctz_i32($2);
      $2 = $3 & 31;
      if (($3 & 63) >>> 0 >= 32) {
       $0 = $1 >>> $2 | 0
      } else {
       $4 = $1 >>> $2 | 0;
       $0 = ((1 << $2) - 1 & $1) << 32 - $2 | $0 >>> $2;
      }
      i64toi32_i32$HIGH_BITS = $4;
      return $0;
     }
     $6 = $3 + 1 | 0;
     $5 = 63 - $3 | 0;
    }
    $4 = $6 & 63;
    $3 = $4 & 31;
    if ($4 >>> 0 >= 32) {
     $4 = 0;
     $7 = $1 >>> $3 | 0;
    } else {
     $4 = $1 >>> $3 | 0;
     $7 = ((1 << $3) - 1 & $1) << 32 - $3 | $0 >>> $3;
    }
    $5 = $5 & 63;
    $3 = $5 & 31;
    if ($5 >>> 0 >= 32) {
     $1 = $0 << $3;
     $0 = 0;
    } else {
     $1 = (1 << $3) - 1 & $0 >>> 32 - $3 | $1 << $3;
     $0 = $0 << $3;
    }
    if ($6) {
     $3 = $2 - 1 | 0;
     $10 = ($3 | 0) == -1 ? -1 : 0;
     while (1) {
      $8 = $4 << 1 | $7 >>> 31;
      $4 = $7 << 1 | $1 >>> 31;
      $5 = $10 - ($8 + ($4 >>> 0 > $3 >>> 0) | 0) >> 31;
      $9 = $2 & $5;
      $7 = $4 - $9 | 0;
      $4 = $8 - ($4 >>> 0 < $9 >>> 0) | 0;
      $1 = $1 << 1 | $0 >>> 31;
      $0 = $11 | $0 << 1;
      $8 = $5 & 1;
      $11 = $8;
      $6 = $6 - 1 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    __wasm_intrinsics_temp_i64 = $7;
    __wasm_intrinsics_temp_i64$hi = $4;
    i64toi32_i32$HIGH_BITS = $1 << 1 | $0 >>> 31;
    return $8 | $0 << 1;
   }
   __wasm_intrinsics_temp_i64 = $0;
   __wasm_intrinsics_temp_i64$hi = $1;
   $0 = 0;
   $1 = 0;
  }
  i64toi32_i32$HIGH_BITS = $1;
  return $0;
 }
 
 function __wasm_ctz_i32($0) {
  if ($0) {
   return 31 - Math_clz32($0 - 1 ^ $0) | 0
  }
  return 32;
 }
 
 function __wasm_i64_mul($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = $2 >>> 16 | 0;
  $5 = $0 >>> 16 | 0;
  $9 = Math_imul($4, $5);
  $6 = $2 & 65535;
  $7 = $0 & 65535;
  $8 = Math_imul($6, $7);
  $5 = ($8 >>> 16 | 0) + Math_imul($5, $6) | 0;
  $4 = ($5 & 65535) + Math_imul($4, $7) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1, $2) + $9 | 0) + Math_imul($0, $3) + ($5 >>> 16) + ($4 >>> 16) | 0;
  return $8 & 65535 | $4 << 16;
 }
 
 function __wasm_i64_sdiv($0, $1, $2) {
  var $3 = 0;
  $3 = $1 >> 31;
  $0 = $0 ^ $3;
  $0 = $3 ^ __wasm_i64_udiv($0 - $3 | 0, ($1 ^ $3) - (($0 >>> 0 < $3 >>> 0) + $3 | 0) | 0, $2);
  $1 = $0 - $3 | 0;
  i64toi32_i32$HIGH_BITS = ($3 ^ i64toi32_i32$HIGH_BITS) - (($0 >>> 0 < $3 >>> 0) + $3 | 0) | 0;
  return $1;
 }
 
 function __wasm_i64_srem($0, $1) {
  var $2 = 0;
  $2 = $1 >> 31;
  $0 = $0 ^ $2;
  _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0 - $2 | 0, ($1 ^ $2) - (($0 >>> 0 < $2 >>> 0) + $2 | 0) | 0, 100);
  i64toi32_i32$HIGH_BITS = __wasm_intrinsics_temp_i64$hi;
  $0 = $2 ^ __wasm_intrinsics_temp_i64;
  $1 = $0 - $2 | 0;
  i64toi32_i32$HIGH_BITS = ($2 ^ i64toi32_i32$HIGH_BITS) - (($0 >>> 0 < $2 >>> 0) + $2 | 0) | 0;
  return $1;
 }
 
 function __wasm_i64_udiv($0, $1, $2) {
  return _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2);
 }
 
 function __wasm_rotl_i32($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = $1 & 31;
  $3 = (-1 >>> $2 & $0) << $2;
  $2 = $0;
  $0 = 0 - $1 & 31;
  return $3 | ($2 & -1 << $0) >>> $0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 var FUNCTION_TABLE = Table([null, step_28_29, std__logic_error___logic_error_28_29, ErrorCallback, WindowSizeCallback, WindowIconifyCallback, WindowFocusCallback, WindowDropCallback, WindowContentScaleCallback, KeyCallback, CharCallback, MouseButtonCallback, MouseCursorPosCallback, MouseScrollCallback, CursorEnterCallback, glfwGetProcAddress, EmscriptenFullscreenChangeCallback, EmscriptenResizeCallback, EmscriptenMouseCallback, EmscriptenPointerlockCallback, EmscriptenMouseMoveCallback, EmscriptenTouchCallback, EmscriptenGamepadCallback, stbi__stdio_write, emscripten_glGenQueriesEXT, emscripten_glDeleteQueriesEXT, emscripten_glIsQueryEXT, emscripten_glBeginQueryEXT, emscripten_glEndQueryEXT, emscripten_glQueryCounterEXT, emscripten_glGetQueryivEXT, emscripten_glGetQueryObjectivEXT, emscripten_glGetQueryObjectuivEXT, emscripten_glGetQueryObjecti64vEXT, emscripten_glGetQueryObjectui64vEXT, emscripten_glBindVertexArrayOES, emscripten_glDeleteVertexArraysOES, emscripten_glGenVertexArraysOES, emscripten_glIsVertexArrayOES, emscripten_glDrawBuffersWEBGL, emscripten_glDrawArraysInstancedANGLE, emscripten_glDrawElementsInstancedANGLE, emscripten_glVertexAttribDivisorANGLE, emscripten_glActiveTexture, emscripten_glAttachShader, emscripten_glBindAttribLocation, emscripten_glBindBuffer, emscripten_glBindFramebuffer, emscripten_glBindRenderbuffer, emscripten_glBindTexture, emscripten_glBlendColor, emscripten_glBlendEquation, emscripten_glBlendEquationSeparate, emscripten_glBlendFunc, emscripten_glBlendFuncSeparate, emscripten_glBufferData, emscripten_glBufferSubData, emscripten_glCheckFramebufferStatus, emscripten_glClear, emscripten_glClearColor, emscripten_glClearDepthf, emscripten_glClearStencil, emscripten_glColorMask, emscripten_glCompileShader, emscripten_glCompressedTexImage2D, emscripten_glCompressedTexSubImage2D, emscripten_glCopyTexImage2D, emscripten_glCopyTexSubImage2D, emscripten_glCreateProgram, emscripten_glCreateShader, emscripten_glCullFace, emscripten_glDeleteBuffers, emscripten_glDeleteFramebuffers, emscripten_glDeleteProgram, emscripten_glDeleteRenderbuffers, emscripten_glDeleteShader, emscripten_glDeleteTextures, emscripten_glDepthFunc, emscripten_glDepthMask, emscripten_glDepthRangef, emscripten_glDetachShader, emscripten_glDisable, emscripten_glDisableVertexAttribArray, emscripten_glDrawArrays, emscripten_glDrawElements, emscripten_glEnable, emscripten_glEnableVertexAttribArray, emscripten_glFinish, emscripten_glFlush, emscripten_glFramebufferRenderbuffer, emscripten_glFramebufferTexture2D, emscripten_glFrontFace, emscripten_glGenBuffers, emscripten_glGenerateMipmap, emscripten_glGenFramebuffers, emscripten_glGenRenderbuffers, emscripten_glGenTextures, emscripten_glGetActiveAttrib, emscripten_glGetActiveUniform, emscripten_glGetAttachedShaders, emscripten_glGetAttribLocation, emscripten_glGetBooleanv, emscripten_glGetBufferParameteriv, emscripten_glGetError, emscripten_glGetFloatv, emscripten_glGetFramebufferAttachmentParameteriv, emscripten_glGetIntegerv, emscripten_glGetProgramiv, emscripten_glGetProgramInfoLog, emscripten_glGetRenderbufferParameteriv, emscripten_glGetShaderiv, emscripten_glGetShaderInfoLog, emscripten_glGetShaderPrecisionFormat, emscripten_glGetShaderSource, emscripten_glGetString, emscripten_glGetTexParameterfv, emscripten_glGetTexParameteriv, emscripten_glGetUniformfv, emscripten_glGetUniformiv, emscripten_glGetUniformLocation, emscripten_glGetVertexAttribfv, emscripten_glGetVertexAttribiv, emscripten_glGetVertexAttribPointerv, emscripten_glHint, emscripten_glIsBuffer, emscripten_glIsEnabled, emscripten_glIsFramebuffer, emscripten_glIsProgram, emscripten_glIsRenderbuffer, emscripten_glIsShader, emscripten_glIsTexture, emscripten_glLineWidth, emscripten_glLinkProgram, emscripten_glPixelStorei, emscripten_glPolygonOffset, emscripten_glReadPixels, emscripten_glReleaseShaderCompiler, emscripten_glRenderbufferStorage, emscripten_glSampleCoverage, emscripten_glScissor, emscripten_glShaderBinary, emscripten_glShaderSource, emscripten_glStencilFunc, emscripten_glStencilFuncSeparate, emscripten_glStencilMask, emscripten_glStencilMaskSeparate, emscripten_glStencilOp, emscripten_glStencilOpSeparate, emscripten_glTexImage2D, emscripten_glTexParameterf, emscripten_glTexParameterfv, emscripten_glTexParameteri, emscripten_glTexParameteriv, emscripten_glTexSubImage2D, emscripten_glUniform1f, emscripten_glUniform1fv, emscripten_glUniform1i, emscripten_glUniform1iv, emscripten_glUniform2f, emscripten_glUniform2fv, emscripten_glUniform2i, emscripten_glUniform2iv, emscripten_glUniform3f, emscripten_glUniform3fv, emscripten_glUniform3i, emscripten_glUniform3iv, emscripten_glUniform4f, emscripten_glUniform4fv, emscripten_glUniform4i, emscripten_glUniform4iv, emscripten_glUniformMatrix2fv, emscripten_glUniformMatrix3fv, emscripten_glUniformMatrix4fv, emscripten_glUseProgram, emscripten_glValidateProgram, emscripten_glVertexAttrib1f, emscripten_glVertexAttrib1fv, emscripten_glVertexAttrib2f, emscripten_glVertexAttrib2fv, emscripten_glVertexAttrib3f, emscripten_glVertexAttrib3fv, emscripten_glVertexAttrib4f, emscripten_glVertexAttrib4fv, emscripten_glVertexAttribPointer, emscripten_glViewport, emscripten_glPolygonOffsetClampEXT, emscripten_glClipControlEXT, emscripten_glPolygonModeWEBGL, __stdio_seek, __stdio_write, __stdio_read, __stdio_close, cancel_notification, receive_notification, free_ctx, call_callback_then_free_ctx, cancel_ctx, call_with_ctx, init_active_ctxs, call_cancel_then_free_ctx, cancel_active_ctxs, call_then_finish_task, run_js_func, dummy_483, undo, __emscripten_stdout_close, __emscripten_stdout_seek, fmt_fp, pop_arg_long_double, sn_write, string_read, std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29_764, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____setbuf_28char__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29, __emscripten_stdout_close, __emscripten_stdout_close, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____xsgetn_28char__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____underflow_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____uflow_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____xsputn_28char_20const__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29, std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_788, std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_790, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_791, std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_816, std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_818, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_819, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29_839, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____setbuf_28char__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29, __emscripten_stdout_close, __emscripten_stdout_close, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____xsgetn_28wchar_t__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____underflow_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____uflow_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____xsputn_28wchar_t_20const__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29, std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_788, std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_790, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_791, std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_816, std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_818, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_819, std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29, std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29_762, std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29, std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29_762, std____2__ios_base___ios_base_28_29, std____2__ios_base___ios_base_28_29_1003, __cxx_global_array_dtor_1, std____2____stdinbuf_char______stdinbuf_28_29, std____2____stdinbuf_char___imbue_28std____2__locale_20const__29, std____2____stdinbuf_char___underflow_28_29, std____2____stdinbuf_char___uflow_28_29, std____2____stdinbuf_char___pbackfail_28int_29, std____2____stdinbuf_char______stdinbuf_28_29, std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29, std____2____stdoutbuf_char___sync_28_29, std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29, std____2____stdoutbuf_char___overflow_28int_29, std____2____stdinbuf_wchar_t______stdinbuf_28_29, std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29, std____2____stdinbuf_wchar_t___underflow_28_29, std____2____stdinbuf_wchar_t___uflow_28_29, std____2____stdinbuf_wchar_t___pbackfail_28int_29, std____2____stdinbuf_wchar_t______stdinbuf_28_29, std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29, std____2____stdoutbuf_char___sync_28_29, std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29, std____2____stdoutbuf_wchar_t___overflow_28int_29, emscripten_builtin_free, dummy_483, void_20std____2____call_once_proxy_5babi_nn190106_5d_std____2__tuple_std____2__locale__id____get_28_29__$_0_____28void__29, __cxx_global_array_dtor_55, __cxx_global_array_dtor_70, __cxx_global_array_dtor_85, __cxx_global_array_dtor_109, __cxx_global_array_dtor_133, __cxx_global_array_dtor_136, __cxx_global_array_dtor, __cxx_global_array_dtor_31, __cxx_global_array_dtor_32, __cxx_global_array_dtor_34, __cxx_global_array_dtor_36, __cxx_global_array_dtor_38, __cxx_global_array_dtor_40, __cxx_global_array_dtor_42, std____2__locale____imp_____imp_28_29, std____2__locale____imp_____imp_28_29_1762, std____2__locale__facet____on_zero_shared_28_29, std____2__ctype_char____ctype_28_29, std____2__ctype_char____ctype_28_29_1802, std____2__ctype_char___do_toupper_28char_29_20const, std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const, std____2__ctype_char___do_tolower_28char_29_20const, std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const, std____2__ctype_wchar_t___do_widen_28char_29_20const, std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const, std____2__ctype_char___do_narrow_28char_2c_20char_29_20const, std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1820, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, __emscripten_stdout_close, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__numpunct_char____numpunct_28_29, std____2__numpunct_char____numpunct_28_29_1874, std____2__numpunct_char___do_decimal_point_28_29_20const, std____2__numpunct_char___do_thousands_sep_28_29_20const, std____2__numpunct_char___do_grouping_28_29_20const, std____2__numpunct_char___do_truename_28_29_20const, std____2__numpunct_char___do_falsename_28_29_20const, std____2__numpunct_wchar_t____numpunct_28_29, std____2__numpunct_wchar_t____numpunct_28_29_1876, std____2__ios_base__precision_5babi_nn190106_5d_28_29_20const, std____2__ios_base__width_5babi_nn190106_5d_28_29_20const, std____2__numpunct_wchar_t___do_grouping_28_29_20const, std____2__numpunct_wchar_t___do_truename_28_29_20const, std____2__numpunct_wchar_t___do_falsename_28_29_20const, dummy, std____2__collate_char____collate_28_29_1151, std____2__collate_char____collate_28_29_1151, std____2__ctype_wchar_t___do_is_28unsigned_20long_2c_20wchar_t_29_20const, std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20long__29_20const, std____2__ctype_wchar_t___do_scan_is_28unsigned_20long_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_scan_not_28unsigned_20long_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const, std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const, std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_widen_28char_29_20const, std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const, std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const, std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const, std____2__collate_char____collate_28_29_1151, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, std____2__collate_char____collate_28_29_1151, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, __emscripten_stdout_close, __emscripten_stdout_close, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__collate_char____collate_28_29_1151, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, __emscripten_stdout_close, __emscripten_stdout_close, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__collate_char____collate_28_29_1151, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, __emscripten_stdout_close, __emscripten_stdout_close, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__collate_char____collate_28_29_1151, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, __emscripten_stdout_close, __emscripten_stdout_close, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, dummy, std____2__collate_char____collate_28_29_1151, std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const, std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const, std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const, dummy, std____2__collate_char____collate_28_29_1151, std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__collate_char____collate_28_29_1151, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const, std____2__collate_char____collate_28_29_1151, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const, std____2__collate_char____collate_28_29_1151, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20double_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const, std____2__collate_char____collate_28_29_1151, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const, dummy, std____2__collate_char____collate_28_29_1151, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_date_order_28_29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const, std____2____time_get_c_storage_char_____weeks_28_29_20const, std____2____time_get_c_storage_char_____months_28_29_20const, std____2____time_get_c_storage_char_____am_pm_28_29_20const, std____2____time_get_c_storage_char_____c_28_29_20const, std____2____time_get_c_storage_char_____r_28_29_20const, std____2____time_get_c_storage_char_____x_28_29_20const, std____2____time_get_c_storage_char_____X_28_29_20const, dummy, std____2__collate_char____collate_28_29_1151, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_date_order_28_29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const, std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const, std____2____time_get_c_storage_wchar_t_____months_28_29_20const, std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const, std____2____time_get_c_storage_wchar_t_____c_28_29_20const, std____2____time_get_c_storage_wchar_t_____r_28_29_20const, std____2____time_get_c_storage_wchar_t_____x_28_29_20const, std____2____time_get_c_storage_wchar_t_____X_28_29_20const, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29_1940, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29_1940, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29, std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const, std____2__collate_char____collate_28_29_1151, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const, __emscripten_stdout_close, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__collate_char____collate_28_29_1151, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const, __emscripten_stdout_close, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__collate_char____collate_28_29_1151, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const, __emscripten_stdout_close, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__collate_char____collate_28_29_1151, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const, __emscripten_stdout_close, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__collate_char____collate_28_29_1151, std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29_20const, std____2__collate_char____collate_28_29_1151, std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____29_20const, std____2__collate_char____collate_28_29_1151, std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const, std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_20const, std____2__collate_char____collate_28_29_1151, std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const, std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__29_20const, std____2__collate_char____collate_28_29_1151, std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__locale_20const__29_20const, std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_20const, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29, std____2__collate_char____collate_28_29_1151, std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__locale_20const__29_20const, std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__29_20const, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29, dummy, std____2____shared_count_____shared_count_28_29_2234, __cxa_pure_virtual, dummy, std____2__collate_char____collate_28_29_1151, dummy_483, dummy_483, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, std____2__collate_char____collate_28_29_1151, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, std____2__collate_char____collate_28_29_1151, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, dummy, std____2__collate_char____collate_28_29_1151, std__exception__what_28_29_20const, std__logic_error___logic_error_28_29_2359, std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____second_5babi_nn190106_5d_28_29, std__logic_error___logic_error_28_29_2359, do_callback]);
 __wasm_init_memory();
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "main": main, 
  "free": emscripten_builtin_free, 
  "malloc": emscripten_builtin_malloc, 
  "fflush": fflush, 
  "_emscripten_tls_init": _emscripten_tls_init, 
  "pthread_self": __pthread_self_internal, 
  "_emscripten_run_callback_on_thread": _emscripten_run_callback_on_thread, 
  "_emscripten_thread_init": _emscripten_thread_init, 
  "_emscripten_thread_crashed": _emscripten_thread_crashed, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "_emscripten_run_on_main_thread_js": _emscripten_run_on_main_thread_js, 
  "_emscripten_thread_free_data": _emscripten_thread_free_data, 
  "_emscripten_thread_exit": _emscripten_thread_exit, 
  "strerror": strerror, 
  "_emscripten_check_mailbox": _emscripten_check_mailbox, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_set_limits": emscripten_stack_set_limits, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "_emscripten_stack_restore": _emscripten_stack_restore, 
  "_emscripten_stack_alloc": _emscripten_stack_alloc, 
  "emscripten_stack_get_current": emscripten_stack_get_current, 
  "dynCall_v": dynCall_v, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_vii": dynCall_vii, 
  "dynCall_viii": dynCall_viii, 
  "dynCall_viff": dynCall_viff, 
  "dynCall_viiiii": dynCall_viiiii, 
  "dynCall_viiii": dynCall_viiii, 
  "dynCall_vidd": dynCall_vidd, 
  "dynCall_iiii": dynCall_iiii, 
  "dynCall_vi": dynCall_vi, 
  "dynCall_vffff": dynCall_vffff, 
  "dynCall_vf": dynCall_vf, 
  "dynCall_viiiiiiii": dynCall_viiiiiiii, 
  "dynCall_viiiiiiiii": dynCall_viiiiiiiii, 
  "dynCall_i": dynCall_i, 
  "dynCall_vff": dynCall_vff, 
  "dynCall_viiiiiii": dynCall_viiiiiii, 
  "dynCall_iii": dynCall_iii, 
  "dynCall_vfi": dynCall_vfi, 
  "dynCall_viif": dynCall_viif, 
  "dynCall_vif": dynCall_vif, 
  "dynCall_vifff": dynCall_vifff, 
  "dynCall_viffff": dynCall_viffff, 
  "dynCall_viiiiii": dynCall_viiiiii, 
  "dynCall_vfff": dynCall_vfff, 
  "dynCall_jiji": legalstub$dynCall_jiji, 
  "dynCall_iidiiii": dynCall_iidiiii, 
  "dynCall_viijii": legalstub$dynCall_viijii, 
  "dynCall_iiiii": dynCall_iiiii, 
  "dynCall_iiiiii": dynCall_iiiiii, 
  "dynCall_iiiiiiiii": dynCall_iiiiiiiii, 
  "dynCall_iiiiiii": dynCall_iiiiiii, 
  "dynCall_iiiiij": legalstub$dynCall_iiiiij, 
  "dynCall_iiiiid": dynCall_iiiiid, 
  "dynCall_iiiiijj": legalstub$dynCall_iiiiijj, 
  "dynCall_iiiiiiii": dynCall_iiiiiiii, 
  "dynCall_iiiiiijj": legalstub$dynCall_iiiiiijj, 
  "asyncify_start_unwind": $832, 
  "asyncify_stop_unwind": $833, 
  "asyncify_start_rewind": $834, 
  "asyncify_stop_rewind": $833, 
  "asyncify_get_state": $836
 };
}

  return asmFunc(info);
}

)(info);
  },
  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          "module": module,
          "instance": new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return {
          catch: function() {}
        };
      }
    };
  },
  RuntimeError: Error,
  isWasm2js: true
};

// end include: wasm2js.js
if (WebAssembly.isWasm2js) {
  // We don't need to actually download a wasm binary, mark it as present but
  // empty.
  wasmBinary = [];
}

if (typeof WebAssembly != "object") {
  err("no native wasm support detected");
}

// Wasm globals
var wasmMemory;

// For sending to workers.
var wasmModule;

//========================================
// Runtime essentials
//========================================
// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */ function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed" + (text ? ": " + text : ""));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
// Memory management
var /** @type {!Int8Array} */ HEAP8, /** @type {!Uint8Array} */ HEAPU8, /** @type {!Int16Array} */ HEAP16, /** @type {!Uint16Array} */ HEAPU16, /** @type {!Int32Array} */ HEAP32, /** @type {!Uint32Array} */ HEAPU32, /** @type {!Float32Array} */ HEAPF32, /** @type {!Float64Array} */ HEAPF64;

var runtimeInitialized = false;

// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = "data:application/octet-stream;base64,";

/**
 * Indicates whether filename is a base64 data URI.
 * @noinline
 */ var isDataURI = filename => filename.startsWith(dataURIPrefix);

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */ var isFileURI = filename => filename.startsWith("file://");

// end include: URIUtils.js
// include: runtime_shared.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  GROWABLE_HEAP_U32()[((max) >> 2)] = 34821223;
  GROWABLE_HEAP_U32()[(((max) + (4)) >> 2)] = 2310721022;
  // Also test the global address 0 for integrity.
  GROWABLE_HEAP_U32()[((0) >> 2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = GROWABLE_HEAP_U32()[((max) >> 2)];
  var cookie2 = GROWABLE_HEAP_U32()[(((max) + (4)) >> 2)];
  if (cookie1 != 34821223 || cookie2 != 2310721022) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (GROWABLE_HEAP_U32()[((0) >> 2)] != 1668509029) {
    abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
  }
}

// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 25459;
  if (h8[0] !== 115 || h8[1] !== 99) throw "Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)";
})();

if (Module["ENVIRONMENT"]) {
  throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");
}

function legacyModuleProp(prop, newName, incoming = true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incoming ? " (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)" : "";
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === "FS_createPath" || name === "FS_createDataFile" || name === "FS_createPreloadedFile" || name === "FS_unlink" || name === "addRunDependency" || // The old FS has some functionality that WasmFS lacks.
  name === "FS_createLazyFile" || name === "FS_createDevice" || name === "removeRunDependency";
}

/**
 * Intercept access to a global symbol.  This enables us to give informative
 * warnings/errors when folks attempt to use symbols they did not include in
 * their build, or no symbols that no longer exist.
 */ function hookGlobalSymbolAccess(sym, func) {
  if (typeof globalThis != "undefined" && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        func();
        return undefined;
      }
    });
  }
}

function missingGlobal(sym, msg) {
  hookGlobalSymbolAccess(sym, () => {
    warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
  });
}

missingGlobal("buffer", "Please use HEAP8.buffer or wasmMemory.buffer");

missingGlobal("asm", "Please use wasmExports instead");

function missingLibrarySymbol(sym) {
  hookGlobalSymbolAccess(sym, () => {
    // Can't `abort()` here because it would break code that does runtime
    // checks.  e.g. `if (typeof SDL === 'undefined')`.
    var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
    // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
    // library.js, which means $name for a JS name with no prefix, or name
    // for a JS name like _name.
    var librarySymbol = sym;
    if (!librarySymbol.startsWith("_")) {
      librarySymbol = "$" + sym;
    }
    msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
    if (isExportedByForceFilesystem(sym)) {
      msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";
    }
    warnOnce(msg);
  });
  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (ENVIRONMENT_IS_PTHREAD) {
    return;
  }
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";
        }
        abort(msg);
      }
    });
  }
}

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  // Avoid using the console for debugging in multi-threaded node applications
  // See https://github.com/emscripten-core/emscripten/issues/14804
  if (ENVIRONMENT_IS_NODE && fs) {
    fs.writeSync(2, args.join(" ") + "\n");
  } else // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}

// end include: runtime_debug.js
// include: memoryprofiler.js
// end include: memoryprofiler.js
// include: growableHeap.js
// Support for growable heap + pthreads, where the buffer may change, so JS views
// must be updated.
function GROWABLE_HEAP_I8() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAP8;
}

function GROWABLE_HEAP_U8() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPU8;
}

function GROWABLE_HEAP_I16() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAP16;
}

function GROWABLE_HEAP_U16() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPU16;
}

function GROWABLE_HEAP_I32() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAP32;
}

function GROWABLE_HEAP_U32() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPU32;
}

function GROWABLE_HEAP_F32() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPF32;
}

function GROWABLE_HEAP_F64() {
  if (wasmMemory.buffer != HEAP8.buffer) {
    updateMemoryViews();
  }
  return HEAPF64;
}

// end include: growableHeap.js
// include: runtime_pthread.js
// Pthread Web Worker handling code.
// This code runs only on pthread web workers and handles pthread setup
// and communication with the main thread via postMessage.
// Unique ID of the current pthread worker (zero on non-pthread-workers
// including the main thread).
var workerID = 0;

if (ENVIRONMENT_IS_PTHREAD) {
  var wasmModuleReceived;
  // Node.js support
  if (ENVIRONMENT_IS_NODE) {
    // Create as web-worker-like an environment as we can.
    var parentPort = worker_threads["parentPort"];
    parentPort.on("message", msg => onmessage({
      data: msg
    }));
    Object.assign(globalThis, {
      self: global,
      postMessage: msg => parentPort.postMessage(msg)
    });
  }
  // Thread-local guard variable for one-time init of the JS state
  var initializedJS = false;
  function threadPrintErr(...args) {
    var text = args.join(" ");
    // See https://github.com/emscripten-core/emscripten/issues/14804
    if (ENVIRONMENT_IS_NODE) {
      fs.writeSync(2, text + "\n");
      return;
    }
    console.error(text);
  }
  if (!Module["printErr"]) err = threadPrintErr;
  dbg = threadPrintErr;
  function threadAlert(...args) {
    var text = args.join(" ");
    postMessage({
      cmd: "alert",
      text,
      threadId: _pthread_self()
    });
  }
  self.alert = threadAlert;
  // Turn unhandled rejected promises into errors so that the main thread will be
  // notified about them.
  self.onunhandledrejection = e => {
    throw e.reason || e;
  };
  function handleMessage(e) {
    try {
      var msgData = e["data"];
      //dbg('msgData: ' + Object.keys(msgData));
      var cmd = msgData.cmd;
      if (cmd === "load") {
        // Preload command that is called once per worker to parse and load the Emscripten code.
        workerID = msgData.workerID;
        // Until we initialize the runtime, queue up any further incoming messages.
        let messageQueue = [];
        self.onmessage = e => messageQueue.push(e);
        // And add a callback for when the runtime is initialized.
        self.startWorker = instance => {
          // Notify the main thread that this thread has loaded.
          postMessage({
            cmd: "loaded"
          });
          // Process any messages that were queued before the thread was ready.
          for (let msg of messageQueue) {
            handleMessage(msg);
          }
          // Restore the real message handler.
          self.onmessage = handleMessage;
        };
        // Use `const` here to ensure that the variable is scoped only to
        // that iteration, allowing safe reference from a closure.
        for (const handler of msgData.handlers) {
          // The the main module has a handler for a certain even, but no
          // handler exists on the pthread worker, then proxy that handler
          // back to the main thread.
          if (!Module[handler] || Module[handler].proxy) {
            Module[handler] = (...args) => {
              postMessage({
                cmd: "callHandler",
                handler,
                args
              });
            };
            // Rebind the out / err handlers if needed
            if (handler == "print") out = Module[handler];
            if (handler == "printErr") err = Module[handler];
          }
        }
        wasmMemory = msgData.wasmMemory;
        updateMemoryViews();
        wasmModuleReceived(msgData.wasmModule);
      } else if (cmd === "run") {
        assert(msgData.pthread_ptr);
        // Call inside JS module to set up the stack frame for this pthread in JS module scope.
        // This needs to be the first thing that we do, as we cannot call to any C/C++ functions
        // until the thread stack is initialized.
        establishStackSpace(msgData.pthread_ptr);
        // Pass the thread address to wasm to store it for fast access.
        __emscripten_thread_init(msgData.pthread_ptr, /*is_main=*/ 0, /*is_runtime=*/ 0, /*can_block=*/ 1, 0, 0);
        PThread.receiveObjectTransfer(msgData);
        PThread.threadInitTLS();
        // Await mailbox notifications with `Atomics.waitAsync` so we can start
        // using the fast `Atomics.notify` notification path.
        __emscripten_thread_mailbox_await(msgData.pthread_ptr);
        if (!initializedJS) {
          initializedJS = true;
        }
        try {
          invokeEntryPoint(msgData.start_routine, msgData.arg);
        } catch (ex) {
          if (ex != "unwind") {
            // The pthread "crashed".  Do not call `_emscripten_thread_exit` (which
            // would make this thread joinable).  Instead, re-throw the exception
            // and let the top level handler propagate it back to the main thread.
            throw ex;
          }
        }
      } else if (msgData.target === "setimmediate") {} else if (cmd === "checkMailbox") {
        if (initializedJS) {
          checkMailbox();
        }
      } else if (cmd) {
        // The received message looks like something that should be handled by this message
        // handler, (since there is a cmd field present), but is not one of the
        // recognized commands:
        err(`worker: received unknown command ${cmd}`);
        err(msgData);
      }
    } catch (ex) {
      err(`worker: onmessage() captured an uncaught exception: ${ex}`);
      if (ex?.stack) err(ex.stack);
      __emscripten_thread_crashed();
      throw ex;
    }
  }
  self.onmessage = handleMessage;
}

// ENVIRONMENT_IS_PTHREAD
// end include: runtime_pthread.js
function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module["HEAP8"] = HEAP8 = new Int8Array(b);
  Module["HEAP16"] = HEAP16 = new Int16Array(b);
  Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);
  Module["HEAPU16"] = HEAPU16 = new Uint16Array(b);
  Module["HEAP32"] = HEAP32 = new Int32Array(b);
  Module["HEAPU32"] = HEAPU32 = new Uint32Array(b);
  Module["HEAPF32"] = HEAPF32 = new Float32Array(b);
  Module["HEAPF64"] = HEAPF64 = new Float64Array(b);
}

// end include: runtime_shared.js
assert(!Module["STACK_SIZE"], "STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time");

assert(typeof Int32Array != "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined, "JS engine does not provide full typed array support");

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js
// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
if (!ENVIRONMENT_IS_PTHREAD) {
  if (Module["wasmMemory"]) {
    wasmMemory = Module["wasmMemory"];
  } else {
    var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
    legacyModuleProp("INITIAL_MEMORY", "INITIAL_MEMORY");
    assert(INITIAL_MEMORY >= 65536, "INITIAL_MEMORY should be larger than STACK_SIZE, was " + INITIAL_MEMORY + "! (STACK_SIZE=" + 65536 + ")");
    /** @suppress {checkTypes} */ wasmMemory = new WebAssembly.Memory({
      "initial": INITIAL_MEMORY / 65536,
      // In theory we should not need to emit the maximum if we want "unlimited"
      // or 4GB of memory, but VMs error on that atm, see
      // https://github.com/emscripten-core/emscripten/issues/14130
      // And in the pthreads case we definitely need to emit a maximum. So
      // always emit one.
      "maximum": 32768,
      "shared": true
    });
  }
  updateMemoryViews();
}

// end include: runtime_init_memory.js
var __ATPRERUN__ = [];

// functions called before the runtime is initialized
var __ATINIT__ = [];

// functions called during startup
var __ATMAIN__ = [];

// functions called during shutdown
var __ATPOSTRUN__ = [];

// functions called after the main() is called
function preRun() {
  assert(!ENVIRONMENT_IS_PTHREAD);
  // PThreads reuse the runtime from the main thread.
  if (Module["preRun"]) {
    if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
    while (Module["preRun"].length) {
      addOnPreRun(Module["preRun"].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (ENVIRONMENT_IS_PTHREAD) return startWorker(Module);
  checkStackCookie();
  if (!Module["noFSInit"] && !FS.initialized) FS.init();
  FS.ignorePermissions = false;
  TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  if (ENVIRONMENT_IS_PTHREAD) return;
  // PThreads reuse the runtime from the main thread.
  callRuntimeCallbacks(__ATMAIN__);
}

function postRun() {
  checkStackCookie();
  if (ENVIRONMENT_IS_PTHREAD) return;
  // PThreads reuse the runtime from the main thread.
  if (Module["postRun"]) {
    if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
    while (Module["postRun"].length) {
      addOnPostRun(Module["postRun"].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;

var dependenciesFulfilled = null;

// overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

var runDependencyWatcher = null;

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;
  Module["monitorRunDependencies"]?.(runDependencies);
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != "undefined") {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err("still waiting on run dependencies:");
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err("(end of list)");
        }
      }, 1e4);
    }
  } else {
    err("warning: run dependency added without ID");
  }
}

function removeRunDependency(id) {
  runDependencies--;
  Module["monitorRunDependencies"]?.(runDependencies);
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err("warning: run dependency removed without ID");
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback();
    }
  }
}

/** @param {string|number=} what */ function abort(what) {
  Module["onAbort"]?.(what);
  what = "Aborted(" + what + ")";
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);
  ABORT = true;
  if (what.indexOf("RuntimeError: unreachable") >= 0) {
    what += '. "unreachable" may be due to ASYNCIFY_STACK_SIZE not being large enough (try increasing it)';
  }
  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.
  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */ var e = new WebAssembly.RuntimeError(what);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

var wasmBinaryFile;

function findWasmBinary() {
  var f = "bubliss.wasm";
  if (!isDataURI(f)) {
    return locateFile(f);
  }
  return f;
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw "both async and sync fetching of the wasm failed";
}

async function getWasmBinary(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary) {
    // Fetch the binary using readAsync
    try {
      var response = await readAsync(binaryFile);
      return new Uint8Array(response);
    } catch {}
  }
  // Otherwise, getBinarySync should be able to get it synchronously
  return getBinarySync(binaryFile);
}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);
    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  if (!binary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(binaryFile) && !isFileURI(binaryFile) && !ENVIRONMENT_IS_NODE) {
    try {
      var response = fetch(binaryFile, {
        credentials: "same-origin"
      });
      var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
      return instantiationResult;
    } catch (reason) {
      // We expect the most common failure cause to be a bad MIME type for the binary,
      // in which case falling back to ArrayBuffer instantiation should work.
      err(`wasm streaming compile failed: ${reason}`);
      err("falling back to ArrayBuffer instantiation");
    }
  }
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  assignWasmImports();
  // instrumenting imports is used in asyncify in two ways: to add assertions
  // that check for proper import use, and for ASYNCIFY=2 we use them to set up
  // the Promise API on the import side.
  // In pthreads builds getWasmImports is called more than once but we only
  // and the instrument the imports once.
  if (!wasmImports.__instrumented) {
    wasmImports.__instrumented = true;
    Asyncify.instrumentWasmImports(wasmImports);
  }
  // prepare imports
  return {
    "env": wasmImports,
    "wasi_snapshot_preview1": wasmImports
  };
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/ function receiveInstance(instance, module) {
    wasmExports = instance.exports;
    wasmExports = Asyncify.instrumentWasmExports(wasmExports);
    registerTLSInit(wasmExports["_emscripten_tls_init"]);
    addOnInit(wasmExports["__wasm_call_ctors"]);
    // We now have the Wasm module loaded up, keep a reference to the compiled module so we can post it to the workers.
    wasmModule = module;
    removeRunDependency("wasm-instantiate");
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency("wasm-instantiate");
  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
    trueModule = null;
    return receiveInstance(result["instance"], result["module"]);
  }
  var info = getWasmImports();
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module["instantiateWasm"]) {
    try {
      return Module["instantiateWasm"](info, receiveInstance);
    } catch (e) {
      err(`Module.instantiateWasm callback failed with error: ${e}`);
      return false;
    }
  }
  if (ENVIRONMENT_IS_PTHREAD) {
    return new Promise(resolve => {
      wasmModuleReceived = module => {
        // Instantiate from the module posted from the main thread.
        // We can just use sync instantiation in the worker.
        var instance = new WebAssembly.Instance(module, getWasmImports());
        resolve(receiveInstance(instance, module));
      };
    });
  }
  wasmBinaryFile ??= findWasmBinary();
  var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
  var exports = receiveInstantiationResult(result);
  return exports;
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;

var tempI64;

// === Body ===
var ASM_CONSTS = {
  52404: () => {
    if (document.fullscreenElement) return 1;
  },
  52450: () => document.getElementById("canvas").width,
  52502: () => parseInt(document.getElementById("canvas").style.width),
  52570: () => {
    document.exitFullscreen();
  },
  52597: () => {
    setTimeout(function() {
      Module.requestFullscreen(false, false);
    }, 100);
  },
  52670: () => {
    if (document.fullscreenElement) return 1;
  },
  52716: () => document.getElementById("canvas").width,
  52768: () => screen.width,
  52793: () => {
    document.exitFullscreen();
  },
  52820: () => {
    setTimeout(function() {
      Module.requestFullscreen(false, true);
      setTimeout(function() {
        canvas.style.width = "unset";
      }, 100);
    }, 100);
  },
  52953: () => window.innerWidth,
  52979: () => window.innerHeight,
  53006: () => {
    if (document.fullscreenElement) return 1;
  },
  53052: () => document.getElementById("canvas").width,
  53104: () => parseInt(document.getElementById("canvas").style.width),
  53172: () => {
    if (document.fullscreenElement) return 1;
  },
  53218: () => document.getElementById("canvas").width,
  53270: () => screen.width,
  53295: () => window.innerWidth,
  53321: () => window.innerHeight,
  53348: () => {
    if (document.fullscreenElement) return 1;
  },
  53394: () => document.getElementById("canvas").width,
  53446: () => screen.width,
  53471: () => {
    document.exitFullscreen();
  },
  53498: () => {
    if (document.fullscreenElement) return 1;
  },
  53544: () => document.getElementById("canvas").width,
  53596: () => parseInt(document.getElementById("canvas").style.width),
  53664: () => {
    document.exitFullscreen();
  },
  53691: $0 => {
    document.getElementById("canvas").style.opacity = $0;
  },
  53749: () => screen.width,
  53774: () => screen.height,
  53800: () => window.screenX,
  53827: () => window.screenY,
  53854: $0 => {
    navigator.clipboard.writeText(UTF8ToString($0));
  },
  53907: $0 => {
    document.getElementById("canvas").style.cursor = UTF8ToString($0);
  },
  53978: () => {
    document.getElementById("canvas").style.cursor = "none";
  },
  54035: ($0, $1, $2, $3) => {
    try {
      navigator.getGamepads()[$0].vibrationActuator.playEffect("dual-rumble", {
        startDelay: 0,
        duration: $3,
        weakMagnitude: $1,
        strongMagnitude: $2
      });
    } catch (e) {
      try {
        navigator.getGamepads()[$0].hapticActuators[0].pulse($2, $3);
      } catch (e) {}
    }
  },
  54291: $0 => {
    document.getElementById("canvas").style.cursor = UTF8ToString($0);
  },
  54362: () => {
    if (document.fullscreenElement) return 1;
  },
  54408: () => window.innerWidth,
  54434: () => window.innerHeight,
  54461: () => {
    if (document.pointerLockElement) return 1;
  }
};

// end include: preamble.js
class ExitStatus {
  name="ExitStatus";
  constructor(status) {
    this.message = `Program terminated with exit(${status})`;
    this.status = status;
  }
}

var terminateWorker = worker => {
  worker.terminate();
  // terminate() can be asynchronous, so in theory the worker can continue
  // to run for some amount of time after termination.  However from our POV
  // the worker now dead and we don't want to hear from it again, so we stub
  // out its message handler here.  This avoids having to check in each of
  // the onmessage handlers if the message was coming from valid worker.
  worker.onmessage = e => {
    var cmd = e["data"].cmd;
    err(`received "${cmd}" command from terminated worker: ${worker.workerID}`);
  };
};

var cleanupThread = pthread_ptr => {
  assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! cleanupThread() can only ever be called from main application thread!");
  assert(pthread_ptr, "Internal Error! Null pthread_ptr in cleanupThread!");
  var worker = PThread.pthreads[pthread_ptr];
  assert(worker);
  PThread.returnWorkerToPool(worker);
};

var spawnThread = threadParams => {
  assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! spawnThread() can only ever be called from main application thread!");
  assert(threadParams.pthread_ptr, "Internal error, no pthread ptr!");
  var worker = PThread.getNewWorker();
  if (!worker) {
    // No available workers in the PThread pool.
    return 6;
  }
  assert(!worker.pthread_ptr, "Internal error!");
  PThread.runningWorkers.push(worker);
  // Add to pthreads map
  PThread.pthreads[threadParams.pthread_ptr] = worker;
  worker.pthread_ptr = threadParams.pthread_ptr;
  var msg = {
    cmd: "run",
    start_routine: threadParams.startRoutine,
    arg: threadParams.arg,
    pthread_ptr: threadParams.pthread_ptr
  };
  if (ENVIRONMENT_IS_NODE) {
    // Mark worker as weakly referenced once we start executing a pthread,
    // so that its existence does not prevent Node.js from exiting.  This
    // has no effect if the worker is already weakly referenced (e.g. if
    // this worker was previously idle/unused).
    worker.unref();
  }
  // Ask the worker to start executing its pthread entry point function.
  worker.postMessage(msg, threadParams.transferList);
  return 0;
};

var runtimeKeepaliveCounter = 0;

var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;

var stackSave = () => _emscripten_stack_get_current();

var stackRestore = val => __emscripten_stack_restore(val);

var stackAlloc = sz => __emscripten_stack_alloc(sz);

var convertI32PairToI53Checked = (lo, hi) => {
  assert(lo == (lo >>> 0) || lo == (lo | 0));
  // lo should either be a i32 or a u32
  assert(hi === (hi | 0));
  // hi should be a i32
  return ((hi + 2097152) >>> 0 < 4194305 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
};

/** @type{function(number, (number|boolean), ...number)} */ var proxyToMainThread = (funcIndex, emAsmAddr, sync, ...callArgs) => {
  // EM_ASM proxying is done by passing a pointer to the address of the EM_ASM
  // content as `emAsmAddr`.  JS library proxying is done by passing an index
  // into `proxiedJSCallArgs` as `funcIndex`. If `emAsmAddr` is non-zero then
  // `funcIndex` will be ignored.
  // Additional arguments are passed after the first three are the actual
  // function arguments.
  // The serialization buffer contains the number of call params, and then
  // all the args here.
  // We also pass 'sync' to C separately, since C needs to look at it.
  // Allocate a buffer, which will be copied by the C code.
  // First passed parameter specifies the number of arguments to the function.
  // When BigInt support is enabled, we must handle types in a more complex
  // way, detecting at runtime if a value is a BigInt or not (as we have no
  // type info here). To do that, add a "prefix" before each value that
  // indicates if it is a BigInt, which effectively doubles the number of
  // values we serialize for proxying. TODO: pack this?
  var serializedNumCallArgs = callArgs.length;
  var sp = stackSave();
  var args = stackAlloc(serializedNumCallArgs * 8);
  var b = ((args) >> 3);
  for (var i = 0; i < callArgs.length; i++) {
    var arg = callArgs[i];
    GROWABLE_HEAP_F64()[b + i] = arg;
  }
  var rtn = __emscripten_run_on_main_thread_js(funcIndex, emAsmAddr, serializedNumCallArgs, args, sync);
  stackRestore(sp);
  return rtn;
};

function _proc_exit(code) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(0, 0, 1, code);
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    PThread.terminateAllThreads();
    Module["onExit"]?.(code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

var handleException = e => {
  // Certain exception types we do not treat as errors since they are used for
  // internal control flow.
  // 1. ExitStatus, which is thrown by exit()
  // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
  //    that wish to return to JS event loop.
  if (e instanceof ExitStatus || e == "unwind") {
    return EXITSTATUS;
  }
  checkStackCookie();
  if (e instanceof WebAssembly.RuntimeError) {
    if (_emscripten_stack_get_current() <= 0) {
      err("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)");
    }
  }
  quit_(1, e);
};

function exitOnMainThread(returnCode) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(1, 0, 0, returnCode);
  _exit(returnCode);
}

/** @suppress {duplicate } */ /** @param {boolean|number=} implicit */ var exitJS = (status, implicit) => {
  EXITSTATUS = status;
  checkUnflushedContent();
  if (ENVIRONMENT_IS_PTHREAD) {
    // implicit exit can never happen on a pthread
    assert(!implicit);
    // When running in a pthread we propagate the exit back to the main thread
    // where it can decide if the whole process should be shut down or not.
    // The pthread may have decided not to exit its own runtime, for example
    // because it runs a main loop, but that doesn't affect the main thread.
    exitOnMainThread(status);
    throw "unwind";
  }
  // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
  if (keepRuntimeAlive() && !implicit) {
    var msg = `program exited (with status: ${status}), but keepRuntimeAlive() is set (counter=${runtimeKeepaliveCounter}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;
    err(msg);
  }
  _proc_exit(status);
};

var _exit = exitJS;

var ptrToString = ptr => {
  assert(typeof ptr === "number");
  // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
  ptr >>>= 0;
  return "0x" + ptr.toString(16).padStart(8, "0");
};

var PThread = {
  unusedWorkers: [],
  runningWorkers: [],
  tlsInitFunctions: [],
  pthreads: {},
  nextWorkerID: 1,
  debugInit() {
    function pthreadLogPrefix() {
      var t = 0;
      if (runtimeInitialized && typeof _pthread_self != "undefined") {
        t = _pthread_self();
      }
      return `w:${workerID},t:${ptrToString(t)}: `;
    }
    // Prefix all err()/dbg() messages with the calling thread ID.
    var origDbg = dbg;
    dbg = (...args) => origDbg(pthreadLogPrefix() + args.join(" "));
  },
  init() {
    PThread.debugInit();
    if ((!(ENVIRONMENT_IS_PTHREAD))) {
      PThread.initMainThread();
    }
  },
  initMainThread() {
    // MINIMAL_RUNTIME takes care of calling loadWasmModuleToAllWorkers
    // in postamble_minimal.js
    addOnPreRun(() => {
      addRunDependency("loading-workers");
      PThread.loadWasmModuleToAllWorkers(() => removeRunDependency("loading-workers"));
    });
  },
  terminateAllThreads: () => {
    assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! terminateAllThreads() can only ever be called from main application thread!");
    // Attempt to kill all workers.  Sadly (at least on the web) there is no
    // way to terminate a worker synchronously, or to be notified when a
    // worker in actually terminated.  This means there is some risk that
    // pthreads will continue to be executing after `worker.terminate` has
    // returned.  For this reason, we don't call `returnWorkerToPool` here or
    // free the underlying pthread data structures.
    for (var worker of PThread.runningWorkers) {
      terminateWorker(worker);
    }
    for (var worker of PThread.unusedWorkers) {
      terminateWorker(worker);
    }
    PThread.unusedWorkers = [];
    PThread.runningWorkers = [];
    PThread.pthreads = {};
  },
  returnWorkerToPool: worker => {
    // We don't want to run main thread queued calls here, since we are doing
    // some operations that leave the worker queue in an invalid state until
    // we are completely done (it would be bad if free() ends up calling a
    // queued pthread_create which looks at the global data structures we are
    // modifying). To achieve that, defer the free() til the very end, when
    // we are all done.
    var pthread_ptr = worker.pthread_ptr;
    delete PThread.pthreads[pthread_ptr];
    // Note: worker is intentionally not terminated so the pool can
    // dynamically grow.
    PThread.unusedWorkers.push(worker);
    PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);
    // Not a running Worker anymore
    // Detach the worker from the pthread object, and return it to the
    // worker pool as an unused worker.
    worker.pthread_ptr = 0;
    // Finally, free the underlying (and now-unused) pthread structure in
    // linear memory.
    __emscripten_thread_free_data(pthread_ptr);
  },
  receiveObjectTransfer(data) {},
  threadInitTLS() {
    // Call thread init functions (these are the _emscripten_tls_init for each
    // module loaded.
    PThread.tlsInitFunctions.forEach(f => f());
  },
  loadWasmModuleToWorker: worker => new Promise(onFinishedLoading => {
    worker.onmessage = e => {
      var d = e["data"];
      var cmd = d.cmd;
      // If this message is intended to a recipient that is not the main
      // thread, forward it to the target thread.
      if (d.targetThread && d.targetThread != _pthread_self()) {
        var targetWorker = PThread.pthreads[d.targetThread];
        if (targetWorker) {
          targetWorker.postMessage(d, d.transferList);
        } else {
          err(`Internal error! Worker sent a message "${cmd}" to target pthread ${d.targetThread}, but that thread no longer exists!`);
        }
        return;
      }
      if (cmd === "checkMailbox") {
        checkMailbox();
      } else if (cmd === "spawnThread") {
        spawnThread(d);
      } else if (cmd === "cleanupThread") {
        cleanupThread(d.thread);
      } else if (cmd === "loaded") {
        worker.loaded = true;
        onFinishedLoading(worker);
      } else if (cmd === "alert") {
        alert(`Thread ${d.threadId}: ${d.text}`);
      } else if (d.target === "setimmediate") {
        // Worker wants to postMessage() to itself to implement setImmediate()
        // emulation.
        worker.postMessage(d);
      } else if (cmd === "callHandler") {
        Module[d.handler](...d.args);
      } else if (cmd) {
        // The received message looks like something that should be handled by this message
        // handler, (since there is a e.data.cmd field present), but is not one of the
        // recognized commands:
        err(`worker sent an unknown command ${cmd}`);
      }
    };
    worker.onerror = e => {
      var message = "worker sent an error!";
      if (worker.pthread_ptr) {
        message = `Pthread ${ptrToString(worker.pthread_ptr)} sent an error!`;
      }
      err(`${message} ${e.filename}:${e.lineno}: ${e.message}`);
      throw e;
    };
    if (ENVIRONMENT_IS_NODE) {
      worker.on("message", data => worker.onmessage({
        data
      }));
      worker.on("error", e => worker.onerror(e));
    }
    assert(wasmMemory instanceof WebAssembly.Memory, "WebAssembly memory should have been loaded by now!");
    assert(wasmModule instanceof WebAssembly.Module, "WebAssembly Module should have been loaded by now!");
    // When running on a pthread, none of the incoming parameters on the module
    // object are present. Proxy known handlers back to the main thread if specified.
    var handlers = [];
    var knownHandlers = [ "onExit", "onAbort", "print", "printErr" ];
    for (var handler of knownHandlers) {
      if (Module.propertyIsEnumerable(handler)) {
        handlers.push(handler);
      }
    }
    worker.workerID = PThread.nextWorkerID++;
    // Ask the new worker to load up the Emscripten-compiled page. This is a heavy operation.
    worker.postMessage({
      cmd: "load",
      handlers,
      // the polyfill WebAssembly.Memory instance has function properties,
      // which will fail in postMessage, so just send a custom object with the
      // property we need, the buffer
      wasmMemory: {
        "buffer": wasmMemory.buffer
      },
      wasmModule,
      "workerID": worker.workerID
    });
  }),
  loadWasmModuleToAllWorkers(onMaybeReady) {
    onMaybeReady();
  },
  allocateUnusedWorker() {
    var worker;
    var workerOptions = {
      // This is the way that we signal to the node worker that it is hosting
      // a pthread.
      "workerData": "em-pthread",
      // This is the way that we signal to the Web Worker that it is hosting
      // a pthread.
      "name": "em-pthread-" + PThread.nextWorkerID
    };
    var pthreadMainJs = _scriptName;
    // We can't use makeModuleReceiveWithVar here since we want to also
    // call URL.createObjectURL on the mainScriptUrlOrBlob.
    if (Module["mainScriptUrlOrBlob"]) {
      pthreadMainJs = Module["mainScriptUrlOrBlob"];
      if (typeof pthreadMainJs != "string") {
        pthreadMainJs = URL.createObjectURL(pthreadMainJs);
      }
    }
    worker = new Worker(pthreadMainJs, workerOptions);
    PThread.unusedWorkers.push(worker);
  },
  getNewWorker() {
    if (PThread.unusedWorkers.length == 0) {
      // PTHREAD_POOL_SIZE_STRICT should show a warning and, if set to level `2`, return from the function.
      // However, if we're in Node.js, then we can create new workers on the fly and PTHREAD_POOL_SIZE_STRICT
      // should be ignored altogether.
      if (!ENVIRONMENT_IS_NODE) {
        err("Tried to spawn a new thread, but the thread pool is exhausted.\n" + "This might result in a deadlock unless some threads eventually exit or the code explicitly breaks out to the event loop.\n" + "If you want to increase the pool size, use setting `-sPTHREAD_POOL_SIZE=...`." + "\nIf you want to throw an explicit error instead of the risk of deadlocking in those cases, use setting `-sPTHREAD_POOL_SIZE_STRICT=2`.");
      }
      PThread.allocateUnusedWorker();
      PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0]);
    }
    return PThread.unusedWorkers.pop();
  }
};

var callRuntimeCallbacks = callbacks => {
  while (callbacks.length > 0) {
    // Pass the module as the first argument.
    callbacks.shift()(Module);
  }
};

var establishStackSpace = pthread_ptr => {
  // If memory growth is enabled, the memory views may have gotten out of date,
  // so resync them before accessing the pthread ptr below.
  updateMemoryViews();
  var stackHigh = GROWABLE_HEAP_U32()[(((pthread_ptr) + (52)) >> 2)];
  var stackSize = GROWABLE_HEAP_U32()[(((pthread_ptr) + (56)) >> 2)];
  var stackLow = stackHigh - stackSize;
  assert(stackHigh != 0);
  assert(stackLow != 0);
  assert(stackHigh > stackLow, "stackHigh must be higher then stackLow");
  // Set stack limits used by `emscripten/stack.h` function.  These limits are
  // cached in wasm-side globals to make checks as fast as possible.
  _emscripten_stack_set_limits(stackHigh, stackLow);
  // Call inside wasm module to set up the stack frame for this pthread in wasm module scope
  stackRestore(stackHigh);
  // Write the stack cookie last, after we have set up the proper bounds and
  // current position of the stack.
  writeStackCookie();
};

var invokeEntryPoint = (ptr, arg) => {
  // An old thread on this worker may have been canceled without returning the
  // `runtimeKeepaliveCounter` to zero. Reset it now so the new thread won't
  // be affected.
  runtimeKeepaliveCounter = 0;
  // Same for noExitRuntime.  The default for pthreads should always be false
  // otherwise pthreads would never complete and attempts to pthread_join to
  // them would block forever.
  // pthreads can still choose to set `noExitRuntime` explicitly, or
  // call emscripten_unwind_to_js_event_loop to extend their lifetime beyond
  // their main function.  See comment in src/runtime_pthread.js for more.
  noExitRuntime = 0;
  // pthread entry points are always of signature 'void *ThreadMain(void *arg)'
  // Native codebases sometimes spawn threads with other thread entry point
  // signatures, such as void ThreadMain(void *arg), void *ThreadMain(), or
  // void ThreadMain().  That is not acceptable per C/C++ specification, but
  // x86 compiler ABI extensions enable that to work. If you find the
  // following line to crash, either change the signature to "proper" void
  // *ThreadMain(void *arg) form, or try linking with the Emscripten linker
  // flag -sEMULATE_FUNCTION_POINTER_CASTS to add in emulation for this x86
  // ABI extension.
  var result = (a1 => dynCall_ii(ptr, a1))(arg);
  checkStackCookie();
  function finish(result) {
    if (keepRuntimeAlive()) {
      EXITSTATUS = result;
    } else {
      __emscripten_thread_exit(result);
    }
  }
  finish(result);
};

var noExitRuntime = Module["noExitRuntime"] || true;

var registerTLSInit = tlsInitFunc => PThread.tlsInitFunctions.push(tlsInitFunc);

var warnOnce = text => {
  warnOnce.shown ||= {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    if (ENVIRONMENT_IS_NODE) text = "warning: " + text;
    err(text);
  }
};

var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder : undefined;

/**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */ var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on
  // null terminator by itself.  Also, use the length info to avoid running tiny
  // strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation,
  // so that undefined/NaN means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.buffer instanceof ArrayBuffer ? heapOrArray.subarray(idx, endPtr) : heapOrArray.slice(idx, endPtr));
  }
  var str = "";
  // If building with TextDecoder, we have already computed the string length
  // above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 128)) {
      str += String.fromCharCode(u0);
      continue;
    }
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 224) == 192) {
      str += String.fromCharCode(((u0 & 31) << 6) | u1);
      continue;
    }
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 240) == 224) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      if ((u0 & 248) != 240) warnOnce("Invalid UTF-8 leading byte " + ptrToString(u0) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");
      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
    }
    if (u0 < 65536) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 65536;
      str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));
    }
  }
  return str;
};

/**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */ var UTF8ToString = (ptr, maxBytesToRead) => {
  assert(typeof ptr == "number", `UTF8ToString expects a number (got ${typeof ptr})`);
  return ptr ? UTF8ArrayToString(GROWABLE_HEAP_U8(), ptr, maxBytesToRead) : "";
};

var ___assert_fail = (condition, filename, line, func) => abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [ filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function" ]);

class ExceptionInfo {
  // excPtr - Thrown object pointer to wrap. Metadata pointer is calculated from it.
  constructor(excPtr) {
    this.excPtr = excPtr;
    this.ptr = excPtr - 24;
  }
  set_type(type) {
    GROWABLE_HEAP_U32()[(((this.ptr) + (4)) >> 2)] = type;
  }
  get_type() {
    return GROWABLE_HEAP_U32()[(((this.ptr) + (4)) >> 2)];
  }
  set_destructor(destructor) {
    GROWABLE_HEAP_U32()[(((this.ptr) + (8)) >> 2)] = destructor;
  }
  get_destructor() {
    return GROWABLE_HEAP_U32()[(((this.ptr) + (8)) >> 2)];
  }
  set_caught(caught) {
    caught = caught ? 1 : 0;
    GROWABLE_HEAP_I8()[(this.ptr) + (12)] = caught;
  }
  get_caught() {
    return GROWABLE_HEAP_I8()[(this.ptr) + (12)] != 0;
  }
  set_rethrown(rethrown) {
    rethrown = rethrown ? 1 : 0;
    GROWABLE_HEAP_I8()[(this.ptr) + (13)] = rethrown;
  }
  get_rethrown() {
    return GROWABLE_HEAP_I8()[(this.ptr) + (13)] != 0;
  }
  // Initialize native structure fields. Should be called once after allocated.
  init(type, destructor) {
    this.set_adjusted_ptr(0);
    this.set_type(type);
    this.set_destructor(destructor);
  }
  set_adjusted_ptr(adjustedPtr) {
    GROWABLE_HEAP_U32()[(((this.ptr) + (16)) >> 2)] = adjustedPtr;
  }
  get_adjusted_ptr() {
    return GROWABLE_HEAP_U32()[(((this.ptr) + (16)) >> 2)];
  }
}

var exceptionLast = 0;

var uncaughtExceptionCount = 0;

var ___cxa_throw = (ptr, type, destructor) => {
  var info = new ExceptionInfo(ptr);
  // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
  info.init(type, destructor);
  exceptionLast = ptr;
  uncaughtExceptionCount++;
  assert(false, "Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.");
};

var PATH = {
  isAbs: path => path.charAt(0) === "/",
  splitPath: filename => {
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    return splitPathRe.exec(filename).slice(1);
  },
  normalizeArray: (parts, allowAboveRoot) => {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === ".") {
        parts.splice(i, 1);
      } else if (last === "..") {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (;up; up--) {
        parts.unshift("..");
      }
    }
    return parts;
  },
  normalize: path => {
    var isAbsolute = PATH.isAbs(path), trailingSlash = path.substr(-1) === "/";
    // Normalize the path
    path = PATH.normalizeArray(path.split("/").filter(p => !!p), !isAbsolute).join("/");
    if (!path && !isAbsolute) {
      path = ".";
    }
    if (path && trailingSlash) {
      path += "/";
    }
    return (isAbsolute ? "/" : "") + path;
  },
  dirname: path => {
    var result = PATH.splitPath(path), root = result[0], dir = result[1];
    if (!root && !dir) {
      // No dirname whatsoever
      return ".";
    }
    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }
    return root + dir;
  },
  basename: path => path && path.match(/([^\/]+|\/)\/*$/)[1],
  join: (...paths) => PATH.normalize(paths.join("/")),
  join2: (l, r) => PATH.normalize(l + "/" + r)
};

var initRandomFill = () => {
  // This block is not needed on v19+ since crypto.getRandomValues is builtin
  if (ENVIRONMENT_IS_NODE) {
    var nodeCrypto = require("crypto");
    return view => nodeCrypto.randomFillSync(view);
  }
  // like with most Web APIs, we can't use Web Crypto API directly on shared memory,
  // so we need to create an intermediate buffer and copy it to the destination
  return view => view.set(crypto.getRandomValues(new Uint8Array(view.byteLength)));
};

var randomFill = view => {
  // Lazily init on the first invocation.
  (randomFill = initRandomFill())(view);
};

var PATH_FS = {
  resolve: (...args) => {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? args[i] : FS.cwd();
      // Skip empty and invalid entries
      if (typeof path != "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path) {
        return "";
      }
      resolvedPath = path + "/" + resolvedPath;
      resolvedAbsolute = PATH.isAbs(path);
    }
    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)
    resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(p => !!p), !resolvedAbsolute).join("/");
    return ((resolvedAbsolute ? "/" : "") + resolvedPath) || ".";
  },
  relative: (from, to) => {
    from = PATH_FS.resolve(from).substr(1);
    to = PATH_FS.resolve(to).substr(1);
    function trim(arr) {
      var start = 0;
      for (;start < arr.length; start++) {
        if (arr[start] !== "") break;
      }
      var end = arr.length - 1;
      for (;end >= 0; end--) {
        if (arr[end] !== "") break;
      }
      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }
    var fromParts = trim(from.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
};

var FS_stdin_getChar_buffer = [];

var lengthBytesUTF8 = str => {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i);
    // possibly a lead surrogate
    if (c <= 127) {
      len++;
    } else if (c <= 2047) {
      len += 2;
    } else if (c >= 55296 && c <= 57343) {
      len += 4;
      ++i;
    } else {
      len += 3;
    }
  }
  return len;
};

var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
  assert(typeof str === "string", `stringToUTF8Array expects a string (got ${typeof str})`);
  // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
  // undefined and false each don't write out any bytes.
  if (!(maxBytesToWrite > 0)) return 0;
  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1;
  // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
    // and https://www.ietf.org/rfc/rfc2279.txt
    // and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i);
    // possibly a lead surrogate
    if (u >= 55296 && u <= 57343) {
      var u1 = str.charCodeAt(++i);
      u = 65536 + ((u & 1023) << 10) | (u1 & 1023);
    }
    if (u <= 127) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 2047) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 192 | (u >> 6);
      heap[outIdx++] = 128 | (u & 63);
    } else if (u <= 65535) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 224 | (u >> 12);
      heap[outIdx++] = 128 | ((u >> 6) & 63);
      heap[outIdx++] = 128 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 1114111) warnOnce("Invalid Unicode code point " + ptrToString(u) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");
      heap[outIdx++] = 240 | (u >> 18);
      heap[outIdx++] = 128 | ((u >> 12) & 63);
      heap[outIdx++] = 128 | ((u >> 6) & 63);
      heap[outIdx++] = 128 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
};

/** @type {function(string, boolean=, number=)} */ function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

var FS_stdin_getChar = () => {
  if (!FS_stdin_getChar_buffer.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
      // we will read data by chunks of BUFSIZE
      var BUFSIZE = 256;
      var buf = Buffer.alloc(BUFSIZE);
      var bytesRead = 0;
      // For some reason we must suppress a closure warning here, even though
      // fd definitely exists on process.stdin, and is even the proper way to
      // get the fd of stdin,
      // https://github.com/nodejs/help/issues/2136#issuecomment-523649904
      // This started to happen after moving this logic out of library_tty.js,
      // so it is related to the surrounding code in some unclear manner.
      /** @suppress {missingProperties} */ var fd = process.stdin.fd;
      try {
        bytesRead = fs.readSync(fd, buf, 0, BUFSIZE);
      } catch (e) {
        // Cross-platform differences: on Windows, reading EOF throws an
        // exception, but on other OSes, reading EOF returns 0. Uniformize
        // behavior by treating the EOF exception to return 0.
        if (e.toString().includes("EOF")) bytesRead = 0; else throw e;
      }
      if (bytesRead > 0) {
        result = buf.slice(0, bytesRead).toString("utf-8");
      }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
      // Browser.
      result = window.prompt("Input: ");
      // returns null on cancel
      if (result !== null) {
        result += "\n";
      }
    } else {}
    if (!result) {
      return null;
    }
    FS_stdin_getChar_buffer = intArrayFromString(result, true);
  }
  return FS_stdin_getChar_buffer.shift();
};

var TTY = {
  ttys: [],
  init() {},
  shutdown() {},
  register(dev, ops) {
    TTY.ttys[dev] = {
      input: [],
      output: [],
      ops
    };
    FS.registerDevice(dev, TTY.stream_ops);
  },
  stream_ops: {
    open(stream) {
      var tty = TTY.ttys[stream.node.rdev];
      if (!tty) {
        throw new FS.ErrnoError(43);
      }
      stream.tty = tty;
      stream.seekable = false;
    },
    close(stream) {
      // flush any pending line data
      stream.tty.ops.fsync(stream.tty);
    },
    fsync(stream) {
      stream.tty.ops.fsync(stream.tty);
    },
    read(stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.get_char) {
        throw new FS.ErrnoError(60);
      }
      var bytesRead = 0;
      for (var i = 0; i < length; i++) {
        var result;
        try {
          result = stream.tty.ops.get_char(stream.tty);
        } catch (e) {
          throw new FS.ErrnoError(29);
        }
        if (result === undefined && bytesRead === 0) {
          throw new FS.ErrnoError(6);
        }
        if (result === null || result === undefined) break;
        bytesRead++;
        buffer[offset + i] = result;
      }
      if (bytesRead) {
        stream.node.atime = Date.now();
      }
      return bytesRead;
    },
    write(stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.put_char) {
        throw new FS.ErrnoError(60);
      }
      try {
        for (var i = 0; i < length; i++) {
          stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
        }
      } catch (e) {
        throw new FS.ErrnoError(29);
      }
      if (length) {
        stream.node.mtime = stream.node.ctime = Date.now();
      }
      return i;
    }
  },
  default_tty_ops: {
    get_char(tty) {
      return FS_stdin_getChar();
    },
    put_char(tty, val) {
      if (val === null || val === 10) {
        out(UTF8ArrayToString(tty.output));
        tty.output = [];
      } else {
        if (val != 0) tty.output.push(val);
      }
    },
    fsync(tty) {
      if (tty.output && tty.output.length > 0) {
        out(UTF8ArrayToString(tty.output));
        tty.output = [];
      }
    },
    ioctl_tcgets(tty) {
      // typical setting
      return {
        c_iflag: 25856,
        c_oflag: 5,
        c_cflag: 191,
        c_lflag: 35387,
        c_cc: [ 3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      };
    },
    ioctl_tcsets(tty, optional_actions, data) {
      // currently just ignore
      return 0;
    },
    ioctl_tiocgwinsz(tty) {
      return [ 24, 80 ];
    }
  },
  default_tty1_ops: {
    put_char(tty, val) {
      if (val === null || val === 10) {
        err(UTF8ArrayToString(tty.output));
        tty.output = [];
      } else {
        if (val != 0) tty.output.push(val);
      }
    },
    fsync(tty) {
      if (tty.output && tty.output.length > 0) {
        err(UTF8ArrayToString(tty.output));
        tty.output = [];
      }
    }
  }
};

var alignMemory = (size, alignment) => {
  assert(alignment, "alignment argument is required");
  return Math.ceil(size / alignment) * alignment;
};

var mmapAlloc = size => {
  abort("internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported");
};

var MEMFS = {
  ops_table: null,
  mount(mount) {
    return MEMFS.createNode(null, "/", 16895, 0);
  },
  createNode(parent, name, mode, dev) {
    if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
      // no supported
      throw new FS.ErrnoError(63);
    }
    MEMFS.ops_table ||= {
      dir: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr,
          lookup: MEMFS.node_ops.lookup,
          mknod: MEMFS.node_ops.mknod,
          rename: MEMFS.node_ops.rename,
          unlink: MEMFS.node_ops.unlink,
          rmdir: MEMFS.node_ops.rmdir,
          readdir: MEMFS.node_ops.readdir,
          symlink: MEMFS.node_ops.symlink
        },
        stream: {
          llseek: MEMFS.stream_ops.llseek
        }
      },
      file: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr
        },
        stream: {
          llseek: MEMFS.stream_ops.llseek,
          read: MEMFS.stream_ops.read,
          write: MEMFS.stream_ops.write,
          allocate: MEMFS.stream_ops.allocate,
          mmap: MEMFS.stream_ops.mmap,
          msync: MEMFS.stream_ops.msync
        }
      },
      link: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr,
          readlink: MEMFS.node_ops.readlink
        },
        stream: {}
      },
      chrdev: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr
        },
        stream: FS.chrdev_stream_ops
      }
    };
    var node = FS.createNode(parent, name, mode, dev);
    if (FS.isDir(node.mode)) {
      node.node_ops = MEMFS.ops_table.dir.node;
      node.stream_ops = MEMFS.ops_table.dir.stream;
      node.contents = {};
    } else if (FS.isFile(node.mode)) {
      node.node_ops = MEMFS.ops_table.file.node;
      node.stream_ops = MEMFS.ops_table.file.stream;
      node.usedBytes = 0;
      // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
      // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
      // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
      // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
      node.contents = null;
    } else if (FS.isLink(node.mode)) {
      node.node_ops = MEMFS.ops_table.link.node;
      node.stream_ops = MEMFS.ops_table.link.stream;
    } else if (FS.isChrdev(node.mode)) {
      node.node_ops = MEMFS.ops_table.chrdev.node;
      node.stream_ops = MEMFS.ops_table.chrdev.stream;
    }
    node.atime = node.mtime = node.ctime = Date.now();
    // add the new node to the parent
    if (parent) {
      parent.contents[name] = node;
      parent.atime = parent.mtime = parent.ctime = node.atime;
    }
    return node;
  },
  getFileDataAsTypedArray(node) {
    if (!node.contents) return new Uint8Array(0);
    if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
    // Make sure to not return excess unused bytes.
    return new Uint8Array(node.contents);
  },
  expandFileStorage(node, newCapacity) {
    var prevCapacity = node.contents ? node.contents.length : 0;
    if (prevCapacity >= newCapacity) return;
    // No need to expand, the storage was already large enough.
    // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
    // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
    // avoid overshooting the allocation cap by a very large margin.
    var CAPACITY_DOUBLING_MAX = 1024 * 1024;
    newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125)) >>> 0);
    if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
    // At minimum allocate 256b for each file when expanding.
    var oldContents = node.contents;
    node.contents = new Uint8Array(newCapacity);
    // Allocate new storage.
    if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
  },
  resizeFileStorage(node, newSize) {
    if (node.usedBytes == newSize) return;
    if (newSize == 0) {
      node.contents = null;
      // Fully decommit when requesting a resize to zero.
      node.usedBytes = 0;
    } else {
      var oldContents = node.contents;
      node.contents = new Uint8Array(newSize);
      // Allocate new storage.
      if (oldContents) {
        node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
      }
      node.usedBytes = newSize;
    }
  },
  node_ops: {
    getattr(node) {
      var attr = {};
      // device numbers reuse inode numbers.
      attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
      attr.ino = node.id;
      attr.mode = node.mode;
      attr.nlink = 1;
      attr.uid = 0;
      attr.gid = 0;
      attr.rdev = node.rdev;
      if (FS.isDir(node.mode)) {
        attr.size = 4096;
      } else if (FS.isFile(node.mode)) {
        attr.size = node.usedBytes;
      } else if (FS.isLink(node.mode)) {
        attr.size = node.link.length;
      } else {
        attr.size = 0;
      }
      attr.atime = new Date(node.atime);
      attr.mtime = new Date(node.mtime);
      attr.ctime = new Date(node.ctime);
      // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
      //       but this is not required by the standard.
      attr.blksize = 4096;
      attr.blocks = Math.ceil(attr.size / attr.blksize);
      return attr;
    },
    setattr(node, attr) {
      for (const key of [ "mode", "atime", "mtime", "ctime" ]) {
        if (attr[key] != null) {
          node[key] = attr[key];
        }
      }
      if (attr.size !== undefined) {
        MEMFS.resizeFileStorage(node, attr.size);
      }
    },
    lookup(parent, name) {
      throw new FS.ErrnoError(44);
    },
    mknod(parent, name, mode, dev) {
      return MEMFS.createNode(parent, name, mode, dev);
    },
    rename(old_node, new_dir, new_name) {
      var new_node;
      try {
        new_node = FS.lookupNode(new_dir, new_name);
      } catch (e) {}
      if (new_node) {
        if (FS.isDir(old_node.mode)) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          for (var i in new_node.contents) {
            throw new FS.ErrnoError(55);
          }
        }
        FS.hashRemoveNode(new_node);
      }
      // do the internal rewiring
      delete old_node.parent.contents[old_node.name];
      new_dir.contents[new_name] = old_node;
      old_node.name = new_name;
      new_dir.ctime = new_dir.mtime = old_node.parent.ctime = old_node.parent.mtime = Date.now();
    },
    unlink(parent, name) {
      delete parent.contents[name];
      parent.ctime = parent.mtime = Date.now();
    },
    rmdir(parent, name) {
      var node = FS.lookupNode(parent, name);
      for (var i in node.contents) {
        throw new FS.ErrnoError(55);
      }
      delete parent.contents[name];
      parent.ctime = parent.mtime = Date.now();
    },
    readdir(node) {
      return [ ".", "..", ...Object.keys(node.contents) ];
    },
    symlink(parent, newname, oldpath) {
      var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
      node.link = oldpath;
      return node;
    },
    readlink(node) {
      if (!FS.isLink(node.mode)) {
        throw new FS.ErrnoError(28);
      }
      return node.link;
    }
  },
  stream_ops: {
    read(stream, buffer, offset, length, position) {
      var contents = stream.node.contents;
      if (position >= stream.node.usedBytes) return 0;
      var size = Math.min(stream.node.usedBytes - position, length);
      assert(size >= 0);
      if (size > 8 && contents.subarray) {
        // non-trivial, and typed array
        buffer.set(contents.subarray(position, position + size), offset);
      } else {
        for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
      }
      return size;
    },
    write(stream, buffer, offset, length, position, canOwn) {
      // The data buffer should be a typed array view
      assert(!(buffer instanceof ArrayBuffer));
      // If the buffer is located in main memory (HEAP), and if
      // memory can grow, we can't hold on to references of the
      // memory buffer, as they may get invalidated. That means we
      // need to do copy its contents.
      if (buffer.buffer === GROWABLE_HEAP_I8().buffer) {
        canOwn = false;
      }
      if (!length) return 0;
      var node = stream.node;
      node.mtime = node.ctime = Date.now();
      if (buffer.subarray && (!node.contents || node.contents.subarray)) {
        // This write is from a typed array to a typed array?
        if (canOwn) {
          assert(position === 0, "canOwn must imply no weird position inside the file");
          node.contents = buffer.subarray(offset, offset + length);
          node.usedBytes = length;
          return length;
        } else if (node.usedBytes === 0 && position === 0) {
          // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
          node.contents = buffer.slice(offset, offset + length);
          node.usedBytes = length;
          return length;
        } else if (position + length <= node.usedBytes) {
          // Writing to an already allocated and used subrange of the file?
          node.contents.set(buffer.subarray(offset, offset + length), position);
          return length;
        }
      }
      // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
      MEMFS.expandFileStorage(node, position + length);
      if (node.contents.subarray && buffer.subarray) {
        // Use typed array write which is available.
        node.contents.set(buffer.subarray(offset, offset + length), position);
      } else {
        for (var i = 0; i < length; i++) {
          node.contents[position + i] = buffer[offset + i];
        }
      }
      node.usedBytes = Math.max(node.usedBytes, position + length);
      return length;
    },
    llseek(stream, offset, whence) {
      var position = offset;
      if (whence === 1) {
        position += stream.position;
      } else if (whence === 2) {
        if (FS.isFile(stream.node.mode)) {
          position += stream.node.usedBytes;
        }
      }
      if (position < 0) {
        throw new FS.ErrnoError(28);
      }
      return position;
    },
    allocate(stream, offset, length) {
      MEMFS.expandFileStorage(stream.node, offset + length);
      stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
    },
    mmap(stream, length, position, prot, flags) {
      if (!FS.isFile(stream.node.mode)) {
        throw new FS.ErrnoError(43);
      }
      var ptr;
      var allocated;
      var contents = stream.node.contents;
      // Only make a new copy when MAP_PRIVATE is specified.
      if (!(flags & 2) && contents && contents.buffer === GROWABLE_HEAP_I8().buffer) {
        // We can't emulate MAP_SHARED when the file is not backed by the
        // buffer we're mapping to (e.g. the HEAP buffer).
        allocated = false;
        ptr = contents.byteOffset;
      } else {
        allocated = true;
        ptr = mmapAlloc(length);
        if (!ptr) {
          throw new FS.ErrnoError(48);
        }
        if (contents) {
          // Try to avoid unnecessary slices.
          if (position > 0 || position + length < contents.length) {
            if (contents.subarray) {
              contents = contents.subarray(position, position + length);
            } else {
              contents = Array.prototype.slice.call(contents, position, position + length);
            }
          }
          GROWABLE_HEAP_I8().set(contents, ptr);
        }
      }
      return {
        ptr,
        allocated
      };
    },
    msync(stream, buffer, offset, length, mmapFlags) {
      MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
      // should we check if bytesWritten and length are the same?
      return 0;
    }
  }
};

var asyncLoad = async url => {
  var arrayBuffer = await readAsync(url);
  assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
  return new Uint8Array(arrayBuffer);
};

asyncLoad.isAsync = true;

var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {
  FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
};

var preloadPlugins = Module["preloadPlugins"] || [];

var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
  // Ensure plugins are ready.
  if (typeof Browser != "undefined") Browser.init();
  var handled = false;
  preloadPlugins.forEach(plugin => {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
      plugin["handle"](byteArray, fullname, finish, onerror);
      handled = true;
    }
  });
  return handled;
};

var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
  // TODO we should allow people to just pass in a complete filename instead
  // of parent and name being that we just join them anyways
  var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency(`cp ${fullname}`);
  // might have several active requests for the same fullname
  function processData(byteArray) {
    function finish(byteArray) {
      preFinish?.();
      if (!dontCreateFile) {
        FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
      }
      onload?.();
      removeRunDependency(dep);
    }
    if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
      onerror?.();
      removeRunDependency(dep);
    })) {
      return;
    }
    finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
    asyncLoad(url).then(processData, onerror);
  } else {
    processData(url);
  }
};

var FS_modeStringToFlags = str => {
  var flagModes = {
    "r": 0,
    "r+": 2,
    "w": 512 | 64 | 1,
    "w+": 512 | 64 | 2,
    "a": 1024 | 64 | 1,
    "a+": 1024 | 64 | 2
  };
  var flags = flagModes[str];
  if (typeof flags == "undefined") {
    throw new Error(`Unknown file open mode: ${str}`);
  }
  return flags;
};

var FS_getMode = (canRead, canWrite) => {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
};

var strError = errno => UTF8ToString(_strerror(errno));

var ERRNO_CODES = {
  "EPERM": 63,
  "ENOENT": 44,
  "ESRCH": 71,
  "EINTR": 27,
  "EIO": 29,
  "ENXIO": 60,
  "E2BIG": 1,
  "ENOEXEC": 45,
  "EBADF": 8,
  "ECHILD": 12,
  "EAGAIN": 6,
  "EWOULDBLOCK": 6,
  "ENOMEM": 48,
  "EACCES": 2,
  "EFAULT": 21,
  "ENOTBLK": 105,
  "EBUSY": 10,
  "EEXIST": 20,
  "EXDEV": 75,
  "ENODEV": 43,
  "ENOTDIR": 54,
  "EISDIR": 31,
  "EINVAL": 28,
  "ENFILE": 41,
  "EMFILE": 33,
  "ENOTTY": 59,
  "ETXTBSY": 74,
  "EFBIG": 22,
  "ENOSPC": 51,
  "ESPIPE": 70,
  "EROFS": 69,
  "EMLINK": 34,
  "EPIPE": 64,
  "EDOM": 18,
  "ERANGE": 68,
  "ENOMSG": 49,
  "EIDRM": 24,
  "ECHRNG": 106,
  "EL2NSYNC": 156,
  "EL3HLT": 107,
  "EL3RST": 108,
  "ELNRNG": 109,
  "EUNATCH": 110,
  "ENOCSI": 111,
  "EL2HLT": 112,
  "EDEADLK": 16,
  "ENOLCK": 46,
  "EBADE": 113,
  "EBADR": 114,
  "EXFULL": 115,
  "ENOANO": 104,
  "EBADRQC": 103,
  "EBADSLT": 102,
  "EDEADLOCK": 16,
  "EBFONT": 101,
  "ENOSTR": 100,
  "ENODATA": 116,
  "ETIME": 117,
  "ENOSR": 118,
  "ENONET": 119,
  "ENOPKG": 120,
  "EREMOTE": 121,
  "ENOLINK": 47,
  "EADV": 122,
  "ESRMNT": 123,
  "ECOMM": 124,
  "EPROTO": 65,
  "EMULTIHOP": 36,
  "EDOTDOT": 125,
  "EBADMSG": 9,
  "ENOTUNIQ": 126,
  "EBADFD": 127,
  "EREMCHG": 128,
  "ELIBACC": 129,
  "ELIBBAD": 130,
  "ELIBSCN": 131,
  "ELIBMAX": 132,
  "ELIBEXEC": 133,
  "ENOSYS": 52,
  "ENOTEMPTY": 55,
  "ENAMETOOLONG": 37,
  "ELOOP": 32,
  "EOPNOTSUPP": 138,
  "EPFNOSUPPORT": 139,
  "ECONNRESET": 15,
  "ENOBUFS": 42,
  "EAFNOSUPPORT": 5,
  "EPROTOTYPE": 67,
  "ENOTSOCK": 57,
  "ENOPROTOOPT": 50,
  "ESHUTDOWN": 140,
  "ECONNREFUSED": 14,
  "EADDRINUSE": 3,
  "ECONNABORTED": 13,
  "ENETUNREACH": 40,
  "ENETDOWN": 38,
  "ETIMEDOUT": 73,
  "EHOSTDOWN": 142,
  "EHOSTUNREACH": 23,
  "EINPROGRESS": 26,
  "EALREADY": 7,
  "EDESTADDRREQ": 17,
  "EMSGSIZE": 35,
  "EPROTONOSUPPORT": 66,
  "ESOCKTNOSUPPORT": 137,
  "EADDRNOTAVAIL": 4,
  "ENETRESET": 39,
  "EISCONN": 30,
  "ENOTCONN": 53,
  "ETOOMANYREFS": 141,
  "EUSERS": 136,
  "EDQUOT": 19,
  "ESTALE": 72,
  "ENOTSUP": 138,
  "ENOMEDIUM": 148,
  "EILSEQ": 25,
  "EOVERFLOW": 61,
  "ECANCELED": 11,
  "ENOTRECOVERABLE": 56,
  "EOWNERDEAD": 62,
  "ESTRPIPE": 135
};

var FS = {
  root: null,
  mounts: [],
  devices: {},
  streams: [],
  nextInode: 1,
  nameTable: null,
  currentPath: "/",
  initialized: false,
  ignorePermissions: true,
  ErrnoError: class extends Error {
    name="ErrnoError";
    // We set the `name` property to be able to identify `FS.ErrnoError`
    // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
    // - when using PROXYFS, an error can come from an underlying FS
    // as different FS objects have their own FS.ErrnoError each,
    // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
    // we'll use the reliable test `err.name == "ErrnoError"` instead
    constructor(errno) {
      super(runtimeInitialized ? strError(errno) : "");
      this.errno = errno;
      for (var key in ERRNO_CODES) {
        if (ERRNO_CODES[key] === errno) {
          this.code = key;
          break;
        }
      }
    }
  },
  filesystems: null,
  syncFSRequests: 0,
  readFiles: {},
  FSStream: class {
    shared={};
    get object() {
      return this.node;
    }
    set object(val) {
      this.node = val;
    }
    get isRead() {
      return (this.flags & 2097155) !== 1;
    }
    get isWrite() {
      return (this.flags & 2097155) !== 0;
    }
    get isAppend() {
      return (this.flags & 1024);
    }
    get flags() {
      return this.shared.flags;
    }
    set flags(val) {
      this.shared.flags = val;
    }
    get position() {
      return this.shared.position;
    }
    set position(val) {
      this.shared.position = val;
    }
  },
  FSNode: class {
    node_ops={};
    stream_ops={};
    readMode=292 | 73;
    writeMode=146;
    mounted=null;
    constructor(parent, name, mode, rdev) {
      if (!parent) {
        parent = this;
      }
      this.parent = parent;
      this.mount = parent.mount;
      this.id = FS.nextInode++;
      this.name = name;
      this.mode = mode;
      this.rdev = rdev;
      this.atime = this.mtime = this.ctime = Date.now();
    }
    get read() {
      return (this.mode & this.readMode) === this.readMode;
    }
    set read(val) {
      val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
    }
    get write() {
      return (this.mode & this.writeMode) === this.writeMode;
    }
    set write(val) {
      val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
    }
    get isFolder() {
      return FS.isDir(this.mode);
    }
    get isDevice() {
      return FS.isChrdev(this.mode);
    }
  },
  lookupPath(path, opts = {}) {
    if (!path) {
      throw new FS.ErrnoError(44);
    }
    opts.follow_mount ??= true;
    if (!PATH.isAbs(path)) {
      path = FS.cwd() + "/" + path;
    }
    // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
    linkloop: for (var nlinks = 0; nlinks < 40; nlinks++) {
      // split the absolute path
      var parts = path.split("/").filter(p => !!p);
      // start at the root
      var current = FS.root;
      var current_path = "/";
      for (var i = 0; i < parts.length; i++) {
        var islast = (i === parts.length - 1);
        if (islast && opts.parent) {
          // stop resolving
          break;
        }
        if (parts[i] === ".") {
          continue;
        }
        if (parts[i] === "..") {
          current_path = PATH.dirname(current_path);
          current = current.parent;
          continue;
        }
        current_path = PATH.join2(current_path, parts[i]);
        try {
          current = FS.lookupNode(current, parts[i]);
        } catch (e) {
          // if noent_okay is true, suppress a ENOENT in the last component
          // and return an object with an undefined node. This is needed for
          // resolving symlinks in the path when creating a file.
          if ((e?.errno === 44) && islast && opts.noent_okay) {
            return {
              path: current_path
            };
          }
          throw e;
        }
        // jump to the mount's root node if this is a mountpoint
        if (FS.isMountpoint(current) && (!islast || opts.follow_mount)) {
          current = current.mounted.root;
        }
        // by default, lookupPath will not follow a symlink if it is the final path component.
        // setting opts.follow = true will override this behavior.
        if (FS.isLink(current.mode) && (!islast || opts.follow)) {
          if (!current.node_ops.readlink) {
            throw new FS.ErrnoError(52);
          }
          var link = current.node_ops.readlink(current);
          if (!PATH.isAbs(link)) {
            link = PATH.dirname(current_path) + "/" + link;
          }
          path = link + "/" + parts.slice(i + 1).join("/");
          continue linkloop;
        }
      }
      return {
        path: current_path,
        node: current
      };
    }
    throw new FS.ErrnoError(32);
  },
  getPath(node) {
    var path;
    while (true) {
      if (FS.isRoot(node)) {
        var mount = node.mount.mountpoint;
        if (!path) return mount;
        return mount[mount.length - 1] !== "/" ? `${mount}/${path}` : mount + path;
      }
      path = path ? `${node.name}/${path}` : node.name;
      node = node.parent;
    }
  },
  hashName(parentid, name) {
    var hash = 0;
    for (var i = 0; i < name.length; i++) {
      hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
    }
    return ((parentid + hash) >>> 0) % FS.nameTable.length;
  },
  hashAddNode(node) {
    var hash = FS.hashName(node.parent.id, node.name);
    node.name_next = FS.nameTable[hash];
    FS.nameTable[hash] = node;
  },
  hashRemoveNode(node) {
    var hash = FS.hashName(node.parent.id, node.name);
    if (FS.nameTable[hash] === node) {
      FS.nameTable[hash] = node.name_next;
    } else {
      var current = FS.nameTable[hash];
      while (current) {
        if (current.name_next === node) {
          current.name_next = node.name_next;
          break;
        }
        current = current.name_next;
      }
    }
  },
  lookupNode(parent, name) {
    var errCode = FS.mayLookup(parent);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    var hash = FS.hashName(parent.id, name);
    for (var node = FS.nameTable[hash]; node; node = node.name_next) {
      var nodeName = node.name;
      if (node.parent.id === parent.id && nodeName === name) {
        return node;
      }
    }
    // if we failed to find it in the cache, call into the VFS
    return FS.lookup(parent, name);
  },
  createNode(parent, name, mode, rdev) {
    assert(typeof parent == "object");
    var node = new FS.FSNode(parent, name, mode, rdev);
    FS.hashAddNode(node);
    return node;
  },
  destroyNode(node) {
    FS.hashRemoveNode(node);
  },
  isRoot(node) {
    return node === node.parent;
  },
  isMountpoint(node) {
    return !!node.mounted;
  },
  isFile(mode) {
    return (mode & 61440) === 32768;
  },
  isDir(mode) {
    return (mode & 61440) === 16384;
  },
  isLink(mode) {
    return (mode & 61440) === 40960;
  },
  isChrdev(mode) {
    return (mode & 61440) === 8192;
  },
  isBlkdev(mode) {
    return (mode & 61440) === 24576;
  },
  isFIFO(mode) {
    return (mode & 61440) === 4096;
  },
  isSocket(mode) {
    return (mode & 49152) === 49152;
  },
  flagsToPermissionString(flag) {
    var perms = [ "r", "w", "rw" ][flag & 3];
    if ((flag & 512)) {
      perms += "w";
    }
    return perms;
  },
  nodePermissions(node, perms) {
    if (FS.ignorePermissions) {
      return 0;
    }
    // return 0 if any user, group or owner bits are set.
    if (perms.includes("r") && !(node.mode & 292)) {
      return 2;
    } else if (perms.includes("w") && !(node.mode & 146)) {
      return 2;
    } else if (perms.includes("x") && !(node.mode & 73)) {
      return 2;
    }
    return 0;
  },
  mayLookup(dir) {
    if (!FS.isDir(dir.mode)) return 54;
    var errCode = FS.nodePermissions(dir, "x");
    if (errCode) return errCode;
    if (!dir.node_ops.lookup) return 2;
    return 0;
  },
  mayCreate(dir, name) {
    if (!FS.isDir(dir.mode)) {
      return 54;
    }
    try {
      var node = FS.lookupNode(dir, name);
      return 20;
    } catch (e) {}
    return FS.nodePermissions(dir, "wx");
  },
  mayDelete(dir, name, isdir) {
    var node;
    try {
      node = FS.lookupNode(dir, name);
    } catch (e) {
      return e.errno;
    }
    var errCode = FS.nodePermissions(dir, "wx");
    if (errCode) {
      return errCode;
    }
    if (isdir) {
      if (!FS.isDir(node.mode)) {
        return 54;
      }
      if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
        return 10;
      }
    } else {
      if (FS.isDir(node.mode)) {
        return 31;
      }
    }
    return 0;
  },
  mayOpen(node, flags) {
    if (!node) {
      return 44;
    }
    if (FS.isLink(node.mode)) {
      return 32;
    } else if (FS.isDir(node.mode)) {
      if (FS.flagsToPermissionString(flags) !== "r" || (flags & (512 | 64))) {
        // TODO: check for O_SEARCH? (== search for dir only)
        return 31;
      }
    }
    return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
  },
  checkOpExists(op, err) {
    if (!op) {
      throw new FS.ErrnoError(err);
    }
    return op;
  },
  MAX_OPEN_FDS: 4096,
  nextfd() {
    for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
      if (!FS.streams[fd]) {
        return fd;
      }
    }
    throw new FS.ErrnoError(33);
  },
  getStreamChecked(fd) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(8);
    }
    return stream;
  },
  getStream: fd => FS.streams[fd],
  createStream(stream, fd = -1) {
    assert(fd >= -1);
    // clone it, so we can return an instance of FSStream
    stream = Object.assign(new FS.FSStream, stream);
    if (fd == -1) {
      fd = FS.nextfd();
    }
    stream.fd = fd;
    FS.streams[fd] = stream;
    return stream;
  },
  closeStream(fd) {
    FS.streams[fd] = null;
  },
  dupStream(origStream, fd = -1) {
    var stream = FS.createStream(origStream, fd);
    stream.stream_ops?.dup?.(stream);
    return stream;
  },
  chrdev_stream_ops: {
    open(stream) {
      var device = FS.getDevice(stream.node.rdev);
      // override node's stream ops with the device's
      stream.stream_ops = device.stream_ops;
      // forward the open call
      stream.stream_ops.open?.(stream);
    },
    llseek() {
      throw new FS.ErrnoError(70);
    }
  },
  major: dev => ((dev) >> 8),
  minor: dev => ((dev) & 255),
  makedev: (ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
    FS.devices[dev] = {
      stream_ops: ops
    };
  },
  getDevice: dev => FS.devices[dev],
  getMounts(mount) {
    var mounts = [];
    var check = [ mount ];
    while (check.length) {
      var m = check.pop();
      mounts.push(m);
      check.push(...m.mounts);
    }
    return mounts;
  },
  syncfs(populate, callback) {
    if (typeof populate == "function") {
      callback = populate;
      populate = false;
    }
    FS.syncFSRequests++;
    if (FS.syncFSRequests > 1) {
      err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
    }
    var mounts = FS.getMounts(FS.root.mount);
    var completed = 0;
    function doCallback(errCode) {
      assert(FS.syncFSRequests > 0);
      FS.syncFSRequests--;
      return callback(errCode);
    }
    function done(errCode) {
      if (errCode) {
        if (!done.errored) {
          done.errored = true;
          return doCallback(errCode);
        }
        return;
      }
      if (++completed >= mounts.length) {
        doCallback(null);
      }
    }
    // sync all mounts
    mounts.forEach(mount => {
      if (!mount.type.syncfs) {
        return done(null);
      }
      mount.type.syncfs(mount, populate, done);
    });
  },
  mount(type, opts, mountpoint) {
    if (typeof type == "string") {
      // The filesystem was not included, and instead we have an error
      // message stored in the variable.
      throw type;
    }
    var root = mountpoint === "/";
    var pseudo = !mountpoint;
    var node;
    if (root && FS.root) {
      throw new FS.ErrnoError(10);
    } else if (!root && !pseudo) {
      var lookup = FS.lookupPath(mountpoint, {
        follow_mount: false
      });
      mountpoint = lookup.path;
      // use the absolute path
      node = lookup.node;
      if (FS.isMountpoint(node)) {
        throw new FS.ErrnoError(10);
      }
      if (!FS.isDir(node.mode)) {
        throw new FS.ErrnoError(54);
      }
    }
    var mount = {
      type,
      opts,
      mountpoint,
      mounts: []
    };
    // create a root node for the fs
    var mountRoot = type.mount(mount);
    mountRoot.mount = mount;
    mount.root = mountRoot;
    if (root) {
      FS.root = mountRoot;
    } else if (node) {
      // set as a mountpoint
      node.mounted = mount;
      // add the new mount to the current mount's children
      if (node.mount) {
        node.mount.mounts.push(mount);
      }
    }
    return mountRoot;
  },
  unmount(mountpoint) {
    var lookup = FS.lookupPath(mountpoint, {
      follow_mount: false
    });
    if (!FS.isMountpoint(lookup.node)) {
      throw new FS.ErrnoError(28);
    }
    // destroy the nodes for this mount, and all its child mounts
    var node = lookup.node;
    var mount = node.mounted;
    var mounts = FS.getMounts(mount);
    Object.keys(FS.nameTable).forEach(hash => {
      var current = FS.nameTable[hash];
      while (current) {
        var next = current.name_next;
        if (mounts.includes(current.mount)) {
          FS.destroyNode(current);
        }
        current = next;
      }
    });
    // no longer a mountpoint
    node.mounted = null;
    // remove this mount from the child mounts
    var idx = node.mount.mounts.indexOf(mount);
    assert(idx !== -1);
    node.mount.mounts.splice(idx, 1);
  },
  lookup(parent, name) {
    return parent.node_ops.lookup(parent, name);
  },
  mknod(path, mode, dev) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    if (!name) {
      throw new FS.ErrnoError(28);
    }
    if (name === "." || name === "..") {
      throw new FS.ErrnoError(20);
    }
    var errCode = FS.mayCreate(parent, name);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.mknod) {
      throw new FS.ErrnoError(63);
    }
    return parent.node_ops.mknod(parent, name, mode, dev);
  },
  statfs(path) {
    return FS.statfsNode(FS.lookupPath(path, {
      follow: true
    }).node);
  },
  statfsStream(stream) {
    // We keep a separate statfsStream function because noderawfs overrides
    // it. In noderawfs, stream.node is sometimes null. Instead, we need to
    // look at stream.path.
    return FS.statfsNode(stream.node);
  },
  statfsNode(node) {
    // NOTE: None of the defaults here are true. We're just returning safe and
    //       sane values. Currently nodefs and rawfs replace these defaults,
    //       other file systems leave them alone.
    var rtn = {
      bsize: 4096,
      frsize: 4096,
      blocks: 1e6,
      bfree: 5e5,
      bavail: 5e5,
      files: FS.nextInode,
      ffree: FS.nextInode - 1,
      fsid: 42,
      flags: 2,
      namelen: 255
    };
    if (node.node_ops.statfs) {
      Object.assign(rtn, node.node_ops.statfs(node.mount.opts.root));
    }
    return rtn;
  },
  create(path, mode = 438) {
    mode &= 4095;
    mode |= 32768;
    return FS.mknod(path, mode, 0);
  },
  mkdir(path, mode = 511) {
    mode &= 511 | 512;
    mode |= 16384;
    return FS.mknod(path, mode, 0);
  },
  mkdirTree(path, mode) {
    var dirs = path.split("/");
    var d = "";
    for (var i = 0; i < dirs.length; ++i) {
      if (!dirs[i]) continue;
      d += "/" + dirs[i];
      try {
        FS.mkdir(d, mode);
      } catch (e) {
        if (e.errno != 20) throw e;
      }
    }
  },
  mkdev(path, mode, dev) {
    if (typeof dev == "undefined") {
      dev = mode;
      mode = 438;
    }
    mode |= 8192;
    return FS.mknod(path, mode, dev);
  },
  symlink(oldpath, newpath) {
    if (!PATH_FS.resolve(oldpath)) {
      throw new FS.ErrnoError(44);
    }
    var lookup = FS.lookupPath(newpath, {
      parent: true
    });
    var parent = lookup.node;
    if (!parent) {
      throw new FS.ErrnoError(44);
    }
    var newname = PATH.basename(newpath);
    var errCode = FS.mayCreate(parent, newname);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.symlink) {
      throw new FS.ErrnoError(63);
    }
    return parent.node_ops.symlink(parent, newname, oldpath);
  },
  rename(old_path, new_path) {
    var old_dirname = PATH.dirname(old_path);
    var new_dirname = PATH.dirname(new_path);
    var old_name = PATH.basename(old_path);
    var new_name = PATH.basename(new_path);
    // parents must exist
    var lookup, old_dir, new_dir;
    // let the errors from non existent directories percolate up
    lookup = FS.lookupPath(old_path, {
      parent: true
    });
    old_dir = lookup.node;
    lookup = FS.lookupPath(new_path, {
      parent: true
    });
    new_dir = lookup.node;
    if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
    // need to be part of the same mount
    if (old_dir.mount !== new_dir.mount) {
      throw new FS.ErrnoError(75);
    }
    // source must exist
    var old_node = FS.lookupNode(old_dir, old_name);
    // old path should not be an ancestor of the new path
    var relative = PATH_FS.relative(old_path, new_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(28);
    }
    // new path should not be an ancestor of the old path
    relative = PATH_FS.relative(new_path, old_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(55);
    }
    // see if the new path already exists
    var new_node;
    try {
      new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    // early out if nothing needs to change
    if (old_node === new_node) {
      return;
    }
    // we'll need to delete the old entry
    var isdir = FS.isDir(old_node.mode);
    var errCode = FS.mayDelete(old_dir, old_name, isdir);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    // need delete permissions if we'll be overwriting.
    // need create permissions if new doesn't already exist.
    errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!old_dir.node_ops.rename) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
      throw new FS.ErrnoError(10);
    }
    // if we are going to change the parent, check write permissions
    if (new_dir !== old_dir) {
      errCode = FS.nodePermissions(old_dir, "w");
      if (errCode) {
        throw new FS.ErrnoError(errCode);
      }
    }
    // remove the node from the lookup hash
    FS.hashRemoveNode(old_node);
    // do the underlying fs rename
    try {
      old_dir.node_ops.rename(old_node, new_dir, new_name);
      // update old node (we do this here to avoid each backend
      // needing to)
      old_node.parent = new_dir;
    } catch (e) {
      throw e;
    } finally {
      // add the node back to the hash (in case node_ops.rename
      // changed its name)
      FS.hashAddNode(old_node);
    }
  },
  rmdir(path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var errCode = FS.mayDelete(parent, name, true);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.rmdir) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(10);
    }
    parent.node_ops.rmdir(parent, name);
    FS.destroyNode(node);
  },
  readdir(path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    var readdir = FS.checkOpExists(node.node_ops.readdir, 54);
    return readdir(node);
  },
  unlink(path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    if (!parent) {
      throw new FS.ErrnoError(44);
    }
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var errCode = FS.mayDelete(parent, name, false);
    if (errCode) {
      // According to POSIX, we should map EISDIR to EPERM, but
      // we instead do what Linux does (and we must, as we use
      // the musl linux libc).
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.unlink) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(10);
    }
    parent.node_ops.unlink(parent, name);
    FS.destroyNode(node);
  },
  readlink(path) {
    var lookup = FS.lookupPath(path);
    var link = lookup.node;
    if (!link) {
      throw new FS.ErrnoError(44);
    }
    if (!link.node_ops.readlink) {
      throw new FS.ErrnoError(28);
    }
    return link.node_ops.readlink(link);
  },
  stat(path, dontFollow) {
    var lookup = FS.lookupPath(path, {
      follow: !dontFollow
    });
    var node = lookup.node;
    var getattr = FS.checkOpExists(node.node_ops.getattr, 63);
    return getattr(node);
  },
  lstat(path) {
    return FS.stat(path, true);
  },
  chmod(path, mode, dontFollow) {
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      });
      node = lookup.node;
    } else {
      node = path;
    }
    var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
    setattr(node, {
      mode: (mode & 4095) | (node.mode & ~4095),
      ctime: Date.now(),
      dontFollow
    });
  },
  lchmod(path, mode) {
    FS.chmod(path, mode, true);
  },
  fchmod(fd, mode) {
    var stream = FS.getStreamChecked(fd);
    FS.chmod(stream.node, mode);
  },
  chown(path, uid, gid, dontFollow) {
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      });
      node = lookup.node;
    } else {
      node = path;
    }
    var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
    setattr(node, {
      timestamp: Date.now(),
      dontFollow
    });
  },
  lchown(path, uid, gid) {
    FS.chown(path, uid, gid, true);
  },
  fchown(fd, uid, gid) {
    var stream = FS.getStreamChecked(fd);
    FS.chown(stream.node, uid, gid);
  },
  truncate(path, len) {
    if (len < 0) {
      throw new FS.ErrnoError(28);
    }
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: true
      });
      node = lookup.node;
    } else {
      node = path;
    }
    if (FS.isDir(node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!FS.isFile(node.mode)) {
      throw new FS.ErrnoError(28);
    }
    var errCode = FS.nodePermissions(node, "w");
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
    setattr(node, {
      size: len,
      timestamp: Date.now()
    });
  },
  ftruncate(fd, len) {
    var stream = FS.getStreamChecked(fd);
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(28);
    }
    FS.truncate(stream.node, len);
  },
  utime(path, atime, mtime) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
    setattr(node, {
      atime,
      mtime
    });
  },
  open(path, flags, mode = 438) {
    if (path === "") {
      throw new FS.ErrnoError(44);
    }
    flags = typeof flags == "string" ? FS_modeStringToFlags(flags) : flags;
    if ((flags & 64)) {
      mode = (mode & 4095) | 32768;
    } else {
      mode = 0;
    }
    var node;
    var isDirPath;
    if (typeof path == "object") {
      node = path;
    } else {
      isDirPath = path.endsWith("/");
      // noent_okay makes it so that if the final component of the path
      // doesn't exist, lookupPath returns `node: undefined`. `path` will be
      // updated to point to the target of all symlinks.
      var lookup = FS.lookupPath(path, {
        follow: !(flags & 131072),
        noent_okay: true
      });
      node = lookup.node;
      path = lookup.path;
    }
    // perhaps we need to create the node
    var created = false;
    if ((flags & 64)) {
      if (node) {
        // if O_CREAT and O_EXCL are set, error out if the node already exists
        if ((flags & 128)) {
          throw new FS.ErrnoError(20);
        }
      } else if (isDirPath) {
        throw new FS.ErrnoError(31);
      } else {
        // node doesn't exist, try to create it
        // Ignore the permission bits here to ensure we can `open` this new
        // file below. We use chmod below the apply the permissions once the
        // file is open.
        node = FS.mknod(path, mode | 511, 0);
        created = true;
      }
    }
    if (!node) {
      throw new FS.ErrnoError(44);
    }
    // can't truncate a device
    if (FS.isChrdev(node.mode)) {
      flags &= ~512;
    }
    // if asked only for a directory, then this must be one
    if ((flags & 65536) && !FS.isDir(node.mode)) {
      throw new FS.ErrnoError(54);
    }
    // check permissions, if this is not a file we just created now (it is ok to
    // create and write to a file with read-only permissions; it is read-only
    // for later use)
    if (!created) {
      var errCode = FS.mayOpen(node, flags);
      if (errCode) {
        throw new FS.ErrnoError(errCode);
      }
    }
    // do truncation if necessary
    if ((flags & 512) && !created) {
      FS.truncate(node, 0);
    }
    // we've already handled these, don't pass down to the underlying vfs
    flags &= ~(128 | 512 | 131072);
    // register the stream with the filesystem
    var stream = FS.createStream({
      node,
      path: FS.getPath(node),
      // we want the absolute path to the node
      flags,
      seekable: true,
      position: 0,
      stream_ops: node.stream_ops,
      // used by the file family libc calls (fopen, fwrite, ferror, etc.)
      ungotten: [],
      error: false
    });
    // call the new stream's open function
    if (stream.stream_ops.open) {
      stream.stream_ops.open(stream);
    }
    if (created) {
      FS.chmod(node, mode & 511);
    }
    if (Module["logReadFiles"] && !(flags & 1)) {
      if (!(path in FS.readFiles)) {
        FS.readFiles[path] = 1;
      }
    }
    return stream;
  },
  close(stream) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (stream.getdents) stream.getdents = null;
    // free readdir state
    try {
      if (stream.stream_ops.close) {
        stream.stream_ops.close(stream);
      }
    } catch (e) {
      throw e;
    } finally {
      FS.closeStream(stream.fd);
    }
    stream.fd = null;
  },
  isClosed(stream) {
    return stream.fd === null;
  },
  llseek(stream, offset, whence) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (!stream.seekable || !stream.stream_ops.llseek) {
      throw new FS.ErrnoError(70);
    }
    if (whence != 0 && whence != 1 && whence != 2) {
      throw new FS.ErrnoError(28);
    }
    stream.position = stream.stream_ops.llseek(stream, offset, whence);
    stream.ungotten = [];
    return stream.position;
  },
  read(stream, buffer, offset, length, position) {
    assert(offset >= 0);
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(28);
    }
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(8);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!stream.stream_ops.read) {
      throw new FS.ErrnoError(28);
    }
    var seeking = typeof position != "undefined";
    if (!seeking) {
      position = stream.position;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(70);
    }
    var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
    if (!seeking) stream.position += bytesRead;
    return bytesRead;
  },
  write(stream, buffer, offset, length, position, canOwn) {
    assert(offset >= 0);
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(28);
    }
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(8);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!stream.stream_ops.write) {
      throw new FS.ErrnoError(28);
    }
    if (stream.seekable && stream.flags & 1024) {
      // seek to the end before writing in append mode
      FS.llseek(stream, 0, 2);
    }
    var seeking = typeof position != "undefined";
    if (!seeking) {
      position = stream.position;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(70);
    }
    var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
    if (!seeking) stream.position += bytesWritten;
    return bytesWritten;
  },
  allocate(stream, offset, length) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (offset < 0 || length <= 0) {
      throw new FS.ErrnoError(28);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(8);
    }
    if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(43);
    }
    if (!stream.stream_ops.allocate) {
      throw new FS.ErrnoError(138);
    }
    stream.stream_ops.allocate(stream, offset, length);
  },
  mmap(stream, length, position, prot, flags) {
    // User requests writing to file (prot & PROT_WRITE != 0).
    // Checking if we have permissions to write to the file unless
    // MAP_PRIVATE flag is set. According to POSIX spec it is possible
    // to write to file opened in read-only mode with MAP_PRIVATE flag,
    // as all modifications will be visible only in the memory of
    // the current process.
    if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
      throw new FS.ErrnoError(2);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(2);
    }
    if (!stream.stream_ops.mmap) {
      throw new FS.ErrnoError(43);
    }
    if (!length) {
      throw new FS.ErrnoError(28);
    }
    return stream.stream_ops.mmap(stream, length, position, prot, flags);
  },
  msync(stream, buffer, offset, length, mmapFlags) {
    assert(offset >= 0);
    if (!stream.stream_ops.msync) {
      return 0;
    }
    return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
  },
  ioctl(stream, cmd, arg) {
    if (!stream.stream_ops.ioctl) {
      throw new FS.ErrnoError(59);
    }
    return stream.stream_ops.ioctl(stream, cmd, arg);
  },
  readFile(path, opts = {}) {
    opts.flags = opts.flags || 0;
    opts.encoding = opts.encoding || "binary";
    if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
      throw new Error(`Invalid encoding type "${opts.encoding}"`);
    }
    var ret;
    var stream = FS.open(path, opts.flags);
    var stat = FS.stat(path);
    var length = stat.size;
    var buf = new Uint8Array(length);
    FS.read(stream, buf, 0, length, 0);
    if (opts.encoding === "utf8") {
      ret = UTF8ArrayToString(buf);
    } else if (opts.encoding === "binary") {
      ret = buf;
    }
    FS.close(stream);
    return ret;
  },
  writeFile(path, data, opts = {}) {
    opts.flags = opts.flags || 577;
    var stream = FS.open(path, opts.flags, opts.mode);
    if (typeof data == "string") {
      var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
      var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
      FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
    } else if (ArrayBuffer.isView(data)) {
      FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
    } else {
      throw new Error("Unsupported data type");
    }
    FS.close(stream);
  },
  cwd: () => FS.currentPath,
  chdir(path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    if (lookup.node === null) {
      throw new FS.ErrnoError(44);
    }
    if (!FS.isDir(lookup.node.mode)) {
      throw new FS.ErrnoError(54);
    }
    var errCode = FS.nodePermissions(lookup.node, "x");
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    FS.currentPath = lookup.path;
  },
  createDefaultDirectories() {
    FS.mkdir("/tmp");
    FS.mkdir("/home");
    FS.mkdir("/home/web_user");
  },
  createDefaultDevices() {
    // create /dev
    FS.mkdir("/dev");
    // setup /dev/null
    FS.registerDevice(FS.makedev(1, 3), {
      read: () => 0,
      write: (stream, buffer, offset, length, pos) => length,
      llseek: () => 0
    });
    FS.mkdev("/dev/null", FS.makedev(1, 3));
    // setup /dev/tty and /dev/tty1
    // stderr needs to print output using err() rather than out()
    // so we register a second tty just for it.
    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
    FS.mkdev("/dev/tty", FS.makedev(5, 0));
    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
    // setup /dev/[u]random
    // use a buffer to avoid overhead of individual crypto calls per byte
    var randomBuffer = new Uint8Array(1024), randomLeft = 0;
    var randomByte = () => {
      if (randomLeft === 0) {
        randomFill(randomBuffer);
        randomLeft = randomBuffer.byteLength;
      }
      return randomBuffer[--randomLeft];
    };
    FS.createDevice("/dev", "random", randomByte);
    FS.createDevice("/dev", "urandom", randomByte);
    // we're not going to emulate the actual shm device,
    // just create the tmp dirs that reside in it commonly
    FS.mkdir("/dev/shm");
    FS.mkdir("/dev/shm/tmp");
  },
  createSpecialDirectories() {
    // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
    // name of the stream for fd 6 (see test_unistd_ttyname)
    FS.mkdir("/proc");
    var proc_self = FS.mkdir("/proc/self");
    FS.mkdir("/proc/self/fd");
    FS.mount({
      mount() {
        var node = FS.createNode(proc_self, "fd", 16895, 73);
        node.stream_ops = {
          llseek: MEMFS.stream_ops.llseek
        };
        node.node_ops = {
          lookup(parent, name) {
            var fd = +name;
            var stream = FS.getStreamChecked(fd);
            var ret = {
              parent: null,
              mount: {
                mountpoint: "fake"
              },
              node_ops: {
                readlink: () => stream.path
              },
              id: fd + 1
            };
            ret.parent = ret;
            // make it look like a simple root node
            return ret;
          },
          readdir() {
            return Array.from(FS.streams.entries()).filter(([k, v]) => v).map(([k, v]) => k.toString());
          }
        };
        return node;
      }
    }, {}, "/proc/self/fd");
  },
  createStandardStreams(input, output, error) {
    // TODO deprecate the old functionality of a single
    // input / output callback and that utilizes FS.createDevice
    // and instead require a unique set of stream ops
    // by default, we symlink the standard streams to the
    // default tty devices. however, if the standard streams
    // have been overwritten we create a unique device for
    // them instead.
    if (input) {
      FS.createDevice("/dev", "stdin", input);
    } else {
      FS.symlink("/dev/tty", "/dev/stdin");
    }
    if (output) {
      FS.createDevice("/dev", "stdout", null, output);
    } else {
      FS.symlink("/dev/tty", "/dev/stdout");
    }
    if (error) {
      FS.createDevice("/dev", "stderr", null, error);
    } else {
      FS.symlink("/dev/tty1", "/dev/stderr");
    }
    // open default streams for the stdin, stdout and stderr devices
    var stdin = FS.open("/dev/stdin", 0);
    var stdout = FS.open("/dev/stdout", 1);
    var stderr = FS.open("/dev/stderr", 1);
    assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
    assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
    assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
  },
  staticInit() {
    FS.nameTable = new Array(4096);
    FS.mount(MEMFS, {}, "/");
    FS.createDefaultDirectories();
    FS.createDefaultDevices();
    FS.createSpecialDirectories();
    FS.filesystems = {
      "MEMFS": MEMFS
    };
  },
  init(input, output, error) {
    assert(!FS.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
    FS.initialized = true;
    // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
    input ??= Module["stdin"];
    output ??= Module["stdout"];
    error ??= Module["stderr"];
    FS.createStandardStreams(input, output, error);
  },
  quit() {
    FS.initialized = false;
    // force-flush all streams, so we get musl std streams printed out
    _fflush(0);
    // close all of our streams
    for (var i = 0; i < FS.streams.length; i++) {
      var stream = FS.streams[i];
      if (!stream) {
        continue;
      }
      FS.close(stream);
    }
  },
  findObject(path, dontResolveLastLink) {
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (!ret.exists) {
      return null;
    }
    return ret.object;
  },
  analyzePath(path, dontResolveLastLink) {
    // operate from within the context of the symlink's target
    try {
      var lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      });
      path = lookup.path;
    } catch (e) {}
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    try {
      var lookup = FS.lookupPath(path, {
        parent: true
      });
      ret.parentExists = true;
      ret.parentPath = lookup.path;
      ret.parentObject = lookup.node;
      ret.name = PATH.basename(path);
      lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      });
      ret.exists = true;
      ret.path = lookup.path;
      ret.object = lookup.node;
      ret.name = lookup.node.name;
      ret.isRoot = lookup.path === "/";
    } catch (e) {
      ret.error = e.errno;
    }
    return ret;
  },
  createPath(parent, path, canRead, canWrite) {
    parent = typeof parent == "string" ? parent : FS.getPath(parent);
    var parts = path.split("/").reverse();
    while (parts.length) {
      var part = parts.pop();
      if (!part) continue;
      var current = PATH.join2(parent, part);
      try {
        FS.mkdir(current);
      } catch (e) {}
      parent = current;
    }
    return current;
  },
  createFile(parent, name, properties, canRead, canWrite) {
    var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
    var mode = FS_getMode(canRead, canWrite);
    return FS.create(path, mode);
  },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
    var path = name;
    if (parent) {
      parent = typeof parent == "string" ? parent : FS.getPath(parent);
      path = name ? PATH.join2(parent, name) : parent;
    }
    var mode = FS_getMode(canRead, canWrite);
    var node = FS.create(path, mode);
    if (data) {
      if (typeof data == "string") {
        var arr = new Array(data.length);
        for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
        data = arr;
      }
      // make sure we can write to the file
      FS.chmod(node, mode | 146);
      var stream = FS.open(node, 577);
      FS.write(stream, data, 0, data.length, 0, canOwn);
      FS.close(stream);
      FS.chmod(node, mode);
    }
  },
  createDevice(parent, name, input, output) {
    var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
    var mode = FS_getMode(!!input, !!output);
    FS.createDevice.major ??= 64;
    var dev = FS.makedev(FS.createDevice.major++, 0);
    // Create a fake device that a set of stream ops to emulate
    // the old behavior.
    FS.registerDevice(dev, {
      open(stream) {
        stream.seekable = false;
      },
      close(stream) {
        // flush any pending line data
        if (output?.buffer?.length) {
          output(10);
        }
      },
      read(stream, buffer, offset, length, pos) {
        var bytesRead = 0;
        for (var i = 0; i < length; i++) {
          var result;
          try {
            result = input();
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (result === undefined && bytesRead === 0) {
            throw new FS.ErrnoError(6);
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          buffer[offset + i] = result;
        }
        if (bytesRead) {
          stream.node.atime = Date.now();
        }
        return bytesRead;
      },
      write(stream, buffer, offset, length, pos) {
        for (var i = 0; i < length; i++) {
          try {
            output(buffer[offset + i]);
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
        if (length) {
          stream.node.mtime = stream.node.ctime = Date.now();
        }
        return i;
      }
    });
    return FS.mkdev(path, mode, dev);
  },
  forceLoadFile(obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    if (typeof XMLHttpRequest != "undefined") {
      throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
    } else {
      // Command-line.
      try {
        obj.contents = readBinary(obj.url);
        obj.usedBytes = obj.contents.length;
      } catch (e) {
        throw new FS.ErrnoError(29);
      }
    }
  },
  createLazyFile(parent, name, url, canRead, canWrite) {
    // Lazy chunked Uint8Array (implements get and length from Uint8Array).
    // Actual getting is abstracted away for eventual reuse.
    class LazyUint8Array {
      lengthKnown=false;
      chunks=[];
      // Loaded chunks. Index is the chunk number
      get(idx) {
        if (idx > this.length - 1 || idx < 0) {
          return undefined;
        }
        var chunkOffset = idx % this.chunkSize;
        var chunkNum = (idx / this.chunkSize) | 0;
        return this.getter(chunkNum)[chunkOffset];
      }
      setDataGetter(getter) {
        this.getter = getter;
      }
      cacheLength() {
        // Find length
        var xhr = new XMLHttpRequest;
        xhr.open("HEAD", url, false);
        xhr.send(null);
        if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
        var datalength = Number(xhr.getResponseHeader("Content-length"));
        var header;
        var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
        var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
        var chunkSize = 1024 * 1024;
        // Chunk size in bytes
        if (!hasByteServing) chunkSize = datalength;
        // Function to get a range from the remote URL.
        var doXHR = (from, to) => {
          if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
          if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
          // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
          var xhr = new XMLHttpRequest;
          xhr.open("GET", url, false);
          if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
          // Some hints to the browser that we want binary data.
          xhr.responseType = "arraybuffer";
          if (xhr.overrideMimeType) {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
          }
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          if (xhr.response !== undefined) {
            return new Uint8Array(/** @type{Array<number>} */ (xhr.response || []));
          }
          return intArrayFromString(xhr.responseText || "", true);
        };
        var lazyArray = this;
        lazyArray.setDataGetter(chunkNum => {
          var start = chunkNum * chunkSize;
          var end = (chunkNum + 1) * chunkSize - 1;
          // including this byte
          end = Math.min(end, datalength - 1);
          // if datalength-1 is selected, this is the last block
          if (typeof lazyArray.chunks[chunkNum] == "undefined") {
            lazyArray.chunks[chunkNum] = doXHR(start, end);
          }
          if (typeof lazyArray.chunks[chunkNum] == "undefined") throw new Error("doXHR failed!");
          return lazyArray.chunks[chunkNum];
        });
        if (usesGzip || !datalength) {
          // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
          chunkSize = datalength = 1;
          // this will force getter(0)/doXHR do download the whole file
          datalength = this.getter(0).length;
          chunkSize = datalength;
          out("LazyFiles on gzip forces download of the whole file when length is accessed");
        }
        this._length = datalength;
        this._chunkSize = chunkSize;
        this.lengthKnown = true;
      }
      get length() {
        if (!this.lengthKnown) {
          this.cacheLength();
        }
        return this._length;
      }
      get chunkSize() {
        if (!this.lengthKnown) {
          this.cacheLength();
        }
        return this._chunkSize;
      }
    }
    if (typeof XMLHttpRequest != "undefined") {
      if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
      var lazyArray = new LazyUint8Array;
      var properties = {
        isDevice: false,
        contents: lazyArray
      };
    } else {
      var properties = {
        isDevice: false,
        url
      };
    }
    var node = FS.createFile(parent, name, properties, canRead, canWrite);
    // This is a total hack, but I want to get this lazy file code out of the
    // core of MEMFS. If we want to keep this lazy file concept I feel it should
    // be its own thin LAZYFS proxying calls to MEMFS.
    if (properties.contents) {
      node.contents = properties.contents;
    } else if (properties.url) {
      node.contents = null;
      node.url = properties.url;
    }
    // Add a function that defers querying the file size until it is asked the first time.
    Object.defineProperties(node, {
      usedBytes: {
        get: function() {
          return this.contents.length;
        }
      }
    });
    // override each stream op with one that tries to force load the lazy file first
    var stream_ops = {};
    var keys = Object.keys(node.stream_ops);
    keys.forEach(key => {
      var fn = node.stream_ops[key];
      stream_ops[key] = (...args) => {
        FS.forceLoadFile(node);
        return fn(...args);
      };
    });
    function writeChunks(stream, buffer, offset, length, position) {
      var contents = stream.node.contents;
      if (position >= contents.length) return 0;
      var size = Math.min(contents.length - position, length);
      assert(size >= 0);
      if (contents.slice) {
        // normal array
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents[position + i];
        }
      } else {
        for (var i = 0; i < size; i++) {
          // LazyUint8Array from sync binary XHR
          buffer[offset + i] = contents.get(position + i);
        }
      }
      return size;
    }
    // use a custom read function
    stream_ops.read = (stream, buffer, offset, length, position) => {
      FS.forceLoadFile(node);
      return writeChunks(stream, buffer, offset, length, position);
    };
    // use a custom mmap function
    stream_ops.mmap = (stream, length, position, prot, flags) => {
      FS.forceLoadFile(node);
      var ptr = mmapAlloc(length);
      if (!ptr) {
        throw new FS.ErrnoError(48);
      }
      writeChunks(stream, GROWABLE_HEAP_I8(), ptr, length, position);
      return {
        ptr,
        allocated: true
      };
    };
    node.stream_ops = stream_ops;
    return node;
  },
  absolutePath() {
    abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");
  },
  createFolder() {
    abort("FS.createFolder has been removed; use FS.mkdir instead");
  },
  createLink() {
    abort("FS.createLink has been removed; use FS.symlink instead");
  },
  joinPath() {
    abort("FS.joinPath has been removed; use PATH.join instead");
  },
  mmapAlloc() {
    abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
  },
  standardizePath() {
    abort("FS.standardizePath has been removed; use PATH.normalize instead");
  }
};

var SYSCALLS = {
  DEFAULT_POLLMASK: 5,
  calculateAt(dirfd, path, allowEmpty) {
    if (PATH.isAbs(path)) {
      return path;
    }
    // relative path
    var dir;
    if (dirfd === -100) {
      dir = FS.cwd();
    } else {
      var dirstream = SYSCALLS.getStreamFromFD(dirfd);
      dir = dirstream.path;
    }
    if (path.length == 0) {
      if (!allowEmpty) {
        throw new FS.ErrnoError(44);
      }
      return dir;
    }
    return dir + "/" + path;
  },
  writeStat(buf, stat) {
    GROWABLE_HEAP_I32()[((buf) >> 2)] = stat.dev;
    GROWABLE_HEAP_I32()[(((buf) + (4)) >> 2)] = stat.mode;
    GROWABLE_HEAP_U32()[(((buf) + (8)) >> 2)] = stat.nlink;
    GROWABLE_HEAP_I32()[(((buf) + (12)) >> 2)] = stat.uid;
    GROWABLE_HEAP_I32()[(((buf) + (16)) >> 2)] = stat.gid;
    GROWABLE_HEAP_I32()[(((buf) + (20)) >> 2)] = stat.rdev;
    (tempI64 = [ stat.size >>> 0, (tempDouble = stat.size, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    GROWABLE_HEAP_I32()[(((buf) + (24)) >> 2)] = tempI64[0], GROWABLE_HEAP_I32()[(((buf) + (28)) >> 2)] = tempI64[1]);
    GROWABLE_HEAP_I32()[(((buf) + (32)) >> 2)] = 4096;
    GROWABLE_HEAP_I32()[(((buf) + (36)) >> 2)] = stat.blocks;
    var atime = stat.atime.getTime();
    var mtime = stat.mtime.getTime();
    var ctime = stat.ctime.getTime();
    (tempI64 = [ Math.floor(atime / 1e3) >>> 0, (tempDouble = Math.floor(atime / 1e3), 
    (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    GROWABLE_HEAP_I32()[(((buf) + (40)) >> 2)] = tempI64[0], GROWABLE_HEAP_I32()[(((buf) + (44)) >> 2)] = tempI64[1]);
    GROWABLE_HEAP_U32()[(((buf) + (48)) >> 2)] = (atime % 1e3) * 1e3 * 1e3;
    (tempI64 = [ Math.floor(mtime / 1e3) >>> 0, (tempDouble = Math.floor(mtime / 1e3), 
    (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    GROWABLE_HEAP_I32()[(((buf) + (56)) >> 2)] = tempI64[0], GROWABLE_HEAP_I32()[(((buf) + (60)) >> 2)] = tempI64[1]);
    GROWABLE_HEAP_U32()[(((buf) + (64)) >> 2)] = (mtime % 1e3) * 1e3 * 1e3;
    (tempI64 = [ Math.floor(ctime / 1e3) >>> 0, (tempDouble = Math.floor(ctime / 1e3), 
    (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    GROWABLE_HEAP_I32()[(((buf) + (72)) >> 2)] = tempI64[0], GROWABLE_HEAP_I32()[(((buf) + (76)) >> 2)] = tempI64[1]);
    GROWABLE_HEAP_U32()[(((buf) + (80)) >> 2)] = (ctime % 1e3) * 1e3 * 1e3;
    (tempI64 = [ stat.ino >>> 0, (tempDouble = stat.ino, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    GROWABLE_HEAP_I32()[(((buf) + (88)) >> 2)] = tempI64[0], GROWABLE_HEAP_I32()[(((buf) + (92)) >> 2)] = tempI64[1]);
    return 0;
  },
  writeStatFs(buf, stats) {
    GROWABLE_HEAP_I32()[(((buf) + (4)) >> 2)] = stats.bsize;
    GROWABLE_HEAP_I32()[(((buf) + (40)) >> 2)] = stats.bsize;
    GROWABLE_HEAP_I32()[(((buf) + (8)) >> 2)] = stats.blocks;
    GROWABLE_HEAP_I32()[(((buf) + (12)) >> 2)] = stats.bfree;
    GROWABLE_HEAP_I32()[(((buf) + (16)) >> 2)] = stats.bavail;
    GROWABLE_HEAP_I32()[(((buf) + (20)) >> 2)] = stats.files;
    GROWABLE_HEAP_I32()[(((buf) + (24)) >> 2)] = stats.ffree;
    GROWABLE_HEAP_I32()[(((buf) + (28)) >> 2)] = stats.fsid;
    GROWABLE_HEAP_I32()[(((buf) + (44)) >> 2)] = stats.flags;
    // ST_NOSUID
    GROWABLE_HEAP_I32()[(((buf) + (36)) >> 2)] = stats.namelen;
  },
  doMsync(addr, stream, len, flags, offset) {
    if (!FS.isFile(stream.node.mode)) {
      throw new FS.ErrnoError(43);
    }
    if (flags & 2) {
      // MAP_PRIVATE calls need not to be synced back to underlying fs
      return 0;
    }
    var buffer = GROWABLE_HEAP_U8().slice(addr, addr + len);
    FS.msync(stream, buffer, offset, len, flags);
  },
  getStreamFromFD(fd) {
    var stream = FS.getStreamChecked(fd);
    return stream;
  },
  varargs: undefined,
  getStr(ptr) {
    var ret = UTF8ToString(ptr);
    return ret;
  }
};

function ___syscall_faccessat(dirfd, path, amode, flags) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(2, 0, 1, dirfd, path, amode, flags);
  try {
    path = SYSCALLS.getStr(path);
    assert(flags === 0 || flags == 512);
    path = SYSCALLS.calculateAt(dirfd, path);
    if (amode & ~7) {
      // need a valid mode
      return -28;
    }
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    if (!node) {
      return -44;
    }
    var perms = "";
    if (amode & 4) perms += "r";
    if (amode & 2) perms += "w";
    if (amode & 1) perms += "x";
    if (perms && FS.nodePermissions(node, perms)) {
      return -2;
    }
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

/** @suppress {duplicate } */ var syscallGetVarargI = () => {
  assert(SYSCALLS.varargs != undefined);
  // the `+` prepended here is necessary to convince the JSCompiler that varargs is indeed a number.
  var ret = GROWABLE_HEAP_I32()[((+SYSCALLS.varargs) >> 2)];
  SYSCALLS.varargs += 4;
  return ret;
};

var syscallGetVarargP = syscallGetVarargI;

function ___syscall_fcntl64(fd, cmd, varargs) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(3, 0, 1, fd, cmd, varargs);
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    switch (cmd) {
     case 0:
      {
        var arg = syscallGetVarargI();
        if (arg < 0) {
          return -28;
        }
        while (FS.streams[arg]) {
          arg++;
        }
        var newStream;
        newStream = FS.dupStream(stream, arg);
        return newStream.fd;
      }

     case 1:
     case 2:
      return 0;

     // FD_CLOEXEC makes no sense for a single process.
      case 3:
      return stream.flags;

     case 4:
      {
        var arg = syscallGetVarargI();
        stream.flags |= arg;
        return 0;
      }

     case 12:
      {
        var arg = syscallGetVarargP();
        var offset = 0;
        // We're always unlocked.
        GROWABLE_HEAP_I16()[(((arg) + (offset)) >> 1)] = 2;
        return 0;
      }

     case 13:
     case 14:
      return 0;
    }
    return -28;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
  assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
  return stringToUTF8Array(str, GROWABLE_HEAP_U8(), outPtr, maxBytesToWrite);
};

function ___syscall_getcwd(buf, size) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(4, 0, 1, buf, size);
  try {
    if (size === 0) return -28;
    var cwd = FS.cwd();
    var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;
    if (size < cwdLengthInBytes) return -68;
    stringToUTF8(cwd, buf, size);
    return cwdLengthInBytes;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_ioctl(fd, op, varargs) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(5, 0, 1, fd, op, varargs);
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    switch (op) {
     case 21509:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     case 21505:
      {
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tcgets) {
          var termios = stream.tty.ops.ioctl_tcgets(stream);
          var argp = syscallGetVarargP();
          GROWABLE_HEAP_I32()[((argp) >> 2)] = termios.c_iflag || 0;
          GROWABLE_HEAP_I32()[(((argp) + (4)) >> 2)] = termios.c_oflag || 0;
          GROWABLE_HEAP_I32()[(((argp) + (8)) >> 2)] = termios.c_cflag || 0;
          GROWABLE_HEAP_I32()[(((argp) + (12)) >> 2)] = termios.c_lflag || 0;
          for (var i = 0; i < 32; i++) {
            GROWABLE_HEAP_I8()[(argp + i) + (17)] = termios.c_cc[i] || 0;
          }
          return 0;
        }
        return 0;
      }

     case 21510:
     case 21511:
     case 21512:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     case 21506:
     case 21507:
     case 21508:
      {
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tcsets) {
          var argp = syscallGetVarargP();
          var c_iflag = GROWABLE_HEAP_I32()[((argp) >> 2)];
          var c_oflag = GROWABLE_HEAP_I32()[(((argp) + (4)) >> 2)];
          var c_cflag = GROWABLE_HEAP_I32()[(((argp) + (8)) >> 2)];
          var c_lflag = GROWABLE_HEAP_I32()[(((argp) + (12)) >> 2)];
          var c_cc = [];
          for (var i = 0; i < 32; i++) {
            c_cc.push(GROWABLE_HEAP_I8()[(argp + i) + (17)]);
          }
          return stream.tty.ops.ioctl_tcsets(stream.tty, op, {
            c_iflag,
            c_oflag,
            c_cflag,
            c_lflag,
            c_cc
          });
        }
        return 0;
      }

     case 21519:
      {
        if (!stream.tty) return -59;
        var argp = syscallGetVarargP();
        GROWABLE_HEAP_I32()[((argp) >> 2)] = 0;
        return 0;
      }

     case 21520:
      {
        if (!stream.tty) return -59;
        return -28;
      }

     case 21531:
      {
        var argp = syscallGetVarargP();
        return FS.ioctl(stream, op, argp);
      }

     case 21523:
      {
        // TODO: in theory we should write to the winsize struct that gets
        // passed in, but for now musl doesn't read anything on it
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tiocgwinsz) {
          var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);
          var argp = syscallGetVarargP();
          GROWABLE_HEAP_I16()[((argp) >> 1)] = winsize[0];
          GROWABLE_HEAP_I16()[(((argp) + (2)) >> 1)] = winsize[1];
        }
        return 0;
      }

     case 21524:
      {
        // TODO: technically, this ioctl call should change the window size.
        // but, since emscripten doesn't have any concept of a terminal window
        // yet, we'll just silently throw it away as we do TIOCGWINSZ
        if (!stream.tty) return -59;
        return 0;
      }

     case 21515:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     default:
      return -28;
    }
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_openat(dirfd, path, flags, varargs) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(6, 0, 1, dirfd, path, flags, varargs);
  SYSCALLS.varargs = varargs;
  try {
    path = SYSCALLS.getStr(path);
    path = SYSCALLS.calculateAt(dirfd, path);
    var mode = varargs ? syscallGetVarargI() : 0;
    return FS.open(path, flags, mode).fd;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

var __abort_js = () => abort("native code called abort()");

var __emscripten_init_main_thread_js = tb => {
  // Pass the thread address to the native code where they stored in wasm
  // globals which act as a form of TLS. Global constructors trying
  // to access this value will read the wrong value, but that is UB anyway.
  __emscripten_thread_init(tb, /*is_main=*/ !ENVIRONMENT_IS_WORKER, /*is_runtime=*/ 1, /*can_block=*/ !ENVIRONMENT_IS_WEB, /*default_stacksize=*/ 65536, /*start_profiling=*/ false);
  PThread.threadInitTLS();
};

var maybeExit = () => {
  if (!keepRuntimeAlive()) {
    try {
      if (ENVIRONMENT_IS_PTHREAD) __emscripten_thread_exit(EXITSTATUS); else _exit(EXITSTATUS);
    } catch (e) {
      handleException(e);
    }
  }
};

var callUserCallback = func => {
  if (ABORT) {
    err("user callback triggered after runtime exited or application aborted.  Ignoring.");
    return;
  }
  try {
    func();
    maybeExit();
  } catch (e) {
    handleException(e);
  }
};

var __emscripten_thread_mailbox_await = pthread_ptr => {
  if (typeof Atomics.waitAsync === "function") {
    // Wait on the pthread's initial self-pointer field because it is easy and
    // safe to access from sending threads that need to notify the waiting
    // thread.
    // TODO: How to make this work with wasm64?
    var wait = Atomics.waitAsync(GROWABLE_HEAP_I32(), ((pthread_ptr) >> 2), pthread_ptr);
    assert(wait.async);
    wait.value.then(checkMailbox);
    var waitingAsync = pthread_ptr + 128;
    Atomics.store(GROWABLE_HEAP_I32(), ((waitingAsync) >> 2), 1);
  }
};

var checkMailbox = () => {
  // Only check the mailbox if we have a live pthread runtime. We implement
  // pthread_self to return 0 if there is no live runtime.
  var pthread_ptr = _pthread_self();
  if (pthread_ptr) {
    // If we are using Atomics.waitAsync as our notification mechanism, wait
    // for a notification before processing the mailbox to avoid missing any
    // work that could otherwise arrive after we've finished processing the
    // mailbox and before we're ready for the next notification.
    __emscripten_thread_mailbox_await(pthread_ptr);
    callUserCallback(__emscripten_check_mailbox);
  }
};

var __emscripten_notify_mailbox_postmessage = (targetThread, currThreadId) => {
  if (targetThread == currThreadId) {
    setTimeout(checkMailbox);
  } else if (ENVIRONMENT_IS_PTHREAD) {
    postMessage({
      targetThread,
      cmd: "checkMailbox"
    });
  } else {
    var worker = PThread.pthreads[targetThread];
    if (!worker) {
      err(`Cannot send message to thread with ID ${targetThread}, unknown thread ID!`);
      return;
    }
    worker.postMessage({
      cmd: "checkMailbox"
    });
  }
};

var proxiedJSCallArgs = [];

var __emscripten_receive_on_main_thread_js = (funcIndex, emAsmAddr, callingThread, numCallArgs, args) => {
  // Sometimes we need to backproxy events to the calling thread (e.g.
  // HTML5 DOM events handlers such as
  // emscripten_set_mousemove_callback()), so keep track in a globally
  // accessible variable about the thread that initiated the proxying.
  proxiedJSCallArgs.length = numCallArgs;
  var b = ((args) >> 3);
  for (var i = 0; i < numCallArgs; i++) {
    proxiedJSCallArgs[i] = GROWABLE_HEAP_F64()[b + i];
  }
  // Proxied JS library funcs use funcIndex and EM_ASM functions use emAsmAddr
  var func = emAsmAddr ? ASM_CONSTS[emAsmAddr] : proxiedFunctionTable[funcIndex];
  assert(!(funcIndex && emAsmAddr));
  assert(func.length == numCallArgs, "Call args mismatch in _emscripten_receive_on_main_thread_js");
  PThread.currentProxiedOperationCallerThread = callingThread;
  var rtn = func(...proxiedJSCallArgs);
  PThread.currentProxiedOperationCallerThread = 0;
  // Proxied functions can return any type except bigint.  All other types
  // cooerce to f64/double (the return type of this function in C) but not
  // bigint.
  assert(typeof rtn != "bigint");
  return rtn;
};

var __emscripten_thread_cleanup = thread => {
  // Called when a thread needs to be cleaned up so it can be reused.
  // A thread is considered reusable when it either returns from its
  // entry point, calls pthread_exit, or acts upon a cancellation.
  // Detached threads are responsible for calling this themselves,
  // otherwise pthread_join is responsible for calling this.
  if (!ENVIRONMENT_IS_PTHREAD) cleanupThread(thread); else postMessage({
    cmd: "cleanupThread",
    thread
  });
};

var __emscripten_thread_set_strongref = thread => {
  // Called when a thread needs to be strongly referenced.
  // Currently only used for:
  // - keeping the "main" thread alive in PROXY_TO_PTHREAD mode;
  // - crashed threads that needs to propagate the uncaught exception
  //   back to the main thread.
  if (ENVIRONMENT_IS_NODE) {
    PThread.pthreads[thread].ref();
  }
};

var __tzset_js = (timezone, daylight, std_name, dst_name) => {
  // TODO: Use (malleable) environment variables instead of system settings.
  var currentYear = (new Date).getFullYear();
  var winter = new Date(currentYear, 0, 1);
  var summer = new Date(currentYear, 6, 1);
  var winterOffset = winter.getTimezoneOffset();
  var summerOffset = summer.getTimezoneOffset();
  // Local standard timezone offset. Local standard time is not adjusted for
  // daylight savings.  This code uses the fact that getTimezoneOffset returns
  // a greater value during Standard Time versus Daylight Saving Time (DST).
  // Thus it determines the expected output during Standard Time, and it
  // compares whether the output of the given date the same (Standard) or less
  // (DST).
  var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  // timezone is specified as seconds west of UTC ("The external variable
  // `timezone` shall be set to the difference, in seconds, between
  // Coordinated Universal Time (UTC) and local standard time."), the same
  // as returned by stdTimezoneOffset.
  // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
  GROWABLE_HEAP_U32()[((timezone) >> 2)] = stdTimezoneOffset * 60;
  GROWABLE_HEAP_I32()[((daylight) >> 2)] = Number(winterOffset != summerOffset);
  var extractZone = timezoneOffset => {
    // Why inverse sign?
    // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
    var sign = timezoneOffset >= 0 ? "-" : "+";
    var absOffset = Math.abs(timezoneOffset);
    var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
    var minutes = String(absOffset % 60).padStart(2, "0");
    return `UTC${sign}${hours}${minutes}`;
  };
  var winterName = extractZone(winterOffset);
  var summerName = extractZone(summerOffset);
  assert(winterName);
  assert(summerName);
  assert(lengthBytesUTF8(winterName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${winterName})`);
  assert(lengthBytesUTF8(summerName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${summerName})`);
  if (summerOffset < winterOffset) {
    // Northern hemisphere
    stringToUTF8(winterName, std_name, 17);
    stringToUTF8(summerName, dst_name, 17);
  } else {
    stringToUTF8(winterName, dst_name, 17);
    stringToUTF8(summerName, std_name, 17);
  }
};

var _emscripten_get_now = () => performance.timeOrigin + performance.now();

var _emscripten_date_now = () => Date.now();

var nowIsMonotonic = 1;

var checkWasiClock = clock_id => clock_id >= 0 && clock_id <= 3;

function _clock_time_get(clk_id, ignored_precision_low, ignored_precision_high, ptime) {
  var ignored_precision = convertI32PairToI53Checked(ignored_precision_low, ignored_precision_high);
  if (!checkWasiClock(clk_id)) {
    return 28;
  }
  var now;
  // all wasi clocks but realtime are monotonic
  if (clk_id === 0) {
    now = _emscripten_date_now();
  } else if (nowIsMonotonic) {
    now = _emscripten_get_now();
  } else {
    return 52;
  }
  // "now" is in ms, and wasi times are in ns.
  var nsec = Math.round(now * 1e3 * 1e3);
  (tempI64 = [ nsec >>> 0, (tempDouble = nsec, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
  GROWABLE_HEAP_I32()[((ptime) >> 2)] = tempI64[0], GROWABLE_HEAP_I32()[(((ptime) + (4)) >> 2)] = tempI64[1]);
  return 0;
}

var readEmAsmArgsArray = [];

var readEmAsmArgs = (sigPtr, buf) => {
  // Nobody should have mutated _readEmAsmArgsArray underneath us to be something else than an array.
  assert(Array.isArray(readEmAsmArgsArray));
  // The input buffer is allocated on the stack, so it must be stack-aligned.
  assert(buf % 16 == 0);
  readEmAsmArgsArray.length = 0;
  var ch;
  // Most arguments are i32s, so shift the buffer pointer so it is a plain
  // index into HEAP32.
  while (ch = GROWABLE_HEAP_U8()[sigPtr++]) {
    var chr = String.fromCharCode(ch);
    var validChars = [ "d", "f", "i", "p" ];
    assert(validChars.includes(chr), `Invalid character ${ch}("${chr}") in readEmAsmArgs! Use only [${validChars}], and do not specify "v" for void return argument.`);
    // Floats are always passed as doubles, so all types except for 'i'
    // are 8 bytes and require alignment.
    var wide = (ch != 105);
    wide &= (ch != 112);
    buf += wide && (buf % 8) ? 4 : 0;
    readEmAsmArgsArray.push(// Special case for pointers under wasm64 or CAN_ADDRESS_2GB mode.
    ch == 112 ? GROWABLE_HEAP_U32()[((buf) >> 2)] : ch == 105 ? GROWABLE_HEAP_I32()[((buf) >> 2)] : GROWABLE_HEAP_F64()[((buf) >> 3)]);
    buf += wide ? 8 : 4;
  }
  return readEmAsmArgsArray;
};

var runEmAsmFunction = (code, sigPtr, argbuf) => {
  var args = readEmAsmArgs(sigPtr, argbuf);
  assert(ASM_CONSTS.hasOwnProperty(code), `No EM_ASM constant found at address ${code}.  The loaded WebAssembly file is likely out of sync with the generated JavaScript.`);
  return ASM_CONSTS[code](...args);
};

var _emscripten_asm_const_int = (code, sigPtr, argbuf) => runEmAsmFunction(code, sigPtr, argbuf);

var _emscripten_check_blocking_allowed = () => {
  if (ENVIRONMENT_IS_NODE) return;
  if (ENVIRONMENT_IS_WORKER) return;
  // Blocking in a worker/pthread is fine.
  warnOnce("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
};

var runtimeKeepalivePush = () => {
  runtimeKeepaliveCounter += 1;
};

var _emscripten_exit_with_live_runtime = () => {
  runtimeKeepalivePush();
  throw "unwind";
};

var JSEvents = {
  memcpy(target, src, size) {
    GROWABLE_HEAP_I8().set(GROWABLE_HEAP_I8().subarray(src, src + size), target);
  },
  removeAllEventListeners() {
    while (JSEvents.eventHandlers.length) {
      JSEvents._removeHandler(JSEvents.eventHandlers.length - 1);
    }
    JSEvents.deferredCalls = [];
  },
  inEventHandler: 0,
  deferredCalls: [],
  deferCall(targetFunction, precedence, argsList) {
    function arraysHaveEqualContent(arrA, arrB) {
      if (arrA.length != arrB.length) return false;
      for (var i in arrA) {
        if (arrA[i] != arrB[i]) return false;
      }
      return true;
    }
    // Test if the given call was already queued, and if so, don't add it again.
    for (var call of JSEvents.deferredCalls) {
      if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
        return;
      }
    }
    JSEvents.deferredCalls.push({
      targetFunction,
      precedence,
      argsList
    });
    JSEvents.deferredCalls.sort((x, y) => x.precedence < y.precedence);
  },
  removeDeferredCalls(targetFunction) {
    JSEvents.deferredCalls = JSEvents.deferredCalls.filter(call => call.targetFunction != targetFunction);
  },
  canPerformEventHandlerRequests() {
    if (navigator.userActivation) {
      // Verify against transient activation status from UserActivation API
      // whether it is possible to perform a request here without needing to defer. See
      // https://developer.mozilla.org/en-US/docs/Web/Security/User_activation#transient_activation
      // and https://caniuse.com/mdn-api_useractivation
      // At the time of writing, Firefox does not support this API: https://bugzilla.mozilla.org/show_bug.cgi?id=1791079
      return navigator.userActivation.isActive;
    }
    return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
  },
  runDeferredCalls() {
    if (!JSEvents.canPerformEventHandlerRequests()) {
      return;
    }
    var deferredCalls = JSEvents.deferredCalls;
    JSEvents.deferredCalls = [];
    for (var call of deferredCalls) {
      call.targetFunction(...call.argsList);
    }
  },
  eventHandlers: [],
  removeAllHandlersOnTarget: (target, eventTypeString) => {
    for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
      if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
        JSEvents._removeHandler(i--);
      }
    }
  },
  _removeHandler(i) {
    var h = JSEvents.eventHandlers[i];
    h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
    JSEvents.eventHandlers.splice(i, 1);
  },
  registerOrRemoveHandler(eventHandler) {
    if (!eventHandler.target) {
      err("registerOrRemoveHandler: the target element for event handler registration does not exist, when processing the following event handler registration:");
      console.dir(eventHandler);
      return -4;
    }
    if (eventHandler.callbackfunc) {
      eventHandler.eventListenerFunc = function(event) {
        // Increment nesting count for the event handler.
        ++JSEvents.inEventHandler;
        JSEvents.currentEventHandler = eventHandler;
        // Process any old deferred calls the user has placed.
        JSEvents.runDeferredCalls();
        // Process the actual event, calls back to user C code handler.
        eventHandler.handlerFunc(event);
        // Process any new deferred calls that were placed right now from this event handler.
        JSEvents.runDeferredCalls();
        // Out of event handler - restore nesting count.
        --JSEvents.inEventHandler;
      };
      eventHandler.target.addEventListener(eventHandler.eventTypeString, eventHandler.eventListenerFunc, eventHandler.useCapture);
      JSEvents.eventHandlers.push(eventHandler);
    } else {
      for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
        if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
          JSEvents._removeHandler(i--);
        }
      }
    }
    return 0;
  },
  getTargetThreadForEventCallback(targetThread) {
    switch (targetThread) {
     case 1:
      // The event callback for the current event should be called on the
      // main browser thread. (0 == don't proxy)
      return 0;

     case 2:
      // The event callback for the current event should be backproxied to
      // the thread that is registering the event.
      // This can be 0 in the case that the caller uses
      // EM_CALLBACK_THREAD_CONTEXT_CALLING_THREAD but on the main thread
      // itself.
      return PThread.currentProxiedOperationCallerThread;

     default:
      // The event callback for the current event should be proxied to the
      // given specific thread.
      return targetThread;
    }
  },
  getNodeNameForTarget(target) {
    if (!target) return "";
    if (target == window) return "#window";
    if (target == screen) return "#screen";
    return target?.nodeName || "";
  },
  fullscreenEnabled() {
    return document.fullscreenEnabled || document.webkitFullscreenEnabled;
  }
};

var maybeCStringToJsString = cString => cString > 2 ? UTF8ToString(cString) : cString;

/** @type {Object} */ var specialHTMLTargets = [ 0, typeof document != "undefined" ? document : 0, typeof window != "undefined" ? window : 0 ];

var findEventTarget = target => {
  target = maybeCStringToJsString(target);
  var domElement = specialHTMLTargets[target] || (typeof document != "undefined" ? document.querySelector(target) : null);
  return domElement;
};

var getBoundingClientRect = e => specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {
  "left": 0,
  "top": 0
};

function _emscripten_get_element_css_size(target, width, height) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(7, 0, 1, target, width, height);
  target = findEventTarget(target);
  if (!target) return -4;
  var rect = getBoundingClientRect(target);
  GROWABLE_HEAP_F64()[((width) >> 3)] = rect.width;
  GROWABLE_HEAP_F64()[((height) >> 3)] = rect.height;
  return 0;
}

var fillGamepadEventData = (eventStruct, e) => {
  GROWABLE_HEAP_F64()[((eventStruct) >> 3)] = e.timestamp;
  for (var i = 0; i < e.axes.length; ++i) {
    GROWABLE_HEAP_F64()[(((eventStruct + i * 8) + (16)) >> 3)] = e.axes[i];
  }
  for (var i = 0; i < e.buttons.length; ++i) {
    if (typeof e.buttons[i] == "object") {
      GROWABLE_HEAP_F64()[(((eventStruct + i * 8) + (528)) >> 3)] = e.buttons[i].value;
    } else {
      GROWABLE_HEAP_F64()[(((eventStruct + i * 8) + (528)) >> 3)] = e.buttons[i];
    }
  }
  for (var i = 0; i < e.buttons.length; ++i) {
    if (typeof e.buttons[i] == "object") {
      GROWABLE_HEAP_I8()[(eventStruct + i) + (1040)] = e.buttons[i].pressed;
    } else {
      // Assigning a boolean to HEAP32, that's ok, but Closure would like to warn about it:
      /** @suppress {checkTypes} */ GROWABLE_HEAP_I8()[(eventStruct + i) + (1040)] = e.buttons[i] == 1;
    }
  }
  GROWABLE_HEAP_I8()[(eventStruct) + (1104)] = e.connected;
  GROWABLE_HEAP_I32()[(((eventStruct) + (1108)) >> 2)] = e.index;
  GROWABLE_HEAP_I32()[(((eventStruct) + (8)) >> 2)] = e.axes.length;
  GROWABLE_HEAP_I32()[(((eventStruct) + (12)) >> 2)] = e.buttons.length;
  stringToUTF8(e.id, eventStruct + 1112, 64);
  stringToUTF8(e.mapping, eventStruct + 1176, 64);
};

function _emscripten_get_gamepad_status(index, gamepadState) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(8, 0, 1, index, gamepadState);
  if (!JSEvents.lastGamepadState) throw "emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!";
  // INVALID_PARAM is returned on a Gamepad index that never was there.
  if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  // NO_DATA is returned on a Gamepad index that was removed.
  // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
  // This is because gamepads must keep their original position in the array.
  // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
  if (!JSEvents.lastGamepadState[index]) return -7;
  fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
  return 0;
}

function _emscripten_get_num_gamepads() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(9, 0, 1);
  if (!JSEvents.lastGamepadState) throw "emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!";
  // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
  // Otherwise the following line will throw an exception.
  return JSEvents.lastGamepadState.length;
}

var GLctx;

var webgl_enable_ANGLE_instanced_arrays = ctx => {
  // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
  var ext = ctx.getExtension("ANGLE_instanced_arrays");
  // Because this extension is a core function in WebGL 2, assign the extension entry points in place of
  // where the core functions will reside in WebGL 2. This way the calling code can call these without
  // having to dynamically branch depending if running against WebGL 1 or WebGL 2.
  if (ext) {
    ctx["vertexAttribDivisor"] = (index, divisor) => ext["vertexAttribDivisorANGLE"](index, divisor);
    ctx["drawArraysInstanced"] = (mode, first, count, primcount) => ext["drawArraysInstancedANGLE"](mode, first, count, primcount);
    ctx["drawElementsInstanced"] = (mode, count, type, indices, primcount) => ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
    return 1;
  }
};

var webgl_enable_OES_vertex_array_object = ctx => {
  // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
  var ext = ctx.getExtension("OES_vertex_array_object");
  if (ext) {
    ctx["createVertexArray"] = () => ext["createVertexArrayOES"]();
    ctx["deleteVertexArray"] = vao => ext["deleteVertexArrayOES"](vao);
    ctx["bindVertexArray"] = vao => ext["bindVertexArrayOES"](vao);
    ctx["isVertexArray"] = vao => ext["isVertexArrayOES"](vao);
    return 1;
  }
};

var webgl_enable_WEBGL_draw_buffers = ctx => {
  // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
  var ext = ctx.getExtension("WEBGL_draw_buffers");
  if (ext) {
    ctx["drawBuffers"] = (n, bufs) => ext["drawBuffersWEBGL"](n, bufs);
    return 1;
  }
};

var webgl_enable_EXT_polygon_offset_clamp = ctx => !!(ctx.extPolygonOffsetClamp = ctx.getExtension("EXT_polygon_offset_clamp"));

var webgl_enable_EXT_clip_control = ctx => !!(ctx.extClipControl = ctx.getExtension("EXT_clip_control"));

var webgl_enable_WEBGL_polygon_mode = ctx => !!(ctx.webglPolygonMode = ctx.getExtension("WEBGL_polygon_mode"));

var webgl_enable_WEBGL_multi_draw = ctx => // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
!!(ctx.multiDrawWebgl = ctx.getExtension("WEBGL_multi_draw"));

var getEmscriptenSupportedExtensions = ctx => {
  // Restrict the list of advertised extensions to those that we actually
  // support.
  var supportedExtensions = [ // WebGL 1 extensions
  "ANGLE_instanced_arrays", "EXT_blend_minmax", "EXT_disjoint_timer_query", "EXT_frag_depth", "EXT_shader_texture_lod", "EXT_sRGB", "OES_element_index_uint", "OES_fbo_render_mipmap", "OES_standard_derivatives", "OES_texture_float", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_vertex_array_object", "WEBGL_color_buffer_float", "WEBGL_depth_texture", "WEBGL_draw_buffers", // WebGL 1 and WebGL 2 extensions
  "EXT_clip_control", "EXT_color_buffer_half_float", "EXT_depth_clamp", "EXT_float_blend", "EXT_polygon_offset_clamp", "EXT_texture_compression_bptc", "EXT_texture_compression_rgtc", "EXT_texture_filter_anisotropic", "KHR_parallel_shader_compile", "OES_texture_float_linear", "WEBGL_blend_func_extended", "WEBGL_compressed_texture_astc", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_etc1", "WEBGL_compressed_texture_s3tc", "WEBGL_compressed_texture_s3tc_srgb", "WEBGL_debug_renderer_info", "WEBGL_debug_shaders", "WEBGL_lose_context", "WEBGL_multi_draw", "WEBGL_polygon_mode" ];
  // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
  return (ctx.getSupportedExtensions() || []).filter(ext => supportedExtensions.includes(ext));
};

var GL = {
  counter: 1,
  buffers: [],
  programs: [],
  framebuffers: [],
  renderbuffers: [],
  textures: [],
  shaders: [],
  vaos: [],
  contexts: {},
  offscreenCanvases: {},
  queries: [],
  stringCache: {},
  unpackAlignment: 4,
  unpackRowLength: 0,
  recordError: errorCode => {
    if (!GL.lastError) {
      GL.lastError = errorCode;
    }
  },
  getNewId: table => {
    var ret = GL.counter++;
    for (var i = table.length; i < ret; i++) {
      table[i] = null;
    }
    return ret;
  },
  genObject: (n, buffers, createFunction, objectTable) => {
    for (var i = 0; i < n; i++) {
      var buffer = GLctx[createFunction]();
      var id = buffer && GL.getNewId(objectTable);
      if (buffer) {
        buffer.name = id;
        objectTable[id] = buffer;
      } else {
        GL.recordError(1282);
      }
      GROWABLE_HEAP_I32()[(((buffers) + (i * 4)) >> 2)] = id;
    }
  },
  getSource: (shader, count, string, length) => {
    var source = "";
    for (var i = 0; i < count; ++i) {
      var len = length ? GROWABLE_HEAP_U32()[(((length) + (i * 4)) >> 2)] : undefined;
      source += UTF8ToString(GROWABLE_HEAP_U32()[(((string) + (i * 4)) >> 2)], len);
    }
    return source;
  },
  createContext: (/** @type {HTMLCanvasElement} */ canvas, webGLContextAttributes) => {
    // BUG: Workaround Safari WebGL issue: After successfully acquiring WebGL
    // context on a canvas, calling .getContext() will always return that
    // context independent of which 'webgl' or 'webgl2'
    // context version was passed. See:
    //   https://bugs.webkit.org/show_bug.cgi?id=222758
    // and:
    //   https://github.com/emscripten-core/emscripten/issues/13295.
    // TODO: Once the bug is fixed and shipped in Safari, adjust the Safari
    // version field in above check.
    if (!canvas.getContextSafariWebGL2Fixed) {
      canvas.getContextSafariWebGL2Fixed = canvas.getContext;
      /** @type {function(this:HTMLCanvasElement, string, (Object|null)=): (Object|null)} */ function fixedGetContext(ver, attrs) {
        var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
        return ((ver == "webgl") == (gl instanceof WebGLRenderingContext)) ? gl : null;
      }
      canvas.getContext = fixedGetContext;
    }
    var ctx = (canvas.getContext("webgl", webGLContextAttributes));
    if (!ctx) return 0;
    var handle = GL.registerContext(ctx, webGLContextAttributes);
    return handle;
  },
  registerContext: (ctx, webGLContextAttributes) => {
    // with pthreads a context is a location in memory with some synchronized
    // data between threads
    var handle = _malloc(8);
    GROWABLE_HEAP_U32()[(((handle) + (4)) >> 2)] = _pthread_self();
    // the thread pointer of the thread that owns the control of the context
    var context = {
      handle,
      attributes: webGLContextAttributes,
      version: webGLContextAttributes.majorVersion,
      GLctx: ctx
    };
    // Store the created context object so that we can access the context
    // given a canvas without having to pass the parameters again.
    if (ctx.canvas) ctx.canvas.GLctxObject = context;
    GL.contexts[handle] = context;
    if (typeof webGLContextAttributes.enableExtensionsByDefault == "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
      GL.initExtensions(context);
    }
    return handle;
  },
  makeContextCurrent: contextHandle => {
    // Active Emscripten GL layer context object.
    GL.currentContext = GL.contexts[contextHandle];
    // Active WebGL context object.
    Module["ctx"] = GLctx = GL.currentContext?.GLctx;
    return !(contextHandle && !GLctx);
  },
  getContext: contextHandle => GL.contexts[contextHandle],
  deleteContext: contextHandle => {
    if (GL.currentContext === GL.contexts[contextHandle]) {
      GL.currentContext = null;
    }
    if (typeof JSEvents == "object") {
      // Release all JS event handlers on the DOM element that the GL context is
      // associated with since the context is now deleted.
      JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
    }
    // Make sure the canvas object no longer refers to the context object so
    // there are no GC surprises.
    if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) {
      GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
    }
    _free(GL.contexts[contextHandle].handle);
    GL.contexts[contextHandle] = null;
  },
  initExtensions: context => {
    // If this function is called without a specific context object, init the
    // extensions of the currently active context.
    context ||= GL.currentContext;
    if (context.initExtensionsDone) return;
    context.initExtensionsDone = true;
    var GLctx = context.GLctx;
    // Detect the presence of a few extensions manually, ction GL interop
    // layer itself will need to know if they exist.
    // Extensions that are available in both WebGL 1 and WebGL 2
    webgl_enable_WEBGL_multi_draw(GLctx);
    webgl_enable_EXT_polygon_offset_clamp(GLctx);
    webgl_enable_EXT_clip_control(GLctx);
    webgl_enable_WEBGL_polygon_mode(GLctx);
    // Extensions that are only available in WebGL 1 (the calls will be no-ops
    // if called on a WebGL 2 context active)
    webgl_enable_ANGLE_instanced_arrays(GLctx);
    webgl_enable_OES_vertex_array_object(GLctx);
    webgl_enable_WEBGL_draw_buffers(GLctx);
    {
      GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
    }
    getEmscriptenSupportedExtensions(GLctx).forEach(ext => {
      // WEBGL_lose_context, WEBGL_debug_renderer_info and WEBGL_debug_shaders
      // are not enabled by default.
      if (!ext.includes("lose_context") && !ext.includes("debug")) {
        // Call .getExtension() to enable that extension permanently.
        GLctx.getExtension(ext);
      }
    });
  }
};

/** @suppress {duplicate } */ var _glActiveTexture = x0 => GLctx.activeTexture(x0);

var _emscripten_glActiveTexture = _glActiveTexture;

/** @suppress {duplicate } */ var _glAttachShader = (program, shader) => {
  GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
};

var _emscripten_glAttachShader = _glAttachShader;

/** @suppress {duplicate } */ var _glBeginQueryEXT = (target, id) => {
  GLctx.disjointTimerQueryExt["beginQueryEXT"](target, GL.queries[id]);
};

var _emscripten_glBeginQueryEXT = _glBeginQueryEXT;

/** @suppress {duplicate } */ var _glBindAttribLocation = (program, index, name) => {
  GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
};

var _emscripten_glBindAttribLocation = _glBindAttribLocation;

/** @suppress {duplicate } */ var _glBindBuffer = (target, buffer) => {
  GLctx.bindBuffer(target, GL.buffers[buffer]);
};

var _emscripten_glBindBuffer = _glBindBuffer;

/** @suppress {duplicate } */ var _glBindFramebuffer = (target, framebuffer) => {
  GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
};

var _emscripten_glBindFramebuffer = _glBindFramebuffer;

/** @suppress {duplicate } */ var _glBindRenderbuffer = (target, renderbuffer) => {
  GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
};

var _emscripten_glBindRenderbuffer = _glBindRenderbuffer;

/** @suppress {duplicate } */ var _glBindTexture = (target, texture) => {
  GLctx.bindTexture(target, GL.textures[texture]);
};

var _emscripten_glBindTexture = _glBindTexture;

/** @suppress {duplicate } */ var _glBindVertexArray = vao => {
  GLctx.bindVertexArray(GL.vaos[vao]);
};

/** @suppress {duplicate } */ var _glBindVertexArrayOES = _glBindVertexArray;

var _emscripten_glBindVertexArrayOES = _glBindVertexArrayOES;

/** @suppress {duplicate } */ var _glBlendColor = (x0, x1, x2, x3) => GLctx.blendColor(x0, x1, x2, x3);

var _emscripten_glBlendColor = _glBlendColor;

/** @suppress {duplicate } */ var _glBlendEquation = x0 => GLctx.blendEquation(x0);

var _emscripten_glBlendEquation = _glBlendEquation;

/** @suppress {duplicate } */ var _glBlendEquationSeparate = (x0, x1) => GLctx.blendEquationSeparate(x0, x1);

var _emscripten_glBlendEquationSeparate = _glBlendEquationSeparate;

/** @suppress {duplicate } */ var _glBlendFunc = (x0, x1) => GLctx.blendFunc(x0, x1);

var _emscripten_glBlendFunc = _glBlendFunc;

/** @suppress {duplicate } */ var _glBlendFuncSeparate = (x0, x1, x2, x3) => GLctx.blendFuncSeparate(x0, x1, x2, x3);

var _emscripten_glBlendFuncSeparate = _glBlendFuncSeparate;

/** @suppress {duplicate } */ var _glBufferData = (target, size, data, usage) => {
  // N.b. here first form specifies a heap subarray, second form an integer
  // size, so the ?: code here is polymorphic. It is advised to avoid
  // randomly mixing both uses in calling code, to avoid any potential JS
  // engine JIT issues.
  GLctx.bufferData(target, data ? GROWABLE_HEAP_U8().subarray(data, data + size) : size, usage);
};

var _emscripten_glBufferData = _glBufferData;

/** @suppress {duplicate } */ var _glBufferSubData = (target, offset, size, data) => {
  GLctx.bufferSubData(target, offset, GROWABLE_HEAP_U8().subarray(data, data + size));
};

var _emscripten_glBufferSubData = _glBufferSubData;

/** @suppress {duplicate } */ var _glCheckFramebufferStatus = x0 => GLctx.checkFramebufferStatus(x0);

var _emscripten_glCheckFramebufferStatus = _glCheckFramebufferStatus;

/** @suppress {duplicate } */ var _glClear = x0 => GLctx.clear(x0);

var _emscripten_glClear = _glClear;

/** @suppress {duplicate } */ var _glClearColor = (x0, x1, x2, x3) => GLctx.clearColor(x0, x1, x2, x3);

var _emscripten_glClearColor = _glClearColor;

/** @suppress {duplicate } */ var _glClearDepthf = x0 => GLctx.clearDepth(x0);

var _emscripten_glClearDepthf = _glClearDepthf;

/** @suppress {duplicate } */ var _glClearStencil = x0 => GLctx.clearStencil(x0);

var _emscripten_glClearStencil = _glClearStencil;

/** @suppress {duplicate } */ var _glClipControlEXT = (origin, depth) => {
  GLctx.extClipControl["clipControlEXT"](origin, depth);
};

var _emscripten_glClipControlEXT = _glClipControlEXT;

/** @suppress {duplicate } */ var _glColorMask = (red, green, blue, alpha) => {
  GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
};

var _emscripten_glColorMask = _glColorMask;

/** @suppress {duplicate } */ var _glCompileShader = shader => {
  GLctx.compileShader(GL.shaders[shader]);
};

var _emscripten_glCompileShader = _glCompileShader;

/** @suppress {duplicate } */ var _glCompressedTexImage2D = (target, level, internalFormat, width, height, border, imageSize, data) => {
  // `data` may be null here, which means "allocate uniniitalized space but
  // don't upload" in GLES parlance, but `compressedTexImage2D` requires the
  // final data parameter, so we simply pass a heap view starting at zero
  // effectively uploading whatever happens to be near address zero.  See
  // https://github.com/emscripten-core/emscripten/issues/19300.
  GLctx.compressedTexImage2D(target, level, internalFormat, width, height, border, GROWABLE_HEAP_U8().subarray((data), data + imageSize));
};

var _emscripten_glCompressedTexImage2D = _glCompressedTexImage2D;

/** @suppress {duplicate } */ var _glCompressedTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, imageSize, data) => {
  GLctx.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, GROWABLE_HEAP_U8().subarray((data), data + imageSize));
};

var _emscripten_glCompressedTexSubImage2D = _glCompressedTexSubImage2D;

/** @suppress {duplicate } */ var _glCopyTexImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);

var _emscripten_glCopyTexImage2D = _glCopyTexImage2D;

/** @suppress {duplicate } */ var _glCopyTexSubImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7);

var _emscripten_glCopyTexSubImage2D = _glCopyTexSubImage2D;

/** @suppress {duplicate } */ var _glCreateProgram = () => {
  var id = GL.getNewId(GL.programs);
  var program = GLctx.createProgram();
  // Store additional information needed for each shader program:
  program.name = id;
  // Lazy cache results of
  // glGetProgramiv(GL_ACTIVE_UNIFORM_MAX_LENGTH/GL_ACTIVE_ATTRIBUTE_MAX_LENGTH/GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)
  program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
  program.uniformIdCounter = 1;
  GL.programs[id] = program;
  return id;
};

var _emscripten_glCreateProgram = _glCreateProgram;

/** @suppress {duplicate } */ var _glCreateShader = shaderType => {
  var id = GL.getNewId(GL.shaders);
  GL.shaders[id] = GLctx.createShader(shaderType);
  return id;
};

var _emscripten_glCreateShader = _glCreateShader;

/** @suppress {duplicate } */ var _glCullFace = x0 => GLctx.cullFace(x0);

var _emscripten_glCullFace = _glCullFace;

/** @suppress {duplicate } */ var _glDeleteBuffers = (n, buffers) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((buffers) + (i * 4)) >> 2)];
    var buffer = GL.buffers[id];
    // From spec: "glDeleteBuffers silently ignores 0's and names that do not
    // correspond to existing buffer objects."
    if (!buffer) continue;
    GLctx.deleteBuffer(buffer);
    buffer.name = 0;
    GL.buffers[id] = null;
  }
};

var _emscripten_glDeleteBuffers = _glDeleteBuffers;

/** @suppress {duplicate } */ var _glDeleteFramebuffers = (n, framebuffers) => {
  for (var i = 0; i < n; ++i) {
    var id = GROWABLE_HEAP_I32()[(((framebuffers) + (i * 4)) >> 2)];
    var framebuffer = GL.framebuffers[id];
    if (!framebuffer) continue;
    // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
    GLctx.deleteFramebuffer(framebuffer);
    framebuffer.name = 0;
    GL.framebuffers[id] = null;
  }
};

var _emscripten_glDeleteFramebuffers = _glDeleteFramebuffers;

/** @suppress {duplicate } */ var _glDeleteProgram = id => {
  if (!id) return;
  var program = GL.programs[id];
  if (!program) {
    // glDeleteProgram actually signals an error when deleting a nonexisting
    // object, unlike some other GL delete functions.
    GL.recordError(1281);
    return;
  }
  GLctx.deleteProgram(program);
  program.name = 0;
  GL.programs[id] = null;
};

var _emscripten_glDeleteProgram = _glDeleteProgram;

/** @suppress {duplicate } */ var _glDeleteQueriesEXT = (n, ids) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((ids) + (i * 4)) >> 2)];
    var query = GL.queries[id];
    if (!query) continue;
    // GL spec: "unused names in ids are ignored, as is the name zero."
    GLctx.disjointTimerQueryExt["deleteQueryEXT"](query);
    GL.queries[id] = null;
  }
};

var _emscripten_glDeleteQueriesEXT = _glDeleteQueriesEXT;

/** @suppress {duplicate } */ var _glDeleteRenderbuffers = (n, renderbuffers) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((renderbuffers) + (i * 4)) >> 2)];
    var renderbuffer = GL.renderbuffers[id];
    if (!renderbuffer) continue;
    // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
    GLctx.deleteRenderbuffer(renderbuffer);
    renderbuffer.name = 0;
    GL.renderbuffers[id] = null;
  }
};

var _emscripten_glDeleteRenderbuffers = _glDeleteRenderbuffers;

/** @suppress {duplicate } */ var _glDeleteShader = id => {
  if (!id) return;
  var shader = GL.shaders[id];
  if (!shader) {
    // glDeleteShader actually signals an error when deleting a nonexisting
    // object, unlike some other GL delete functions.
    GL.recordError(1281);
    return;
  }
  GLctx.deleteShader(shader);
  GL.shaders[id] = null;
};

var _emscripten_glDeleteShader = _glDeleteShader;

/** @suppress {duplicate } */ var _glDeleteTextures = (n, textures) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((textures) + (i * 4)) >> 2)];
    var texture = GL.textures[id];
    // GL spec: "glDeleteTextures silently ignores 0s and names that do not
    // correspond to existing textures".
    if (!texture) continue;
    GLctx.deleteTexture(texture);
    texture.name = 0;
    GL.textures[id] = null;
  }
};

var _emscripten_glDeleteTextures = _glDeleteTextures;

/** @suppress {duplicate } */ var _glDeleteVertexArrays = (n, vaos) => {
  for (var i = 0; i < n; i++) {
    var id = GROWABLE_HEAP_I32()[(((vaos) + (i * 4)) >> 2)];
    GLctx.deleteVertexArray(GL.vaos[id]);
    GL.vaos[id] = null;
  }
};

/** @suppress {duplicate } */ var _glDeleteVertexArraysOES = _glDeleteVertexArrays;

var _emscripten_glDeleteVertexArraysOES = _glDeleteVertexArraysOES;

/** @suppress {duplicate } */ var _glDepthFunc = x0 => GLctx.depthFunc(x0);

var _emscripten_glDepthFunc = _glDepthFunc;

/** @suppress {duplicate } */ var _glDepthMask = flag => {
  GLctx.depthMask(!!flag);
};

var _emscripten_glDepthMask = _glDepthMask;

/** @suppress {duplicate } */ var _glDepthRangef = (x0, x1) => GLctx.depthRange(x0, x1);

var _emscripten_glDepthRangef = _glDepthRangef;

/** @suppress {duplicate } */ var _glDetachShader = (program, shader) => {
  GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
};

var _emscripten_glDetachShader = _glDetachShader;

/** @suppress {duplicate } */ var _glDisable = x0 => GLctx.disable(x0);

var _emscripten_glDisable = _glDisable;

/** @suppress {duplicate } */ var _glDisableVertexAttribArray = index => {
  GLctx.disableVertexAttribArray(index);
};

var _emscripten_glDisableVertexAttribArray = _glDisableVertexAttribArray;

/** @suppress {duplicate } */ var _glDrawArrays = (mode, first, count) => {
  GLctx.drawArrays(mode, first, count);
};

var _emscripten_glDrawArrays = _glDrawArrays;

/** @suppress {duplicate } */ var _glDrawArraysInstanced = (mode, first, count, primcount) => {
  GLctx.drawArraysInstanced(mode, first, count, primcount);
};

/** @suppress {duplicate } */ var _glDrawArraysInstancedANGLE = _glDrawArraysInstanced;

var _emscripten_glDrawArraysInstancedANGLE = _glDrawArraysInstancedANGLE;

var tempFixedLengthArray = [];

/** @suppress {duplicate } */ var _glDrawBuffers = (n, bufs) => {
  var bufArray = tempFixedLengthArray[n];
  for (var i = 0; i < n; i++) {
    bufArray[i] = GROWABLE_HEAP_I32()[(((bufs) + (i * 4)) >> 2)];
  }
  GLctx.drawBuffers(bufArray);
};

/** @suppress {duplicate } */ var _glDrawBuffersWEBGL = _glDrawBuffers;

var _emscripten_glDrawBuffersWEBGL = _glDrawBuffersWEBGL;

/** @suppress {duplicate } */ var _glDrawElements = (mode, count, type, indices) => {
  GLctx.drawElements(mode, count, type, indices);
};

var _emscripten_glDrawElements = _glDrawElements;

/** @suppress {duplicate } */ var _glDrawElementsInstanced = (mode, count, type, indices, primcount) => {
  GLctx.drawElementsInstanced(mode, count, type, indices, primcount);
};

/** @suppress {duplicate } */ var _glDrawElementsInstancedANGLE = _glDrawElementsInstanced;

var _emscripten_glDrawElementsInstancedANGLE = _glDrawElementsInstancedANGLE;

/** @suppress {duplicate } */ var _glEnable = x0 => GLctx.enable(x0);

var _emscripten_glEnable = _glEnable;

/** @suppress {duplicate } */ var _glEnableVertexAttribArray = index => {
  GLctx.enableVertexAttribArray(index);
};

var _emscripten_glEnableVertexAttribArray = _glEnableVertexAttribArray;

/** @suppress {duplicate } */ var _glEndQueryEXT = target => {
  GLctx.disjointTimerQueryExt["endQueryEXT"](target);
};

var _emscripten_glEndQueryEXT = _glEndQueryEXT;

/** @suppress {duplicate } */ var _glFinish = () => GLctx.finish();

var _emscripten_glFinish = _glFinish;

/** @suppress {duplicate } */ var _glFlush = () => GLctx.flush();

var _emscripten_glFlush = _glFlush;

/** @suppress {duplicate } */ var _glFramebufferRenderbuffer = (target, attachment, renderbuffertarget, renderbuffer) => {
  GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer]);
};

var _emscripten_glFramebufferRenderbuffer = _glFramebufferRenderbuffer;

/** @suppress {duplicate } */ var _glFramebufferTexture2D = (target, attachment, textarget, texture, level) => {
  GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level);
};

var _emscripten_glFramebufferTexture2D = _glFramebufferTexture2D;

/** @suppress {duplicate } */ var _glFrontFace = x0 => GLctx.frontFace(x0);

var _emscripten_glFrontFace = _glFrontFace;

/** @suppress {duplicate } */ var _glGenBuffers = (n, buffers) => {
  GL.genObject(n, buffers, "createBuffer", GL.buffers);
};

var _emscripten_glGenBuffers = _glGenBuffers;

/** @suppress {duplicate } */ var _glGenFramebuffers = (n, ids) => {
  GL.genObject(n, ids, "createFramebuffer", GL.framebuffers);
};

var _emscripten_glGenFramebuffers = _glGenFramebuffers;

/** @suppress {duplicate } */ var _glGenQueriesEXT = (n, ids) => {
  for (var i = 0; i < n; i++) {
    var query = GLctx.disjointTimerQueryExt["createQueryEXT"]();
    if (!query) {
      GL.recordError(1282);
      while (i < n) GROWABLE_HEAP_I32()[(((ids) + (i++ * 4)) >> 2)] = 0;
      return;
    }
    var id = GL.getNewId(GL.queries);
    query.name = id;
    GL.queries[id] = query;
    GROWABLE_HEAP_I32()[(((ids) + (i * 4)) >> 2)] = id;
  }
};

var _emscripten_glGenQueriesEXT = _glGenQueriesEXT;

/** @suppress {duplicate } */ var _glGenRenderbuffers = (n, renderbuffers) => {
  GL.genObject(n, renderbuffers, "createRenderbuffer", GL.renderbuffers);
};

var _emscripten_glGenRenderbuffers = _glGenRenderbuffers;

/** @suppress {duplicate } */ var _glGenTextures = (n, textures) => {
  GL.genObject(n, textures, "createTexture", GL.textures);
};

var _emscripten_glGenTextures = _glGenTextures;

/** @suppress {duplicate } */ var _glGenVertexArrays = (n, arrays) => {
  GL.genObject(n, arrays, "createVertexArray", GL.vaos);
};

/** @suppress {duplicate } */ var _glGenVertexArraysOES = _glGenVertexArrays;

var _emscripten_glGenVertexArraysOES = _glGenVertexArraysOES;

/** @suppress {duplicate } */ var _glGenerateMipmap = x0 => GLctx.generateMipmap(x0);

var _emscripten_glGenerateMipmap = _glGenerateMipmap;

var __glGetActiveAttribOrUniform = (funcName, program, index, bufSize, length, size, type, name) => {
  program = GL.programs[program];
  var info = GLctx[funcName](program, index);
  if (info) {
    // If an error occurs, nothing will be written to length, size and type and name.
    var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
    if (length) GROWABLE_HEAP_I32()[((length) >> 2)] = numBytesWrittenExclNull;
    if (size) GROWABLE_HEAP_I32()[((size) >> 2)] = info.size;
    if (type) GROWABLE_HEAP_I32()[((type) >> 2)] = info.type;
  }
};

/** @suppress {duplicate } */ var _glGetActiveAttrib = (program, index, bufSize, length, size, type, name) => __glGetActiveAttribOrUniform("getActiveAttrib", program, index, bufSize, length, size, type, name);

var _emscripten_glGetActiveAttrib = _glGetActiveAttrib;

/** @suppress {duplicate } */ var _glGetActiveUniform = (program, index, bufSize, length, size, type, name) => __glGetActiveAttribOrUniform("getActiveUniform", program, index, bufSize, length, size, type, name);

var _emscripten_glGetActiveUniform = _glGetActiveUniform;

/** @suppress {duplicate } */ var _glGetAttachedShaders = (program, maxCount, count, shaders) => {
  var result = GLctx.getAttachedShaders(GL.programs[program]);
  var len = result.length;
  if (len > maxCount) {
    len = maxCount;
  }
  GROWABLE_HEAP_I32()[((count) >> 2)] = len;
  for (var i = 0; i < len; ++i) {
    var id = GL.shaders.indexOf(result[i]);
    GROWABLE_HEAP_I32()[(((shaders) + (i * 4)) >> 2)] = id;
  }
};

var _emscripten_glGetAttachedShaders = _glGetAttachedShaders;

/** @suppress {duplicate } */ var _glGetAttribLocation = (program, name) => GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));

var _emscripten_glGetAttribLocation = _glGetAttribLocation;

var readI53FromI64 = ptr => GROWABLE_HEAP_U32()[((ptr) >> 2)] + GROWABLE_HEAP_I32()[(((ptr) + (4)) >> 2)] * 4294967296;

var readI53FromU64 = ptr => GROWABLE_HEAP_U32()[((ptr) >> 2)] + GROWABLE_HEAP_U32()[(((ptr) + (4)) >> 2)] * 4294967296;

var writeI53ToI64 = (ptr, num) => {
  GROWABLE_HEAP_U32()[((ptr) >> 2)] = num;
  var lower = GROWABLE_HEAP_U32()[((ptr) >> 2)];
  GROWABLE_HEAP_U32()[(((ptr) + (4)) >> 2)] = (num - lower) / 4294967296;
  var deserialized = (num >= 0) ? readI53FromU64(ptr) : readI53FromI64(ptr);
  var offset = ((ptr) >> 2);
  if (deserialized != num) warnOnce(`writeI53ToI64() out of range: serialized JS Number ${num} to Wasm heap as bytes lo=${ptrToString(GROWABLE_HEAP_U32()[offset])}, hi=${ptrToString(GROWABLE_HEAP_U32()[offset + 1])}, which deserializes back to ${deserialized} instead!`);
};

var emscriptenWebGLGet = (name_, p, type) => {
  // Guard against user passing a null pointer.
  // Note that GLES2 spec does not say anything about how passing a null
  // pointer should be treated.  Testing on desktop core GL 3, the application
  // crashes on glGetIntegerv to a null pointer, but better to report an error
  // instead of doing anything random.
  if (!p) {
    GL.recordError(1281);
    return;
  }
  var ret = undefined;
  switch (name_) {
   // Handle a few trivial GLES values
    case 36346:
    // GL_SHADER_COMPILER
    ret = 1;
    break;

   case 36344:
    // GL_SHADER_BINARY_FORMATS
    if (type != 0 && type != 1) {
      GL.recordError(1280);
    }
    // Do not write anything to the out pointer, since no binary formats are
    // supported.
    return;

   case 36345:
    // GL_NUM_SHADER_BINARY_FORMATS
    ret = 0;
    break;

   case 34466:
    // GL_NUM_COMPRESSED_TEXTURE_FORMATS
    // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete
    // since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be
    // queried for length), so implement it ourselves to allow C++ GLES2
    // code get the length.
    var formats = GLctx.getParameter(34467);
    ret = formats ? formats.length : 0;
    break;
  }
  if (ret === undefined) {
    var result = GLctx.getParameter(name_);
    switch (typeof result) {
     case "number":
      ret = result;
      break;

     case "boolean":
      ret = result ? 1 : 0;
      break;

     case "string":
      GL.recordError(1280);
      // GL_INVALID_ENUM
      return;

     case "object":
      if (result === null) {
        // null is a valid result for some (e.g., which buffer is bound -
        // perhaps nothing is bound), but otherwise can mean an invalid
        // name_, which we need to report as an error
        switch (name_) {
         case 34964:
         // ARRAY_BUFFER_BINDING
          case 35725:
         // CURRENT_PROGRAM
          case 34965:
         // ELEMENT_ARRAY_BUFFER_BINDING
          case 36006:
         // FRAMEBUFFER_BINDING or DRAW_FRAMEBUFFER_BINDING
          case 36007:
         // RENDERBUFFER_BINDING
          case 32873:
         // TEXTURE_BINDING_2D
          case 34229:
         // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
          case 34068:
          {
            // TEXTURE_BINDING_CUBE_MAP
            ret = 0;
            break;
          }

         default:
          {
            GL.recordError(1280);
            // GL_INVALID_ENUM
            return;
          }
        }
      } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
        for (var i = 0; i < result.length; ++i) {
          switch (type) {
           case 0:
            GROWABLE_HEAP_I32()[(((p) + (i * 4)) >> 2)] = result[i];
            break;

           case 2:
            GROWABLE_HEAP_F32()[(((p) + (i * 4)) >> 2)] = result[i];
            break;

           case 4:
            GROWABLE_HEAP_I8()[(p) + (i)] = result[i] ? 1 : 0;
            break;
          }
        }
        return;
      } else {
        try {
          ret = result.name | 0;
        } catch (e) {
          GL.recordError(1280);
          // GL_INVALID_ENUM
          err(`GL_INVALID_ENUM in glGet${type}v: Unknown object returned from WebGL getParameter(${name_})! (error: ${e})`);
          return;
        }
      }
      break;

     default:
      GL.recordError(1280);
      // GL_INVALID_ENUM
      err(`GL_INVALID_ENUM in glGet${type}v: Native code calling glGet${type}v(${name_}) and it returns ${result} of type ${typeof (result)}!`);
      return;
    }
  }
  switch (type) {
   case 1:
    writeI53ToI64(p, ret);
    break;

   case 0:
    GROWABLE_HEAP_I32()[((p) >> 2)] = ret;
    break;

   case 2:
    GROWABLE_HEAP_F32()[((p) >> 2)] = ret;
    break;

   case 4:
    GROWABLE_HEAP_I8()[p] = ret ? 1 : 0;
    break;
  }
};

/** @suppress {duplicate } */ var _glGetBooleanv = (name_, p) => emscriptenWebGLGet(name_, p, 4);

var _emscripten_glGetBooleanv = _glGetBooleanv;

/** @suppress {duplicate } */ var _glGetBufferParameteriv = (target, value, data) => {
  if (!data) {
    // GLES2 specification does not specify how to behave if data is a null
    // pointer. Since calling this function does not make sense if data ==
    // null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((data) >> 2)] = GLctx.getBufferParameter(target, value);
};

var _emscripten_glGetBufferParameteriv = _glGetBufferParameteriv;

/** @suppress {duplicate } */ var _glGetError = () => {
  var error = GLctx.getError() || GL.lastError;
  GL.lastError = 0;
  return error;
};

var _emscripten_glGetError = _glGetError;

/** @suppress {duplicate } */ var _glGetFloatv = (name_, p) => emscriptenWebGLGet(name_, p, 2);

var _emscripten_glGetFloatv = _glGetFloatv;

/** @suppress {duplicate } */ var _glGetFramebufferAttachmentParameteriv = (target, attachment, pname, params) => {
  var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
  if (result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
    result = result.name | 0;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = result;
};

var _emscripten_glGetFramebufferAttachmentParameteriv = _glGetFramebufferAttachmentParameteriv;

/** @suppress {duplicate } */ var _glGetIntegerv = (name_, p) => emscriptenWebGLGet(name_, p, 0);

var _emscripten_glGetIntegerv = _glGetIntegerv;

/** @suppress {duplicate } */ var _glGetProgramInfoLog = (program, maxLength, length, infoLog) => {
  var log = GLctx.getProgramInfoLog(GL.programs[program]);
  if (log === null) log = "(unknown error)";
  var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
  if (length) GROWABLE_HEAP_I32()[((length) >> 2)] = numBytesWrittenExclNull;
};

var _emscripten_glGetProgramInfoLog = _glGetProgramInfoLog;

/** @suppress {duplicate } */ var _glGetProgramiv = (program, pname, p) => {
  if (!p) {
    // GLES2 specification does not specify how to behave if p is a null
    // pointer. Since calling this function does not make sense if p == null,
    // issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  if (program >= GL.counter) {
    GL.recordError(1281);
    return;
  }
  program = GL.programs[program];
  if (pname == 35716) {
    // GL_INFO_LOG_LENGTH
    var log = GLctx.getProgramInfoLog(program);
    if (log === null) log = "(unknown error)";
    GROWABLE_HEAP_I32()[((p) >> 2)] = log.length + 1;
  } else if (pname == 35719) {
    if (!program.maxUniformLength) {
      var numActiveUniforms = GLctx.getProgramParameter(program, 35718);
      for (var i = 0; i < numActiveUniforms; ++i) {
        program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length + 1);
      }
    }
    GROWABLE_HEAP_I32()[((p) >> 2)] = program.maxUniformLength;
  } else if (pname == 35722) {
    if (!program.maxAttributeLength) {
      var numActiveAttributes = GLctx.getProgramParameter(program, 35721);
      for (var i = 0; i < numActiveAttributes; ++i) {
        program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length + 1);
      }
    }
    GROWABLE_HEAP_I32()[((p) >> 2)] = program.maxAttributeLength;
  } else if (pname == 35381) {
    if (!program.maxUniformBlockNameLength) {
      var numActiveUniformBlocks = GLctx.getProgramParameter(program, 35382);
      for (var i = 0; i < numActiveUniformBlocks; ++i) {
        program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length + 1);
      }
    }
    GROWABLE_HEAP_I32()[((p) >> 2)] = program.maxUniformBlockNameLength;
  } else {
    GROWABLE_HEAP_I32()[((p) >> 2)] = GLctx.getProgramParameter(program, pname);
  }
};

var _emscripten_glGetProgramiv = _glGetProgramiv;

/** @suppress {duplicate } */ var _glGetQueryObjecti64vEXT = (id, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
    // if p == null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  var query = GL.queries[id];
  var param;
  {
    param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
  }
  var ret;
  if (typeof param == "boolean") {
    ret = param ? 1 : 0;
  } else {
    ret = param;
  }
  writeI53ToI64(params, ret);
};

var _emscripten_glGetQueryObjecti64vEXT = _glGetQueryObjecti64vEXT;

/** @suppress {duplicate } */ var _glGetQueryObjectivEXT = (id, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
    // if p == null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  var query = GL.queries[id];
  var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
  var ret;
  if (typeof param == "boolean") {
    ret = param ? 1 : 0;
  } else {
    ret = param;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = ret;
};

var _emscripten_glGetQueryObjectivEXT = _glGetQueryObjectivEXT;

/** @suppress {duplicate } */ var _glGetQueryObjectui64vEXT = _glGetQueryObjecti64vEXT;

var _emscripten_glGetQueryObjectui64vEXT = _glGetQueryObjectui64vEXT;

/** @suppress {duplicate } */ var _glGetQueryObjectuivEXT = _glGetQueryObjectivEXT;

var _emscripten_glGetQueryObjectuivEXT = _glGetQueryObjectuivEXT;

/** @suppress {duplicate } */ var _glGetQueryivEXT = (target, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
    // if p == null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = GLctx.disjointTimerQueryExt["getQueryEXT"](target, pname);
};

var _emscripten_glGetQueryivEXT = _glGetQueryivEXT;

/** @suppress {duplicate } */ var _glGetRenderbufferParameteriv = (target, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
    // if params == null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = GLctx.getRenderbufferParameter(target, pname);
};

var _emscripten_glGetRenderbufferParameteriv = _glGetRenderbufferParameteriv;

/** @suppress {duplicate } */ var _glGetShaderInfoLog = (shader, maxLength, length, infoLog) => {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  if (log === null) log = "(unknown error)";
  var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
  if (length) GROWABLE_HEAP_I32()[((length) >> 2)] = numBytesWrittenExclNull;
};

var _emscripten_glGetShaderInfoLog = _glGetShaderInfoLog;

/** @suppress {duplicate } */ var _glGetShaderPrecisionFormat = (shaderType, precisionType, range, precision) => {
  var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
  GROWABLE_HEAP_I32()[((range) >> 2)] = result.rangeMin;
  GROWABLE_HEAP_I32()[(((range) + (4)) >> 2)] = result.rangeMax;
  GROWABLE_HEAP_I32()[((precision) >> 2)] = result.precision;
};

var _emscripten_glGetShaderPrecisionFormat = _glGetShaderPrecisionFormat;

/** @suppress {duplicate } */ var _glGetShaderSource = (shader, bufSize, length, source) => {
  var result = GLctx.getShaderSource(GL.shaders[shader]);
  if (!result) return;
  // If an error occurs, nothing will be written to length or source.
  var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
  if (length) GROWABLE_HEAP_I32()[((length) >> 2)] = numBytesWrittenExclNull;
};

var _emscripten_glGetShaderSource = _glGetShaderSource;

/** @suppress {duplicate } */ var _glGetShaderiv = (shader, pname, p) => {
  if (!p) {
    // GLES2 specification does not specify how to behave if p is a null
    // pointer. Since calling this function does not make sense if p == null,
    // issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  if (pname == 35716) {
    // GL_INFO_LOG_LENGTH
    var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
    if (log === null) log = "(unknown error)";
    // The GLES2 specification says that if the shader has an empty info log,
    // a value of 0 is returned. Otherwise the log has a null char appended.
    // (An empty string is falsey, so we can just check that instead of
    // looking at log.length.)
    var logLength = log ? log.length + 1 : 0;
    GROWABLE_HEAP_I32()[((p) >> 2)] = logLength;
  } else if (pname == 35720) {
    // GL_SHADER_SOURCE_LENGTH
    var source = GLctx.getShaderSource(GL.shaders[shader]);
    // source may be a null, or the empty string, both of which are falsey
    // values that we report a 0 length for.
    var sourceLength = source ? source.length + 1 : 0;
    GROWABLE_HEAP_I32()[((p) >> 2)] = sourceLength;
  } else {
    GROWABLE_HEAP_I32()[((p) >> 2)] = GLctx.getShaderParameter(GL.shaders[shader], pname);
  }
};

var _emscripten_glGetShaderiv = _glGetShaderiv;

var stringToNewUTF8 = str => {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8(str, ret, size);
  return ret;
};

var webglGetExtensions = () => {
  var exts = getEmscriptenSupportedExtensions(GLctx);
  exts = exts.concat(exts.map(e => "GL_" + e));
  return exts;
};

/** @suppress {duplicate } */ var _glGetString = name_ => {
  var ret = GL.stringCache[name_];
  if (!ret) {
    switch (name_) {
     case 7939:
      ret = stringToNewUTF8(webglGetExtensions().join(" "));
      break;

     case 7936:
     case 7937:
     case 37445:
     case 37446:
      var s = GLctx.getParameter(name_);
      if (!s) {
        GL.recordError(1280);
      }
      ret = s ? stringToNewUTF8(s) : 0;
      break;

     case 7938:
      var webGLVersion = GLctx.getParameter(7938);
      // return GLES version string corresponding to the version of the WebGL context
      var glVersion = `OpenGL ES 2.0 (${webGLVersion})`;
      ret = stringToNewUTF8(glVersion);
      break;

     case 35724:
      var glslVersion = GLctx.getParameter(35724);
      // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
      var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
      var ver_num = glslVersion.match(ver_re);
      if (ver_num !== null) {
        if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + "0";
        // ensure minor version has 2 digits
        glslVersion = `OpenGL ES GLSL ES ${ver_num[1]} (${glslVersion})`;
      }
      ret = stringToNewUTF8(glslVersion);
      break;

     default:
      GL.recordError(1280);
    }
    GL.stringCache[name_] = ret;
  }
  return ret;
};

var _emscripten_glGetString = _glGetString;

/** @suppress {duplicate } */ var _glGetTexParameterfv = (target, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null
    // pointer. Since calling this function does not make sense if p == null,
    // issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_F32()[((params) >> 2)] = GLctx.getTexParameter(target, pname);
};

var _emscripten_glGetTexParameterfv = _glGetTexParameterfv;

/** @suppress {duplicate } */ var _glGetTexParameteriv = (target, pname, params) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null
    // pointer. Since calling this function does not make sense if p == null,
    // issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((params) >> 2)] = GLctx.getTexParameter(target, pname);
};

var _emscripten_glGetTexParameteriv = _glGetTexParameteriv;

/** @suppress {checkTypes} */ var jstoi_q = str => parseInt(str);

/** @noinline */ var webglGetLeftBracePos = name => name.slice(-1) == "]" && name.lastIndexOf("[");

var webglPrepareUniformLocationsBeforeFirstUse = program => {
  var uniformLocsById = program.uniformLocsById, // Maps GLuint -> WebGLUniformLocation
  uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, // Maps name -> [uniform array length, GLuint]
  i, j;
  // On the first time invocation of glGetUniformLocation on this shader program:
  // initialize cache data structures and discover which uniforms are arrays.
  if (!uniformLocsById) {
    // maps GLint integer locations to WebGLUniformLocations
    program.uniformLocsById = uniformLocsById = {};
    // maps integer locations back to uniform name strings, so that we can lazily fetch uniform array locations
    program.uniformArrayNamesById = {};
    var numActiveUniforms = GLctx.getProgramParameter(program, 35718);
    for (i = 0; i < numActiveUniforms; ++i) {
      var u = GLctx.getActiveUniform(program, i);
      var nm = u.name;
      var sz = u.size;
      var lb = webglGetLeftBracePos(nm);
      var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
      // Assign a new location.
      var id = program.uniformIdCounter;
      program.uniformIdCounter += sz;
      // Eagerly get the location of the uniformArray[0] base element.
      // The remaining indices >0 will be left for lazy evaluation to
      // improve performance. Those may never be needed to fetch, if the
      // application fills arrays always in full starting from the first
      // element of the array.
      uniformSizeAndIdsByName[arrayName] = [ sz, id ];
      // Store placeholder integers in place that highlight that these
      // >0 index locations are array indices pending population.
      for (j = 0; j < sz; ++j) {
        uniformLocsById[id] = j;
        program.uniformArrayNamesById[id++] = arrayName;
      }
    }
  }
};

/** @suppress {duplicate } */ var _glGetUniformLocation = (program, name) => {
  name = UTF8ToString(name);
  if (program = GL.programs[program]) {
    webglPrepareUniformLocationsBeforeFirstUse(program);
    var uniformLocsById = program.uniformLocsById;
    // Maps GLuint -> WebGLUniformLocation
    var arrayIndex = 0;
    var uniformBaseName = name;
    // Invariant: when populating integer IDs for uniform locations, we must
    // maintain the precondition that arrays reside in contiguous addresses,
    // i.e. for a 'vec4 colors[10];', colors[4] must be at location
    // colors[0]+4.  However, user might call glGetUniformLocation(program,
    // "colors") for an array, so we cannot discover based on the user input
    // arguments whether the uniform we are dealing with is an array. The only
    // way to discover which uniforms are arrays is to enumerate over all the
    // active uniforms in the program.
    var leftBrace = webglGetLeftBracePos(name);
    // If user passed an array accessor "[index]", parse the array index off the accessor.
    if (leftBrace > 0) {
      arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0;
      // "index]", coerce parseInt(']') with >>>0 to treat "foo[]" as "foo[0]" and foo[-1] as unsigned out-of-bounds.
      uniformBaseName = name.slice(0, leftBrace);
    }
    // Have we cached the location of this uniform before?
    // A pair [array length, GLint of the uniform location]
    var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
    // If an uniform with this name exists, and if its index is within the
    // array limits (if it's even an array), query the WebGLlocation, or
    // return an existing cached location.
    if (sizeAndId && arrayIndex < sizeAndId[0]) {
      arrayIndex += sizeAndId[1];
      // Add the base location of the uniform to the array index offset.
      if ((uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name))) {
        return arrayIndex;
      }
    }
  } else {
    // N.b. we are currently unable to distinguish between GL program IDs that
    // never existed vs GL program IDs that have been deleted, so report
    // GL_INVALID_VALUE in both cases.
    GL.recordError(1281);
  }
  return -1;
};

var _emscripten_glGetUniformLocation = _glGetUniformLocation;

var webglGetUniformLocation = location => {
  var p = GLctx.currentProgram;
  if (p) {
    var webglLoc = p.uniformLocsById[location];
    // p.uniformLocsById[location] stores either an integer, or a
    // WebGLUniformLocation.
    // If an integer, we have not yet bound the location, so do it now. The
    // integer value specifies the array index we should bind to.
    if (typeof webglLoc == "number") {
      p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? `[${webglLoc}]` : ""));
    }
    // Else an already cached WebGLUniformLocation, return it.
    return webglLoc;
  } else {
    GL.recordError(1282);
  }
};

/** @suppress{checkTypes} */ var emscriptenWebGLGetUniform = (program, location, params, type) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null
    // pointer. Since calling this function does not make sense if params ==
    // null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  program = GL.programs[program];
  webglPrepareUniformLocationsBeforeFirstUse(program);
  var data = GLctx.getUniform(program, webglGetUniformLocation(location));
  if (typeof data == "number" || typeof data == "boolean") {
    switch (type) {
     case 0:
      GROWABLE_HEAP_I32()[((params) >> 2)] = data;
      break;

     case 2:
      GROWABLE_HEAP_F32()[((params) >> 2)] = data;
      break;
    }
  } else {
    for (var i = 0; i < data.length; i++) {
      switch (type) {
       case 0:
        GROWABLE_HEAP_I32()[(((params) + (i * 4)) >> 2)] = data[i];
        break;

       case 2:
        GROWABLE_HEAP_F32()[(((params) + (i * 4)) >> 2)] = data[i];
        break;
      }
    }
  }
};

/** @suppress {duplicate } */ var _glGetUniformfv = (program, location, params) => {
  emscriptenWebGLGetUniform(program, location, params, 2);
};

var _emscripten_glGetUniformfv = _glGetUniformfv;

/** @suppress {duplicate } */ var _glGetUniformiv = (program, location, params) => {
  emscriptenWebGLGetUniform(program, location, params, 0);
};

var _emscripten_glGetUniformiv = _glGetUniformiv;

/** @suppress {duplicate } */ var _glGetVertexAttribPointerv = (index, pname, pointer) => {
  if (!pointer) {
    // GLES2 specification does not specify how to behave if pointer is a null
    // pointer. Since calling this function does not make sense if pointer ==
    // null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  GROWABLE_HEAP_I32()[((pointer) >> 2)] = GLctx.getVertexAttribOffset(index, pname);
};

var _emscripten_glGetVertexAttribPointerv = _glGetVertexAttribPointerv;

/** @suppress{checkTypes} */ var emscriptenWebGLGetVertexAttrib = (index, pname, params, type) => {
  if (!params) {
    // GLES2 specification does not specify how to behave if params is a null
    // pointer. Since calling this function does not make sense if params ==
    // null, issue a GL error to notify user about it.
    GL.recordError(1281);
    return;
  }
  var data = GLctx.getVertexAttrib(index, pname);
  if (pname == 34975) {
    GROWABLE_HEAP_I32()[((params) >> 2)] = data && data["name"];
  } else if (typeof data == "number" || typeof data == "boolean") {
    switch (type) {
     case 0:
      GROWABLE_HEAP_I32()[((params) >> 2)] = data;
      break;

     case 2:
      GROWABLE_HEAP_F32()[((params) >> 2)] = data;
      break;

     case 5:
      GROWABLE_HEAP_I32()[((params) >> 2)] = Math.fround(data);
      break;
    }
  } else {
    for (var i = 0; i < data.length; i++) {
      switch (type) {
       case 0:
        GROWABLE_HEAP_I32()[(((params) + (i * 4)) >> 2)] = data[i];
        break;

       case 2:
        GROWABLE_HEAP_F32()[(((params) + (i * 4)) >> 2)] = data[i];
        break;

       case 5:
        GROWABLE_HEAP_I32()[(((params) + (i * 4)) >> 2)] = Math.fround(data[i]);
        break;
      }
    }
  }
};

/** @suppress {duplicate } */ var _glGetVertexAttribfv = (index, pname, params) => {
  // N.B. This function may only be called if the vertex attribute was
  // specified using the function glVertexAttrib*f(), otherwise the results
  // are undefined. (GLES3 spec 6.1.12)
  emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
};

var _emscripten_glGetVertexAttribfv = _glGetVertexAttribfv;

/** @suppress {duplicate } */ var _glGetVertexAttribiv = (index, pname, params) => {
  // N.B. This function may only be called if the vertex attribute was
  // specified using the function glVertexAttrib*f(), otherwise the results
  // are undefined. (GLES3 spec 6.1.12)
  emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
};

var _emscripten_glGetVertexAttribiv = _glGetVertexAttribiv;

/** @suppress {duplicate } */ var _glHint = (x0, x1) => GLctx.hint(x0, x1);

var _emscripten_glHint = _glHint;

/** @suppress {duplicate } */ var _glIsBuffer = buffer => {
  var b = GL.buffers[buffer];
  if (!b) return 0;
  return GLctx.isBuffer(b);
};

var _emscripten_glIsBuffer = _glIsBuffer;

/** @suppress {duplicate } */ var _glIsEnabled = x0 => GLctx.isEnabled(x0);

var _emscripten_glIsEnabled = _glIsEnabled;

/** @suppress {duplicate } */ var _glIsFramebuffer = framebuffer => {
  var fb = GL.framebuffers[framebuffer];
  if (!fb) return 0;
  return GLctx.isFramebuffer(fb);
};

var _emscripten_glIsFramebuffer = _glIsFramebuffer;

/** @suppress {duplicate } */ var _glIsProgram = program => {
  program = GL.programs[program];
  if (!program) return 0;
  return GLctx.isProgram(program);
};

var _emscripten_glIsProgram = _glIsProgram;

/** @suppress {duplicate } */ var _glIsQueryEXT = id => {
  var query = GL.queries[id];
  if (!query) return 0;
  return GLctx.disjointTimerQueryExt["isQueryEXT"](query);
};

var _emscripten_glIsQueryEXT = _glIsQueryEXT;

/** @suppress {duplicate } */ var _glIsRenderbuffer = renderbuffer => {
  var rb = GL.renderbuffers[renderbuffer];
  if (!rb) return 0;
  return GLctx.isRenderbuffer(rb);
};

var _emscripten_glIsRenderbuffer = _glIsRenderbuffer;

/** @suppress {duplicate } */ var _glIsShader = shader => {
  var s = GL.shaders[shader];
  if (!s) return 0;
  return GLctx.isShader(s);
};

var _emscripten_glIsShader = _glIsShader;

/** @suppress {duplicate } */ var _glIsTexture = id => {
  var texture = GL.textures[id];
  if (!texture) return 0;
  return GLctx.isTexture(texture);
};

var _emscripten_glIsTexture = _glIsTexture;

/** @suppress {duplicate } */ var _glIsVertexArray = array => {
  var vao = GL.vaos[array];
  if (!vao) return 0;
  return GLctx.isVertexArray(vao);
};

/** @suppress {duplicate } */ var _glIsVertexArrayOES = _glIsVertexArray;

var _emscripten_glIsVertexArrayOES = _glIsVertexArrayOES;

/** @suppress {duplicate } */ var _glLineWidth = x0 => GLctx.lineWidth(x0);

var _emscripten_glLineWidth = _glLineWidth;

/** @suppress {duplicate } */ var _glLinkProgram = program => {
  program = GL.programs[program];
  GLctx.linkProgram(program);
  // Invalidate earlier computed uniform->ID mappings, those have now become stale
  program.uniformLocsById = 0;
  // Mark as null-like so that glGetUniformLocation() knows to populate this again.
  program.uniformSizeAndIdsByName = {};
};

var _emscripten_glLinkProgram = _glLinkProgram;

/** @suppress {duplicate } */ var _glPixelStorei = (pname, param) => {
  if (pname == 3317) {
    GL.unpackAlignment = param;
  } else if (pname == 3314) {
    GL.unpackRowLength = param;
  }
  GLctx.pixelStorei(pname, param);
};

var _emscripten_glPixelStorei = _glPixelStorei;

/** @suppress {duplicate } */ var _glPolygonModeWEBGL = (face, mode) => {
  GLctx.webglPolygonMode["polygonModeWEBGL"](face, mode);
};

var _emscripten_glPolygonModeWEBGL = _glPolygonModeWEBGL;

/** @suppress {duplicate } */ var _glPolygonOffset = (x0, x1) => GLctx.polygonOffset(x0, x1);

var _emscripten_glPolygonOffset = _glPolygonOffset;

/** @suppress {duplicate } */ var _glPolygonOffsetClampEXT = (factor, units, clamp) => {
  GLctx.extPolygonOffsetClamp["polygonOffsetClampEXT"](factor, units, clamp);
};

var _emscripten_glPolygonOffsetClampEXT = _glPolygonOffsetClampEXT;

/** @suppress {duplicate } */ var _glQueryCounterEXT = (id, target) => {
  GLctx.disjointTimerQueryExt["queryCounterEXT"](GL.queries[id], target);
};

var _emscripten_glQueryCounterEXT = _glQueryCounterEXT;

var computeUnpackAlignedImageSize = (width, height, sizePerPixel) => {
  function roundedToNextMultipleOf(x, y) {
    return (x + y - 1) & -y;
  }
  var plainRowSize = (GL.unpackRowLength || width) * sizePerPixel;
  var alignedRowSize = roundedToNextMultipleOf(plainRowSize, GL.unpackAlignment);
  return height * alignedRowSize;
};

var colorChannelsInGlTextureFormat = format => {
  // Micro-optimizations for size: map format to size by subtracting smallest
  // enum value (0x1902) from all values first.  Also omit the most common
  // size value (1) from the list, which is assumed by formats not on the
  // list.
  var colorChannels = {
    // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
    // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
    5: 3,
    6: 4,
    // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
    8: 2,
    29502: 3,
    29504: 4
  };
  return colorChannels[format - 6402] || 1;
};

var heapObjectForWebGLType = type => {
  // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
  // smaller values for the heap, for shorter generated code size.
  // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
  // (since most types are HEAPU16)
  type -= 5120;
  if (type == 1) return GROWABLE_HEAP_U8();
  if (type == 4) return GROWABLE_HEAP_I32();
  if (type == 6) return GROWABLE_HEAP_F32();
  if (type == 5 || type == 28922) return GROWABLE_HEAP_U32();
  return GROWABLE_HEAP_U16();
};

var toTypedArrayIndex = (pointer, heap) => pointer >>> (31 - Math.clz32(heap.BYTES_PER_ELEMENT));

var emscriptenWebGLGetTexPixelData = (type, format, width, height, pixels, internalFormat) => {
  var heap = heapObjectForWebGLType(type);
  var sizePerPixel = colorChannelsInGlTextureFormat(format) * heap.BYTES_PER_ELEMENT;
  var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel);
  return heap.subarray(toTypedArrayIndex(pixels, heap), toTypedArrayIndex(pixels + bytes, heap));
};

/** @suppress {duplicate } */ var _glReadPixels = (x, y, width, height, format, type, pixels) => {
  var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
  if (!pixelData) {
    GL.recordError(1280);
    return;
  }
  GLctx.readPixels(x, y, width, height, format, type, pixelData);
};

var _emscripten_glReadPixels = _glReadPixels;

/** @suppress {duplicate } */ var _glReleaseShaderCompiler = () => {};

var _emscripten_glReleaseShaderCompiler = _glReleaseShaderCompiler;

/** @suppress {duplicate } */ var _glRenderbufferStorage = (x0, x1, x2, x3) => GLctx.renderbufferStorage(x0, x1, x2, x3);

var _emscripten_glRenderbufferStorage = _glRenderbufferStorage;

/** @suppress {duplicate } */ var _glSampleCoverage = (value, invert) => {
  GLctx.sampleCoverage(value, !!invert);
};

var _emscripten_glSampleCoverage = _glSampleCoverage;

/** @suppress {duplicate } */ var _glScissor = (x0, x1, x2, x3) => GLctx.scissor(x0, x1, x2, x3);

var _emscripten_glScissor = _glScissor;

/** @suppress {duplicate } */ var _glShaderBinary = (count, shaders, binaryformat, binary, length) => {
  GL.recordError(1280);
};

var _emscripten_glShaderBinary = _glShaderBinary;

/** @suppress {duplicate } */ var _glShaderSource = (shader, count, string, length) => {
  var source = GL.getSource(shader, count, string, length);
  GLctx.shaderSource(GL.shaders[shader], source);
};

var _emscripten_glShaderSource = _glShaderSource;

/** @suppress {duplicate } */ var _glStencilFunc = (x0, x1, x2) => GLctx.stencilFunc(x0, x1, x2);

var _emscripten_glStencilFunc = _glStencilFunc;

/** @suppress {duplicate } */ var _glStencilFuncSeparate = (x0, x1, x2, x3) => GLctx.stencilFuncSeparate(x0, x1, x2, x3);

var _emscripten_glStencilFuncSeparate = _glStencilFuncSeparate;

/** @suppress {duplicate } */ var _glStencilMask = x0 => GLctx.stencilMask(x0);

var _emscripten_glStencilMask = _glStencilMask;

/** @suppress {duplicate } */ var _glStencilMaskSeparate = (x0, x1) => GLctx.stencilMaskSeparate(x0, x1);

var _emscripten_glStencilMaskSeparate = _glStencilMaskSeparate;

/** @suppress {duplicate } */ var _glStencilOp = (x0, x1, x2) => GLctx.stencilOp(x0, x1, x2);

var _emscripten_glStencilOp = _glStencilOp;

/** @suppress {duplicate } */ var _glStencilOpSeparate = (x0, x1, x2, x3) => GLctx.stencilOpSeparate(x0, x1, x2, x3);

var _emscripten_glStencilOpSeparate = _glStencilOpSeparate;

/** @suppress {duplicate } */ var _glTexImage2D = (target, level, internalFormat, width, height, border, format, type, pixels) => {
  var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null;
  GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
};

var _emscripten_glTexImage2D = _glTexImage2D;

/** @suppress {duplicate } */ var _glTexParameterf = (x0, x1, x2) => GLctx.texParameterf(x0, x1, x2);

var _emscripten_glTexParameterf = _glTexParameterf;

/** @suppress {duplicate } */ var _glTexParameterfv = (target, pname, params) => {
  var param = GROWABLE_HEAP_F32()[((params) >> 2)];
  GLctx.texParameterf(target, pname, param);
};

var _emscripten_glTexParameterfv = _glTexParameterfv;

/** @suppress {duplicate } */ var _glTexParameteri = (x0, x1, x2) => GLctx.texParameteri(x0, x1, x2);

var _emscripten_glTexParameteri = _glTexParameteri;

/** @suppress {duplicate } */ var _glTexParameteriv = (target, pname, params) => {
  var param = GROWABLE_HEAP_I32()[((params) >> 2)];
  GLctx.texParameteri(target, pname, param);
};

var _emscripten_glTexParameteriv = _glTexParameteriv;

/** @suppress {duplicate } */ var _glTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, type, pixels) => {
  var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0) : null;
  GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
};

var _emscripten_glTexSubImage2D = _glTexSubImage2D;

/** @suppress {duplicate } */ var _glUniform1f = (location, v0) => {
  GLctx.uniform1f(webglGetUniformLocation(location), v0);
};

var _emscripten_glUniform1f = _glUniform1f;

var miniTempWebGLFloatBuffers = [];

/** @suppress {duplicate } */ var _glUniform1fv = (location, count, value) => {
  if (count <= 288) {
    // avoid allocation when uploading few enough uniforms
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; ++i) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 4) >> 2));
  }
  GLctx.uniform1fv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform1fv = _glUniform1fv;

/** @suppress {duplicate } */ var _glUniform1i = (location, v0) => {
  GLctx.uniform1i(webglGetUniformLocation(location), v0);
};

var _emscripten_glUniform1i = _glUniform1i;

var miniTempWebGLIntBuffers = [];

/** @suppress {duplicate } */ var _glUniform1iv = (location, count, value) => {
  if (count <= 288) {
    // avoid allocation when uploading few enough uniforms
    var view = miniTempWebGLIntBuffers[count];
    for (var i = 0; i < count; ++i) {
      view[i] = GROWABLE_HEAP_I32()[(((value) + (4 * i)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_I32().subarray((((value) >> 2)), ((value + count * 4) >> 2));
  }
  GLctx.uniform1iv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform1iv = _glUniform1iv;

/** @suppress {duplicate } */ var _glUniform2f = (location, v0, v1) => {
  GLctx.uniform2f(webglGetUniformLocation(location), v0, v1);
};

var _emscripten_glUniform2f = _glUniform2f;

/** @suppress {duplicate } */ var _glUniform2fv = (location, count, value) => {
  if (count <= 144) {
    // avoid allocation when uploading few enough uniforms
    count *= 2;
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; i += 2) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 4)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 8) >> 2));
  }
  GLctx.uniform2fv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform2fv = _glUniform2fv;

/** @suppress {duplicate } */ var _glUniform2i = (location, v0, v1) => {
  GLctx.uniform2i(webglGetUniformLocation(location), v0, v1);
};

var _emscripten_glUniform2i = _glUniform2i;

/** @suppress {duplicate } */ var _glUniform2iv = (location, count, value) => {
  if (count <= 144) {
    // avoid allocation when uploading few enough uniforms
    count *= 2;
    var view = miniTempWebGLIntBuffers[count];
    for (var i = 0; i < count; i += 2) {
      view[i] = GROWABLE_HEAP_I32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 4)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_I32().subarray((((value) >> 2)), ((value + count * 8) >> 2));
  }
  GLctx.uniform2iv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform2iv = _glUniform2iv;

/** @suppress {duplicate } */ var _glUniform3f = (location, v0, v1, v2) => {
  GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2);
};

var _emscripten_glUniform3f = _glUniform3f;

/** @suppress {duplicate } */ var _glUniform3fv = (location, count, value) => {
  if (count <= 96) {
    // avoid allocation when uploading few enough uniforms
    count *= 3;
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; i += 3) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 8)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 12) >> 2));
  }
  GLctx.uniform3fv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform3fv = _glUniform3fv;

/** @suppress {duplicate } */ var _glUniform3i = (location, v0, v1, v2) => {
  GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2);
};

var _emscripten_glUniform3i = _glUniform3i;

/** @suppress {duplicate } */ var _glUniform3iv = (location, count, value) => {
  if (count <= 96) {
    // avoid allocation when uploading few enough uniforms
    count *= 3;
    var view = miniTempWebGLIntBuffers[count];
    for (var i = 0; i < count; i += 3) {
      view[i] = GROWABLE_HEAP_I32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 8)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_I32().subarray((((value) >> 2)), ((value + count * 12) >> 2));
  }
  GLctx.uniform3iv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform3iv = _glUniform3iv;

/** @suppress {duplicate } */ var _glUniform4f = (location, v0, v1, v2, v3) => {
  GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3);
};

var _emscripten_glUniform4f = _glUniform4f;

/** @suppress {duplicate } */ var _glUniform4fv = (location, count, value) => {
  if (count <= 72) {
    // avoid allocation when uploading few enough uniforms
    var view = miniTempWebGLFloatBuffers[4 * count];
    // hoist the heap out of the loop for size and for pthreads+growth.
    var heap = GROWABLE_HEAP_F32();
    value = ((value) >> 2);
    count *= 4;
    for (var i = 0; i < count; i += 4) {
      var dst = value + i;
      view[i] = heap[dst];
      view[i + 1] = heap[dst + 1];
      view[i + 2] = heap[dst + 2];
      view[i + 3] = heap[dst + 3];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 16) >> 2));
  }
  GLctx.uniform4fv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform4fv = _glUniform4fv;

/** @suppress {duplicate } */ var _glUniform4i = (location, v0, v1, v2, v3) => {
  GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3);
};

var _emscripten_glUniform4i = _glUniform4i;

/** @suppress {duplicate } */ var _glUniform4iv = (location, count, value) => {
  if (count <= 72) {
    // avoid allocation when uploading few enough uniforms
    count *= 4;
    var view = miniTempWebGLIntBuffers[count];
    for (var i = 0; i < count; i += 4) {
      view[i] = GROWABLE_HEAP_I32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 8)) >> 2)];
      view[i + 3] = GROWABLE_HEAP_I32()[(((value) + (4 * i + 12)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_I32().subarray((((value) >> 2)), ((value + count * 16) >> 2));
  }
  GLctx.uniform4iv(webglGetUniformLocation(location), view);
};

var _emscripten_glUniform4iv = _glUniform4iv;

/** @suppress {duplicate } */ var _glUniformMatrix2fv = (location, count, transpose, value) => {
  if (count <= 72) {
    // avoid allocation when uploading few enough uniforms
    count *= 4;
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; i += 4) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 8)) >> 2)];
      view[i + 3] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 12)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 16) >> 2));
  }
  GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, view);
};

var _emscripten_glUniformMatrix2fv = _glUniformMatrix2fv;

/** @suppress {duplicate } */ var _glUniformMatrix3fv = (location, count, transpose, value) => {
  if (count <= 32) {
    // avoid allocation when uploading few enough uniforms
    count *= 9;
    var view = miniTempWebGLFloatBuffers[count];
    for (var i = 0; i < count; i += 9) {
      view[i] = GROWABLE_HEAP_F32()[(((value) + (4 * i)) >> 2)];
      view[i + 1] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 4)) >> 2)];
      view[i + 2] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 8)) >> 2)];
      view[i + 3] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 12)) >> 2)];
      view[i + 4] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 16)) >> 2)];
      view[i + 5] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 20)) >> 2)];
      view[i + 6] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 24)) >> 2)];
      view[i + 7] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 28)) >> 2)];
      view[i + 8] = GROWABLE_HEAP_F32()[(((value) + (4 * i + 32)) >> 2)];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 36) >> 2));
  }
  GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, view);
};

var _emscripten_glUniformMatrix3fv = _glUniformMatrix3fv;

/** @suppress {duplicate } */ var _glUniformMatrix4fv = (location, count, transpose, value) => {
  if (count <= 18) {
    // avoid allocation when uploading few enough uniforms
    var view = miniTempWebGLFloatBuffers[16 * count];
    // hoist the heap out of the loop for size and for pthreads+growth.
    var heap = GROWABLE_HEAP_F32();
    value = ((value) >> 2);
    count *= 16;
    for (var i = 0; i < count; i += 16) {
      var dst = value + i;
      view[i] = heap[dst];
      view[i + 1] = heap[dst + 1];
      view[i + 2] = heap[dst + 2];
      view[i + 3] = heap[dst + 3];
      view[i + 4] = heap[dst + 4];
      view[i + 5] = heap[dst + 5];
      view[i + 6] = heap[dst + 6];
      view[i + 7] = heap[dst + 7];
      view[i + 8] = heap[dst + 8];
      view[i + 9] = heap[dst + 9];
      view[i + 10] = heap[dst + 10];
      view[i + 11] = heap[dst + 11];
      view[i + 12] = heap[dst + 12];
      view[i + 13] = heap[dst + 13];
      view[i + 14] = heap[dst + 14];
      view[i + 15] = heap[dst + 15];
    }
  } else {
    var view = GROWABLE_HEAP_F32().subarray((((value) >> 2)), ((value + count * 64) >> 2));
  }
  GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, view);
};

var _emscripten_glUniformMatrix4fv = _glUniformMatrix4fv;

/** @suppress {duplicate } */ var _glUseProgram = program => {
  program = GL.programs[program];
  GLctx.useProgram(program);
  // Record the currently active program so that we can access the uniform
  // mapping table of that program.
  GLctx.currentProgram = program;
};

var _emscripten_glUseProgram = _glUseProgram;

/** @suppress {duplicate } */ var _glValidateProgram = program => {
  GLctx.validateProgram(GL.programs[program]);
};

var _emscripten_glValidateProgram = _glValidateProgram;

/** @suppress {duplicate } */ var _glVertexAttrib1f = (x0, x1) => GLctx.vertexAttrib1f(x0, x1);

var _emscripten_glVertexAttrib1f = _glVertexAttrib1f;

/** @suppress {duplicate } */ var _glVertexAttrib1fv = (index, v) => {
  GLctx.vertexAttrib1f(index, GROWABLE_HEAP_F32()[v >> 2]);
};

var _emscripten_glVertexAttrib1fv = _glVertexAttrib1fv;

/** @suppress {duplicate } */ var _glVertexAttrib2f = (x0, x1, x2) => GLctx.vertexAttrib2f(x0, x1, x2);

var _emscripten_glVertexAttrib2f = _glVertexAttrib2f;

/** @suppress {duplicate } */ var _glVertexAttrib2fv = (index, v) => {
  GLctx.vertexAttrib2f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2]);
};

var _emscripten_glVertexAttrib2fv = _glVertexAttrib2fv;

/** @suppress {duplicate } */ var _glVertexAttrib3f = (x0, x1, x2, x3) => GLctx.vertexAttrib3f(x0, x1, x2, x3);

var _emscripten_glVertexAttrib3f = _glVertexAttrib3f;

/** @suppress {duplicate } */ var _glVertexAttrib3fv = (index, v) => {
  GLctx.vertexAttrib3f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2], GROWABLE_HEAP_F32()[v + 8 >> 2]);
};

var _emscripten_glVertexAttrib3fv = _glVertexAttrib3fv;

/** @suppress {duplicate } */ var _glVertexAttrib4f = (x0, x1, x2, x3, x4) => GLctx.vertexAttrib4f(x0, x1, x2, x3, x4);

var _emscripten_glVertexAttrib4f = _glVertexAttrib4f;

/** @suppress {duplicate } */ var _glVertexAttrib4fv = (index, v) => {
  GLctx.vertexAttrib4f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2], GROWABLE_HEAP_F32()[v + 8 >> 2], GROWABLE_HEAP_F32()[v + 12 >> 2]);
};

var _emscripten_glVertexAttrib4fv = _glVertexAttrib4fv;

/** @suppress {duplicate } */ var _glVertexAttribDivisor = (index, divisor) => {
  GLctx.vertexAttribDivisor(index, divisor);
};

/** @suppress {duplicate } */ var _glVertexAttribDivisorANGLE = _glVertexAttribDivisor;

var _emscripten_glVertexAttribDivisorANGLE = _glVertexAttribDivisorANGLE;

/** @suppress {duplicate } */ var _glVertexAttribPointer = (index, size, type, normalized, stride, ptr) => {
  GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
};

var _emscripten_glVertexAttribPointer = _glVertexAttribPointer;

/** @suppress {duplicate } */ var _glViewport = (x0, x1, x2, x3) => GLctx.viewport(x0, x1, x2, x3);

var _emscripten_glViewport = _glViewport;

var getHeapMax = () => // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
// full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
// for any code that deals with heap sizes, which would require special
// casing all heap size related code to treat 0 specially.
2147483648;

var growMemory = size => {
  var b = wasmMemory.buffer;
  var pages = ((size - b.byteLength + 65535) / 65536) | 0;
  try {
    // round size grow request up to wasm page size (fixed 64KB per spec)
    wasmMemory.grow(pages);
    // .grow() takes a delta compared to the previous size
    updateMemoryViews();
    return 1;
  } catch (e) {
    err(`growMemory: Attempted to grow heap from ${b.byteLength} bytes to ${size} bytes, but got error: ${e}`);
  }
};

var _emscripten_resize_heap = requestedSize => {
  var oldSize = GROWABLE_HEAP_U8().length;
  // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
  requestedSize >>>= 0;
  // With multithreaded builds, races can happen (another thread might increase the size
  // in between), so return a failure, and let the caller retry.
  if (requestedSize <= oldSize) {
    return false;
  }
  // Memory resize rules:
  // 1.  Always increase heap size to at least the requested size, rounded up
  //     to next page multiple.
  // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
  //     geometrically: increase the heap size according to
  //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
  //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
  // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
  //     linearly: increase the heap size by at least
  //     MEMORY_GROWTH_LINEAR_STEP bytes.
  // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
  //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
  // 4.  If we were unable to allocate as much memory, it may be due to
  //     over-eager decision to excessively reserve due to (3) above.
  //     Hence if an allocation fails, cut down on the amount of excess
  //     growth, in an attempt to succeed to perform a smaller allocation.
  // A limit is set for how much we can grow. We should not exceed that
  // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
  var maxHeapSize = getHeapMax();
  if (requestedSize > maxHeapSize) {
    err(`Cannot enlarge memory, requested ${requestedSize} bytes, but the limit is ${maxHeapSize} bytes!`);
    return false;
  }
  // Loop through potential heap size increases. If we attempt a too eager
  // reservation that fails, cut down on the attempted size and reserve a
  // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
  for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
    var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
    // ensure geometric growth
    // but limit overreserving (default to capping at +96MB overgrowth at most)
    overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
    var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
    var replacement = growMemory(newSize);
    if (replacement) {
      err("Warning: Enlarging memory arrays, this is not fast! " + [ oldSize, newSize ]);
      return true;
    }
  }
  err(`Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`);
  return false;
};

/** @suppress {checkTypes} */ function _emscripten_sample_gamepad_data() {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(10, 0, 1);
  try {
    if (navigator.getGamepads) return (JSEvents.lastGamepadState = navigator.getGamepads()) ? 0 : -1;
  } catch (e) {
    err(`navigator.getGamepads() exists, but failed to execute with exception ${e}. Disabling Gamepad access.`);
    navigator.getGamepads = null;
  }
  return -1;
}

var findCanvasEventTarget = findEventTarget;

var setCanvasElementSizeCallingThread = (target, width, height) => {
  var canvas = findCanvasEventTarget(target);
  if (!canvas) return -4;
  if (!canvas.controlTransferredOffscreen) {
    var autoResizeViewport = false;
    if (canvas.GLctxObject?.GLctx) {
      var prevViewport = canvas.GLctxObject.GLctx.getParameter(2978);
      // TODO: Perhaps autoResizeViewport should only be true if FBO 0 is currently active?
      autoResizeViewport = (prevViewport[0] === 0 && prevViewport[1] === 0 && prevViewport[2] === canvas.width && prevViewport[3] === canvas.height);
    }
    canvas.width = width;
    canvas.height = height;
    if (autoResizeViewport) {
      // TODO: Add -sCANVAS_RESIZE_SETS_GL_VIEWPORT=0/1 option (default=1). This is commonly done and several graphics engines depend on this,
      // but this can be quite disruptive.
      canvas.GLctxObject.GLctx.viewport(0, 0, width, height);
    }
  } else {
    return -4;
  }
  return 0;
};

function setCanvasElementSizeMainThread(target, width, height) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(11, 0, 1, target, width, height);
  return setCanvasElementSizeCallingThread(target, width, height);
}

var _emscripten_set_canvas_element_size = (target, width, height) => {
  var canvas = findCanvasEventTarget(target);
  if (canvas) {
    return setCanvasElementSizeCallingThread(target, width, height);
  }
  return setCanvasElementSizeMainThread(target, width, height);
};

var fillMouseEventData = (eventStruct, e, target) => {
  assert(eventStruct % 4 == 0);
  GROWABLE_HEAP_F64()[((eventStruct) >> 3)] = e.timeStamp;
  var idx = ((eventStruct) >> 2);
  GROWABLE_HEAP_I32()[idx + 2] = e.screenX;
  GROWABLE_HEAP_I32()[idx + 3] = e.screenY;
  GROWABLE_HEAP_I32()[idx + 4] = e.clientX;
  GROWABLE_HEAP_I32()[idx + 5] = e.clientY;
  GROWABLE_HEAP_I8()[eventStruct + 24] = e.ctrlKey;
  GROWABLE_HEAP_I8()[eventStruct + 25] = e.shiftKey;
  GROWABLE_HEAP_I8()[eventStruct + 26] = e.altKey;
  GROWABLE_HEAP_I8()[eventStruct + 27] = e.metaKey;
  GROWABLE_HEAP_I16()[idx * 2 + 14] = e.button;
  GROWABLE_HEAP_I16()[idx * 2 + 15] = e.buttons;
  GROWABLE_HEAP_I32()[idx + 8] = e["movementX"];
  GROWABLE_HEAP_I32()[idx + 9] = e["movementY"];
  // Note: rect contains doubles (truncated to placate SAFE_HEAP, which is the same behaviour when writing to HEAP32 anyway)
  var rect = getBoundingClientRect(target);
  GROWABLE_HEAP_I32()[idx + 10] = e.clientX - (rect.left | 0);
  GROWABLE_HEAP_I32()[idx + 11] = e.clientY - (rect.top | 0);
};

var registerMouseEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.mouseEvent ||= _malloc(64);
  target = findEventTarget(target);
  var mouseEventHandlerFunc = (e = event) => {
    // TODO: Make this access thread safe, or this could update live while app is reading it.
    fillMouseEventData(JSEvents.mouseEvent, e, target);
    if (targetThread) {
      var mouseEventData = _malloc(64);
      // This allocated block is passed as satellite data to the proxied function call, so the call frees up the data block when done.
      fillMouseEventData(mouseEventData, e, target);
      __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, mouseEventData, userData);
    } else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
    // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
    eventTypeString,
    callbackfunc,
    handlerFunc: mouseEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(12, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
}

var fillFullscreenChangeEventData = eventStruct => {
  var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  var isFullscreen = !!fullscreenElement;
  // Assigning a boolean to HEAP32 with expected type coercion.
  /** @suppress{checkTypes} */ GROWABLE_HEAP_I8()[eventStruct] = isFullscreen;
  GROWABLE_HEAP_I8()[(eventStruct) + (1)] = JSEvents.fullscreenEnabled();
  // If transitioning to fullscreen, report info about the element that is now fullscreen.
  // If transitioning to windowed mode, report info about the element that just was fullscreen.
  var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
  var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
  var id = reportedElement?.id || "";
  stringToUTF8(nodeName, eventStruct + 2, 128);
  stringToUTF8(id, eventStruct + 130, 128);
  GROWABLE_HEAP_I32()[(((eventStruct) + (260)) >> 2)] = reportedElement ? reportedElement.clientWidth : 0;
  GROWABLE_HEAP_I32()[(((eventStruct) + (264)) >> 2)] = reportedElement ? reportedElement.clientHeight : 0;
  GROWABLE_HEAP_I32()[(((eventStruct) + (268)) >> 2)] = screen.width;
  GROWABLE_HEAP_I32()[(((eventStruct) + (272)) >> 2)] = screen.height;
  if (isFullscreen) {
    JSEvents.previousFullscreenElement = fullscreenElement;
  }
};

var registerFullscreenChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.fullscreenChangeEvent ||= _malloc(276);
  var fullscreenChangeEventhandlerFunc = (e = event) => {
    var fullscreenChangeEvent = targetThread ? _malloc(276) : JSEvents.fullscreenChangeEvent;
    fillFullscreenChangeEventData(fullscreenChangeEvent);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, fullscreenChangeEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    eventTypeString,
    callbackfunc,
    handlerFunc: fullscreenChangeEventhandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(13, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  if (!JSEvents.fullscreenEnabled()) return -1;
  target = findEventTarget(target);
  if (!target) return -4;
  // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
  // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
  registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  return registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
}

var registerGamepadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.gamepadEvent ||= _malloc(1240);
  var gamepadEventHandlerFunc = (e = event) => {
    var gamepadEvent = targetThread ? _malloc(1240) : JSEvents.gamepadEvent;
    fillGamepadEventData(gamepadEvent, e["gamepad"]);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, gamepadEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, gamepadEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target: findEventTarget(target),
    allowsDeferredCalls: true,
    eventTypeString,
    callbackfunc,
    handlerFunc: gamepadEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(14, 0, 1, userData, useCapture, callbackfunc, targetThread);
  if (_emscripten_sample_gamepad_data()) return -1;
  return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
}

function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(15, 0, 1, userData, useCapture, callbackfunc, targetThread);
  if (_emscripten_sample_gamepad_data()) return -1;
  return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
}

var _emscripten_set_main_loop_timing = (mode, value) => {
  MainLoop.timingMode = mode;
  MainLoop.timingValue = value;
  if (!MainLoop.func) {
    err("emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.");
    return 1;
  }
  if (!MainLoop.running) {
    runtimeKeepalivePush();
    MainLoop.running = true;
  }
  if (mode == 0) {
    MainLoop.scheduler = function MainLoop_scheduler_setTimeout() {
      var timeUntilNextTick = Math.max(0, MainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
      setTimeout(MainLoop.runner, timeUntilNextTick);
    };
    MainLoop.method = "timeout";
  } else if (mode == 1) {
    MainLoop.scheduler = function MainLoop_scheduler_rAF() {
      MainLoop.requestAnimationFrame(MainLoop.runner);
    };
    MainLoop.method = "rAF";
  } else if (mode == 2) {
    if (typeof MainLoop.setImmediate == "undefined") {
      if (typeof setImmediate == "undefined") {
        // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
        var setImmediates = [];
        var emscriptenMainLoopMessageId = "setimmediate";
        /** @param {Event} event */ var MainLoop_setImmediate_messageHandler = event => {
          // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
          // so check for both cases.
          if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
            event.stopPropagation();
            setImmediates.shift()();
          }
        };
        addEventListener("message", MainLoop_setImmediate_messageHandler, true);
        MainLoop.setImmediate = /** @type{function(function(): ?, ...?): number} */ (func => {
          setImmediates.push(func);
          if (ENVIRONMENT_IS_WORKER) {
            Module["setImmediates"] ??= [];
            Module["setImmediates"].push(func);
            postMessage({
              target: emscriptenMainLoopMessageId
            });
          } else postMessage(emscriptenMainLoopMessageId, "*");
        });
      } else {
        MainLoop.setImmediate = setImmediate;
      }
    }
    MainLoop.scheduler = function MainLoop_scheduler_setImmediate() {
      MainLoop.setImmediate(MainLoop.runner);
    };
    MainLoop.method = "immediate";
  }
  return 0;
};

var MainLoop = {
  running: false,
  scheduler: null,
  method: "",
  currentlyRunningMainloop: 0,
  func: null,
  arg: 0,
  timingMode: 0,
  timingValue: 0,
  currentFrameNumber: 0,
  queue: [],
  preMainLoop: [],
  postMainLoop: [],
  pause() {
    MainLoop.scheduler = null;
    // Incrementing this signals the previous main loop that it's now become old, and it must return.
    MainLoop.currentlyRunningMainloop++;
  },
  resume() {
    MainLoop.currentlyRunningMainloop++;
    var timingMode = MainLoop.timingMode;
    var timingValue = MainLoop.timingValue;
    var func = MainLoop.func;
    MainLoop.func = null;
    // do not set timing and call scheduler, we will do it on the next lines
    setMainLoop(func, 0, false, MainLoop.arg, true);
    _emscripten_set_main_loop_timing(timingMode, timingValue);
    MainLoop.scheduler();
  },
  updateStatus() {
    if (Module["setStatus"]) {
      var message = Module["statusMessage"] || "Please wait...";
      var remaining = MainLoop.remainingBlockers ?? 0;
      var expected = MainLoop.expectedBlockers ?? 0;
      if (remaining) {
        if (remaining < expected) {
          Module["setStatus"](`{message} ({expected - remaining}/{expected})`);
        } else {
          Module["setStatus"](message);
        }
      } else {
        Module["setStatus"]("");
      }
    }
  },
  init() {
    Module["preMainLoop"] && MainLoop.preMainLoop.push(Module["preMainLoop"]);
    Module["postMainLoop"] && MainLoop.postMainLoop.push(Module["postMainLoop"]);
  },
  runIter(func) {
    if (ABORT) return;
    for (var pre of MainLoop.preMainLoop) {
      if (pre() === false) {
        return;
      }
    }
    callUserCallback(func);
    for (var post of MainLoop.postMainLoop) {
      post();
    }
    checkStackCookie();
  },
  nextRAF: 0,
  fakeRequestAnimationFrame(func) {
    // try to keep 60fps between calls to here
    var now = Date.now();
    if (MainLoop.nextRAF === 0) {
      MainLoop.nextRAF = now + 1e3 / 60;
    } else {
      while (now + 2 >= MainLoop.nextRAF) {
        // fudge a little, to avoid timer jitter causing us to do lots of delay:0
        MainLoop.nextRAF += 1e3 / 60;
      }
    }
    var delay = Math.max(MainLoop.nextRAF - now, 0);
    setTimeout(func, delay);
  },
  requestAnimationFrame(func) {
    if (typeof requestAnimationFrame == "function") {
      requestAnimationFrame(func);
      return;
    }
    var RAF = MainLoop.fakeRequestAnimationFrame;
    RAF(func);
  }
};

var runtimeKeepalivePop = () => {
  assert(runtimeKeepaliveCounter > 0);
  runtimeKeepaliveCounter -= 1;
};

/**
     * @param {number=} arg
     * @param {boolean=} noSetTiming
     */ var setMainLoop = (iterFunc, fps, simulateInfiniteLoop, arg, noSetTiming) => {
  assert(!MainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
  MainLoop.func = iterFunc;
  MainLoop.arg = arg;
  var thisMainLoopId = MainLoop.currentlyRunningMainloop;
  function checkIsRunning() {
    if (thisMainLoopId < MainLoop.currentlyRunningMainloop) {
      runtimeKeepalivePop();
      maybeExit();
      return false;
    }
    return true;
  }
  // We create the loop runner here but it is not actually running until
  // _emscripten_set_main_loop_timing is called (which might happen a
  // later time).  This member signifies that the current runner has not
  // yet been started so that we can call runtimeKeepalivePush when it
  // gets it timing set for the first time.
  MainLoop.running = false;
  MainLoop.runner = function MainLoop_runner() {
    if (ABORT) return;
    if (MainLoop.queue.length > 0) {
      var start = Date.now();
      var blocker = MainLoop.queue.shift();
      blocker.func(blocker.arg);
      if (MainLoop.remainingBlockers) {
        var remaining = MainLoop.remainingBlockers;
        var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
        if (blocker.counted) {
          MainLoop.remainingBlockers = next;
        } else {
          // not counted, but move the progress along a tiny bit
          next = next + .5;
          // do not steal all the next one's progress
          MainLoop.remainingBlockers = (8 * remaining + next) / 9;
        }
      }
      MainLoop.updateStatus();
      // catches pause/resume main loop from blocker execution
      if (!checkIsRunning()) return;
      setTimeout(MainLoop.runner, 0);
      return;
    }
    // catch pauses from non-main loop sources
    if (!checkIsRunning()) return;
    // Implement very basic swap interval control
    MainLoop.currentFrameNumber = MainLoop.currentFrameNumber + 1 | 0;
    if (MainLoop.timingMode == 1 && MainLoop.timingValue > 1 && MainLoop.currentFrameNumber % MainLoop.timingValue != 0) {
      // Not the scheduled time to render this frame - skip.
      MainLoop.scheduler();
      return;
    } else if (MainLoop.timingMode == 0) {
      MainLoop.tickStartTime = _emscripten_get_now();
    }
    if (MainLoop.method === "timeout" && Module["ctx"]) {
      warnOnce("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
      MainLoop.method = "";
    }
    MainLoop.runIter(iterFunc);
    // catch pauses from the main loop itself
    if (!checkIsRunning()) return;
    MainLoop.scheduler();
  };
  if (!noSetTiming) {
    if (fps && fps > 0) {
      _emscripten_set_main_loop_timing(0, 1e3 / fps);
    } else {
      // Do rAF by rendering each frame (no decimating)
      _emscripten_set_main_loop_timing(1, 1);
    }
    MainLoop.scheduler();
  }
  if (simulateInfiniteLoop) {
    throw "unwind";
  }
};

var _emscripten_set_main_loop = (func, fps, simulateInfiniteLoop) => {
  var iterFunc = (() => dynCall_v(func));
  setMainLoop(iterFunc, fps, simulateInfiniteLoop);
};

function _emscripten_set_mousemove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(16, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);
}

var fillPointerlockChangeEventData = eventStruct => {
  var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
  var isPointerlocked = !!pointerLockElement;
  // Assigning a boolean to HEAP32 with expected type coercion.
  /** @suppress{checkTypes} */ GROWABLE_HEAP_I8()[eventStruct] = isPointerlocked;
  var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
  var id = pointerLockElement?.id || "";
  stringToUTF8(nodeName, eventStruct + 1, 128);
  stringToUTF8(id, eventStruct + 129, 128);
};

var registerPointerlockChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.pointerlockChangeEvent ||= _malloc(257);
  var pointerlockChangeEventHandlerFunc = (e = event) => {
    var pointerlockChangeEvent = targetThread ? _malloc(257) : JSEvents.pointerlockChangeEvent;
    fillPointerlockChangeEventData(pointerlockChangeEvent);
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, pointerlockChangeEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    eventTypeString,
    callbackfunc,
    handlerFunc: pointerlockChangeEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

/** @suppress {missingProperties} */ function _emscripten_set_pointerlockchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(17, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
  if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
    return -1;
  }
  target = findEventTarget(target);
  if (!target) return -4;
  registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
  registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
  registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
  return registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
}

var registerUiEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.uiEvent ||= _malloc(36);
  target = findEventTarget(target);
  var uiEventHandlerFunc = (e = event) => {
    if (e.target != target) {
      // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
      // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
      // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
      // causing a new scroll, etc..
      return;
    }
    var b = document.body;
    // Take document.body to a variable, Closure compiler does not outline access to it on its own.
    if (!b) {
      // During a page unload 'body' can be null, with "Cannot read property 'clientWidth' of null" being thrown
      return;
    }
    var uiEvent = targetThread ? _malloc(36) : JSEvents.uiEvent;
    GROWABLE_HEAP_I32()[((uiEvent) >> 2)] = 0;
    // always zero for resize and scroll
    GROWABLE_HEAP_I32()[(((uiEvent) + (4)) >> 2)] = b.clientWidth;
    GROWABLE_HEAP_I32()[(((uiEvent) + (8)) >> 2)] = b.clientHeight;
    GROWABLE_HEAP_I32()[(((uiEvent) + (12)) >> 2)] = innerWidth;
    GROWABLE_HEAP_I32()[(((uiEvent) + (16)) >> 2)] = innerHeight;
    GROWABLE_HEAP_I32()[(((uiEvent) + (20)) >> 2)] = outerWidth;
    GROWABLE_HEAP_I32()[(((uiEvent) + (24)) >> 2)] = outerHeight;
    GROWABLE_HEAP_I32()[(((uiEvent) + (28)) >> 2)] = pageXOffset | 0;
    // scroll offsets are float
    GROWABLE_HEAP_I32()[(((uiEvent) + (32)) >> 2)] = pageYOffset | 0;
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, uiEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, uiEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    eventTypeString,
    callbackfunc,
    handlerFunc: uiEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(18, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
}

var registerTouchEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
  targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
  JSEvents.touchEvent ||= _malloc(1552);
  target = findEventTarget(target);
  var touchEventHandlerFunc = e => {
    assert(e);
    var t, touches = {}, et = e.touches;
    // To ease marshalling different kinds of touches that browser reports (all touches are listed in e.touches,
    // only changed touches in e.changedTouches, and touches on target at a.targetTouches), mark a boolean in
    // each Touch object so that we can later loop only once over all touches we see to marshall over to Wasm.
    for (let t of et) {
      // Browser might recycle the generated Touch objects between each frame (Firefox on Android), so reset any
      // changed/target states we may have set from previous frame.
      t.isChanged = t.onTarget = 0;
      touches[t.identifier] = t;
    }
    // Mark which touches are part of the changedTouches list.
    for (let t of e.changedTouches) {
      t.isChanged = 1;
      touches[t.identifier] = t;
    }
    // Mark which touches are part of the targetTouches list.
    for (let t of e.targetTouches) {
      touches[t.identifier].onTarget = 1;
    }
    var touchEvent = targetThread ? _malloc(1552) : JSEvents.touchEvent;
    GROWABLE_HEAP_F64()[((touchEvent) >> 3)] = e.timeStamp;
    GROWABLE_HEAP_I8()[touchEvent + 12] = e.ctrlKey;
    GROWABLE_HEAP_I8()[touchEvent + 13] = e.shiftKey;
    GROWABLE_HEAP_I8()[touchEvent + 14] = e.altKey;
    GROWABLE_HEAP_I8()[touchEvent + 15] = e.metaKey;
    var idx = touchEvent + 16;
    var targetRect = getBoundingClientRect(target);
    var numTouches = 0;
    for (let t of Object.values(touches)) {
      var idx32 = ((idx) >> 2);
      // Pre-shift the ptr to index to HEAP32 to save code size
      GROWABLE_HEAP_I32()[idx32 + 0] = t.identifier;
      GROWABLE_HEAP_I32()[idx32 + 1] = t.screenX;
      GROWABLE_HEAP_I32()[idx32 + 2] = t.screenY;
      GROWABLE_HEAP_I32()[idx32 + 3] = t.clientX;
      GROWABLE_HEAP_I32()[idx32 + 4] = t.clientY;
      GROWABLE_HEAP_I32()[idx32 + 5] = t.pageX;
      GROWABLE_HEAP_I32()[idx32 + 6] = t.pageY;
      GROWABLE_HEAP_I8()[idx + 28] = t.isChanged;
      GROWABLE_HEAP_I8()[idx + 29] = t.onTarget;
      GROWABLE_HEAP_I32()[idx32 + 8] = t.clientX - (targetRect.left | 0);
      GROWABLE_HEAP_I32()[idx32 + 9] = t.clientY - (targetRect.top | 0);
      idx += 48;
      if (++numTouches > 31) {
        break;
      }
    }
    GROWABLE_HEAP_I32()[(((touchEvent) + (8)) >> 2)] = numTouches;
    if (targetThread) __emscripten_run_callback_on_thread(targetThread, callbackfunc, eventTypeId, touchEvent, userData); else if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, touchEvent, userData)) e.preventDefault();
  };
  var eventHandler = {
    target,
    allowsDeferredCalls: eventTypeString == "touchstart" || eventTypeString == "touchend",
    eventTypeString,
    callbackfunc,
    handlerFunc: touchEventHandlerFunc,
    useCapture
  };
  return JSEvents.registerOrRemoveHandler(eventHandler);
};

function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(19, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
}

function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(20, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
}

function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(21, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
}

function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(22, 0, 1, target, userData, useCapture, callbackfunc, targetThread);
  return registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
}

/** @param {number=} timeout */ var safeSetTimeout = (func, timeout) => {
  runtimeKeepalivePush();
  return setTimeout(() => {
    runtimeKeepalivePop();
    callUserCallback(func);
  }, timeout);
};

var Browser = {
  useWebGL: false,
  isFullscreen: false,
  pointerLock: false,
  moduleContextCreatedCallbacks: [],
  workers: [],
  preloadedImages: {},
  preloadedAudios: {},
  init() {
    if (Browser.initted) return;
    Browser.initted = true;
    // Support for plugins that can process preloaded files. You can add more of these to
    // your app by creating and appending to preloadPlugins.
    // Each plugin is asked if it can handle a file based on the file's name. If it can,
    // it is given the file's raw data. When it is done, it calls a callback with the file's
    // (possibly modified) data. For example, a plugin might decompress a file, or it
    // might create some side data structure for use later (like an Image element, etc.).
    var imagePlugin = {};
    imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
      return !Module["noImageDecoding"] && /\.(jpg|jpeg|png|bmp|webp)$/i.test(name);
    };
    imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
      var b = new Blob([ byteArray ], {
        type: Browser.getMimetype(name)
      });
      if (b.size !== byteArray.length) {
        // Safari bug #118630
        // Safari's Blob can only take an ArrayBuffer
        b = new Blob([ (new Uint8Array(byteArray)).buffer ], {
          type: Browser.getMimetype(name)
        });
      }
      var url = URL.createObjectURL(b);
      assert(typeof url == "string", "createObjectURL must return a url as a string");
      var img = new Image;
      img.onload = () => {
        assert(img.complete, `Image ${name} could not be decoded`);
        var canvas = /** @type {!HTMLCanvasElement} */ (document.createElement("canvas"));
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        Browser.preloadedImages[name] = canvas;
        URL.revokeObjectURL(url);
        onload?.(byteArray);
      };
      img.onerror = event => {
        err(`Image ${url} could not be decoded`);
        onerror?.();
      };
      img.src = url;
    };
    preloadPlugins.push(imagePlugin);
    var audioPlugin = {};
    audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
      return !Module["noAudioDecoding"] && name.substr(-4) in {
        ".ogg": 1,
        ".wav": 1,
        ".mp3": 1
      };
    };
    audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
      var done = false;
      function finish(audio) {
        if (done) return;
        done = true;
        Browser.preloadedAudios[name] = audio;
        onload?.(byteArray);
      }
      var b = new Blob([ byteArray ], {
        type: Browser.getMimetype(name)
      });
      var url = URL.createObjectURL(b);
      // XXX we never revoke this!
      assert(typeof url == "string", "createObjectURL must return a url as a string");
      var audio = new Audio;
      audio.addEventListener("canplaythrough", () => finish(audio), false);
      // use addEventListener due to chromium bug 124926
      audio.onerror = function audio_onerror(event) {
        if (done) return;
        err(`warning: browser could not fully decode audio ${name}, trying slower base64 approach`);
        function encode64(data) {
          var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          var PAD = "=";
          var ret = "";
          var leftchar = 0;
          var leftbits = 0;
          for (var i = 0; i < data.length; i++) {
            leftchar = (leftchar << 8) | data[i];
            leftbits += 8;
            while (leftbits >= 6) {
              var curr = (leftchar >> (leftbits - 6)) & 63;
              leftbits -= 6;
              ret += BASE[curr];
            }
          }
          if (leftbits == 2) {
            ret += BASE[(leftchar & 3) << 4];
            ret += PAD + PAD;
          } else if (leftbits == 4) {
            ret += BASE[(leftchar & 15) << 2];
            ret += PAD;
          }
          return ret;
        }
        audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
        finish(audio);
      };
      audio.src = url;
      // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
      safeSetTimeout(() => {
        finish(audio);
      }, 1e4);
    };
    preloadPlugins.push(audioPlugin);
    // Canvas event setup
    function pointerLockChange() {
      Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"];
    }
    var canvas = Module["canvas"];
    if (canvas) {
      // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
      // Module['forcedAspectRatio'] = 4 / 3;
      canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (() => {});
      canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (() => {});
      // no-op if function does not exist
      canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
      document.addEventListener("pointerlockchange", pointerLockChange, false);
      document.addEventListener("mozpointerlockchange", pointerLockChange, false);
      document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
      document.addEventListener("mspointerlockchange", pointerLockChange, false);
      if (Module["elementPointerLock"]) {
        canvas.addEventListener("click", ev => {
          if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
            Module["canvas"].requestPointerLock();
            ev.preventDefault();
          }
        }, false);
      }
    }
  },
  createContext(/** @type {HTMLCanvasElement} */ canvas, useWebGL, setInModule, webGLContextAttributes) {
    if (useWebGL && Module["ctx"] && canvas == Module["canvas"]) return Module["ctx"];
    // no need to recreate GL context if it's already been created for this canvas.
    var ctx;
    var contextHandle;
    if (useWebGL) {
      // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
      var contextAttributes = {
        antialias: false,
        alpha: false,
        majorVersion: 1
      };
      if (webGLContextAttributes) {
        for (var attribute in webGLContextAttributes) {
          contextAttributes[attribute] = webGLContextAttributes[attribute];
        }
      }
      // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
      // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
      // Browser.createContext() should not even be emitted.
      if (typeof GL != "undefined") {
        contextHandle = GL.createContext(canvas, contextAttributes);
        if (contextHandle) {
          ctx = GL.getContext(contextHandle).GLctx;
        }
      }
    } else {
      ctx = canvas.getContext("2d");
    }
    if (!ctx) return null;
    if (setInModule) {
      if (!useWebGL) assert(typeof GLctx == "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
      Module["ctx"] = ctx;
      if (useWebGL) GL.makeContextCurrent(contextHandle);
      Browser.useWebGL = useWebGL;
      Browser.moduleContextCreatedCallbacks.forEach(callback => callback());
      Browser.init();
    }
    return ctx;
  },
  fullscreenHandlersInstalled: false,
  lockPointer: undefined,
  resizeCanvas: undefined,
  requestFullscreen(lockPointer, resizeCanvas) {
    Browser.lockPointer = lockPointer;
    Browser.resizeCanvas = resizeCanvas;
    if (typeof Browser.lockPointer == "undefined") Browser.lockPointer = true;
    if (typeof Browser.resizeCanvas == "undefined") Browser.resizeCanvas = false;
    var canvas = Module["canvas"];
    function fullscreenChange() {
      Browser.isFullscreen = false;
      var canvasContainer = canvas.parentNode;
      if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
        canvas.exitFullscreen = Browser.exitFullscreen;
        if (Browser.lockPointer) canvas.requestPointerLock();
        Browser.isFullscreen = true;
        if (Browser.resizeCanvas) {
          Browser.setFullscreenCanvasSize();
        } else {
          Browser.updateCanvasDimensions(canvas);
        }
      } else {
        // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
        canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
        canvasContainer.parentNode.removeChild(canvasContainer);
        if (Browser.resizeCanvas) {
          Browser.setWindowedCanvasSize();
        } else {
          Browser.updateCanvasDimensions(canvas);
        }
      }
      Module["onFullScreen"]?.(Browser.isFullscreen);
      Module["onFullscreen"]?.(Browser.isFullscreen);
    }
    if (!Browser.fullscreenHandlersInstalled) {
      Browser.fullscreenHandlersInstalled = true;
      document.addEventListener("fullscreenchange", fullscreenChange, false);
      document.addEventListener("mozfullscreenchange", fullscreenChange, false);
      document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
      document.addEventListener("MSFullscreenChange", fullscreenChange, false);
    }
    // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
    var canvasContainer = document.createElement("div");
    canvas.parentNode.insertBefore(canvasContainer, canvas);
    canvasContainer.appendChild(canvas);
    // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
    canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? () => canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]) : null) || (canvasContainer["webkitRequestFullScreen"] ? () => canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]) : null);
    canvasContainer.requestFullscreen();
  },
  requestFullScreen() {
    abort("Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)");
  },
  exitFullscreen() {
    // This is workaround for chrome. Trying to exit from fullscreen
    // not in fullscreen state will cause "TypeError: Document not active"
    // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
    if (!Browser.isFullscreen) {
      return false;
    }
    var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || (() => {});
    CFS.apply(document, []);
    return true;
  },
  safeSetTimeout(func, timeout) {
    // Legacy function, this is used by the SDL2 port so we need to keep it
    // around at least until that is updated.
    // See https://github.com/libsdl-org/SDL/pull/6304
    return safeSetTimeout(func, timeout);
  },
  getMimetype(name) {
    return {
      "jpg": "image/jpeg",
      "jpeg": "image/jpeg",
      "png": "image/png",
      "bmp": "image/bmp",
      "ogg": "audio/ogg",
      "wav": "audio/wav",
      "mp3": "audio/mpeg"
    }[name.substr(name.lastIndexOf(".") + 1)];
  },
  getUserMedia(func) {
    window.getUserMedia ||= navigator["getUserMedia"] || navigator["mozGetUserMedia"];
    window.getUserMedia(func);
  },
  getMovementX(event) {
    return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
  },
  getMovementY(event) {
    return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
  },
  getMouseWheelDelta(event) {
    var delta = 0;
    switch (event.type) {
     case "DOMMouseScroll":
      // 3 lines make up a step
      delta = event.detail / 3;
      break;

     case "mousewheel":
      // 120 units make up a step
      delta = event.wheelDelta / 120;
      break;

     case "wheel":
      delta = event.deltaY;
      switch (event.deltaMode) {
       case 0:
        // DOM_DELTA_PIXEL: 100 pixels make up a step
        delta /= 100;
        break;

       case 1:
        // DOM_DELTA_LINE: 3 lines make up a step
        delta /= 3;
        break;

       case 2:
        // DOM_DELTA_PAGE: A page makes up 80 steps
        delta *= 80;
        break;

       default:
        throw "unrecognized mouse wheel delta mode: " + event.deltaMode;
      }
      break;

     default:
      throw "unrecognized mouse wheel event: " + event.type;
    }
    return delta;
  },
  mouseX: 0,
  mouseY: 0,
  mouseMovementX: 0,
  mouseMovementY: 0,
  touches: {},
  lastTouches: {},
  calculateMouseCoords(pageX, pageY) {
    // Calculate the movement based on the changes
    // in the coordinates.
    var rect = Module["canvas"].getBoundingClientRect();
    var cw = Module["canvas"].width;
    var ch = Module["canvas"].height;
    // Neither .scrollX or .pageXOffset are defined in a spec, but
    // we prefer .scrollX because it is currently in a spec draft.
    // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
    var scrollX = ((typeof window.scrollX != "undefined") ? window.scrollX : window.pageXOffset);
    var scrollY = ((typeof window.scrollY != "undefined") ? window.scrollY : window.pageYOffset);
    // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
    // and we have no viable fallback.
    assert((typeof scrollX != "undefined") && (typeof scrollY != "undefined"), "Unable to retrieve scroll position, mouse positions likely broken.");
    var adjustedX = pageX - (scrollX + rect.left);
    var adjustedY = pageY - (scrollY + rect.top);
    // the canvas might be CSS-scaled compared to its backbuffer;
    // SDL-using content will want mouse coordinates in terms
    // of backbuffer units.
    adjustedX = adjustedX * (cw / rect.width);
    adjustedY = adjustedY * (ch / rect.height);
    return {
      x: adjustedX,
      y: adjustedY
    };
  },
  setMouseCoords(pageX, pageY) {
    const {x, y} = Browser.calculateMouseCoords(pageX, pageY);
    Browser.mouseMovementX = x - Browser.mouseX;
    Browser.mouseMovementY = y - Browser.mouseY;
    Browser.mouseX = x;
    Browser.mouseY = y;
  },
  calculateMouseEvent(event) {
    // event should be mousemove, mousedown or mouseup
    if (Browser.pointerLock) {
      // When the pointer is locked, calculate the coordinates
      // based on the movement of the mouse.
      // Workaround for Firefox bug 764498
      if (event.type != "mousemove" && ("mozMovementX" in event)) {
        Browser.mouseMovementX = Browser.mouseMovementY = 0;
      } else {
        Browser.mouseMovementX = Browser.getMovementX(event);
        Browser.mouseMovementY = Browser.getMovementY(event);
      }
      // add the mouse delta to the current absolute mouse position
      Browser.mouseX += Browser.mouseMovementX;
      Browser.mouseY += Browser.mouseMovementY;
    } else {
      if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
        var touch = event.touch;
        if (touch === undefined) {
          return;
        }
        var coords = Browser.calculateMouseCoords(touch.pageX, touch.pageY);
        if (event.type === "touchstart") {
          Browser.lastTouches[touch.identifier] = coords;
          Browser.touches[touch.identifier] = coords;
        } else if (event.type === "touchend" || event.type === "touchmove") {
          var last = Browser.touches[touch.identifier];
          last ||= coords;
          Browser.lastTouches[touch.identifier] = last;
          Browser.touches[touch.identifier] = coords;
        }
        return;
      }
      Browser.setMouseCoords(event.pageX, event.pageY);
    }
  },
  resizeListeners: [],
  updateResizeListeners() {
    var canvas = Module["canvas"];
    Browser.resizeListeners.forEach(listener => listener(canvas.width, canvas.height));
  },
  setCanvasSize(width, height, noUpdates) {
    var canvas = Module["canvas"];
    Browser.updateCanvasDimensions(canvas, width, height);
    if (!noUpdates) Browser.updateResizeListeners();
  },
  windowedWidth: 0,
  windowedHeight: 0,
  setFullscreenCanvasSize() {
    // check if SDL is available
    if (typeof SDL != "undefined") {
      var flags = GROWABLE_HEAP_U32()[((SDL.screen) >> 2)];
      flags = flags | 8388608;
      // set SDL_FULLSCREEN flag
      GROWABLE_HEAP_I32()[((SDL.screen) >> 2)] = flags;
    }
    Browser.updateCanvasDimensions(Module["canvas"]);
    Browser.updateResizeListeners();
  },
  setWindowedCanvasSize() {
    // check if SDL is available
    if (typeof SDL != "undefined") {
      var flags = GROWABLE_HEAP_U32()[((SDL.screen) >> 2)];
      flags = flags & ~8388608;
      // clear SDL_FULLSCREEN flag
      GROWABLE_HEAP_I32()[((SDL.screen) >> 2)] = flags;
    }
    Browser.updateCanvasDimensions(Module["canvas"]);
    Browser.updateResizeListeners();
  },
  updateCanvasDimensions(canvas, wNative, hNative) {
    if (wNative && hNative) {
      canvas.widthNative = wNative;
      canvas.heightNative = hNative;
    } else {
      wNative = canvas.widthNative;
      hNative = canvas.heightNative;
    }
    var w = wNative;
    var h = hNative;
    if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
      if (w / h < Module["forcedAspectRatio"]) {
        w = Math.round(h * Module["forcedAspectRatio"]);
      } else {
        h = Math.round(w / Module["forcedAspectRatio"]);
      }
    }
    if (((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode) && (typeof screen != "undefined")) {
      var factor = Math.min(screen.width / w, screen.height / h);
      w = Math.round(w * factor);
      h = Math.round(h * factor);
    }
    if (Browser.resizeCanvas) {
      if (canvas.width != w) canvas.width = w;
      if (canvas.height != h) canvas.height = h;
      if (typeof canvas.style != "undefined") {
        canvas.style.removeProperty("width");
        canvas.style.removeProperty("height");
      }
    } else {
      if (canvas.width != wNative) canvas.width = wNative;
      if (canvas.height != hNative) canvas.height = hNative;
      if (typeof canvas.style != "undefined") {
        if (w != wNative || h != hNative) {
          canvas.style.setProperty("width", w + "px", "important");
          canvas.style.setProperty("height", h + "px", "important");
        } else {
          canvas.style.removeProperty("width");
          canvas.style.removeProperty("height");
        }
      }
    }
  }
};

function _emscripten_set_window_title(title) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(23, 0, 1, title);
  return document.title = UTF8ToString(title);
}

var ENV = {};

var getExecutableName = () => thisProgram || "./this.program";

var getEnvStrings = () => {
  if (!getEnvStrings.strings) {
    // Default values.
    // Browser language detection #8751
    var lang = ((typeof navigator == "object" && navigator.languages && navigator.languages[0]) || "C").replace("-", "_") + ".UTF-8";
    var env = {
      "USER": "web_user",
      "LOGNAME": "web_user",
      "PATH": "/",
      "PWD": "/",
      "HOME": "/home/web_user",
      "LANG": lang,
      "_": getExecutableName()
    };
    // Apply the user-provided values, if any.
    for (var x in ENV) {
      // x is a key in ENV; if ENV[x] is undefined, that means it was
      // explicitly set to be so. We allow user code to do that to
      // force variables with default values to remain unset.
      if (ENV[x] === undefined) delete env[x]; else env[x] = ENV[x];
    }
    var strings = [];
    for (var x in env) {
      strings.push(`${x}=${env[x]}`);
    }
    getEnvStrings.strings = strings;
  }
  return getEnvStrings.strings;
};

var stringToAscii = (str, buffer) => {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === (str.charCodeAt(i) & 255));
    GROWABLE_HEAP_I8()[buffer++] = str.charCodeAt(i);
  }
  // Null-terminate the string
  GROWABLE_HEAP_I8()[buffer] = 0;
};

var _environ_get = function(__environ, environ_buf) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(24, 0, 1, __environ, environ_buf);
  var bufSize = 0;
  getEnvStrings().forEach((string, i) => {
    var ptr = environ_buf + bufSize;
    GROWABLE_HEAP_U32()[(((__environ) + (i * 4)) >> 2)] = ptr;
    stringToAscii(string, ptr);
    bufSize += string.length + 1;
  });
  return 0;
};

var _environ_sizes_get = function(penviron_count, penviron_buf_size) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(25, 0, 1, penviron_count, penviron_buf_size);
  var strings = getEnvStrings();
  GROWABLE_HEAP_U32()[((penviron_count) >> 2)] = strings.length;
  var bufSize = 0;
  strings.forEach(string => bufSize += string.length + 1);
  GROWABLE_HEAP_U32()[((penviron_buf_size) >> 2)] = bufSize;
  return 0;
};

function _fd_close(fd) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(26, 0, 1, fd);
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    FS.close(stream);
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

/** @param {number=} offset */ var doReadv = (stream, iov, iovcnt, offset) => {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
    var ptr = GROWABLE_HEAP_U32()[((iov) >> 2)];
    var len = GROWABLE_HEAP_U32()[(((iov) + (4)) >> 2)];
    iov += 8;
    var curr = FS.read(stream, GROWABLE_HEAP_I8(), ptr, len, offset);
    if (curr < 0) return -1;
    ret += curr;
    if (curr < len) break;
    // nothing more to read
    if (typeof offset != "undefined") {
      offset += curr;
    }
  }
  return ret;
};

function _fd_read(fd, iov, iovcnt, pnum) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(27, 0, 1, fd, iov, iovcnt, pnum);
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = doReadv(stream, iov, iovcnt);
    GROWABLE_HEAP_U32()[((pnum) >> 2)] = num;
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(28, 0, 1, fd, offset_low, offset_high, whence, newOffset);
  var offset = convertI32PairToI53Checked(offset_low, offset_high);
  try {
    if (isNaN(offset)) return 61;
    var stream = SYSCALLS.getStreamFromFD(fd);
    FS.llseek(stream, offset, whence);
    (tempI64 = [ stream.position >>> 0, (tempDouble = stream.position, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    GROWABLE_HEAP_I32()[((newOffset) >> 2)] = tempI64[0], GROWABLE_HEAP_I32()[(((newOffset) + (4)) >> 2)] = tempI64[1]);
    if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
    // reset readdir state
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

/** @param {number=} offset */ var doWritev = (stream, iov, iovcnt, offset) => {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
    var ptr = GROWABLE_HEAP_U32()[((iov) >> 2)];
    var len = GROWABLE_HEAP_U32()[(((iov) + (4)) >> 2)];
    iov += 8;
    var curr = FS.write(stream, GROWABLE_HEAP_I8(), ptr, len, offset);
    if (curr < 0) return -1;
    ret += curr;
    if (curr < len) {
      // No more space to write.
      break;
    }
    if (typeof offset != "undefined") {
      offset += curr;
    }
  }
  return ret;
};

function _fd_write(fd, iov, iovcnt, pnum) {
  if (ENVIRONMENT_IS_PTHREAD) return proxyToMainThread(29, 0, 1, fd, iov, iovcnt, pnum);
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = doWritev(stream, iov, iovcnt);
    GROWABLE_HEAP_U32()[((pnum) >> 2)] = num;
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

/** @constructor */ function GLFW_Window(id, width, height, framebufferWidth, framebufferHeight, title, monitor, share) {
  this.id = id;
  this.x = 0;
  this.y = 0;
  this.fullscreen = false;
  // Used to determine if app in fullscreen mode
  this.storedX = 0;
  // Used to store X before fullscreen
  this.storedY = 0;
  // Used to store Y before fullscreen
  this.width = width;
  this.height = height;
  this.framebufferWidth = framebufferWidth;
  this.framebufferHeight = framebufferHeight;
  this.storedWidth = width;
  // Used to store width before fullscreen
  this.storedHeight = height;
  // Used to store height before fullscreen
  this.title = title;
  this.monitor = monitor;
  this.share = share;
  this.attributes = Object.assign({}, GLFW.hints);
  this.inputModes = {
    208897: 212993,
    // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
    208898: 0,
    // GLFW_STICKY_KEYS
    208899: 0
  };
  this.buttons = 0;
  this.keys = new Array;
  this.domKeys = new Array;
  this.shouldClose = 0;
  this.title = null;
  this.windowPosFunc = 0;
  // GLFWwindowposfun
  this.windowSizeFunc = 0;
  // GLFWwindowsizefun
  this.windowCloseFunc = 0;
  // GLFWwindowclosefun
  this.windowRefreshFunc = 0;
  // GLFWwindowrefreshfun
  this.windowFocusFunc = 0;
  // GLFWwindowfocusfun
  this.windowIconifyFunc = 0;
  // GLFWwindowiconifyfun
  this.windowMaximizeFunc = 0;
  // GLFWwindowmaximizefun
  this.framebufferSizeFunc = 0;
  // GLFWframebuffersizefun
  this.windowContentScaleFunc = 0;
  // GLFWwindowcontentscalefun
  this.mouseButtonFunc = 0;
  // GLFWmousebuttonfun
  this.cursorPosFunc = 0;
  // GLFWcursorposfun
  this.cursorEnterFunc = 0;
  // GLFWcursorenterfun
  this.scrollFunc = 0;
  // GLFWscrollfun
  this.dropFunc = 0;
  // GLFWdropfun
  this.keyFunc = 0;
  // GLFWkeyfun
  this.charFunc = 0;
  // GLFWcharfun
  this.userptr = 0;
}

var GLFW = {
  WindowFromId: id => {
    if (id <= 0 || !GLFW.windows) return null;
    return GLFW.windows[id - 1];
  },
  joystickFunc: 0,
  errorFunc: 0,
  monitorFunc: 0,
  active: null,
  scale: null,
  windows: null,
  monitors: null,
  monitorString: null,
  versionString: null,
  initialTime: null,
  extensions: null,
  devicePixelRatioMQL: null,
  hints: null,
  primaryTouchId: null,
  defaultHints: {
    131073: 0,
    131074: 0,
    131075: 1,
    131076: 1,
    131077: 1,
    131082: 0,
    135169: 8,
    135170: 8,
    135171: 8,
    135172: 8,
    135173: 24,
    135174: 8,
    135175: 0,
    135176: 0,
    135177: 0,
    135178: 0,
    135179: 0,
    135180: 0,
    135181: 0,
    135182: 0,
    135183: 0,
    139265: 196609,
    139266: 1,
    139267: 0,
    139268: 0,
    139269: 0,
    139270: 0,
    139271: 0,
    139272: 0,
    139276: 0
  },
  DOMToGLFWKeyCode: keycode => {
    switch (keycode) {
     // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
      case 32:
      return 32;

     // DOM_VK_SPACE -> GLFW_KEY_SPACE
      case 222:
      return 39;

     // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
      case 188:
      return 44;

     // DOM_VK_COMMA -> GLFW_KEY_COMMA
      case 173:
      return 45;

     // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
      case 189:
      return 45;

     // DOM_VK_MINUS -> GLFW_KEY_MINUS
      case 190:
      return 46;

     // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
      case 191:
      return 47;

     // DOM_VK_SLASH -> GLFW_KEY_SLASH
      case 48:
      return 48;

     // DOM_VK_0 -> GLFW_KEY_0
      case 49:
      return 49;

     // DOM_VK_1 -> GLFW_KEY_1
      case 50:
      return 50;

     // DOM_VK_2 -> GLFW_KEY_2
      case 51:
      return 51;

     // DOM_VK_3 -> GLFW_KEY_3
      case 52:
      return 52;

     // DOM_VK_4 -> GLFW_KEY_4
      case 53:
      return 53;

     // DOM_VK_5 -> GLFW_KEY_5
      case 54:
      return 54;

     // DOM_VK_6 -> GLFW_KEY_6
      case 55:
      return 55;

     // DOM_VK_7 -> GLFW_KEY_7
      case 56:
      return 56;

     // DOM_VK_8 -> GLFW_KEY_8
      case 57:
      return 57;

     // DOM_VK_9 -> GLFW_KEY_9
      case 59:
      return 59;

     // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
      case 61:
      return 61;

     // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
      case 187:
      return 61;

     // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
      case 65:
      return 65;

     // DOM_VK_A -> GLFW_KEY_A
      case 66:
      return 66;

     // DOM_VK_B -> GLFW_KEY_B
      case 67:
      return 67;

     // DOM_VK_C -> GLFW_KEY_C
      case 68:
      return 68;

     // DOM_VK_D -> GLFW_KEY_D
      case 69:
      return 69;

     // DOM_VK_E -> GLFW_KEY_E
      case 70:
      return 70;

     // DOM_VK_F -> GLFW_KEY_F
      case 71:
      return 71;

     // DOM_VK_G -> GLFW_KEY_G
      case 72:
      return 72;

     // DOM_VK_H -> GLFW_KEY_H
      case 73:
      return 73;

     // DOM_VK_I -> GLFW_KEY_I
      case 74:
      return 74;

     // DOM_VK_J -> GLFW_KEY_J
      case 75:
      return 75;

     // DOM_VK_K -> GLFW_KEY_K
      case 76:
      return 76;

     // DOM_VK_L -> GLFW_KEY_L
      case 77:
      return 77;

     // DOM_VK_M -> GLFW_KEY_M
      case 78:
      return 78;

     // DOM_VK_N -> GLFW_KEY_N
      case 79:
      return 79;

     // DOM_VK_O -> GLFW_KEY_O
      case 80:
      return 80;

     // DOM_VK_P -> GLFW_KEY_P
      case 81:
      return 81;

     // DOM_VK_Q -> GLFW_KEY_Q
      case 82:
      return 82;

     // DOM_VK_R -> GLFW_KEY_R
      case 83:
      return 83;

     // DOM_VK_S -> GLFW_KEY_S
      case 84:
      return 84;

     // DOM_VK_T -> GLFW_KEY_T
      case 85:
      return 85;

     // DOM_VK_U -> GLFW_KEY_U
      case 86:
      return 86;

     // DOM_VK_V -> GLFW_KEY_V
      case 87:
      return 87;

     // DOM_VK_W -> GLFW_KEY_W
      case 88:
      return 88;

     // DOM_VK_X -> GLFW_KEY_X
      case 89:
      return 89;

     // DOM_VK_Y -> GLFW_KEY_Y
      case 90:
      return 90;

     // DOM_VK_Z -> GLFW_KEY_Z
      case 219:
      return 91;

     // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
      case 220:
      return 92;

     // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
      case 221:
      return 93;

     // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
      case 192:
      return 96;

     // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
      case 27:
      return 256;

     // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
      case 13:
      return 257;

     // DOM_VK_RETURN -> GLFW_KEY_ENTER
      case 9:
      return 258;

     // DOM_VK_TAB -> GLFW_KEY_TAB
      case 8:
      return 259;

     // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
      case 45:
      return 260;

     // DOM_VK_INSERT -> GLFW_KEY_INSERT
      case 46:
      return 261;

     // DOM_VK_DELETE -> GLFW_KEY_DELETE
      case 39:
      return 262;

     // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
      case 37:
      return 263;

     // DOM_VK_LEFT -> GLFW_KEY_LEFT
      case 40:
      return 264;

     // DOM_VK_DOWN -> GLFW_KEY_DOWN
      case 38:
      return 265;

     // DOM_VK_UP -> GLFW_KEY_UP
      case 33:
      return 266;

     // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
      case 34:
      return 267;

     // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
      case 36:
      return 268;

     // DOM_VK_HOME -> GLFW_KEY_HOME
      case 35:
      return 269;

     // DOM_VK_END -> GLFW_KEY_END
      case 20:
      return 280;

     // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
      case 145:
      return 281;

     // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
      case 144:
      return 282;

     // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
      case 44:
      return 283;

     // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
      case 19:
      return 284;

     // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
      case 112:
      return 290;

     // DOM_VK_F1 -> GLFW_KEY_F1
      case 113:
      return 291;

     // DOM_VK_F2 -> GLFW_KEY_F2
      case 114:
      return 292;

     // DOM_VK_F3 -> GLFW_KEY_F3
      case 115:
      return 293;

     // DOM_VK_F4 -> GLFW_KEY_F4
      case 116:
      return 294;

     // DOM_VK_F5 -> GLFW_KEY_F5
      case 117:
      return 295;

     // DOM_VK_F6 -> GLFW_KEY_F6
      case 118:
      return 296;

     // DOM_VK_F7 -> GLFW_KEY_F7
      case 119:
      return 297;

     // DOM_VK_F8 -> GLFW_KEY_F8
      case 120:
      return 298;

     // DOM_VK_F9 -> GLFW_KEY_F9
      case 121:
      return 299;

     // DOM_VK_F10 -> GLFW_KEY_F10
      case 122:
      return 300;

     // DOM_VK_F11 -> GLFW_KEY_F11
      case 123:
      return 301;

     // DOM_VK_F12 -> GLFW_KEY_F12
      case 124:
      return 302;

     // DOM_VK_F13 -> GLFW_KEY_F13
      case 125:
      return 303;

     // DOM_VK_F14 -> GLFW_KEY_F14
      case 126:
      return 304;

     // DOM_VK_F15 -> GLFW_KEY_F15
      case 127:
      return 305;

     // DOM_VK_F16 -> GLFW_KEY_F16
      case 128:
      return 306;

     // DOM_VK_F17 -> GLFW_KEY_F17
      case 129:
      return 307;

     // DOM_VK_F18 -> GLFW_KEY_F18
      case 130:
      return 308;

     // DOM_VK_F19 -> GLFW_KEY_F19
      case 131:
      return 309;

     // DOM_VK_F20 -> GLFW_KEY_F20
      case 132:
      return 310;

     // DOM_VK_F21 -> GLFW_KEY_F21
      case 133:
      return 311;

     // DOM_VK_F22 -> GLFW_KEY_F22
      case 134:
      return 312;

     // DOM_VK_F23 -> GLFW_KEY_F23
      case 135:
      return 313;

     // DOM_VK_F24 -> GLFW_KEY_F24
      case 136:
      return 314;

     // 0x88 (not used?) -> GLFW_KEY_F25
      case 96:
      return 320;

     // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
      case 97:
      return 321;

     // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
      case 98:
      return 322;

     // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
      case 99:
      return 323;

     // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
      case 100:
      return 324;

     // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
      case 101:
      return 325;

     // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
      case 102:
      return 326;

     // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
      case 103:
      return 327;

     // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
      case 104:
      return 328;

     // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
      case 105:
      return 329;

     // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
      case 110:
      return 330;

     // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
      case 111:
      return 331;

     // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
      case 106:
      return 332;

     // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
      case 109:
      return 333;

     // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
      case 107:
      return 334;

     // DOM_VK_ADD -> GLFW_KEY_KP_ADD
      // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
      // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
      case 16:
      return 340;

     // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
      case 17:
      return 341;

     // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
      case 18:
      return 342;

     // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
      case 91:
      return 343;

     // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
      case 224:
      return 343;

     // DOM_VK_META -> GLFW_KEY_LEFT_SUPER
      // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
      // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
      // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
      // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
      case 93:
      return 348;

     // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
      // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
      default:
      return -1;
    }
  },
  getModBits: win => {
    var mod = 0;
    if (win.keys[340]) mod |= 1;
    // GLFW_MOD_SHIFT
    if (win.keys[341]) mod |= 2;
    // GLFW_MOD_CONTROL
    if (win.keys[342]) mod |= 4;
    // GLFW_MOD_ALT
    if (win.keys[343] || win.keys[348]) mod |= 8;
    // GLFW_MOD_SUPER
    // add caps and num lock keys? only if lock_key_mod is set
    return mod;
  },
  onKeyPress: event => {
    if (!GLFW.active || !GLFW.active.charFunc) return;
    if (event.ctrlKey || event.metaKey) return;
    // correct unicode charCode is only available with onKeyPress event
    var charCode = event.charCode;
    if (charCode == 0 || (charCode >= 0 && charCode <= 31)) return;
    ((a1, a2) => dynCall_vii(GLFW.active.charFunc, a1, a2))(GLFW.active.id, charCode);
  },
  onKeyChanged: (keyCode, status) => {
    if (!GLFW.active) return;
    var key = GLFW.DOMToGLFWKeyCode(keyCode);
    if (key == -1) return;
    var repeat = status && GLFW.active.keys[key];
    GLFW.active.keys[key] = status;
    GLFW.active.domKeys[keyCode] = status;
    if (GLFW.active.keyFunc) {
      if (repeat) status = 2;
      // GLFW_REPEAT
      ((a1, a2, a3, a4, a5) => dynCall_viiiii(GLFW.active.keyFunc, a1, a2, a3, a4, a5))(GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
    }
  },
  onGamepadConnected: event => {
    GLFW.refreshJoysticks();
  },
  onGamepadDisconnected: event => {
    GLFW.refreshJoysticks();
  },
  onKeydown: event => {
    GLFW.onKeyChanged(event.keyCode, 1);
    // GLFW_PRESS or GLFW_REPEAT
    // This logic comes directly from the sdl implementation. We cannot
    // call preventDefault on all keydown events otherwise onKeyPress will
    // not get called
    if (event.key == "Backspace" || event.key == "Tab") {
      event.preventDefault();
    }
  },
  onKeyup: event => {
    GLFW.onKeyChanged(event.keyCode, 0);
  },
  onBlur: event => {
    if (!GLFW.active) return;
    for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
      if (GLFW.active.domKeys[i]) {
        GLFW.onKeyChanged(i, 0);
      }
    }
  },
  onMousemove: event => {
    if (!GLFW.active) return;
    if (event.type === "touchmove") {
      // Handling for touch events that are being converted to mouse input.
      // Don't let the browser fire a duplicate mouse event.
      event.preventDefault();
      let primaryChanged = false;
      for (let i of event.changedTouches) {
        // If our chosen primary touch moved, update Browser mouse coords
        if (GLFW.primaryTouchId === i.identifier) {
          Browser.setMouseCoords(i.pageX, i.pageY);
          primaryChanged = true;
          break;
        }
      }
      if (!primaryChanged) {
        // Do not send mouse events if some touch other than the primary triggered this.
        return;
      }
    } else {
      // Handling for non-touch mouse input events.
      Browser.calculateMouseEvent(event);
    }
    if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
    if (GLFW.active.cursorPosFunc) {
      ((a1, a2, a3) => dynCall_vidd(GLFW.active.cursorPosFunc, a1, a2, a3))(GLFW.active.id, Browser.mouseX, Browser.mouseY);
    }
  },
  DOMToGLFWMouseButton: event => {
    // DOM and glfw have different button codes.
    // See http://www.w3schools.com/jsref/event_button.asp.
    var eventButton = event["button"];
    if (eventButton > 0) {
      if (eventButton == 1) {
        eventButton = 2;
      } else {
        eventButton = 1;
      }
    }
    return eventButton;
  },
  onMouseenter: event => {
    if (!GLFW.active) return;
    if (event.target != Module["canvas"]) return;
    if (GLFW.active.cursorEnterFunc) {
      ((a1, a2) => dynCall_vii(GLFW.active.cursorEnterFunc, a1, a2))(GLFW.active.id, 1);
    }
  },
  onMouseleave: event => {
    if (!GLFW.active) return;
    if (event.target != Module["canvas"]) return;
    if (GLFW.active.cursorEnterFunc) {
      ((a1, a2) => dynCall_vii(GLFW.active.cursorEnterFunc, a1, a2))(GLFW.active.id, 0);
    }
  },
  onMouseButtonChanged: (event, status) => {
    if (!GLFW.active) return;
    if (event.target != Module["canvas"]) return;
    // Is this from a touch event?
    const isTouchType = event.type === "touchstart" || event.type === "touchend" || event.type === "touchcancel";
    // Only emulating mouse left-click behavior for touches.
    let eventButton = 0;
    if (isTouchType) {
      // Handling for touch events that are being converted to mouse input.
      // Don't let the browser fire a duplicate mouse event.
      event.preventDefault();
      let primaryChanged = false;
      // Set a primary touch if we have none.
      if (GLFW.primaryTouchId === null && event.type === "touchstart" && event.targetTouches.length > 0) {
        // Pick the first touch that started in the canvas and treat it as primary.
        const chosenTouch = event.targetTouches[0];
        GLFW.primaryTouchId = chosenTouch.identifier;
        Browser.setMouseCoords(chosenTouch.pageX, chosenTouch.pageY);
        primaryChanged = true;
      } else if (event.type === "touchend" || event.type === "touchcancel") {
        // Clear the primary touch if it ended.
        for (let i of event.changedTouches) {
          // If our chosen primary touch ended, remove it.
          if (GLFW.primaryTouchId === i.identifier) {
            GLFW.primaryTouchId = null;
            primaryChanged = true;
            break;
          }
        }
      }
      if (!primaryChanged) {
        // Do not send mouse events if some touch other than the primary triggered this.
        return;
      }
    } else {
      // Handling for non-touch mouse input events.
      Browser.calculateMouseEvent(event);
      eventButton = GLFW.DOMToGLFWMouseButton(event);
    }
    if (status == 1) {
      // GLFW_PRESS
      GLFW.active.buttons |= (1 << eventButton);
      try {
        event.target.setCapture();
      } catch (e) {}
    } else {
      // GLFW_RELEASE
      GLFW.active.buttons &= ~(1 << eventButton);
    }
    // Send mouse event to GLFW.
    if (GLFW.active.mouseButtonFunc) {
      ((a1, a2, a3, a4) => dynCall_viiii(GLFW.active.mouseButtonFunc, a1, a2, a3, a4))(GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
    }
  },
  onMouseButtonDown: event => {
    if (!GLFW.active) return;
    GLFW.onMouseButtonChanged(event, 1);
  },
  onMouseButtonUp: event => {
    if (!GLFW.active) return;
    GLFW.onMouseButtonChanged(event, 0);
  },
  onMouseWheel: event => {
    // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
    var delta = -Browser.getMouseWheelDelta(event);
    delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1));
    // Quantize to integer so that minimum scroll is at least +/- 1.
    GLFW.wheelPos += delta;
    if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module["canvas"]) return;
    var sx = 0;
    var sy = delta;
    if (event.type == "mousewheel") {
      sx = event.wheelDeltaX;
    } else {
      sx = event.deltaX;
    }
    ((a1, a2, a3) => dynCall_vidd(GLFW.active.scrollFunc, a1, a2, a3))(GLFW.active.id, sx, sy);
    event.preventDefault();
  },
  onCanvasResize: (width, height, framebufferWidth, framebufferHeight) => {
    if (!GLFW.active) return;
    var resizeNeeded = false;
    // If the client is requesting fullscreen mode
    if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
      if (!GLFW.active.fullscreen) {
        resizeNeeded = width != screen.width || height != screen.height;
        GLFW.active.storedX = GLFW.active.x;
        GLFW.active.storedY = GLFW.active.y;
        GLFW.active.storedWidth = GLFW.active.width;
        GLFW.active.storedHeight = GLFW.active.height;
        GLFW.active.x = GLFW.active.y = 0;
        GLFW.active.width = screen.width;
        GLFW.active.height = screen.height;
        GLFW.active.fullscreen = true;
      }
    } else if (GLFW.active.fullscreen == true) {
      resizeNeeded = width != GLFW.active.storedWidth || height != GLFW.active.storedHeight;
      GLFW.active.x = GLFW.active.storedX;
      GLFW.active.y = GLFW.active.storedY;
      GLFW.active.width = GLFW.active.storedWidth;
      GLFW.active.height = GLFW.active.storedHeight;
      GLFW.active.fullscreen = false;
    }
    if (resizeNeeded) {
      // width or height is changed (fullscreen / exit fullscreen) which will call this listener back
      // with proper framebufferWidth/framebufferHeight
      Browser.setCanvasSize(GLFW.active.width, GLFW.active.height);
    } else if (GLFW.active.width != width || GLFW.active.height != height || GLFW.active.framebufferWidth != framebufferWidth || GLFW.active.framebufferHeight != framebufferHeight) {
      GLFW.active.width = width;
      GLFW.active.height = height;
      GLFW.active.framebufferWidth = framebufferWidth;
      GLFW.active.framebufferHeight = framebufferHeight;
      GLFW.onWindowSizeChanged();
      GLFW.onFramebufferSizeChanged();
    }
  },
  onWindowSizeChanged: () => {
    if (!GLFW.active) return;
    if (GLFW.active.windowSizeFunc) {
      ((a1, a2, a3) => dynCall_viii(GLFW.active.windowSizeFunc, a1, a2, a3))(GLFW.active.id, GLFW.active.width, GLFW.active.height);
    }
  },
  onFramebufferSizeChanged: () => {
    if (!GLFW.active) return;
    if (GLFW.active.framebufferSizeFunc) {
      ((a1, a2, a3) => dynCall_viii(GLFW.active.framebufferSizeFunc, a1, a2, a3))(GLFW.active.id, GLFW.active.framebufferWidth, GLFW.active.framebufferHeight);
    }
  },
  onWindowContentScaleChanged: scale => {
    GLFW.scale = scale;
    if (!GLFW.active) return;
    if (GLFW.active.windowContentScaleFunc) {
      ((a1, a2, a3) => dynCall_viff(GLFW.active.windowContentScaleFunc, a1, a2, a3))(GLFW.active.id, GLFW.scale, GLFW.scale);
    }
  },
  getTime: () => _emscripten_get_now() / 1e3,
  setWindowTitle: (winid, title) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return;
    win.title = title;
    if (GLFW.active.id == win.id) {
      _emscripten_set_window_title(title);
    }
  },
  setJoystickCallback: cbfun => {
    var prevcbfun = GLFW.joystickFunc;
    GLFW.joystickFunc = cbfun;
    GLFW.refreshJoysticks();
    return prevcbfun;
  },
  joys: {},
  lastGamepadState: [],
  lastGamepadStateFrame: null,
  refreshJoysticks: () => {
    // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
    if (MainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !MainLoop.currentFrameNumber) {
      GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads || []);
      GLFW.lastGamepadStateFrame = MainLoop.currentFrameNumber;
      for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
        var gamepad = GLFW.lastGamepadState[joy];
        if (gamepad) {
          if (!GLFW.joys[joy]) {
            out("glfw joystick connected:", joy);
            GLFW.joys[joy] = {
              id: stringToNewUTF8(gamepad.id),
              buttonsCount: gamepad.buttons.length,
              axesCount: gamepad.axes.length,
              buttons: _malloc(gamepad.buttons.length),
              axes: _malloc(gamepad.axes.length * 4)
            };
            if (GLFW.joystickFunc) {
              ((a1, a2) => dynCall_vii(GLFW.joystickFunc, a1, a2))(joy, 262145);
            }
          }
          var data = GLFW.joys[joy];
          for (var i = 0; i < gamepad.buttons.length; ++i) {
            GROWABLE_HEAP_I8()[data.buttons + i] = gamepad.buttons[i].pressed;
          }
          for (var i = 0; i < gamepad.axes.length; ++i) {
            GROWABLE_HEAP_F32()[((data.axes + i * 4) >> 2)] = gamepad.axes[i];
          }
        } else {
          if (GLFW.joys[joy]) {
            out("glfw joystick disconnected", joy);
            if (GLFW.joystickFunc) {
              ((a1, a2) => dynCall_vii(GLFW.joystickFunc, a1, a2))(joy, 262146);
            }
            _free(GLFW.joys[joy].id);
            _free(GLFW.joys[joy].buttons);
            _free(GLFW.joys[joy].axes);
            delete GLFW.joys[joy];
          }
        }
      }
    }
  },
  setKeyCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.keyFunc;
    win.keyFunc = cbfun;
    return prevcbfun;
  },
  setCharCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.charFunc;
    win.charFunc = cbfun;
    return prevcbfun;
  },
  setMouseButtonCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.mouseButtonFunc;
    win.mouseButtonFunc = cbfun;
    return prevcbfun;
  },
  setCursorPosCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.cursorPosFunc;
    win.cursorPosFunc = cbfun;
    return prevcbfun;
  },
  setScrollCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.scrollFunc;
    win.scrollFunc = cbfun;
    return prevcbfun;
  },
  setDropCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.dropFunc;
    win.dropFunc = cbfun;
    return prevcbfun;
  },
  onDrop: event => {
    if (!GLFW.active || !GLFW.active.dropFunc) return;
    if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
    event.preventDefault();
    var filenames = _malloc(event.dataTransfer.files.length * 4);
    var filenamesArray = [];
    var count = event.dataTransfer.files.length;
    // Read and save the files to emscripten's FS
    var written = 0;
    var drop_dir = ".glfw_dropped_files";
    FS.createPath("/", drop_dir);
    function save(file) {
      var path = "/" + drop_dir + "/" + file.name.replace(/\//g, "_");
      var reader = new FileReader;
      reader.onloadend = e => {
        if (reader.readyState != 2) {
          // not DONE
          ++written;
          out("failed to read dropped file: " + file.name + ": " + reader.error);
          return;
        }
        var data = e.target.result;
        FS.writeFile(path, new Uint8Array(data));
        if (++written === count) {
          ((a1, a2, a3) => dynCall_viii(GLFW.active.dropFunc, a1, a2, a3))(GLFW.active.id, count, filenames);
          for (var i = 0; i < filenamesArray.length; ++i) {
            _free(filenamesArray[i]);
          }
          _free(filenames);
        }
      };
      reader.readAsArrayBuffer(file);
      var filename = stringToNewUTF8(path);
      filenamesArray.push(filename);
      GROWABLE_HEAP_U32()[((filenames + i * 4) >> 2)] = filename;
    }
    for (var i = 0; i < count; ++i) {
      save(event.dataTransfer.files[i]);
    }
    return false;
  },
  onDragover: event => {
    if (!GLFW.active || !GLFW.active.dropFunc) return;
    event.preventDefault();
    return false;
  },
  setWindowSizeCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.windowSizeFunc;
    win.windowSizeFunc = cbfun;
    return prevcbfun;
  },
  setWindowCloseCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.windowCloseFunc;
    win.windowCloseFunc = cbfun;
    return prevcbfun;
  },
  setWindowRefreshCallback: (winid, cbfun) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return null;
    var prevcbfun = win.windowRefreshFunc;
    win.windowRefreshFunc = cbfun;
    return prevcbfun;
  },
  onClickRequestPointerLock: e => {
    if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
      Module["canvas"].requestPointerLock();
      e.preventDefault();
    }
  },
  setInputMode: (winid, mode, value) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return;
    switch (mode) {
     case 208897:
      {
        // GLFW_CURSOR
        switch (value) {
         case 212993:
          {
            // GLFW_CURSOR_NORMAL
            win.inputModes[mode] = value;
            Module["canvas"].removeEventListener("click", GLFW.onClickRequestPointerLock, true);
            Module["canvas"].exitPointerLock();
            break;
          }

         case 212994:
          {
            // GLFW_CURSOR_HIDDEN
            err("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented");
            break;
          }

         case 212995:
          {
            // GLFW_CURSOR_DISABLED
            win.inputModes[mode] = value;
            Module["canvas"].addEventListener("click", GLFW.onClickRequestPointerLock, true);
            Module["canvas"].requestPointerLock();
            break;
          }

         default:
          {
            err(`glfwSetInputMode called with unknown value parameter value: ${value}`);
            break;
          }
        }
        break;
      }

     case 208898:
      {
        // GLFW_STICKY_KEYS
        err("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented");
        break;
      }

     case 208899:
      {
        // GLFW_STICKY_MOUSE_BUTTONS
        err("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented");
        break;
      }

     case 208900:
      {
        // GLFW_LOCK_KEY_MODS
        err("glfwSetInputMode called with GLFW_LOCK_KEY_MODS mode not implemented");
        break;
      }

     case 3342341:
      {
        // GLFW_RAW_MOUSE_MOTION
        err("glfwSetInputMode called with GLFW_RAW_MOUSE_MOTION mode not implemented");
        break;
      }

     default:
      {
        err(`glfwSetInputMode called with unknown mode parameter value: ${mode}`);
        break;
      }
    }
  },
  getKey: (winid, key) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return 0;
    return win.keys[key];
  },
  getMouseButton: (winid, button) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return 0;
    return (win.buttons & (1 << button)) > 0;
  },
  getCursorPos: (winid, x, y) => {
    GROWABLE_HEAP_F64()[((x) >> 3)] = Browser.mouseX;
    GROWABLE_HEAP_F64()[((y) >> 3)] = Browser.mouseY;
  },
  getMousePos: (winid, x, y) => {
    GROWABLE_HEAP_I32()[((x) >> 2)] = Browser.mouseX;
    GROWABLE_HEAP_I32()[((y) >> 2)] = Browser.mouseY;
  },
  setCursorPos: (winid, x, y) => {},
  getWindowPos: (winid, x, y) => {
    var wx = 0;
    var wy = 0;
    var win = GLFW.WindowFromId(winid);
    if (win) {
      wx = win.x;
      wy = win.y;
    }
    if (x) {
      GROWABLE_HEAP_I32()[((x) >> 2)] = wx;
    }
    if (y) {
      GROWABLE_HEAP_I32()[((y) >> 2)] = wy;
    }
  },
  setWindowPos: (winid, x, y) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return;
    win.x = x;
    win.y = y;
  },
  getWindowSize: (winid, width, height) => {
    var ww = 0;
    var wh = 0;
    var win = GLFW.WindowFromId(winid);
    if (win) {
      ww = win.width;
      wh = win.height;
    }
    if (width) {
      GROWABLE_HEAP_I32()[((width) >> 2)] = ww;
    }
    if (height) {
      GROWABLE_HEAP_I32()[((height) >> 2)] = wh;
    }
  },
  setWindowSize: (winid, width, height) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return;
    if (GLFW.active.id == win.id) {
      Browser.setCanvasSize(width, height);
    }
  },
  defaultWindowHints: () => {
    GLFW.hints = Object.assign({}, GLFW.defaultHints);
  },
  createWindow: (width, height, title, monitor, share) => {
    var i, id;
    for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++) {}
    if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
    // id for window
    id = i + 1;
    // not valid
    if (width <= 0 || height <= 0) return 0;
    if (monitor) {
      Browser.requestFullscreen();
    } else {
      Browser.setCanvasSize(width, height);
    }
    // Create context when there are no existing alive windows
    for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++) {}
    var useWebGL = GLFW.hints[139265] > 0;
    // Use WebGL when we are told to based on GLFW_CLIENT_API
    if (i == GLFW.windows.length) {
      if (useWebGL) {
        var contextAttributes = {
          antialias: (GLFW.hints[135181] > 1),
          // GLFW_SAMPLES
          depth: (GLFW.hints[135173] > 0),
          // GLFW_DEPTH_BITS
          stencil: (GLFW.hints[135174] > 0),
          // GLFW_STENCIL_BITS
          alpha: (GLFW.hints[135172] > 0)
        };
        Browser.createContext(Module["canvas"], /*useWebGL=*/ true, /*setInModule=*/ true, contextAttributes);
      } else {
        Browser.init();
      }
    }
    // If context creation failed, do not return a valid window
    if (!Module["ctx"] && useWebGL) return 0;
    // Initializes the framebuffer size from the canvas
    const canvas = Module["canvas"];
    var win = new GLFW_Window(id, width, height, canvas.width, canvas.height, title, monitor, share);
    // Set window to array
    if (id - 1 == GLFW.windows.length) {
      GLFW.windows.push(win);
    } else {
      GLFW.windows[id - 1] = win;
    }
    GLFW.active = win;
    GLFW.adjustCanvasDimensions();
    return win.id;
  },
  destroyWindow: winid => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return;
    if (win.windowCloseFunc) {
      (a1 => dynCall_vi(win.windowCloseFunc, a1))(win.id);
    }
    GLFW.windows[win.id - 1] = null;
    if (GLFW.active.id == win.id) GLFW.active = null;
    // Destroy context when no alive windows
    for (var i = 0; i < GLFW.windows.length; i++) if (GLFW.windows[i] !== null) return;
    delete Module["ctx"];
  },
  swapBuffers: winid => {},
  requestFullscreen(lockPointer, resizeCanvas) {
    Browser.lockPointer = lockPointer;
    Browser.resizeCanvas = resizeCanvas;
    if (typeof Browser.lockPointer == "undefined") Browser.lockPointer = true;
    if (typeof Browser.resizeCanvas == "undefined") Browser.resizeCanvas = false;
    var canvas = Module["canvas"];
    function fullscreenChange() {
      Browser.isFullscreen = false;
      var canvasContainer = canvas.parentNode;
      if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
        canvas.exitFullscreen = Browser.exitFullscreen;
        if (Browser.lockPointer) canvas.requestPointerLock();
        Browser.isFullscreen = true;
        if (Browser.resizeCanvas) {
          Browser.setFullscreenCanvasSize();
        } else {
          Browser.updateCanvasDimensions(canvas);
          Browser.updateResizeListeners();
        }
      } else {
        // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
        canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
        canvasContainer.parentNode.removeChild(canvasContainer);
        if (Browser.resizeCanvas) {
          Browser.setWindowedCanvasSize();
        } else {
          Browser.updateCanvasDimensions(canvas);
          Browser.updateResizeListeners();
        }
      }
      Module["onFullScreen"]?.(Browser.isFullscreen);
      Module["onFullscreen"]?.(Browser.isFullscreen);
    }
    if (!Browser.fullscreenHandlersInstalled) {
      Browser.fullscreenHandlersInstalled = true;
      document.addEventListener("fullscreenchange", fullscreenChange, false);
      document.addEventListener("mozfullscreenchange", fullscreenChange, false);
      document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
      document.addEventListener("MSFullscreenChange", fullscreenChange, false);
    }
    // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
    var canvasContainer = document.createElement("div");
    canvas.parentNode.insertBefore(canvasContainer, canvas);
    canvasContainer.appendChild(canvas);
    // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
    canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? () => canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]) : null) || (canvasContainer["webkitRequestFullScreen"] ? () => canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]) : null);
    canvasContainer.requestFullscreen();
  },
  updateCanvasDimensions(canvas, wNative, hNative) {
    const scale = GLFW.getHiDPIScale();
    if (wNative && hNative) {
      canvas.widthNative = wNative;
      canvas.heightNative = hNative;
    } else {
      wNative = canvas.widthNative;
      hNative = canvas.heightNative;
    }
    var w = wNative;
    var h = hNative;
    if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
      if (w / h < Module["forcedAspectRatio"]) {
        w = Math.round(h * Module["forcedAspectRatio"]);
      } else {
        h = Math.round(w / Module["forcedAspectRatio"]);
      }
    }
    if (((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode) && (typeof screen != "undefined")) {
      var factor = Math.min(screen.width / w, screen.height / h);
      w = Math.round(w * factor);
      h = Math.round(h * factor);
    }
    if (Browser.resizeCanvas) {
      wNative = w;
      hNative = h;
    }
    const wNativeScaled = Math.floor(wNative * scale);
    const hNativeScaled = Math.floor(hNative * scale);
    if (canvas.width != wNativeScaled) canvas.width = wNativeScaled;
    if (canvas.height != hNativeScaled) canvas.height = hNativeScaled;
    if (typeof canvas.style != "undefined") {
      if (!GLFW.isCSSScalingEnabled()) {
        canvas.style.setProperty("width", wNative + "px", "important");
        canvas.style.setProperty("height", hNative + "px", "important");
      } else {
        canvas.style.removeProperty("width");
        canvas.style.removeProperty("height");
      }
    }
  },
  calculateMouseCoords(pageX, pageY) {
    // Calculate the movement based on the changes
    // in the coordinates.
    const rect = Module["canvas"].getBoundingClientRect();
    // Neither .scrollX or .pageXOffset are defined in a spec, but
    // we prefer .scrollX because it is currently in a spec draft.
    // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
    var scrollX = ((typeof window.scrollX != "undefined") ? window.scrollX : window.pageXOffset);
    var scrollY = ((typeof window.scrollY != "undefined") ? window.scrollY : window.pageYOffset);
    // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
    // and we have no viable fallback.
    assert((typeof scrollX != "undefined") && (typeof scrollY != "undefined"), "Unable to retrieve scroll position, mouse positions likely broken.");
    var adjustedX = pageX - (scrollX + rect.left);
    var adjustedY = pageY - (scrollY + rect.top);
    // getBoundingClientRect() returns dimension affected by CSS, so as a result:
    // - when CSS scaling is enabled, this will fix the mouse coordinates to match the width/height of the window
    // - otherwise the CSS width/height are forced to the width/height of the GLFW window (see updateCanvasDimensions),
    //   so there is no need to adjust the position
    if (GLFW.isCSSScalingEnabled() && GLFW.active) {
      adjustedX = adjustedX * (GLFW.active.width / rect.width);
      adjustedY = adjustedY * (GLFW.active.height / rect.height);
    }
    return {
      x: adjustedX,
      y: adjustedY
    };
  },
  setWindowAttrib: (winid, attrib, value) => {
    var win = GLFW.WindowFromId(winid);
    if (!win) return;
    const isHiDPIAware = GLFW.isHiDPIAware();
    win.attributes[attrib] = value;
    if (isHiDPIAware !== GLFW.isHiDPIAware()) GLFW.adjustCanvasDimensions();
  },
  getDevicePixelRatio() {
    return (typeof devicePixelRatio == "number" && devicePixelRatio) || 1;
  },
  isHiDPIAware() {
    if (GLFW.active) return GLFW.active.attributes[139276] > 0; else return false;
  },
  isCSSScalingEnabled() {
    return !GLFW.isHiDPIAware();
  },
  adjustCanvasDimensions() {
    if (GLFW.active) {
      Browser.updateCanvasDimensions(Module["canvas"], GLFW.active.width, GLFW.active.height);
      Browser.updateResizeListeners();
    }
  },
  getHiDPIScale() {
    return GLFW.isHiDPIAware() ? GLFW.scale : 1;
  },
  onDevicePixelRatioChange() {
    GLFW.onWindowContentScaleChanged(GLFW.getDevicePixelRatio());
    GLFW.adjustCanvasDimensions();
  },
  GLFW2ParamToGLFW3Param: param => {
    var table = {
      196609: 0,
      // GLFW_MOUSE_CURSOR
      196610: 0,
      // GLFW_STICKY_KEYS
      196611: 0,
      // GLFW_STICKY_MOUSE_BUTTONS
      196612: 0,
      // GLFW_SYSTEM_KEYS
      196613: 0,
      // GLFW_KEY_REPEAT
      196614: 0,
      // GLFW_AUTO_POLL_EVENTS
      131073: 0,
      // GLFW_OPENED
      131074: 0,
      // GLFW_ACTIVE
      131075: 0,
      // GLFW_ICONIFIED
      131076: 0,
      // GLFW_ACCELERATED
      131077: 135169,
      // GLFW_RED_BITS
      131078: 135170,
      // GLFW_GREEN_BITS
      131079: 135171,
      // GLFW_BLUE_BITS
      131080: 135172,
      // GLFW_ALPHA_BITS
      131081: 135173,
      // GLFW_DEPTH_BITS
      131082: 135174,
      // GLFW_STENCIL_BITS
      131083: 135183,
      // GLFW_REFRESH_RATE
      131084: 135175,
      // GLFW_ACCUM_RED_BITS
      131085: 135176,
      // GLFW_ACCUM_GREEN_BITS
      131086: 135177,
      // GLFW_ACCUM_BLUE_BITS
      131087: 135178,
      // GLFW_ACCUM_ALPHA_BITS
      131088: 135179,
      // GLFW_AUX_BUFFERS
      131089: 135180,
      // GLFW_STEREO
      131090: 0,
      // GLFW_WINDOW_NO_RESIZE
      131091: 135181,
      // GLFW_FSAA_SAMPLES
      131092: 139266,
      // GLFW_OPENGL_VERSION_MAJOR
      131093: 139267,
      // GLFW_OPENGL_VERSION_MINOR
      131094: 139270,
      // GLFW_OPENGL_FORWARD_COMPAT
      131095: 139271,
      // GLFW_OPENGL_DEBUG_CONTEXT
      131096: 139272
    };
    return table[param];
  }
};

var _glfwCreateWindow = (width, height, title, monitor, share) => GLFW.createWindow(width, height, title, monitor, share);

var _glfwDefaultWindowHints = () => GLFW.defaultWindowHints();

var _glfwDestroyWindow = winid => GLFW.destroyWindow(winid);

var _glfwGetPrimaryMonitor = () => 1;

var _glfwGetTime = () => GLFW.getTime() - GLFW.initialTime;

var _glfwGetVideoModes = (monitor, count) => {
  GROWABLE_HEAP_I32()[((count) >> 2)] = 0;
  return 0;
};

var _glfwInit = () => {
  if (GLFW.windows) return 1;
  // GL_TRUE
  GLFW.initialTime = GLFW.getTime();
  GLFW.defaultWindowHints();
  GLFW.windows = new Array;
  GLFW.active = null;
  GLFW.scale = GLFW.getDevicePixelRatio();
  window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
  window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
  window.addEventListener("keydown", GLFW.onKeydown, true);
  window.addEventListener("keypress", GLFW.onKeyPress, true);
  window.addEventListener("keyup", GLFW.onKeyup, true);
  window.addEventListener("blur", GLFW.onBlur, true);
  // watch for devicePixelRatio changes
  GLFW.devicePixelRatioMQL = window.matchMedia("(resolution: " + GLFW.getDevicePixelRatio() + "dppx)");
  GLFW.devicePixelRatioMQL.addEventListener("change", GLFW.onDevicePixelRatioChange);
  Module["canvas"].addEventListener("touchmove", GLFW.onMousemove, true);
  Module["canvas"].addEventListener("touchstart", GLFW.onMouseButtonDown, true);
  Module["canvas"].addEventListener("touchcancel", GLFW.onMouseButtonUp, true);
  Module["canvas"].addEventListener("touchend", GLFW.onMouseButtonUp, true);
  Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
  Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
  Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
  Module["canvas"].addEventListener("wheel", GLFW.onMouseWheel, true);
  Module["canvas"].addEventListener("mousewheel", GLFW.onMouseWheel, true);
  Module["canvas"].addEventListener("mouseenter", GLFW.onMouseenter, true);
  Module["canvas"].addEventListener("mouseleave", GLFW.onMouseleave, true);
  Module["canvas"].addEventListener("drop", GLFW.onDrop, true);
  Module["canvas"].addEventListener("dragover", GLFW.onDragover, true);
  // Overriding implementation to account for HiDPI
  Browser.requestFullscreen = GLFW.requestFullscreen;
  Browser.calculateMouseCoords = GLFW.calculateMouseCoords;
  Browser.updateCanvasDimensions = GLFW.updateCanvasDimensions;
  Browser.resizeListeners.push((width, height) => {
    if (GLFW.isHiDPIAware()) {
      var canvas = Module["canvas"];
      GLFW.onCanvasResize(canvas.clientWidth, canvas.clientHeight, width, height);
    } else {
      GLFW.onCanvasResize(width, height, width, height);
    }
  });
  return 1;
};

var _glfwMakeContextCurrent = winid => {};

var _glfwSetCharCallback = (winid, cbfun) => GLFW.setCharCallback(winid, cbfun);

var _glfwSetCursorEnterCallback = (winid, cbfun) => {
  var win = GLFW.WindowFromId(winid);
  if (!win) return null;
  var prevcbfun = win.cursorEnterFunc;
  win.cursorEnterFunc = cbfun;
  return prevcbfun;
};

var _glfwSetCursorPosCallback = (winid, cbfun) => GLFW.setCursorPosCallback(winid, cbfun);

var _glfwSetDropCallback = (winid, cbfun) => GLFW.setDropCallback(winid, cbfun);

var _glfwSetErrorCallback = cbfun => {
  var prevcbfun = GLFW.errorFunc;
  GLFW.errorFunc = cbfun;
  return prevcbfun;
};

var _glfwSetKeyCallback = (winid, cbfun) => GLFW.setKeyCallback(winid, cbfun);

var _glfwSetMouseButtonCallback = (winid, cbfun) => GLFW.setMouseButtonCallback(winid, cbfun);

var _glfwSetScrollCallback = (winid, cbfun) => GLFW.setScrollCallback(winid, cbfun);

var _glfwSetWindowContentScaleCallback = (winid, cbfun) => {
  var win = GLFW.WindowFromId(winid);
  if (!win) return null;
  var prevcbfun = win.windowContentScaleFunc;
  win.windowContentScaleFunc = cbfun;
  return prevcbfun;
};

var _glfwSetWindowFocusCallback = (winid, cbfun) => {
  var win = GLFW.WindowFromId(winid);
  if (!win) return null;
  var prevcbfun = win.windowFocusFunc;
  win.windowFocusFunc = cbfun;
  return prevcbfun;
};

var _glfwSetWindowIconifyCallback = (winid, cbfun) => {
  var win = GLFW.WindowFromId(winid);
  if (!win) return null;
  var prevcbfun = win.windowIconifyFunc;
  win.windowIconifyFunc = cbfun;
  return prevcbfun;
};

var _glfwSetWindowShouldClose = (winid, value) => {
  var win = GLFW.WindowFromId(winid);
  if (!win) return;
  win.shouldClose = value;
};

var _glfwSetWindowSizeCallback = (winid, cbfun) => GLFW.setWindowSizeCallback(winid, cbfun);

var _glfwSwapBuffers = winid => GLFW.swapBuffers(winid);

var _glfwTerminate = () => {
  window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
  window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
  window.removeEventListener("keydown", GLFW.onKeydown, true);
  window.removeEventListener("keypress", GLFW.onKeyPress, true);
  window.removeEventListener("keyup", GLFW.onKeyup, true);
  window.removeEventListener("blur", GLFW.onBlur, true);
  Module["canvas"].removeEventListener("touchmove", GLFW.onMousemove, true);
  Module["canvas"].removeEventListener("touchstart", GLFW.onMouseButtonDown, true);
  Module["canvas"].removeEventListener("touchcancel", GLFW.onMouseButtonUp, true);
  Module["canvas"].removeEventListener("touchend", GLFW.onMouseButtonUp, true);
  Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
  Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
  Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
  Module["canvas"].removeEventListener("wheel", GLFW.onMouseWheel, true);
  Module["canvas"].removeEventListener("mousewheel", GLFW.onMouseWheel, true);
  Module["canvas"].removeEventListener("mouseenter", GLFW.onMouseenter, true);
  Module["canvas"].removeEventListener("mouseleave", GLFW.onMouseleave, true);
  Module["canvas"].removeEventListener("drop", GLFW.onDrop, true);
  Module["canvas"].removeEventListener("dragover", GLFW.onDragover, true);
  if (GLFW.devicePixelRatioMQL) GLFW.devicePixelRatioMQL.removeEventListener("change", GLFW.onDevicePixelRatioChange);
  Module["canvas"].width = Module["canvas"].height = 1;
  GLFW.windows = null;
  GLFW.active = null;
};

var _glfwWindowHint = (target, hint) => {
  GLFW.hints[target] = hint;
};

var runAndAbortIfError = func => {
  try {
    return func();
  } catch (e) {
    abort(e);
  }
};

var Asyncify = {
  instrumentWasmImports(imports) {
    var importPattern = /^(invoke_.*|__asyncjs__.*)$/;
    for (let [x, original] of Object.entries(imports)) {
      if (typeof original == "function") {
        let isAsyncifyImport = original.isAsync || importPattern.test(x);
        imports[x] = (...args) => {
          var originalAsyncifyState = Asyncify.state;
          try {
            return original(...args);
          } finally {
            // Only asyncify-declared imports are allowed to change the
            // state.
            // Changing the state from normal to disabled is allowed (in any
            // function) as that is what shutdown does (and we don't have an
            // explicit list of shutdown imports).
            var changedToDisabled = originalAsyncifyState === Asyncify.State.Normal && Asyncify.state === Asyncify.State.Disabled;
            // invoke_* functions are allowed to change the state if we do
            // not ignore indirect calls.
            var ignoredInvoke = x.startsWith("invoke_") && true;
            if (Asyncify.state !== originalAsyncifyState && !isAsyncifyImport && !changedToDisabled && !ignoredInvoke) {
              throw new Error(`import ${x} was not in ASYNCIFY_IMPORTS, but changed the state`);
            }
          }
        };
      }
    }
  },
  instrumentWasmExports(exports) {
    var ret = {};
    for (let [x, original] of Object.entries(exports)) {
      if (typeof original == "function") {
        ret[x] = (...args) => {
          Asyncify.exportCallStack.push(x);
          try {
            return original(...args);
          } finally {
            if (!ABORT) {
              var y = Asyncify.exportCallStack.pop();
              assert(y === x);
              Asyncify.maybeStopUnwind();
            }
          }
        };
      } else {
        ret[x] = original;
      }
    }
    return ret;
  },
  State: {
    Normal: 0,
    Unwinding: 1,
    Rewinding: 2,
    Disabled: 3
  },
  state: 0,
  StackSize: 4096,
  currData: null,
  handleSleepReturnValue: 0,
  exportCallStack: [],
  callStackNameToId: {},
  callStackIdToName: {},
  callStackId: 0,
  asyncPromiseHandlers: null,
  sleepCallbacks: [],
  getCallStackId(funcName) {
    var id = Asyncify.callStackNameToId[funcName];
    if (id === undefined) {
      id = Asyncify.callStackId++;
      Asyncify.callStackNameToId[funcName] = id;
      Asyncify.callStackIdToName[id] = funcName;
    }
    return id;
  },
  maybeStopUnwind() {
    if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
      // We just finished unwinding.
      // Be sure to set the state before calling any other functions to avoid
      // possible infinite recursion here (For example in debug pthread builds
      // the dbg() function itself can call back into WebAssembly to get the
      // current pthread_self() pointer).
      Asyncify.state = Asyncify.State.Normal;
      runtimeKeepalivePush();
      // Keep the runtime alive so that a re-wind can be done later.
      runAndAbortIfError(_asyncify_stop_unwind);
      if (typeof Fibers != "undefined") {
        Fibers.trampoline();
      }
    }
  },
  whenDone() {
    assert(Asyncify.currData, "Tried to wait for an async operation when none is in progress.");
    assert(!Asyncify.asyncPromiseHandlers, "Cannot have multiple async operations in flight at once");
    return new Promise((resolve, reject) => {
      Asyncify.asyncPromiseHandlers = {
        resolve,
        reject
      };
    });
  },
  allocateData() {
    // An asyncify data structure has three fields:
    //  0  current stack pos
    //  4  max stack pos
    //  8  id of function at bottom of the call stack (callStackIdToName[id] == name of js function)
    // The Asyncify ABI only interprets the first two fields, the rest is for the runtime.
    // We also embed a stack in the same memory region here, right next to the structure.
    // This struct is also defined as asyncify_data_t in emscripten/fiber.h
    var ptr = _malloc(12 + Asyncify.StackSize);
    Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize);
    Asyncify.setDataRewindFunc(ptr);
    return ptr;
  },
  setDataHeader(ptr, stack, stackSize) {
    GROWABLE_HEAP_U32()[((ptr) >> 2)] = stack;
    GROWABLE_HEAP_U32()[(((ptr) + (4)) >> 2)] = stack + stackSize;
  },
  setDataRewindFunc(ptr) {
    var bottomOfCallStack = Asyncify.exportCallStack[0];
    var rewindId = Asyncify.getCallStackId(bottomOfCallStack);
    GROWABLE_HEAP_I32()[(((ptr) + (8)) >> 2)] = rewindId;
  },
  getDataRewindFuncName(ptr) {
    var id = GROWABLE_HEAP_I32()[(((ptr) + (8)) >> 2)];
    var name = Asyncify.callStackIdToName[id];
    return name;
  },
  getDataRewindFunc(name) {
    var func = wasmExports[name];
    return func;
  },
  doRewind(ptr) {
    var name = Asyncify.getDataRewindFuncName(ptr);
    var func = Asyncify.getDataRewindFunc(name);
    // Once we have rewound and the stack we no longer need to artificially
    // keep the runtime alive.
    runtimeKeepalivePop();
    return func();
  },
  handleSleep(startAsync) {
    assert(Asyncify.state !== Asyncify.State.Disabled, "Asyncify cannot be done during or after the runtime exits");
    if (ABORT) return;
    if (Asyncify.state === Asyncify.State.Normal) {
      // Prepare to sleep. Call startAsync, and see what happens:
      // if the code decided to call our callback synchronously,
      // then no async operation was in fact begun, and we don't
      // need to do anything.
      var reachedCallback = false;
      var reachedAfterCallback = false;
      startAsync((handleSleepReturnValue = 0) => {
        assert(!handleSleepReturnValue || typeof handleSleepReturnValue == "number" || typeof handleSleepReturnValue == "boolean");
        // old emterpretify API supported other stuff
        if (ABORT) return;
        Asyncify.handleSleepReturnValue = handleSleepReturnValue;
        reachedCallback = true;
        if (!reachedAfterCallback) {
          // We are happening synchronously, so no need for async.
          return;
        }
        // This async operation did not happen synchronously, so we did
        // unwind. In that case there can be no compiled code on the stack,
        // as it might break later operations (we can rewind ok now, but if
        // we unwind again, we would unwind through the extra compiled code
        // too).
        assert(!Asyncify.exportCallStack.length, "Waking up (starting to rewind) must be done from JS, without compiled code on the stack.");
        Asyncify.state = Asyncify.State.Rewinding;
        runAndAbortIfError(() => _asyncify_start_rewind(Asyncify.currData));
        if (typeof MainLoop != "undefined" && MainLoop.func) {
          MainLoop.resume();
        }
        var asyncWasmReturnValue, isError = false;
        try {
          asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
        } catch (err) {
          asyncWasmReturnValue = err;
          isError = true;
        }
        // Track whether the return value was handled by any promise handlers.
        var handled = false;
        if (!Asyncify.currData) {
          // All asynchronous execution has finished.
          // `asyncWasmReturnValue` now contains the final
          // return value of the exported async WASM function.
          // Note: `asyncWasmReturnValue` is distinct from
          // `Asyncify.handleSleepReturnValue`.
          // `Asyncify.handleSleepReturnValue` contains the return
          // value of the last C function to have executed
          // `Asyncify.handleSleep()`, where as `asyncWasmReturnValue`
          // contains the return value of the exported WASM function
          // that may have called C functions that
          // call `Asyncify.handleSleep()`.
          var asyncPromiseHandlers = Asyncify.asyncPromiseHandlers;
          if (asyncPromiseHandlers) {
            Asyncify.asyncPromiseHandlers = null;
            (isError ? asyncPromiseHandlers.reject : asyncPromiseHandlers.resolve)(asyncWasmReturnValue);
            handled = true;
          }
        }
        if (isError && !handled) {
          // If there was an error and it was not handled by now, we have no choice but to
          // rethrow that error into the global scope where it can be caught only by
          // `onerror` or `onunhandledpromiserejection`.
          throw asyncWasmReturnValue;
        }
      });
      reachedAfterCallback = true;
      if (!reachedCallback) {
        // A true async operation was begun; start a sleep.
        Asyncify.state = Asyncify.State.Unwinding;
        // TODO: reuse, don't alloc/free every sleep
        Asyncify.currData = Asyncify.allocateData();
        if (typeof MainLoop != "undefined" && MainLoop.func) {
          MainLoop.pause();
        }
        runAndAbortIfError(() => _asyncify_start_unwind(Asyncify.currData));
      }
    } else if (Asyncify.state === Asyncify.State.Rewinding) {
      // Stop a resume.
      Asyncify.state = Asyncify.State.Normal;
      runAndAbortIfError(_asyncify_stop_rewind);
      _free(Asyncify.currData);
      Asyncify.currData = null;
      // Call all sleep callbacks now that the sleep-resume is all done.
      Asyncify.sleepCallbacks.forEach(callUserCallback);
    } else {
      abort(`invalid state: ${Asyncify.state}`);
    }
    return Asyncify.handleSleepReturnValue;
  },
  handleAsync(startAsync) {
    return Asyncify.handleSleep(wakeUp => {
      // TODO: add error handling as a second param when handleSleep implements it.
      startAsync().then(wakeUp);
    });
  }
};

var FS_createPath = FS.createPath;

var FS_unlink = path => FS.unlink(path);

var FS_createLazyFile = FS.createLazyFile;

var FS_createDevice = FS.createDevice;

PThread.init();

FS.createPreloadedFile = FS_createPreloadedFile;

FS.staticInit();

// Set module methods based on EXPORTED_RUNTIME_METHODS
Module["FS_createPath"] = FS.createPath;

Module["FS_createDataFile"] = FS.createDataFile;

Module["FS_createPreloadedFile"] = FS.createPreloadedFile;

Module["FS_unlink"] = FS.unlink;

Module["FS_createLazyFile"] = FS.createLazyFile;

Module["FS_createDevice"] = FS.createDevice;

for (var i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));

var miniTempWebGLFloatBuffersStorage = new Float32Array(288);

// Create GL_POOL_TEMP_BUFFERS_SIZE+1 temporary buffers, for uploads of size 0 through GL_POOL_TEMP_BUFFERS_SIZE inclusive
for (/**@suppress{duplicate}*/ var i = 0; i <= 288; ++i) {
  miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i);
}

var miniTempWebGLIntBuffersStorage = new Int32Array(288);

// Create GL_POOL_TEMP_BUFFERS_SIZE+1 temporary buffers, for uploads of size 0 through GL_POOL_TEMP_BUFFERS_SIZE inclusive
for (/**@suppress{duplicate}*/ var i = 0; i <= 288; ++i) {
  miniTempWebGLIntBuffers[i] = miniTempWebGLIntBuffersStorage.subarray(0, i);
}

Module["requestAnimationFrame"] = MainLoop.requestAnimationFrame;

Module["pauseMainLoop"] = MainLoop.pause;

Module["resumeMainLoop"] = MainLoop.resume;

MainLoop.init();

// exports
Module["requestFullscreen"] = Browser.requestFullscreen;

Module["requestFullScreen"] = Browser.requestFullScreen;

Module["setCanvasSize"] = Browser.setCanvasSize;

Module["getUserMedia"] = Browser.getUserMedia;

Module["createContext"] = Browser.createContext;

// proxiedFunctionTable specifies the list of functions that can be called
// either synchronously or asynchronously from other threads in postMessage()d
// or internally queued events. This way a pthread in a Worker can synchronously
// access e.g. the DOM on the main thread.
var proxiedFunctionTable = [ _proc_exit, exitOnMainThread, ___syscall_faccessat, ___syscall_fcntl64, ___syscall_getcwd, ___syscall_ioctl, ___syscall_openat, _emscripten_get_element_css_size, _emscripten_get_gamepad_status, _emscripten_get_num_gamepads, _emscripten_sample_gamepad_data, setCanvasElementSizeMainThread, _emscripten_set_click_callback_on_thread, _emscripten_set_fullscreenchange_callback_on_thread, _emscripten_set_gamepadconnected_callback_on_thread, _emscripten_set_gamepaddisconnected_callback_on_thread, _emscripten_set_mousemove_callback_on_thread, _emscripten_set_pointerlockchange_callback_on_thread, _emscripten_set_resize_callback_on_thread, _emscripten_set_touchcancel_callback_on_thread, _emscripten_set_touchend_callback_on_thread, _emscripten_set_touchmove_callback_on_thread, _emscripten_set_touchstart_callback_on_thread, _emscripten_set_window_title, _environ_get, _environ_sizes_get, _fd_close, _fd_read, _fd_seek, _fd_write ];

function checkIncomingModuleAPI() {
  ignoredModuleProp("fetchSettings");
}

var wasmImports;

function assignWasmImports() {
  wasmImports = {
    /** @export */ __assert_fail: ___assert_fail,
    /** @export */ __cxa_throw: ___cxa_throw,
    /** @export */ __syscall_faccessat: ___syscall_faccessat,
    /** @export */ __syscall_fcntl64: ___syscall_fcntl64,
    /** @export */ __syscall_getcwd: ___syscall_getcwd,
    /** @export */ __syscall_ioctl: ___syscall_ioctl,
    /** @export */ __syscall_openat: ___syscall_openat,
    /** @export */ _abort_js: __abort_js,
    /** @export */ _emscripten_init_main_thread_js: __emscripten_init_main_thread_js,
    /** @export */ _emscripten_notify_mailbox_postmessage: __emscripten_notify_mailbox_postmessage,
    /** @export */ _emscripten_receive_on_main_thread_js: __emscripten_receive_on_main_thread_js,
    /** @export */ _emscripten_thread_cleanup: __emscripten_thread_cleanup,
    /** @export */ _emscripten_thread_mailbox_await: __emscripten_thread_mailbox_await,
    /** @export */ _emscripten_thread_set_strongref: __emscripten_thread_set_strongref,
    /** @export */ _tzset_js: __tzset_js,
    /** @export */ clock_time_get: _clock_time_get,
    /** @export */ emscripten_asm_const_int: _emscripten_asm_const_int,
    /** @export */ emscripten_check_blocking_allowed: _emscripten_check_blocking_allowed,
    /** @export */ emscripten_date_now: _emscripten_date_now,
    /** @export */ emscripten_exit_with_live_runtime: _emscripten_exit_with_live_runtime,
    /** @export */ emscripten_get_element_css_size: _emscripten_get_element_css_size,
    /** @export */ emscripten_get_gamepad_status: _emscripten_get_gamepad_status,
    /** @export */ emscripten_get_now: _emscripten_get_now,
    /** @export */ emscripten_get_num_gamepads: _emscripten_get_num_gamepads,
    /** @export */ emscripten_glActiveTexture: _emscripten_glActiveTexture,
    /** @export */ emscripten_glAttachShader: _emscripten_glAttachShader,
    /** @export */ emscripten_glBeginQueryEXT: _emscripten_glBeginQueryEXT,
    /** @export */ emscripten_glBindAttribLocation: _emscripten_glBindAttribLocation,
    /** @export */ emscripten_glBindBuffer: _emscripten_glBindBuffer,
    /** @export */ emscripten_glBindFramebuffer: _emscripten_glBindFramebuffer,
    /** @export */ emscripten_glBindRenderbuffer: _emscripten_glBindRenderbuffer,
    /** @export */ emscripten_glBindTexture: _emscripten_glBindTexture,
    /** @export */ emscripten_glBindVertexArrayOES: _emscripten_glBindVertexArrayOES,
    /** @export */ emscripten_glBlendColor: _emscripten_glBlendColor,
    /** @export */ emscripten_glBlendEquation: _emscripten_glBlendEquation,
    /** @export */ emscripten_glBlendEquationSeparate: _emscripten_glBlendEquationSeparate,
    /** @export */ emscripten_glBlendFunc: _emscripten_glBlendFunc,
    /** @export */ emscripten_glBlendFuncSeparate: _emscripten_glBlendFuncSeparate,
    /** @export */ emscripten_glBufferData: _emscripten_glBufferData,
    /** @export */ emscripten_glBufferSubData: _emscripten_glBufferSubData,
    /** @export */ emscripten_glCheckFramebufferStatus: _emscripten_glCheckFramebufferStatus,
    /** @export */ emscripten_glClear: _emscripten_glClear,
    /** @export */ emscripten_glClearColor: _emscripten_glClearColor,
    /** @export */ emscripten_glClearDepthf: _emscripten_glClearDepthf,
    /** @export */ emscripten_glClearStencil: _emscripten_glClearStencil,
    /** @export */ emscripten_glClipControlEXT: _emscripten_glClipControlEXT,
    /** @export */ emscripten_glColorMask: _emscripten_glColorMask,
    /** @export */ emscripten_glCompileShader: _emscripten_glCompileShader,
    /** @export */ emscripten_glCompressedTexImage2D: _emscripten_glCompressedTexImage2D,
    /** @export */ emscripten_glCompressedTexSubImage2D: _emscripten_glCompressedTexSubImage2D,
    /** @export */ emscripten_glCopyTexImage2D: _emscripten_glCopyTexImage2D,
    /** @export */ emscripten_glCopyTexSubImage2D: _emscripten_glCopyTexSubImage2D,
    /** @export */ emscripten_glCreateProgram: _emscripten_glCreateProgram,
    /** @export */ emscripten_glCreateShader: _emscripten_glCreateShader,
    /** @export */ emscripten_glCullFace: _emscripten_glCullFace,
    /** @export */ emscripten_glDeleteBuffers: _emscripten_glDeleteBuffers,
    /** @export */ emscripten_glDeleteFramebuffers: _emscripten_glDeleteFramebuffers,
    /** @export */ emscripten_glDeleteProgram: _emscripten_glDeleteProgram,
    /** @export */ emscripten_glDeleteQueriesEXT: _emscripten_glDeleteQueriesEXT,
    /** @export */ emscripten_glDeleteRenderbuffers: _emscripten_glDeleteRenderbuffers,
    /** @export */ emscripten_glDeleteShader: _emscripten_glDeleteShader,
    /** @export */ emscripten_glDeleteTextures: _emscripten_glDeleteTextures,
    /** @export */ emscripten_glDeleteVertexArraysOES: _emscripten_glDeleteVertexArraysOES,
    /** @export */ emscripten_glDepthFunc: _emscripten_glDepthFunc,
    /** @export */ emscripten_glDepthMask: _emscripten_glDepthMask,
    /** @export */ emscripten_glDepthRangef: _emscripten_glDepthRangef,
    /** @export */ emscripten_glDetachShader: _emscripten_glDetachShader,
    /** @export */ emscripten_glDisable: _emscripten_glDisable,
    /** @export */ emscripten_glDisableVertexAttribArray: _emscripten_glDisableVertexAttribArray,
    /** @export */ emscripten_glDrawArrays: _emscripten_glDrawArrays,
    /** @export */ emscripten_glDrawArraysInstancedANGLE: _emscripten_glDrawArraysInstancedANGLE,
    /** @export */ emscripten_glDrawBuffersWEBGL: _emscripten_glDrawBuffersWEBGL,
    /** @export */ emscripten_glDrawElements: _emscripten_glDrawElements,
    /** @export */ emscripten_glDrawElementsInstancedANGLE: _emscripten_glDrawElementsInstancedANGLE,
    /** @export */ emscripten_glEnable: _emscripten_glEnable,
    /** @export */ emscripten_glEnableVertexAttribArray: _emscripten_glEnableVertexAttribArray,
    /** @export */ emscripten_glEndQueryEXT: _emscripten_glEndQueryEXT,
    /** @export */ emscripten_glFinish: _emscripten_glFinish,
    /** @export */ emscripten_glFlush: _emscripten_glFlush,
    /** @export */ emscripten_glFramebufferRenderbuffer: _emscripten_glFramebufferRenderbuffer,
    /** @export */ emscripten_glFramebufferTexture2D: _emscripten_glFramebufferTexture2D,
    /** @export */ emscripten_glFrontFace: _emscripten_glFrontFace,
    /** @export */ emscripten_glGenBuffers: _emscripten_glGenBuffers,
    /** @export */ emscripten_glGenFramebuffers: _emscripten_glGenFramebuffers,
    /** @export */ emscripten_glGenQueriesEXT: _emscripten_glGenQueriesEXT,
    /** @export */ emscripten_glGenRenderbuffers: _emscripten_glGenRenderbuffers,
    /** @export */ emscripten_glGenTextures: _emscripten_glGenTextures,
    /** @export */ emscripten_glGenVertexArraysOES: _emscripten_glGenVertexArraysOES,
    /** @export */ emscripten_glGenerateMipmap: _emscripten_glGenerateMipmap,
    /** @export */ emscripten_glGetActiveAttrib: _emscripten_glGetActiveAttrib,
    /** @export */ emscripten_glGetActiveUniform: _emscripten_glGetActiveUniform,
    /** @export */ emscripten_glGetAttachedShaders: _emscripten_glGetAttachedShaders,
    /** @export */ emscripten_glGetAttribLocation: _emscripten_glGetAttribLocation,
    /** @export */ emscripten_glGetBooleanv: _emscripten_glGetBooleanv,
    /** @export */ emscripten_glGetBufferParameteriv: _emscripten_glGetBufferParameteriv,
    /** @export */ emscripten_glGetError: _emscripten_glGetError,
    /** @export */ emscripten_glGetFloatv: _emscripten_glGetFloatv,
    /** @export */ emscripten_glGetFramebufferAttachmentParameteriv: _emscripten_glGetFramebufferAttachmentParameteriv,
    /** @export */ emscripten_glGetIntegerv: _emscripten_glGetIntegerv,
    /** @export */ emscripten_glGetProgramInfoLog: _emscripten_glGetProgramInfoLog,
    /** @export */ emscripten_glGetProgramiv: _emscripten_glGetProgramiv,
    /** @export */ emscripten_glGetQueryObjecti64vEXT: _emscripten_glGetQueryObjecti64vEXT,
    /** @export */ emscripten_glGetQueryObjectivEXT: _emscripten_glGetQueryObjectivEXT,
    /** @export */ emscripten_glGetQueryObjectui64vEXT: _emscripten_glGetQueryObjectui64vEXT,
    /** @export */ emscripten_glGetQueryObjectuivEXT: _emscripten_glGetQueryObjectuivEXT,
    /** @export */ emscripten_glGetQueryivEXT: _emscripten_glGetQueryivEXT,
    /** @export */ emscripten_glGetRenderbufferParameteriv: _emscripten_glGetRenderbufferParameteriv,
    /** @export */ emscripten_glGetShaderInfoLog: _emscripten_glGetShaderInfoLog,
    /** @export */ emscripten_glGetShaderPrecisionFormat: _emscripten_glGetShaderPrecisionFormat,
    /** @export */ emscripten_glGetShaderSource: _emscripten_glGetShaderSource,
    /** @export */ emscripten_glGetShaderiv: _emscripten_glGetShaderiv,
    /** @export */ emscripten_glGetString: _emscripten_glGetString,
    /** @export */ emscripten_glGetTexParameterfv: _emscripten_glGetTexParameterfv,
    /** @export */ emscripten_glGetTexParameteriv: _emscripten_glGetTexParameteriv,
    /** @export */ emscripten_glGetUniformLocation: _emscripten_glGetUniformLocation,
    /** @export */ emscripten_glGetUniformfv: _emscripten_glGetUniformfv,
    /** @export */ emscripten_glGetUniformiv: _emscripten_glGetUniformiv,
    /** @export */ emscripten_glGetVertexAttribPointerv: _emscripten_glGetVertexAttribPointerv,
    /** @export */ emscripten_glGetVertexAttribfv: _emscripten_glGetVertexAttribfv,
    /** @export */ emscripten_glGetVertexAttribiv: _emscripten_glGetVertexAttribiv,
    /** @export */ emscripten_glHint: _emscripten_glHint,
    /** @export */ emscripten_glIsBuffer: _emscripten_glIsBuffer,
    /** @export */ emscripten_glIsEnabled: _emscripten_glIsEnabled,
    /** @export */ emscripten_glIsFramebuffer: _emscripten_glIsFramebuffer,
    /** @export */ emscripten_glIsProgram: _emscripten_glIsProgram,
    /** @export */ emscripten_glIsQueryEXT: _emscripten_glIsQueryEXT,
    /** @export */ emscripten_glIsRenderbuffer: _emscripten_glIsRenderbuffer,
    /** @export */ emscripten_glIsShader: _emscripten_glIsShader,
    /** @export */ emscripten_glIsTexture: _emscripten_glIsTexture,
    /** @export */ emscripten_glIsVertexArrayOES: _emscripten_glIsVertexArrayOES,
    /** @export */ emscripten_glLineWidth: _emscripten_glLineWidth,
    /** @export */ emscripten_glLinkProgram: _emscripten_glLinkProgram,
    /** @export */ emscripten_glPixelStorei: _emscripten_glPixelStorei,
    /** @export */ emscripten_glPolygonModeWEBGL: _emscripten_glPolygonModeWEBGL,
    /** @export */ emscripten_glPolygonOffset: _emscripten_glPolygonOffset,
    /** @export */ emscripten_glPolygonOffsetClampEXT: _emscripten_glPolygonOffsetClampEXT,
    /** @export */ emscripten_glQueryCounterEXT: _emscripten_glQueryCounterEXT,
    /** @export */ emscripten_glReadPixels: _emscripten_glReadPixels,
    /** @export */ emscripten_glReleaseShaderCompiler: _emscripten_glReleaseShaderCompiler,
    /** @export */ emscripten_glRenderbufferStorage: _emscripten_glRenderbufferStorage,
    /** @export */ emscripten_glSampleCoverage: _emscripten_glSampleCoverage,
    /** @export */ emscripten_glScissor: _emscripten_glScissor,
    /** @export */ emscripten_glShaderBinary: _emscripten_glShaderBinary,
    /** @export */ emscripten_glShaderSource: _emscripten_glShaderSource,
    /** @export */ emscripten_glStencilFunc: _emscripten_glStencilFunc,
    /** @export */ emscripten_glStencilFuncSeparate: _emscripten_glStencilFuncSeparate,
    /** @export */ emscripten_glStencilMask: _emscripten_glStencilMask,
    /** @export */ emscripten_glStencilMaskSeparate: _emscripten_glStencilMaskSeparate,
    /** @export */ emscripten_glStencilOp: _emscripten_glStencilOp,
    /** @export */ emscripten_glStencilOpSeparate: _emscripten_glStencilOpSeparate,
    /** @export */ emscripten_glTexImage2D: _emscripten_glTexImage2D,
    /** @export */ emscripten_glTexParameterf: _emscripten_glTexParameterf,
    /** @export */ emscripten_glTexParameterfv: _emscripten_glTexParameterfv,
    /** @export */ emscripten_glTexParameteri: _emscripten_glTexParameteri,
    /** @export */ emscripten_glTexParameteriv: _emscripten_glTexParameteriv,
    /** @export */ emscripten_glTexSubImage2D: _emscripten_glTexSubImage2D,
    /** @export */ emscripten_glUniform1f: _emscripten_glUniform1f,
    /** @export */ emscripten_glUniform1fv: _emscripten_glUniform1fv,
    /** @export */ emscripten_glUniform1i: _emscripten_glUniform1i,
    /** @export */ emscripten_glUniform1iv: _emscripten_glUniform1iv,
    /** @export */ emscripten_glUniform2f: _emscripten_glUniform2f,
    /** @export */ emscripten_glUniform2fv: _emscripten_glUniform2fv,
    /** @export */ emscripten_glUniform2i: _emscripten_glUniform2i,
    /** @export */ emscripten_glUniform2iv: _emscripten_glUniform2iv,
    /** @export */ emscripten_glUniform3f: _emscripten_glUniform3f,
    /** @export */ emscripten_glUniform3fv: _emscripten_glUniform3fv,
    /** @export */ emscripten_glUniform3i: _emscripten_glUniform3i,
    /** @export */ emscripten_glUniform3iv: _emscripten_glUniform3iv,
    /** @export */ emscripten_glUniform4f: _emscripten_glUniform4f,
    /** @export */ emscripten_glUniform4fv: _emscripten_glUniform4fv,
    /** @export */ emscripten_glUniform4i: _emscripten_glUniform4i,
    /** @export */ emscripten_glUniform4iv: _emscripten_glUniform4iv,
    /** @export */ emscripten_glUniformMatrix2fv: _emscripten_glUniformMatrix2fv,
    /** @export */ emscripten_glUniformMatrix3fv: _emscripten_glUniformMatrix3fv,
    /** @export */ emscripten_glUniformMatrix4fv: _emscripten_glUniformMatrix4fv,
    /** @export */ emscripten_glUseProgram: _emscripten_glUseProgram,
    /** @export */ emscripten_glValidateProgram: _emscripten_glValidateProgram,
    /** @export */ emscripten_glVertexAttrib1f: _emscripten_glVertexAttrib1f,
    /** @export */ emscripten_glVertexAttrib1fv: _emscripten_glVertexAttrib1fv,
    /** @export */ emscripten_glVertexAttrib2f: _emscripten_glVertexAttrib2f,
    /** @export */ emscripten_glVertexAttrib2fv: _emscripten_glVertexAttrib2fv,
    /** @export */ emscripten_glVertexAttrib3f: _emscripten_glVertexAttrib3f,
    /** @export */ emscripten_glVertexAttrib3fv: _emscripten_glVertexAttrib3fv,
    /** @export */ emscripten_glVertexAttrib4f: _emscripten_glVertexAttrib4f,
    /** @export */ emscripten_glVertexAttrib4fv: _emscripten_glVertexAttrib4fv,
    /** @export */ emscripten_glVertexAttribDivisorANGLE: _emscripten_glVertexAttribDivisorANGLE,
    /** @export */ emscripten_glVertexAttribPointer: _emscripten_glVertexAttribPointer,
    /** @export */ emscripten_glViewport: _emscripten_glViewport,
    /** @export */ emscripten_resize_heap: _emscripten_resize_heap,
    /** @export */ emscripten_sample_gamepad_data: _emscripten_sample_gamepad_data,
    /** @export */ emscripten_set_canvas_element_size: _emscripten_set_canvas_element_size,
    /** @export */ emscripten_set_click_callback_on_thread: _emscripten_set_click_callback_on_thread,
    /** @export */ emscripten_set_fullscreenchange_callback_on_thread: _emscripten_set_fullscreenchange_callback_on_thread,
    /** @export */ emscripten_set_gamepadconnected_callback_on_thread: _emscripten_set_gamepadconnected_callback_on_thread,
    /** @export */ emscripten_set_gamepaddisconnected_callback_on_thread: _emscripten_set_gamepaddisconnected_callback_on_thread,
    /** @export */ emscripten_set_main_loop: _emscripten_set_main_loop,
    /** @export */ emscripten_set_mousemove_callback_on_thread: _emscripten_set_mousemove_callback_on_thread,
    /** @export */ emscripten_set_pointerlockchange_callback_on_thread: _emscripten_set_pointerlockchange_callback_on_thread,
    /** @export */ emscripten_set_resize_callback_on_thread: _emscripten_set_resize_callback_on_thread,
    /** @export */ emscripten_set_touchcancel_callback_on_thread: _emscripten_set_touchcancel_callback_on_thread,
    /** @export */ emscripten_set_touchend_callback_on_thread: _emscripten_set_touchend_callback_on_thread,
    /** @export */ emscripten_set_touchmove_callback_on_thread: _emscripten_set_touchmove_callback_on_thread,
    /** @export */ emscripten_set_touchstart_callback_on_thread: _emscripten_set_touchstart_callback_on_thread,
    /** @export */ emscripten_set_window_title: _emscripten_set_window_title,
    /** @export */ environ_get: _environ_get,
    /** @export */ environ_sizes_get: _environ_sizes_get,
    /** @export */ exit: _exit,
    /** @export */ fd_close: _fd_close,
    /** @export */ fd_read: _fd_read,
    /** @export */ fd_seek: _fd_seek,
    /** @export */ fd_write: _fd_write,
    /** @export */ glActiveTexture: _glActiveTexture,
    /** @export */ glAttachShader: _glAttachShader,
    /** @export */ glBindAttribLocation: _glBindAttribLocation,
    /** @export */ glBindBuffer: _glBindBuffer,
    /** @export */ glBindTexture: _glBindTexture,
    /** @export */ glBlendFunc: _glBlendFunc,
    /** @export */ glBufferData: _glBufferData,
    /** @export */ glBufferSubData: _glBufferSubData,
    /** @export */ glClear: _glClear,
    /** @export */ glClearColor: _glClearColor,
    /** @export */ glClearDepthf: _glClearDepthf,
    /** @export */ glCompileShader: _glCompileShader,
    /** @export */ glCompressedTexImage2D: _glCompressedTexImage2D,
    /** @export */ glCreateProgram: _glCreateProgram,
    /** @export */ glCreateShader: _glCreateShader,
    /** @export */ glCullFace: _glCullFace,
    /** @export */ glDeleteBuffers: _glDeleteBuffers,
    /** @export */ glDeleteProgram: _glDeleteProgram,
    /** @export */ glDeleteShader: _glDeleteShader,
    /** @export */ glDeleteTextures: _glDeleteTextures,
    /** @export */ glDepthFunc: _glDepthFunc,
    /** @export */ glDetachShader: _glDetachShader,
    /** @export */ glDisable: _glDisable,
    /** @export */ glDisableVertexAttribArray: _glDisableVertexAttribArray,
    /** @export */ glDrawArrays: _glDrawArrays,
    /** @export */ glDrawElements: _glDrawElements,
    /** @export */ glEnable: _glEnable,
    /** @export */ glEnableVertexAttribArray: _glEnableVertexAttribArray,
    /** @export */ glFrontFace: _glFrontFace,
    /** @export */ glGenBuffers: _glGenBuffers,
    /** @export */ glGenTextures: _glGenTextures,
    /** @export */ glGetAttribLocation: _glGetAttribLocation,
    /** @export */ glGetFloatv: _glGetFloatv,
    /** @export */ glGetProgramInfoLog: _glGetProgramInfoLog,
    /** @export */ glGetProgramiv: _glGetProgramiv,
    /** @export */ glGetShaderInfoLog: _glGetShaderInfoLog,
    /** @export */ glGetShaderiv: _glGetShaderiv,
    /** @export */ glGetString: _glGetString,
    /** @export */ glGetUniformLocation: _glGetUniformLocation,
    /** @export */ glLinkProgram: _glLinkProgram,
    /** @export */ glPixelStorei: _glPixelStorei,
    /** @export */ glReadPixels: _glReadPixels,
    /** @export */ glShaderSource: _glShaderSource,
    /** @export */ glTexImage2D: _glTexImage2D,
    /** @export */ glTexParameteri: _glTexParameteri,
    /** @export */ glUniform1i: _glUniform1i,
    /** @export */ glUniform4f: _glUniform4f,
    /** @export */ glUniformMatrix4fv: _glUniformMatrix4fv,
    /** @export */ glUseProgram: _glUseProgram,
    /** @export */ glVertexAttribPointer: _glVertexAttribPointer,
    /** @export */ glViewport: _glViewport,
    /** @export */ glfwCreateWindow: _glfwCreateWindow,
    /** @export */ glfwDefaultWindowHints: _glfwDefaultWindowHints,
    /** @export */ glfwDestroyWindow: _glfwDestroyWindow,
    /** @export */ glfwGetPrimaryMonitor: _glfwGetPrimaryMonitor,
    /** @export */ glfwGetTime: _glfwGetTime,
    /** @export */ glfwGetVideoModes: _glfwGetVideoModes,
    /** @export */ glfwInit: _glfwInit,
    /** @export */ glfwMakeContextCurrent: _glfwMakeContextCurrent,
    /** @export */ glfwSetCharCallback: _glfwSetCharCallback,
    /** @export */ glfwSetCursorEnterCallback: _glfwSetCursorEnterCallback,
    /** @export */ glfwSetCursorPosCallback: _glfwSetCursorPosCallback,
    /** @export */ glfwSetDropCallback: _glfwSetDropCallback,
    /** @export */ glfwSetErrorCallback: _glfwSetErrorCallback,
    /** @export */ glfwSetKeyCallback: _glfwSetKeyCallback,
    /** @export */ glfwSetMouseButtonCallback: _glfwSetMouseButtonCallback,
    /** @export */ glfwSetScrollCallback: _glfwSetScrollCallback,
    /** @export */ glfwSetWindowContentScaleCallback: _glfwSetWindowContentScaleCallback,
    /** @export */ glfwSetWindowFocusCallback: _glfwSetWindowFocusCallback,
    /** @export */ glfwSetWindowIconifyCallback: _glfwSetWindowIconifyCallback,
    /** @export */ glfwSetWindowShouldClose: _glfwSetWindowShouldClose,
    /** @export */ glfwSetWindowSizeCallback: _glfwSetWindowSizeCallback,
    /** @export */ glfwSwapBuffers: _glfwSwapBuffers,
    /** @export */ glfwTerminate: _glfwTerminate,
    /** @export */ glfwWindowHint: _glfwWindowHint,
    /** @export */ memory: wasmMemory
  };
}

var wasmExports;

createWasm();

var ___wasm_call_ctors = createExportWrapper("__wasm_call_ctors", 0);

var _main = Module["_main"] = createExportWrapper("main", 2);

var _free = createExportWrapper("free", 1);

var _malloc = createExportWrapper("malloc", 1);

var _fflush = createExportWrapper("fflush", 1);

var __emscripten_tls_init = createExportWrapper("_emscripten_tls_init", 0);

var _pthread_self = () => (_pthread_self = wasmExports["pthread_self"])();

var __emscripten_run_callback_on_thread = createExportWrapper("_emscripten_run_callback_on_thread", 5);

var __emscripten_thread_init = createExportWrapper("_emscripten_thread_init", 6);

var __emscripten_thread_crashed = createExportWrapper("_emscripten_thread_crashed", 0);

var _emscripten_stack_get_base = () => (_emscripten_stack_get_base = wasmExports["emscripten_stack_get_base"])();

var _emscripten_stack_get_end = () => (_emscripten_stack_get_end = wasmExports["emscripten_stack_get_end"])();

var __emscripten_run_on_main_thread_js = createExportWrapper("_emscripten_run_on_main_thread_js", 5);

var __emscripten_thread_free_data = createExportWrapper("_emscripten_thread_free_data", 1);

var __emscripten_thread_exit = createExportWrapper("_emscripten_thread_exit", 1);

var _strerror = createExportWrapper("strerror", 1);

var __emscripten_check_mailbox = createExportWrapper("_emscripten_check_mailbox", 0);

var _emscripten_stack_init = () => (_emscripten_stack_init = wasmExports["emscripten_stack_init"])();

var _emscripten_stack_set_limits = (a0, a1) => (_emscripten_stack_set_limits = wasmExports["emscripten_stack_set_limits"])(a0, a1);

var _emscripten_stack_get_free = () => (_emscripten_stack_get_free = wasmExports["emscripten_stack_get_free"])();

var __emscripten_stack_restore = a0 => (__emscripten_stack_restore = wasmExports["_emscripten_stack_restore"])(a0);

var __emscripten_stack_alloc = a0 => (__emscripten_stack_alloc = wasmExports["_emscripten_stack_alloc"])(a0);

var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports["emscripten_stack_get_current"])();

var dynCall_v = Module["dynCall_v"] = createExportWrapper("dynCall_v", 1);

var dynCall_ii = Module["dynCall_ii"] = createExportWrapper("dynCall_ii", 2);

var dynCall_vii = Module["dynCall_vii"] = createExportWrapper("dynCall_vii", 3);

var dynCall_viii = Module["dynCall_viii"] = createExportWrapper("dynCall_viii", 4);

var dynCall_viff = Module["dynCall_viff"] = createExportWrapper("dynCall_viff", 4);

var dynCall_viiiii = Module["dynCall_viiiii"] = createExportWrapper("dynCall_viiiii", 6);

var dynCall_viiii = Module["dynCall_viiii"] = createExportWrapper("dynCall_viiii", 5);

var dynCall_vidd = Module["dynCall_vidd"] = createExportWrapper("dynCall_vidd", 4);

var dynCall_iiii = Module["dynCall_iiii"] = createExportWrapper("dynCall_iiii", 4);

var dynCall_vi = Module["dynCall_vi"] = createExportWrapper("dynCall_vi", 2);

var dynCall_vffff = Module["dynCall_vffff"] = createExportWrapper("dynCall_vffff", 5);

var dynCall_vf = Module["dynCall_vf"] = createExportWrapper("dynCall_vf", 2);

var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = createExportWrapper("dynCall_viiiiiiii", 9);

var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = createExportWrapper("dynCall_viiiiiiiii", 10);

var dynCall_i = Module["dynCall_i"] = createExportWrapper("dynCall_i", 1);

var dynCall_vff = Module["dynCall_vff"] = createExportWrapper("dynCall_vff", 3);

var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = createExportWrapper("dynCall_viiiiiii", 8);

var dynCall_iii = Module["dynCall_iii"] = createExportWrapper("dynCall_iii", 3);

var dynCall_vfi = Module["dynCall_vfi"] = createExportWrapper("dynCall_vfi", 3);

var dynCall_viif = Module["dynCall_viif"] = createExportWrapper("dynCall_viif", 4);

var dynCall_vif = Module["dynCall_vif"] = createExportWrapper("dynCall_vif", 3);

var dynCall_vifff = Module["dynCall_vifff"] = createExportWrapper("dynCall_vifff", 5);

var dynCall_viffff = Module["dynCall_viffff"] = createExportWrapper("dynCall_viffff", 6);

var dynCall_viiiiii = Module["dynCall_viiiiii"] = createExportWrapper("dynCall_viiiiii", 7);

var dynCall_vfff = Module["dynCall_vfff"] = createExportWrapper("dynCall_vfff", 4);

var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji", 5);

var dynCall_iidiiii = Module["dynCall_iidiiii"] = createExportWrapper("dynCall_iidiiii", 7);

var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii", 7);

var dynCall_iiiii = Module["dynCall_iiiii"] = createExportWrapper("dynCall_iiiii", 5);

var dynCall_iiiiii = Module["dynCall_iiiiii"] = createExportWrapper("dynCall_iiiiii", 6);

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = createExportWrapper("dynCall_iiiiiiiii", 9);

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = createExportWrapper("dynCall_iiiiiii", 7);

var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij", 7);

var dynCall_iiiiid = Module["dynCall_iiiiid"] = createExportWrapper("dynCall_iiiiid", 6);

var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj", 9);

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = createExportWrapper("dynCall_iiiiiiii", 8);

var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj", 10);

var _asyncify_start_unwind = createExportWrapper("asyncify_start_unwind", 1);

var _asyncify_stop_unwind = createExportWrapper("asyncify_stop_unwind", 0);

var _asyncify_start_rewind = createExportWrapper("asyncify_start_rewind", 1);

var _asyncify_stop_rewind = createExportWrapper("asyncify_stop_rewind", 0);

// include: postamble.js
// === Auto-generated postamble setup entry stuff ===
Module["addRunDependency"] = addRunDependency;

Module["removeRunDependency"] = removeRunDependency;

Module["FS_createPreloadedFile"] = FS_createPreloadedFile;

Module["FS_unlink"] = FS_unlink;

Module["FS_createPath"] = FS_createPath;

Module["FS_createDevice"] = FS_createDevice;

Module["FS_createDataFile"] = FS_createDataFile;

Module["FS_createLazyFile"] = FS_createLazyFile;

var missingLibrarySymbols = [ "writeI53ToI64Clamped", "writeI53ToI64Signaling", "writeI53ToU64Clamped", "writeI53ToU64Signaling", "convertI32PairToI53", "convertU32PairToI53", "getTempRet0", "setTempRet0", "inetPton4", "inetNtop4", "inetPton6", "inetNtop6", "readSockaddr", "writeSockaddr", "emscriptenLog", "runMainThreadEmAsm", "listenOnce", "autoResumeAudioContext", "dynCallLegacy", "getDynCaller", "dynCall", "asmjsMangle", "HandleAllocator", "getNativeTypeSize", "STACK_SIZE", "STACK_ALIGN", "POINTER_SIZE", "ASSERTIONS", "getCFunc", "ccall", "cwrap", "uleb128Encode", "generateFuncType", "convertJsFunctionToWasm", "getEmptyTableSlot", "updateTableMap", "getFunctionAddress", "addFunction", "removeFunction", "reallyNegative", "unSign", "strLen", "reSign", "formatString", "intArrayToString", "AsciiToString", "UTF16ToString", "stringToUTF16", "lengthBytesUTF16", "UTF32ToString", "stringToUTF32", "lengthBytesUTF32", "stringToUTF8OnStack", "writeArrayToMemory", "registerKeyEventCallback", "registerWheelEventCallback", "registerFocusEventCallback", "fillDeviceOrientationEventData", "registerDeviceOrientationEventCallback", "fillDeviceMotionEventData", "registerDeviceMotionEventCallback", "screenOrientation", "fillOrientationChangeEventData", "registerOrientationChangeEventCallback", "JSEvents_requestFullscreen", "JSEvents_resizeCanvasForFullscreen", "registerRestoreOldStyle", "hideEverythingExceptGivenElement", "restoreHiddenElements", "setLetterbox", "softFullscreenResizeWebGLRenderTarget", "doRequestFullscreen", "registerPointerlockErrorEventCallback", "requestPointerLock", "fillVisibilityChangeEventData", "registerVisibilityChangeEventCallback", "registerBeforeUnloadEventCallback", "fillBatteryEventData", "battery", "registerBatteryEventCallback", "setCanvasElementSize", "getCanvasSizeCallingThread", "getCanvasSizeMainThread", "getCanvasElementSize", "jsStackTrace", "getCallstack", "convertPCtoSourceLocation", "wasiRightsToMuslOFlags", "wasiOFlagsToMuslOFlags", "setImmediateWrapped", "safeRequestAnimationFrame", "clearImmediateWrapped", "registerPostMainLoop", "registerPreMainLoop", "getPromise", "makePromise", "idsToPromises", "makePromiseCallback", "findMatchingCatch", "Browser_asyncPrepareDataCounter", "isLeapYear", "ydayFromDate", "arraySum", "addDays", "getSocketFromFD", "getSocketAddress", "FS_mkdirTree", "_setNetworkCallback", "writeGLArray", "emscripten_webgl_destroy_context_before_on_calling_thread", "registerWebGlEventCallback", "ALLOC_NORMAL", "ALLOC_STACK", "allocate", "writeStringToMemory", "writeAsciiToMemory", "setErrNo", "demangle", "stackTrace" ];

missingLibrarySymbols.forEach(missingLibrarySymbol);

var unexportedSymbols = [ "run", "addOnPreRun", "addOnInit", "addOnPreMain", "addOnExit", "addOnPostRun", "out", "err", "callMain", "abort", "wasmMemory", "wasmExports", "GROWABLE_HEAP_I8", "GROWABLE_HEAP_U8", "GROWABLE_HEAP_I16", "GROWABLE_HEAP_U16", "GROWABLE_HEAP_I32", "GROWABLE_HEAP_U32", "GROWABLE_HEAP_F32", "GROWABLE_HEAP_F64", "writeStackCookie", "checkStackCookie", "writeI53ToI64", "readI53FromI64", "readI53FromU64", "convertI32PairToI53Checked", "stackSave", "stackRestore", "stackAlloc", "ptrToString", "zeroMemory", "exitJS", "getHeapMax", "growMemory", "ENV", "ERRNO_CODES", "strError", "DNS", "Protocols", "Sockets", "timers", "warnOnce", "readEmAsmArgsArray", "readEmAsmArgs", "runEmAsmFunction", "jstoi_q", "jstoi_s", "getExecutableName", "handleException", "keepRuntimeAlive", "runtimeKeepalivePush", "runtimeKeepalivePop", "callUserCallback", "maybeExit", "asyncLoad", "alignMemory", "mmapAlloc", "wasmTable", "noExitRuntime", "sigToWasmTypes", "freeTableIndexes", "functionsInTableMap", "setValue", "getValue", "PATH", "PATH_FS", "UTF8Decoder", "UTF8ArrayToString", "UTF8ToString", "stringToUTF8Array", "stringToUTF8", "lengthBytesUTF8", "intArrayFromString", "stringToAscii", "UTF16Decoder", "stringToNewUTF8", "JSEvents", "specialHTMLTargets", "maybeCStringToJsString", "findEventTarget", "findCanvasEventTarget", "getBoundingClientRect", "fillMouseEventData", "registerMouseEventCallback", "registerUiEventCallback", "fillFullscreenChangeEventData", "registerFullscreenChangeEventCallback", "currentFullscreenStrategy", "restoreOldWindowedStyle", "fillPointerlockChangeEventData", "registerPointerlockChangeEventCallback", "registerTouchEventCallback", "fillGamepadEventData", "registerGamepadEventCallback", "setCanvasElementSizeCallingThread", "setCanvasElementSizeMainThread", "UNWIND_CACHE", "ExitStatus", "getEnvStrings", "checkWasiClock", "doReadv", "doWritev", "initRandomFill", "randomFill", "safeSetTimeout", "emSetImmediate", "emClearImmediate_deps", "emClearImmediate", "promiseMap", "uncaughtExceptionCount", "exceptionLast", "exceptionCaught", "ExceptionInfo", "Browser", "getPreloadedImageData__data", "wget", "MONTH_DAYS_REGULAR", "MONTH_DAYS_LEAP", "MONTH_DAYS_REGULAR_CUMULATIVE", "MONTH_DAYS_LEAP_CUMULATIVE", "SYSCALLS", "preloadPlugins", "FS_modeStringToFlags", "FS_getMode", "FS_stdin_getChar_buffer", "FS_stdin_getChar", "FS_readFile", "FS", "MEMFS", "TTY", "PIPEFS", "SOCKFS", "tempFixedLengthArray", "miniTempWebGLFloatBuffers", "miniTempWebGLIntBuffers", "heapObjectForWebGLType", "toTypedArrayIndex", "webgl_enable_ANGLE_instanced_arrays", "webgl_enable_OES_vertex_array_object", "webgl_enable_WEBGL_draw_buffers", "webgl_enable_WEBGL_multi_draw", "webgl_enable_EXT_polygon_offset_clamp", "webgl_enable_EXT_clip_control", "webgl_enable_WEBGL_polygon_mode", "GL", "emscriptenWebGLGet", "computeUnpackAlignedImageSize", "colorChannelsInGlTextureFormat", "emscriptenWebGLGetTexPixelData", "emscriptenWebGLGetUniform", "webglGetUniformLocation", "webglPrepareUniformLocationsBeforeFirstUse", "webglGetLeftBracePos", "emscriptenWebGLGetVertexAttrib", "__glGetActiveAttribOrUniform", "AL", "GLUT", "EGL", "GLEW", "IDBStore", "runAndAbortIfError", "Asyncify", "Fibers", "SDL", "SDL_gfx", "GLFW_Window", "GLFW", "allocateUTF8", "allocateUTF8OnStack", "print", "printErr", "PThread", "terminateWorker", "cleanupThread", "registerTLSInit", "spawnThread", "exitOnMainThread", "proxyToMainThread", "proxiedJSCallArgs", "invokeEntryPoint", "checkMailbox" ];

unexportedSymbols.forEach(unexportedRuntimeSymbol);

var calledRun;

function callMain() {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
  var entryFunction = _main;
  var argc = 0;
  var argv = 0;
  try {
    var ret = entryFunction(argc, argv);
    // if we're not running an evented main loop, it's time to exit
    exitJS(ret, /* implicit = */ true);
    return ret;
  } catch (e) {
    return handleException(e);
  }
}

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // See $establishStackSpace for the equivalent code that runs on a thread
  assert(!ENVIRONMENT_IS_PTHREAD);
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }
  if ((ENVIRONMENT_IS_PTHREAD)) {
    initRuntime();
    return;
  }
  stackCheckInit();
  preRun();
  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }
  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    assert(!calledRun);
    calledRun = true;
    Module["calledRun"] = true;
    if (ABORT) return;
    initRuntime();
    preMain();
    Module["onRuntimeInitialized"]?.();
    var noInitialRun = Module["noInitialRun"];
    legacyModuleProp("noInitialRun", "noInitialRun");
    if (!noInitialRun) callMain();
    postRun();
  }
  if (Module["setStatus"]) {
    Module["setStatus"]("Running...");
    setTimeout(() => {
      setTimeout(() => Module["setStatus"](""), 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = x => {
    has = true;
  };
  try {
    // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    [ "stdout", "stderr" ].forEach(name => {
      var info = FS.analyzePath("/dev/" + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty?.output?.length) {
        has = true;
      }
    });
  } catch (e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.");
  }
}

if (Module["preInit"]) {
  if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
  while (Module["preInit"].length > 0) {
    Module["preInit"].pop()();
  }
}

run();
